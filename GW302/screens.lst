   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"screens.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.screen125,"ax",%progbits
  18              		.align	2
  19              		.global	screen125
  20              		.code	16
  21              		.thumb_func
  23              	screen125:
  24              	.LFB386:
  25              		.file 1 "screens.c"
   1:screens.c     **** // -----------------------------------------------------------
   2:screens.c     **** // Software:         GW302 - McHale V6 Fixed Chamber Round Baler
   3:screens.c     **** // C Source File:    screens.c
   4:screens.c     **** // Description:      Graphic Wizard Screens
   5:screens.c     **** // -----------------------------------------------------------
   6:screens.c     **** 
   7:screens.c     **** 
   8:screens.c     **** // Include Standard files
   9:screens.c     **** #include "Board.h"
  10:screens.c     **** 
  11:screens.c     **** #include "stdio.h"
  12:screens.c     **** #include "ctype.h"
  13:screens.c     **** #include "stdlib.h"
  14:screens.c     **** #include "string.h"
  15:screens.c     **** #include "math.h"
  16:screens.c     **** 
  17:screens.c     **** 
  18:screens.c     **** unsigned char reverttime, lastoutput, nextoutput, MWarn, OKWarnBox;
  19:screens.c     **** unsigned char KnifePresWasHigh, SecondScreen, keytime;
  20:screens.c     **** unsigned char Screen100Page;
  21:screens.c     **** unsigned char SelectedBaleStore;
  22:screens.c     **** 
  23:screens.c     **** 
  24:screens.c     **** // -----------------------------------------------------------
  25:screens.c     **** // Function Name       : screen00
  26:screens.c     **** // Description         : Startup Splash Screen
  27:screens.c     **** // -----------------------------------------------------------
  28:screens.c     **** void screen00( unsigned int lkey )
  29:screens.c     **** {
  30:screens.c     **** 	unsigned char tstring[16];
  31:screens.c     **** 
  32:screens.c     **** 	if( !startup )
  33:screens.c     **** 	{
  34:screens.c     **** 		startup = 1;
  35:screens.c     **** 
  36:screens.c     **** 		draw_frame( adm );
  37:screens.c     **** 
  38:screens.c     **** 		write_bitmap( adm, McHale_V6,  33, 22, OR );
  39:screens.c     **** 
  40:screens.c     **** 		sprintf( tstring, ptText[78], SOFTWARE, ISSUE, REVISION ); // 'GW%03u-%03urev%02u'
  41:screens.c     **** 		display_f1_text( tstring, TSMAX, 80, 96, FIXED | CENTER );
  42:screens.c     **** 
  43:screens.c     **** 		leaf = 1;
  44:screens.c     **** 		deftime = 49;
  45:screens.c     **** 		lkey = 0;
  46:screens.c     **** 	}
  47:screens.c     **** 
  48:screens.c     **** 	if( lkey & (SW_NEW | SW_REP) )
  49:screens.c     **** 	{
  50:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
  51:screens.c     **** 		if( lkey & SW_MASK ) // any key
  52:screens.c     **** 		{
  53:screens.c     **** 			deftime = 0;
  54:screens.c     **** 			window = mainscreen;
  55:screens.c     **** 		}
  56:screens.c     **** 	}
  57:screens.c     **** 
  58:screens.c     **** }
  59:screens.c     **** // -----------------------------------------------------------
  60:screens.c     **** 
  61:screens.c     **** 
  62:screens.c     **** // -----------------------------------------------------------
  63:screens.c     **** // Function Name       : mainscreen
  64:screens.c     **** // Description         : Main/Home Screen
  65:screens.c     **** // -----------------------------------------------------------
  66:screens.c     **** void mainscreen( unsigned int lkey )
  67:screens.c     **** {
  68:screens.c     **** 	static unsigned char roll, CropFeedSel;
  69:screens.c     **** 	static unsigned char ArrowsCleared;
  70:screens.c     **** 	static unsigned char ResetLube;
  71:screens.c     **** 	static unsigned char KnivKeyPressed, FloorKeyPressed;
  72:screens.c     **** 	static unsigned char KnivKeyPressedAndOutputTurnedOn, FloorKeyPressedAndOutputTurnedOn;
  73:screens.c     **** 	static unsigned char NetOnKeyPressed;
  74:screens.c     **** 	static unsigned int TempIntKPV, TempIntTNM, TempIntDPV;
  75:screens.c     **** 	static float TempFloatSV;
  76:screens.c     **** 	static unsigned char DrivingArrowsX1BeepDelay;
  77:screens.c     **** 	static unsigned char DrivingArrowsX2BeepDelay;
  78:screens.c     **** 	static unsigned char DrivingArrowsX3BeepDelay;
  79:screens.c     **** 	static unsigned char DrivingArrowsX4BeepDelay;
  80:screens.c     **** 	static unsigned char BaleTotalFlashedOff;
  81:screens.c     **** 
  82:screens.c     **** 	unsigned int key_status;
  83:screens.c     **** 	float ArrowStepVoltage;
  84:screens.c     **** 	unsigned char tstring[32], changed;
  85:screens.c     **** 	unsigned char TempY;
  86:screens.c     **** 
  87:screens.c     **** 
  88:screens.c     **** 	if( !startup )
  89:screens.c     **** 	{
  90:screens.c     **** 		startup = 1;
  91:screens.c     **** 		draw_frame( adm );
  92:screens.c     **** 		windowdepth = 0;
  93:screens.c     **** 		changed = 1;
  94:screens.c     **** 		SecondScreen = 0;
  95:screens.c     **** 	}
  96:screens.c     **** 	else
  97:screens.c     **** 	{
  98:screens.c     **** 		changed = 0;
  99:screens.c     **** 	}
 100:screens.c     **** 
 101:screens.c     **** #ifdef SHOW_TIME
 102:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 103:screens.c     **** #endif	
 104:screens.c     **** 
 105:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP); 
 106:screens.c     **** 	if( key_status ) // New key pressed or previous key repeated
 107:screens.c     **** 	{
 108:screens.c     **** 		KeyOpOff = OUT1 | OUT2 | OUT3 | OUT4 | OUT5 | OUT7 | OUT8;
 109:screens.c     **** 
 110:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 111:screens.c     **** 
 112:screens.c     **** 
 113:screens.c     **** 		// -----------------------------------------------------------
 114:screens.c     **** 		// Button 6: Access Machine Menu
 115:screens.c     **** 
 116:screens.c     **** 		if( lkey == SW_CD )
 117:screens.c     **** 		{
 118:screens.c     **** 			window = screen100; // Goto Machine Menu
 119:screens.c     **** 			Screen100Page = 0;
 120:screens.c     **** 		}
 121:screens.c     **** 
 122:screens.c     **** 
 123:screens.c     **** 		// -----------------------------------------------------------
 124:screens.c     **** 		// Button 7: Return to first operating screen 
 125:screens.c     **** 
 126:screens.c     **** 		else if( lkey == SW_CL )
 127:screens.c     **** 		{
 128:screens.c     **** 			if( SecondScreen )
 129:screens.c     **** 			{
 130:screens.c     **** 				SecondScreen = 0; // Return to First Screen
 131:screens.c     **** 			}
 132:screens.c     **** 		}
 133:screens.c     **** 
 134:screens.c     **** 
 135:screens.c     **** 		// -----------------------------------------------------------
 136:screens.c     **** 		// Button 8: Displays second operating screen 
 137:screens.c     **** 
 138:screens.c     **** 		else if( lkey == SW_CR )
 139:screens.c     **** 		{
 140:screens.c     **** 			if( !SecondScreen )
 141:screens.c     **** 				SecondScreen = 1; // Goto Second Screen  
 142:screens.c     **** 		}
 143:screens.c     **** 
 144:screens.c     **** 
 145:screens.c     **** 		// -----------------------------------------------------------
 146:screens.c     **** 		// Button 4: Floor diverter / Cycle through bale sub-totals A to J / Cancel Reset Lube Counter  
 147:screens.c     **** 
 148:screens.c     **** 		else if( lkey == SW_OR )
 149:screens.c     **** 		{											
 150:screens.c     **** 			if( !SecondScreen )  // First Screen
 151:screens.c     **** 			{
 152:screens.c     **** 				if( ResetLube )
 153:screens.c     **** 				{				    				
 154:screens.c     **** 					ResetLube = 0; // Cancel Reset Lube Counter
 155:screens.c     **** 					changed = 1;			    
 156:screens.c     **** 				}
 157:screens.c     **** 				else // !ResetLube 
 158:screens.c     **** 				{
 159:screens.c     **** 					KeyOpOn = OP_MASTER_DIV;  // OP1 ON: Master Diverter
 160:screens.c     **** #if 0 // Code moved to outside 'New key pressed or previous key repeated' code block 
 161:screens.c     **** 					if( looptime > 3 )
 162:screens.c     **** 						KeyOpOn |= OP_FLOOR_DIV;  // OP4 ON: Floor Diverter
 163:screens.c     **** #endif
 164:screens.c     **** 					FloorKeyPressed = 1;
 165:screens.c     **** 
 166:screens.c     **** 					// Disabling chopping knives position Warning
 167:screens.c     **** 					DisableChoppingKnivesWarnings = 1;					
 168:screens.c     **** 					Kniv1_IPClosed = 0;
 169:screens.c     **** 				}						
 170:screens.c     **** 			}			
 171:screens.c     **** 			else  // Second Screen
 172:screens.c     **** 			{
 173:screens.c     **** 				if( pFac.pf.BaleStore < PF_GW302_BaleStore[PF_MAX] )
 174:screens.c     **** 				{
 175:screens.c     **** 					pFac.pf.BaleStore += PF_GW302_BaleStore[PF_STEP];				  
 176:screens.c     **** 				}
 177:screens.c     **** 				else
 178:screens.c     **** 				{
 179:screens.c     **** 					pFac.pf.BaleStore = PF_GW302_BaleStore[PF_MIN];					
 180:screens.c     **** 				}
 181:screens.c     **** 				SavecalDelayOnMainDisplay = 1;
 182:screens.c     **** 			}	
 183:screens.c     **** 		} 
 184:screens.c     **** 
 185:screens.c     **** 
 186:screens.c     **** 		// -----------------------------------------------------------
 187:screens.c     **** 		// Button 1: MAN/AUTO toggle / Density release 
 188:screens.c     **** 
 189:screens.c     **** 		else if( lkey == SW_OL )
 190:screens.c     **** 		{
 191:screens.c     **** 			if( !SecondScreen )  // First Screen
 192:screens.c     **** 			{
 193:screens.c     **** #ifndef WINDOWS
 194:screens.c     **** 				if( AutoMan || CHAMBER_CLOSED ) // inhibiting unless in AUTO mode or in MAN mode with chamber c
 195:screens.c     **** 				{
 196:screens.c     **** 					AutoMan = AutoMan? 0:1;
 197:screens.c     **** 					ResetSequenceFactors( SEQ_ALL );
 198:screens.c     **** 				}
 199:screens.c     **** #else
 200:screens.c     **** 				AutoMan = AutoMan? 0:1;
 201:screens.c     **** 				ResetSequenceFactors( SEQ_ALL );
 202:screens.c     **** #endif
 203:screens.c     **** 			}
 204:screens.c     **** 			else  // Second Screen
 205:screens.c     **** 			{
 206:screens.c     **** 				KeyOpOn |= OP_DENSITY_REL; // OP8 ON: Density Release Solenoid (AKA Density Control)
 207:screens.c     **** 			}
 208:screens.c     **** 		} 
 209:screens.c     **** 
 210:screens.c     **** 
 211:screens.c     **** 		// -----------------------------------------------------------
 212:screens.c     **** 		// Button 2: Net on / Net cut / Escape Chopping Knives warning / Reset Lube Counter
 213:screens.c     **** 
 214:screens.c     **** 		else if( lkey == SW_IL )
 215:screens.c     **** 		{
 216:screens.c     **** 			if( !SecondScreen )  // First Screen
 217:screens.c     **** 			{
 218:screens.c     **** 				if( ChoppingKnives1WarningOn ) // Chopping knives position Warning on & button pressed when tab
 219:screens.c     **** 				{
 220:screens.c     **** 					// Disabling chopping knives position Warning
 221:screens.c     **** 					DisableChoppingKnivesWarnings = 1;
 222:screens.c     **** 					Kniv1_IPClosed = 0;
 223:screens.c     **** 				}
 224:screens.c     **** 				else if( pRun.pr.LubeCounter <= 0 ) // Lube Count warning shown & button pressed when tab marke
 225:screens.c     **** 				{
 226:screens.c     **** 					if( !MWarn && !ResetLube )
 227:screens.c     **** 					{
 228:screens.c     **** 						ResetLube = 1; // Goto 'Reset Lube Counter to Lube Alarm Confirm/Cancel' Display -- Message b
 229:screens.c     **** 					}
 230:screens.c     **** 				}
 231:screens.c     **** 				else // Button pressed when tab displays Net On icon
 232:screens.c     **** 				{
 233:screens.c     **** 					if( !AutoMan ) // MAN mode
 234:screens.c     **** 					{
 235:screens.c     **** 						if( pFac.pf.GW302_NetSystem == NS_ROLLER )
 236:screens.c     **** 						{
 237:screens.c     **** 							KeyOpOn = OP_ROLL_ENGAGE; // OP5 ON: Roller Engage Solenoid (AKA Pre Net Position)
 238:screens.c     **** 
 239:screens.c     **** 							if( looptime >= ( (unsigned char)(pFac.pf.GW302_RollerDelay * 10.0) ) )
 240:screens.c     **** 							{
 241:screens.c     **** 								KeyOpOn |= OP_NET_ON; // OP2 ON: Net Clutch (AKA Net On)
 242:screens.c     **** 							}
 243:screens.c     **** 						}
 244:screens.c     **** 						else // 'Net System' set to 'Beak'
 245:screens.c     **** 						{
 246:screens.c     **** 							KeyOpOn = OP_NET_ON; // OP2 ON: Net Clutch (AKA Net On)
 247:screens.c     **** 
 248:screens.c     **** 							if( !NetOnKeyPressed ) // Not previously set
 249:screens.c     **** 							{
 250:screens.c     **** 								NetOnKeyPressed = 1; // Set
 251:screens.c     **** 
 252:screens.c     **** 								BeakEngagePulseCount = 0UL; // Resetting IP4 'Beak Engage' pulse count
 253:screens.c     **** 							}
 254:screens.c     **** 
 255:screens.c     **** 							if( BeakEngagePulseCount >= (unsigned long int)pFac.pf.GW302_BeakEngage ) // 'Beak Engage' P
 256:screens.c     **** 							{
 257:screens.c     **** 								KeyOpOn |= OP_ROLL_ENGAGE; // OP5 ON: Roller Engage Solenoid (AKA Pre Net Position)
 258:screens.c     **** 							}
 259:screens.c     **** 						}
 260:screens.c     **** 						stagecomp |= NETFEEDON;    // Set NET FEED ON stage completed
 261:screens.c     **** 						stagecomp &= ~(NETCUTON | CHAMBOP | CHAMBCLO); // These stages are to be completed next
 262:screens.c     **** 					}
 263:screens.c     **** 					else // AUTO mode
 264:screens.c     **** 					{
 265:screens.c     **** 						switch( Stage )
 266:screens.c     **** 						{
 267:screens.c     **** 						case STAGE_START:
 268:screens.c     **** 						case STAGE_FORMATION:
 269:screens.c     **** 						case STAGE_FORMATION2:
 270:screens.c     **** 						case STAGE_CORE:
 271:screens.c     **** 						case STAGE_MAIN:
 272:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 273:screens.c     **** 							{
 274:screens.c     **** 								if( SequenceInProgress )
 275:screens.c     **** 								{
 276:screens.c     **** 									SequenceInProgress = 0;								
 277:screens.c     **** 									AllSeqOpOff();  // All OPs turned off (& remain off while button held down)
 278:screens.c     **** 								}
 279:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 280:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 281:screens.c     **** 							}
 282:screens.c     **** 							break;
 283:screens.c     **** 
 284:screens.c     **** 						case STAGE_NETTING_START:
 285:screens.c     **** 							break;
 286:screens.c     **** 
 287:screens.c     **** 						case STAGE_NETTING_NET_DELAY:
 288:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 289:screens.c     **** 							{
 290:screens.c     **** 								if( SequenceInProgress )
 291:screens.c     **** 								{
 292:screens.c     **** 									SequenceInProgress = 0;
 293:screens.c     **** 									// Only OP5 is on -- this is to be left on
 294:screens.c     **** 								}
 295:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 296:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 297:screens.c     **** 							}
 298:screens.c     **** 							break;
 299:screens.c     **** 
 300:screens.c     **** 						case STAGE_NETTING_NET_ON:
 301:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 302:screens.c     **** 							{
 303:screens.c     **** 								if( SequenceInProgress )
 304:screens.c     **** 								{
 305:screens.c     **** 									SequenceInProgress = 0;								
 306:screens.c     **** 									// Only OP2 is on -- this is to be left on
 307:screens.c     **** 								}
 308:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 309:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 310:screens.c     **** 							}
 311:screens.c     **** 							break;
 312:screens.c     **** 
 313:screens.c     **** 						case STAGE_NETTING_WAIT_REQ_NET_PULSES:
 314:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 315:screens.c     **** 							{
 316:screens.c     **** 								if( SequenceInProgress )
 317:screens.c     **** 								{
 318:screens.c     **** 									SequenceInProgress = 0;								
 319:screens.c     **** 									// OP2 is turned on & kept on while key held down
 320:screens.c     **** 									KeyOpOn |= OP_NET_ON;   // OP2 ON: Net Clutch (AKA Net On)
 321:screens.c     **** 								}
 322:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 323:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 324:screens.c     **** 							}
 325:screens.c     **** 							break;
 326:screens.c     **** 						}
 327:screens.c     **** 					}
 328:screens.c     **** 				}
 329:screens.c     **** 			}
 330:screens.c     **** 			else  // Second Screen
 331:screens.c     **** 			{
 332:screens.c     **** 				if( ChoppingKnives1WarningOn ) // Chopping knives position Warning on & button pressed when tab
 333:screens.c     **** 				{
 334:screens.c     **** 					// Disabling chopping knives position Warning
 335:screens.c     **** 					DisableChoppingKnivesWarnings = 1;
 336:screens.c     **** 					Kniv1_IPClosed = 0;
 337:screens.c     **** 				}
 338:screens.c     **** 				else // Button pressed when tab displays Net Cut icon
 339:screens.c     **** 				{
 340:screens.c     **** 					RollEngageTurnedOnInManMode = 0; // OP5 OFF: Roller Engage Solenoid (AKA Pre Net Position) -- 
 341:screens.c     **** 
 342:screens.c     **** 					KeyOpOn |= OP_NET_CUT;  // OP7 ON: Net Cut Motor (AKA Net Cut Trip)
 343:screens.c     **** 
 344:screens.c     **** 					if( stagecomp == NETFEEDON ) // Only set stage completed flag if previous stage has been compl
 345:screens.c     **** 					{
 346:screens.c     **** 						stagecomp |= NETCUTON; // Set NET CUT ON stage completed
 347:screens.c     **** 						stagecomp &= ~(CHAMBOP | CHAMBCLO); // These stages are to be completed next
 348:screens.c     **** 						ChamberOpenDelayTime = CODT_CHAMBER_OPEN_TIME; // Setting Chamber open delay for the next sta
 349:screens.c     **** 					}
 350:screens.c     **** 				}
 351:screens.c     **** 			}
 352:screens.c     **** 		}
 353:screens.c     **** 
 354:screens.c     **** 
 355:screens.c     **** 		// -----------------------------------------------------------
 356:screens.c     **** 		// Button 3: Knife diverter / Reset currently selected bale count / Confirm Reset Lube Counter
 357:screens.c     **** 
 358:screens.c     **** 		else if( lkey == SW_IR )
 359:screens.c     **** 		{
 360:screens.c     **** 			if( !SecondScreen )  // First Screen
 361:screens.c     **** 			{			
 362:screens.c     **** 				if( ResetLube )
 363:screens.c     **** 				{
 364:screens.c     **** 					ResetLubeCount(); // Reset Lube Counter to Lube Alarm (in bales) taking account of bales since
 365:screens.c     **** 					ResetLube = 0;
 366:screens.c     **** 					changed = 1;
 367:screens.c     **** 				}
 368:screens.c     **** 				else // !ResetLube
 369:screens.c     **** 				{
 370:screens.c     **** 					if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED ) // 'Chopping Knives Fitted' set to ena
 371:screens.c     **** 					{					
 372:screens.c     **** 						KeyOpOn = OP_MASTER_DIV;  // OP1 ON: Master Diverter
 373:screens.c     **** #if 0 // Code moved to outside 'New key pressed or previous key repeated' code block 
 374:screens.c     **** 						if( looptime > 3 )
 375:screens.c     **** 							KeyOpOn |= OP_KNIV_DIV;  // OP3 ON: Knife Diverter (AKA Knives Diverter)
 376:screens.c     **** #endif
 377:screens.c     **** 						KnivKeyPressed = 1; // Set
 378:screens.c     **** 
 379:screens.c     **** 						if( KnifePresVolts >= pFac.pf.GW302_KnifePressure )
 380:screens.c     **** 						{
 381:screens.c     **** 							if( !KnifePresWasHigh )
 382:screens.c     **** 							{
 383:screens.c     **** 								KeyOpOn &= ~OP_KNIV_DIV;  // OP3 OFF: Knife Diverter (AKA Knives Diverter) 
 384:screens.c     **** 								KnivKeyPressed = 0; // Reset
 385:screens.c     **** 							}
 386:screens.c     **** 						}
 387:screens.c     **** 						else
 388:screens.c     **** 						{
 389:screens.c     **** 							KnifePresWasHigh = 0;
 390:screens.c     **** 						}
 391:screens.c     **** 
 392:screens.c     **** 						// Disabling chopping knives position Warning
 393:screens.c     **** 						DisableChoppingKnivesWarnings = 1;
 394:screens.c     **** 						Kniv1_IPClosed = 0;					
 395:screens.c     **** 					} // end of 'Chopping Knives Fitted' set to enabled 
 396:screens.c     **** 				}
 397:screens.c     **** 			}
 398:screens.c     **** 			else  // Second Screen
 399:screens.c     **** 			{	
 400:screens.c     **** 				if( key_status & SW_NEW )
 401:screens.c     **** 				{
 402:screens.c     **** 					keytime = 0;
 403:screens.c     **** 				}
 404:screens.c     **** 
 405:screens.c     **** 				keytime++;
 406:screens.c     **** 
 407:screens.c     **** 				if( !half_second ) // Flashing bale amount off in side panel 2 every half second
 408:screens.c     **** 				{
 409:screens.c     **** 					BaleTotalFlashedOff = 1;
 410:screens.c     **** 				}
 411:screens.c     **** 				else
 412:screens.c     **** 				{
 413:screens.c     **** 					BaleTotalFlashedOff = 0;
 414:screens.c     **** 				}
 415:screens.c     **** 
 416:screens.c     **** 				if( keytime >= 12 )
 417:screens.c     **** 				{
 418:screens.c     **** 					keytime = 0;
 419:screens.c     **** 					if( pFac.pf.BaleTotal[pFac.pf.BaleStore] != PF_GW302_BaleTotal[PF_MIN] )
 420:screens.c     **** 					{
 421:screens.c     **** 						pFac.pf.BaleTotal[pFac.pf.BaleStore] = PF_GW302_BaleTotal[PF_MIN]; // 0UL
 422:screens.c     **** 						SavecalDelayOnMainDisplay = 1;
 423:screens.c     **** 						buzz_length = 500;
 424:screens.c     **** 					}
 425:screens.c     **** 				}
 426:screens.c     **** 			}
 427:screens.c     **** 		} // end else if( lkey == SW_IR )
 428:screens.c     **** 
 429:screens.c     **** 	} // end if( key_status ) -- New key pressed or previous key repeated  
 430:screens.c     **** 
 431:screens.c     **** 
 432:screens.c     **** 	// -----------------------------------------------------------
 433:screens.c     **** 	// Key released 
 434:screens.c     **** 
 435:screens.c     **** 	if( !key )
 436:screens.c     **** 	{
 437:screens.c     **** 
 438:screens.c     **** 		// -----------------------------------------------------------
 439:screens.c     **** 		// After key released: Outputs
 440:screens.c     **** 
 441:screens.c     **** 		KeyOpOff = KeyOpOn; // switch off OPs that were on
 442:screens.c     **** 		KeyOpOn = 0UL;
 443:screens.c     **** 
 444:screens.c     **** 
 445:screens.c     **** 		// -----------------------------------------------------------
 446:screens.c     **** 		// After key released: Saving Programmable Factors on releasing the keys for greater than 300 ms
 447:screens.c     **** 
 448:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 449:screens.c     **** 		{
 450:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 451:screens.c     **** 			{
 452:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 453:screens.c     **** 				SavecalDelayWithinMenus = 0;
 454:screens.c     **** 				savecal = 1;
 455:screens.c     **** 			}
 456:screens.c     **** 		}
 457:screens.c     **** 
 458:screens.c     **** 
 459:screens.c     **** 		// -----------------------------------------------------------
 460:screens.c     **** 		// After Button 2 (Net On) released
 461:screens.c     **** 
 462:screens.c     **** 		if( ContinueOnKeyRelease )
 463:screens.c     **** 		{
 464:screens.c     **** 			ContinueOnKeyRelease = 0;
 465:screens.c     **** 
 466:screens.c     **** 			StartAutoNet = 0; // Continue 
 467:screens.c     **** 		}
 468:screens.c     **** 
 469:screens.c     **** 
 470:screens.c     **** 		// -----------------------------------------------------------
 471:screens.c     **** 		// After Button 2 (Net on) released
 472:screens.c     **** 
 473:screens.c     **** 		// Used when 'Net System' set to 'Beak', to turn Roller Engage Solenoid (OP5) on, after counting 
 474:screens.c     **** 		NetOnKeyPressed = 0; // Reset as soon as key released
 475:screens.c     **** 
 476:screens.c     **** 
 477:screens.c     **** 		// -----------------------------------------------------------
 478:screens.c     **** 		// After Button 3 (Knife diverter) released
 479:screens.c     **** 
 480:screens.c     **** 		// Chopping knives position Warning
 481:screens.c     **** 		DisableChoppingKnivesWarnings = 0; // keeps the warning on the screen after IP2 or IP6 closes
 482:screens.c     **** 
 483:screens.c     **** 		KnivKeyPressed = 0; // reset as soon as key released		
 484:screens.c     **** 		if( KnivKeyPressedAndOutputTurnedOn ) // if key (now released) was pressed for more than Diverter
 485:screens.c     **** 		{
 486:screens.c     **** 			KeyOpOn |= OP_MASTER_DIV;
 487:screens.c     **** 			if( swrel > 4 ) // fixed period of 0.5s
 488:screens.c     **** 			{
 489:screens.c     **** 				KnivKeyPressedAndOutputTurnedOn = 0; // reset after fixed period to turn Master OP off
 490:screens.c     **** 			}
 491:screens.c     **** 		}
 492:screens.c     **** 
 493:screens.c     **** 
 494:screens.c     **** 
 495:screens.c     **** 		// -----------------------------------------------------------
 496:screens.c     **** 		// After Button 3 (Reset currently selected bale count) released
 497:screens.c     **** 
 498:screens.c     **** 
 499:screens.c     **** 		// Ensuring bale amount appears in side panel 2
 500:screens.c     **** 		BaleTotalFlashedOff = 0;
 501:screens.c     **** 
 502:screens.c     **** 
 503:screens.c     **** 		// -----------------------------------------------------------
 504:screens.c     **** 		// After Button 4 (Floor diverter) released
 505:screens.c     **** 
 506:screens.c     **** 		FloorKeyPressed = 0; // reset as soon as key released 
 507:screens.c     **** 		if( FloorKeyPressedAndOutputTurnedOn ) // if key (now released) was pressed for more than Diverte
 508:screens.c     **** 		{
 509:screens.c     **** 			KeyOpOn |= OP_MASTER_DIV;
 510:screens.c     **** 			if( swrel > 4 ) // fixed period of 0.5s
 511:screens.c     **** 			{
 512:screens.c     **** 				FloorKeyPressedAndOutputTurnedOn = 0; // reset after fixed period to turn Master OP off
 513:screens.c     **** 			}
 514:screens.c     **** 		}
 515:screens.c     **** 
 516:screens.c     **** 
 517:screens.c     **** 		// -----------------------------------------------------------
 518:screens.c     **** 		// After key released: Knife diverter
 519:screens.c     **** 
 520:screens.c     **** 		if( KnifePresVolts >= pFac.pf.GW302_KnifePressure )
 521:screens.c     **** 		{
 522:screens.c     **** 			KnifePresWasHigh = 1;
 523:screens.c     **** 		}
 524:screens.c     **** 		else
 525:screens.c     **** 		{
 526:screens.c     **** 			KnifePresWasHigh = 0;
 527:screens.c     **** 		}
 528:screens.c     **** 
 529:screens.c     **** 	} // end if( !key )	
 530:screens.c     **** 
 531:screens.c     **** 
 532:screens.c     **** 	// -----------------------------------------------------------
 533:screens.c     **** 	// Turn on OP3 if key was pressed for more than Diverter Delay
 534:screens.c     **** 
 535:screens.c     **** 	if( KnivKeyPressed && ( looptime >= ( (unsigned char)(pFac.pf.GW302_DiverterDelay * 10.0) ) ) )
 536:screens.c     **** 	{
 537:screens.c     **** 		KeyOpOn |= OP_KNIV_DIV; // OP3 ON: Knife Diverter (AKA Knives Diverter)
 538:screens.c     **** 		KnivKeyPressedAndOutputTurnedOn = 1;
 539:screens.c     **** 	}
 540:screens.c     **** 
 541:screens.c     **** 
 542:screens.c     **** 	// -----------------------------------------------------------
 543:screens.c     **** 	// Turn on OP4 if key was pressed for more than Diverter Delay
 544:screens.c     **** 
 545:screens.c     **** 	if( FloorKeyPressed && ( looptime >= ( (unsigned char)(pFac.pf.GW302_DiverterDelay * 10.0) ) ) )
 546:screens.c     **** 	{
 547:screens.c     **** 		KeyOpOn |= OP_FLOOR_DIV; // OP4 ON: Floor Diverter
 548:screens.c     **** 		FloorKeyPressedAndOutputTurnedOn = 1;
 549:screens.c     **** 	}	
 550:screens.c     **** 
 551:screens.c     **** 
 552:screens.c     **** 	// -----------------------------------------------------------
 553:screens.c     **** 	// Outputs
 554:screens.c     **** 
 555:screens.c     **** 	KeyOpOff &= ~KeyOpOn; // do not switch OFF the ops that are to turned ON
 556:screens.c     **** 
 557:screens.c     **** 
 558:screens.c     **** 	// -----------------------------------------------------------
 559:screens.c     **** 	// Instrument display 
 560:screens.c     **** 
 561:screens.c     **** 
 562:screens.c     **** 	// -----------------------------------------------------------
 563:screens.c     **** 	// Display operational mode (MAN/AUTO)
 564:screens.c     **** 
 565:screens.c     **** 	draw_box( adm, 113, 1, 158, 4+9, CLEAR );  // Clearing area on right & top  
 566:screens.c     **** 	write_bitmap( adm, AutoMan? MODEAUTO:MODEMAN, 113, 4, OR );
 567:screens.c     **** 
 568:screens.c     **** 
 569:screens.c     **** 	// -----------------------------------------------------------
 570:screens.c     **** 	// Display (Bale) Density Pressure (AnIP2) -- displayed here when on second screen & if Lube Count
 571:screens.c     **** 	//                                            displayed later when Density Pressure Too High Warni
 572:screens.c     **** 
 573:screens.c     **** 	// Calculated when on second screen & if Lube Count Alarm is NOT present OR Density Pressure Too H
 574:screens.c     **** 	if( (SecondScreen && (pRun.pr.LubeCounter > 0)) ||      // ( Second Screen AND if Lube Count Alarm
 575:screens.c     **** 			(MWarn & MW_DENSITYPRESS)                       )   // Density Pressure Too High Warning present
 576:screens.c     **** 	{
 577:screens.c     **** 		if( !(looptime % 5) )
 578:screens.c     **** 		{
 579:screens.c     **** 			TempIntDPV = (unsigned int)(DensityPresVolts * 50.0); // 1 V equivalent to 50 bar
 580:screens.c     **** 		}
 581:screens.c     **** 	}
 582:screens.c     **** 
 583:screens.c     **** 	// Clearing part of Lube Count Alarm (oil can icon) covering bale density pressure
 584:screens.c     **** 	draw_box( adm, 3, 13, 35, 23, CLEAR ); // Clearing -- needs to be done for both Screen 1 & 2
 585:screens.c     **** 
 586:screens.c     **** 	// Displaying Bale Density Pressure when on second screen & if Lube Count Alarm is NOT present
 587:screens.c     **** 	if( SecondScreen && (pRun.pr.LubeCounter > 0) ) // Second screen & Lube Count Alarm is NOT present
 588:screens.c     **** 	{
 589:screens.c     **** 		sprintf( tstring, "%3u", TempIntDPV );
 590:screens.c     **** 		display_f1_text( tstring, TSMAX, 3, 9+6, FIXED );
 591:screens.c     **** 		write_bitmap( adm, BAR_UNIT,  3+(6*3)+2, 9+6, OR );
 592:screens.c     **** 	}
 593:screens.c     **** 
 594:screens.c     **** 
 595:screens.c     **** 	// -----------------------------------------------------------
 596:screens.c     **** 	// Display info boxes: top, middle & bottom
 597:screens.c     **** 
 598:screens.c     **** 	draw_box( adm, 129, 18, (129+(28-1)), 106, CLEAR ); // Clearing info boxes area
 599:screens.c     **** 
 600:screens.c     **** 	if( !SecondScreen )  // First Screen
 601:screens.c     **** 	{
 602:screens.c     **** 		write_bitmap( adm, SIDEDISPLAY_1,  129, 18, OR ); // Info box icons: Net layers; Bale diameter; K
 603:screens.c     **** 	}
 604:screens.c     **** 	else  // Second Screen
 605:screens.c     **** 	{
 606:screens.c     **** 		write_bitmap( adm, SIDEDISPLAY_2,  129, 18, OR ); // Info box icons: Sub-total bale count; Supply
 607:screens.c     **** 	}	    	 
 608:screens.c     **** 
 609:screens.c     **** 	// Top info box
 610:screens.c     **** 	if( !SecondScreen )  // First Screen
 611:screens.c     **** 	{
 612:screens.c     **** 		// Net layers
 613:screens.c     **** 		display_number( (float)pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile], 
 614:screens.c     **** 				(float)PF_GW302_NetLayers[PF_MIN], (float)PF_GW302_NetLayers[PF_MAX],
 615:screens.c     **** 				1.0, DP1, 150, 35, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
 616:screens.c     **** 	}
 617:screens.c     **** 	else  // Second Screen
 618:screens.c     **** 	{
 619:screens.c     **** 		// Sub-total bale count
 620:screens.c     **** 
 621:screens.c     **** 		// Bale Total selection (A/B etc. )
 622:screens.c     **** 		sprintf( tstring, "%1c", Store[pFac.pf.BaleStore]);
 623:screens.c     **** 		display_f1_text( tstring, TSMAX, 148, 22, FIXED );
 624:screens.c     **** 
 625:screens.c     **** 		// Bale amount
 626:screens.c     **** 		if( BaleTotalFlashedOff )
 627:screens.c     **** 		{
 628:screens.c     **** 			display_f1_text( " ", TSMAX, 143, 34, FIXED | CENTER ); // Flashing off
 629:screens.c     **** 		}
 630:screens.c     **** 		else
 631:screens.c     **** 		{
 632:screens.c     **** 			sprintf ( tstring, "%lu", pFac.pf.BaleTotal[pFac.pf.BaleStore] );
 633:screens.c     **** 			display_f1_text( tstring, TSMAX, 143, 34, FIXED | CENTER );
 634:screens.c     **** 		}
 635:screens.c     **** 	}
 636:screens.c     **** 
 637:screens.c     **** 	// Middle info box
 638:screens.c     **** 	if( !SecondScreen )  // First Screen
 639:screens.c     **** 	{
 640:screens.c     **** 		// Bale diameter
 641:screens.c     **** 		if( (float)pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] > 99.9 ) // Value of the form XX
 642:screens.c     **** 		{
 643:screens.c     **** 			display_number( (float)pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile],
 644:screens.c     **** 					(float)PF_GW302_BaleDiameter[PF_MIN], (float)PF_GW302_BaleDiameter[PF_MAX],
 645:screens.c     **** 					1.0, DP0, (151-5), 55, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
 646:screens.c     **** 		}
 647:screens.c     **** 		else // <= 99.9 (Bale diameter Value of the form XX)
 648:screens.c     **** 		{
 649:screens.c     **** 			display_number( (float)pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile],
 650:screens.c     **** 					(float)PF_GW302_BaleDiameter[PF_MIN], (float)PF_GW302_BaleDiameter[PF_MAX],
 651:screens.c     **** 					1.0, DP0, (151-5), 55, DW2, RIGHT, &RDSfnt1, NULL, PNULL );
 652:screens.c     **** 		}
 653:screens.c     **** 	}
 654:screens.c     **** 	else  // Second Screen
 655:screens.c     **** 	{
 656:screens.c     **** 		// Supply voltage
 657:screens.c     **** 		if( !(looptime % 5) )
 658:screens.c     **** 		{
 659:screens.c     **** 			TempFloatSV = ((float)AT91C_BASE_ADC0->ADC_CDR7 * ATODIPVOUTSCALE) + ATODIPVOUTDROP;
 660:screens.c     **** 		}
 661:screens.c     **** 
 662:screens.c     **** 		// Displaying Supply voltage in range 0.0 - 99.9 V -- if >  99.9 V set to 99.9 V
 663:screens.c     **** 		if( TempFloatSV <= 99.9 )
 664:screens.c     **** 		{
 665:screens.c     **** 			display_number( TempFloatSV, 0.0, 0.0, 1.0, DP1, (153-4), (61-1), DW4, RIGHT, &RDSfnt1, NULL, PN
 666:screens.c     **** 		}
 667:screens.c     **** 		else // > 99.9
 668:screens.c     **** 		{
 669:screens.c     **** 			display_number( 99.9, 0.0, 0.0, 1.0, DP1, (153-4), (61-1), DW4, RIGHT, &RDSfnt1, NULL, PNULL );
 670:screens.c     **** 		}
 671:screens.c     **** 	}
 672:screens.c     **** 
 673:screens.c     **** 	// Bottom info box
 674:screens.c     **** 	if( !SecondScreen )  // First Screen
 675:screens.c     **** 	{
 676:screens.c     **** 		// Knife pressure -- only displayed if chopping knives fitted (enabled)
 677:screens.c     **** 		if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED )
 678:screens.c     **** 		{
 679:screens.c     **** 			if( !(looptime % 5) )
 680:screens.c     **** 			{
 681:screens.c     **** 				TempIntKPV = (unsigned int)(KnifePresVolts * 50.0); // 1 V equivalent to 50 bar
 682:screens.c     **** 			}
 683:screens.c     **** 			sprintf( tstring, "%3u", TempIntKPV );			 
 684:screens.c     **** 			display_f1_text( tstring, TSMAX, 134, 85, FIXED );
 685:screens.c     **** 
 686:screens.c     **** 			write_bitmap( adm, BAR_UNIT,  138, 94, OR );
 687:screens.c     **** 		}
 688:screens.c     **** 		else // if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_DISABLED )
 689:screens.c     **** 		{
 690:screens.c     **** 			// Clearing bottom info area
 691:screens.c     **** 			draw_box( adm, (129+2), 72, (129+2)+(28-4), 94, CLEAR );
 692:screens.c     **** 		}
 693:screens.c     **** 	}
 694:screens.c     **** 	else  // Second Screen
 695:screens.c     **** 	{
 696:screens.c     **** 		// Bale density
 697:screens.c     **** 		display_number( (float)Bar[pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] - 1], 
 698:screens.c     **** 				(float)PF_GW302_BaleDensity[PF_MIN], (float)PF_GW302_BaleDensity[PF_MAX],
 699:screens.c     **** 				1.0, DP0, 152, 93, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
 700:screens.c     **** 	}
 701:screens.c     **** 
 702:screens.c     **** 
 703:screens.c     **** 	// -----------------------------------------------------------
 704:screens.c     **** 	// Display tabs
 705:screens.c     **** 
 706:screens.c     **** 	draw_box( adm, 1, 107, 158, 126, CLEAR ); // clear from second to fourth tab
 707:screens.c     **** 
 708:screens.c     **** 	if( !SecondScreen )  // First Screen
 709:screens.c     **** 	{
 710:screens.c     **** 		// Far left tab
 711:screens.c     **** 		write_bitmap( adm, (AutoMan? TABAUTOMAN:TABMAN),   0, 107, OR );
 712:screens.c     **** 
 713:screens.c     **** 		// Left tab
 714:screens.c     **** 		if( !MWarn && (pRun.pr.LubeCounter <= 0) ) // Lube Count Alarm present (when no other warnings ar
 715:screens.c     **** 		{
 716:screens.c     **** 			write_bitmap( adm, TABRESET_LUBECOUNT,  31, 107, OR );
 717:screens.c     **** 		}
 718:screens.c     **** 		else
 719:screens.c     **** 		{
 720:screens.c     **** 			write_bitmap( adm, TABNET,    31, 107, OR );
 721:screens.c     **** 		}
 722:screens.c     **** 
 723:screens.c     **** 		// Centre Navigation tab
 724:screens.c     **** 		write_bitmap( adm, TABNAV01,      62, 102, OR );
 725:screens.c     **** 
 726:screens.c     **** 		// Right tab
 727:screens.c     **** 		if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED ) // 'Chopping Knives Fitted' set to enable
 728:screens.c     **** 		{
 729:screens.c     **** 			write_bitmap( adm, ResetLube? TABTICK:TABKNFDIV, 99, 107, OR );
 730:screens.c     **** 		}
 731:screens.c     **** 		else // 'Chopping Knives Fitted' set to disabled
 732:screens.c     **** 		{
 733:screens.c     **** 			write_bitmap( adm, ResetLube? TABTICK:TAB,       99, 107, OR );			
 734:screens.c     **** 		}
 735:screens.c     **** 
 736:screens.c     **** 		// Far right tab
 737:screens.c     **** 		write_bitmap( adm, ResetLube? TABCROSS:TABDIVERT,   130, 107, OR );	    	 
 738:screens.c     **** 	}
 739:screens.c     **** 	else  // Second Screen
 740:screens.c     **** 	{
 741:screens.c     **** 		write_bitmap( adm, TAB_DENSITY_RELEASE,  0, 107, OR ); // DENSITY RELEASE 
 742:screens.c     **** 		write_bitmap( adm, TAB_NET_CUT,  		31, 107, OR ); // NET CUT
 743:screens.c     **** 		write_bitmap( adm, TABNAV_MENU_DL,      62, 102, OR ); // NAVIGATION: Down Left & showing menu ic
 744:screens.c     **** 		write_bitmap( adm, TABRESET, 			99, 107, OR ); // RESET	      
 745:screens.c     **** 		write_bitmap( adm, TABCYCLE_ATOJ, 	   130, 107, OR ); // A -> J
 746:screens.c     **** 	}
 747:screens.c     **** 
 748:screens.c     **** 
 749:screens.c     **** 	// -----------------------------------------------------------
 750:screens.c     **** 	// Show animated crop pickup while in AUTO mode   
 751:screens.c     **** 
 752:screens.c     **** 	// clear crop pickup display
 753:screens.c     **** 	draw_box( adm, 8, 86, 8+28, 86+6, CLEAR );
 754:screens.c     **** 
 755:screens.c     **** 	if( AutoMan )
 756:screens.c     **** 	{
 757:screens.c     **** 		CropFeedSel++;
 758:screens.c     **** 		if( CropFeedSel > 11 )
 759:screens.c     **** 		{
 760:screens.c     **** 			CropFeedSel = 0;
 761:screens.c     **** 		}
 762:screens.c     **** 
 763:screens.c     **** 		// crop pickup display
 764:screens.c     **** 		write_bitmap( adm, CROPFEED[CropFeedSel], 8, 86, OR );
 765:screens.c     **** 	}
 766:screens.c     **** 
 767:screens.c     **** 
 768:screens.c     **** 	// -----------------------------------------------------------
 769:screens.c     **** 	// Show total net applied in metres -- if Lube Count Alarm NOT present
 770:screens.c     **** 
 771:screens.c     **** 	if( pRun.pr.LubeCounter > 0 ) // Lube Count Alarm NOT present
 772:screens.c     **** 	{
 773:screens.c     **** 		if( !(looptime % 5) )
 774:screens.c     **** 		{
 775:screens.c     **** 			TempIntTNM = (unsigned int)(pFac.pf.GW302_TotalNetMetres + NetMetresAppliedForCount);
 776:screens.c     **** 		}
 777:screens.c     **** 
 778:screens.c     **** 		// Clearing part of Lube Count Alarm (oil can icon) covering total net applied in metres
 779:screens.c     **** 		draw_box( adm, 3, 24, 35, 34, CLEAR ); // Clearing
 780:screens.c     **** 
 781:screens.c     **** 		// Displaying total net applied in metres
 782:screens.c     **** 		sprintf( tstring, "%4u", TempIntTNM ); // Default=0m; Increment=1m; Range=0-9999m
 783:screens.c     **** 		display_f1_text( tstring, TSMAX, 3, 24+2, FIXED );
 784:screens.c     **** 		display_f1_text( "m", TSMAX, 3+(6*4)+2, 24+2, FIXED );
 785:screens.c     **** 	}
 786:screens.c     **** 
 787:screens.c     **** 
 788:screens.c     **** 	// -----------------------------------------------------------
 789:screens.c     **** 	// Display Lube Count Alarm if active -- showing oil can icon
 790:screens.c     **** 
 791:screens.c     **** 	if( pRun.pr.LubeCounter <= 0 ) // Lube Count Alarm present (irrespective of when no other warnings
 792:screens.c     **** 	{
 793:screens.c     **** 		draw_box( adm, 3, 13, 35, 34, CLEAR ); // Clearing area (covering bale density pressure & total n
 794:screens.c     **** 
 795:screens.c     **** 		write_bitmap( adm, OILCAN, 2+2, 11+2, OR );
 796:screens.c     **** 	}
 797:screens.c     **** 
 798:screens.c     **** 
 799:screens.c     **** 	// -----------------------------------------------------------
 800:screens.c     **** 	// Show net roll: rotating while net is being applied (pulses on IP4); otherwise static
 801:screens.c     **** 
 802:screens.c     **** #ifndef WINDOWS
 803:screens.c     **** 
 804:screens.c     **** 	// Determining New Net pulses 
 805:screens.c     **** 	if( NetPulseCount > NetPulseCountPrev )
 806:screens.c     **** 	{
 807:screens.c     **** 		NewNetPulses = NetPulseCount - NetPulseCountPrev;
 808:screens.c     **** 	}
 809:screens.c     **** 	NetPulseCountPrev = NetPulseCount; // Previous pulse count saved
 810:screens.c     **** 
 811:screens.c     **** 	if( NetPulseCount && NewNetPulses ) // Pulses have been and are still being received on IP4
 812:screens.c     **** 	{
 813:screens.c     **** 		// Decrementing New Net Pulses
 814:screens.c     **** 		NewNetPulses--;
 815:screens.c     **** 
 816:screens.c     **** 		// Netting icon (rotating)
 817:screens.c     **** 		roll++;
 818:screens.c     **** 		if( roll > 7 )
 819:screens.c     **** 		{
 820:screens.c     **** 			roll = 0;
 821:screens.c     **** 		}
 822:screens.c     **** 		draw_box( adm, 1, 35+2-2, 6+28, 59+2, CLEAR );  // Clearing area on left & right & bottom 
 823:screens.c     **** 		write_bitmap( adm, ROLLER[roll], 14, 35+2, OR );
 824:screens.c     **** 	}
 825:screens.c     **** 	else // No pulses being received on IP4
 826:screens.c     **** 	{
 827:screens.c     **** 		// Netting icon (static)
 828:screens.c     **** 		draw_box( adm, 1, 35+2-2, 6+28, 59+2, CLEAR );  // Clearing area on left & right & bottom 
 829:screens.c     **** 		write_bitmap( adm, ROLLER[roll], 14, 35+2, OR );
 830:screens.c     **** 	}
 831:screens.c     **** #else
 832:screens.c     **** 	// Netting icon (rotating)
 833:screens.c     **** 	roll++;
 834:screens.c     **** 	if( roll > 7 )
 835:screens.c     **** 	{
 836:screens.c     **** 		roll = 0;
 837:screens.c     **** 	}
 838:screens.c     **** 	draw_box( adm, 1, 35+2-2, 6+28, 59+2, CLEAR );  // Clearing area on left & right & bottom 
 839:screens.c     **** 	write_bitmap( adm, ROLLER[roll], 14, 35+2, OR );
 840:screens.c     **** #endif
 841:screens.c     **** 
 842:screens.c     **** 
 843:screens.c     **** 	// -----------------------------------------------------------
 844:screens.c     **** 	// Clear warning messages
 845:screens.c     **** 
 846:screens.c     **** 	// Clearing  'Reset Lube Counter to Lube Alarm Confirm/Cancel' Message box, if present
 847:screens.c     **** 	if( changed )
 848:screens.c     **** 	{
 849:screens.c     **** 		draw_box( adm, 14+6, 40+10, 14+6+123-1, 40+10+32-1, CLEAR );
 850:screens.c     **** 	}
 851:screens.c     **** 
 852:screens.c     **** 	// Clear warning messages and bitmaps
 853:screens.c     **** 	draw_box( adm, 35, 26, 120, 92, CLEAR );
 854:screens.c     **** 
 855:screens.c     **** 
 856:screens.c     **** 	// -----------------------------------------------------------
 857:screens.c     **** 	// Draw baler
 858:screens.c     **** 
 859:screens.c     **** 	// Draw baler
 860:screens.c     **** 	draw_box( adm, 1, 60, 6+29-1, 60+16-1+2, CLEAR ); // Clear area underneath Baler Hitch (including 
 861:screens.c     **** 	write_bitmap( adm, BalerHitch, 6, 60, OR );
 862:screens.c     **** 	write_bitmap( adm, BalerCenter,  35, 26, OR );
 863:screens.c     **** 
 864:screens.c     **** 
 865:screens.c     **** 	// -----------------------------------------------------------
 866:screens.c     **** 	// Show baler door open/closed according to open/closed status of IP3
 867:screens.c     **** 	// Bale inside chamber displayed where: in AUTO Mode, while unloading; in MAN mode, while Chamber 
 868:screens.c     **** 
 869:screens.c     **** 	// Clearing area underneath baler door (incl. bale kicker & part of wheel)
 870:screens.c     **** 	draw_box( adm, 80, 20, 120, 97, CLEAR );
 871:screens.c     **** 
 872:screens.c     **** #ifndef WINDOWS
 873:screens.c     **** 	if( AutoMan ) // AUTO mode
 874:screens.c     **** 	{
 875:screens.c     **** 		if( CHAMBER_OPEN )
 876:screens.c     **** 		{
 877:screens.c     **** 			// Show baler door open
 878:screens.c     **** 			write_bitmap( adm, Balerdooropen_withoutkicker, 80, 20, OR );
 879:screens.c     **** 
 880:screens.c     **** 			if( Stage == STAGE_UNLOADING )
 881:screens.c     **** 			{
 882:screens.c     **** 				if( BaleKickerStatus != (BKS_BALE_KICKER_DOWN | BKS_BALE_KICKER_UP) ) // Bale Kicker has not ye
 883:screens.c     **** 				{
 884:screens.c     **** 					// Show bale inside chamber
 885:screens.c     **** 					draw_box( adm, 58, 33, 98, 74, CLEAR );
 886:screens.c     **** 					write_bitmap( adm, Bale, 58, 33, OR );
 887:screens.c     **** 				}				
 888:screens.c     **** 			}
 889:screens.c     **** 		}
 890:screens.c     **** 		else // !CHAMBER_OPEN  
 891:screens.c     **** 		{
 892:screens.c     **** 			// Show baler door closed
 893:screens.c     **** 			write_bitmap( adm, Balerdoorclosed_withoutkicker, 80, 26, OR );
 894:screens.c     **** 		}
 895:screens.c     **** 	}
 896:screens.c     **** 	else  // MAN mode
 897:screens.c     **** 	{
 898:screens.c     **** 		if( CHAMBER_OPEN )
 899:screens.c     **** 		{
 900:screens.c     **** 			// Show baler door open
 901:screens.c     **** 			write_bitmap( adm, Balerdooropen_withoutkicker, 80, 20, OR );
 902:screens.c     **** 
 903:screens.c     **** 			// Show bale inside chamber
 904:screens.c     **** 			if( ChamberOpenDelayTime && (stagecomp == (NETFEEDON | NETCUTON)) ) // while chamber open delay 
 905:screens.c     **** 			{
 906:screens.c     **** 				draw_box( adm, 58, 33, 98, 74, CLEAR );
 907:screens.c     **** 				write_bitmap( adm, Bale, 58, 33, OR );			
 908:screens.c     **** 			}
 909:screens.c     **** 		}
 910:screens.c     **** 		else // !CHAMBER_OPEN
 911:screens.c     **** 		{
 912:screens.c     **** 			// Show baler door closed
 913:screens.c     **** 			write_bitmap( adm, Balerdoorclosed_withoutkicker, 80, 26, OR );
 914:screens.c     **** 		}
 915:screens.c     **** 	}
 916:screens.c     **** #else
 917:screens.c     **** 	// Show baler door closed
 918:screens.c     **** 	write_bitmap( adm, Balerdoorclosed_withoutkicker, 80, 26, OR );	
 919:screens.c     **** #endif
 920:screens.c     **** 
 921:screens.c     **** 
 922:screens.c     **** 	// -----------------------------------------------------------
 923:screens.c     **** 	// Bale Kicker
 924:screens.c     **** 
 925:screens.c     **** 	if( BALE_KICKER_UP ) // Bale Kicker Sensor closed
 926:screens.c     **** 	{
 927:screens.c     **** 		write_bitmap( adm, KICKER_UP, 98, 77, OR );
 928:screens.c     **** 	}
 929:screens.c     **** 	else // BALE_KICKER_DOWN -- Bale Kicker Sensor open
 930:screens.c     **** 	{
 931:screens.c     **** 		write_bitmap( adm, KICKER_DOWN, 98, 77, OR );    	
 932:screens.c     **** 	}
 933:screens.c     **** 
 934:screens.c     **** 
 935:screens.c     **** 	// -----------------------------------------------------------
 936:screens.c     **** 	// Display knives
 937:screens.c     **** 
 938:screens.c     **** 	if( CHOPPING_KNIVES_ON ) // IP2 open: 11 Knife Sensor (AKA Chopping Knives position / Knives Posit
 939:screens.c     **** 		write_bitmap( adm, KNIFE, 55, 81, OR );
 940:screens.c     **** 
 941:screens.c     **** 
 942:screens.c     **** 	// -----------------------------------------------------------
 943:screens.c     **** 	// Display driving arrows
 944:screens.c     **** 
 945:screens.c     **** 	if( pFac.pf.GW302_BaleShapeIndicator != BSI_OFF ) // Bale Shape Indicator to be displayed -- with/
 946:screens.c     **** 	{
 947:screens.c     **** 		if( CHAMBER_CLOSED && (stagecomp == SC_CLEAR) )
 948:screens.c     **** 		{
 949:screens.c     **** 			// Erase previous Driving arrows
 950:screens.c     **** 			draw_box( adm, 38, 13, (38+67+6), (13+11), CLEAR );
 951:screens.c     **** 
 952:screens.c     **** 			// Draw Driving arrows
 953:screens.c     **** 			ArrowStepVoltage = (pFac.pf.GW302_FillPotRange - pFac.pf.GW302_FillPotIgnore)/3.0;
 954:screens.c     **** 			ArrowsCleared = 0;
 955:screens.c     **** 			if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - pFac.pf.GW302_FillPotIgnore) )
 956:screens.c     **** 			{
 957:screens.c     **** 				if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+(3.0*
 958:screens.c     **** 				{
 959:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 960:screens.c     **** 					{
 961:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_RIGHT, 38+6, 13, OR );
 962:screens.c     **** 					}
 963:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
 964:screens.c     **** 					{
 965:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_LEFT, 38, 13, OR );
 966:screens.c     **** 					}
 967:screens.c     **** 				}
 968:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
 969:screens.c     **** 				{
 970:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 971:screens.c     **** 					{
 972:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_RIGHT, 38+6, 13, OR );
 973:screens.c     **** 					}
 974:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
 975:screens.c     **** 					{
 976:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_LEFT, 38, 13, OR );
 977:screens.c     **** 					}
 978:screens.c     **** 				}
 979:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
 980:screens.c     **** 				{
 981:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 982:screens.c     **** 					{
 983:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_RIGHT, 38+6, 13, OR );
 984:screens.c     **** 					}
 985:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
 986:screens.c     **** 					{
 987:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_LEFT, 38, 13, OR );
 988:screens.c     **** 					}
 989:screens.c     **** 				}
 990:screens.c     **** 				else
 991:screens.c     **** 				{
 992:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 993:screens.c     **** 					{
 994:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_RIGHT, 38+6, 13, OR );
 995:screens.c     **** 					}
 996:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
 997:screens.c     **** 					{
 998:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_LEFT, 38, 13, OR );
 999:screens.c     **** 					}
1000:screens.c     **** 				}
1001:screens.c     **** 			}
1002:screens.c     **** 			if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + pFac.pf.GW302_FillPotIgnore) )
1003:screens.c     **** 			{
1004:screens.c     **** 				if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+(3.0*
1005:screens.c     **** 				{
1006:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
1007:screens.c     **** 					{
1008:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_LEFT, 38, 13, OR );
1009:screens.c     **** 					}
1010:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
1011:screens.c     **** 					{
1012:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_RIGHT, 38+6, 13, OR );
1013:screens.c     **** 					}
1014:screens.c     **** 				}
1015:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
1016:screens.c     **** 				{
1017:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
1018:screens.c     **** 					{
1019:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_LEFT, 38, 13, OR );
1020:screens.c     **** 					}
1021:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
1022:screens.c     **** 					{
1023:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_RIGHT, 38+6, 13, OR );
1024:screens.c     **** 					}
1025:screens.c     **** 				}
1026:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
1027:screens.c     **** 				{
1028:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
1029:screens.c     **** 					{
1030:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_LEFT, 38, 13, OR );
1031:screens.c     **** 					}
1032:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
1033:screens.c     **** 					{
1034:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_RIGHT, 38+6, 13, OR );
1035:screens.c     **** 					}
1036:screens.c     **** 				}
1037:screens.c     **** 				else
1038:screens.c     **** 				{
1039:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
1040:screens.c     **** 					{
1041:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_LEFT, 38, 13, OR );
1042:screens.c     **** 					}
1043:screens.c     **** 					else // pFac.pf.GW302_BaleIndicator == BI_STEER
1044:screens.c     **** 					{
1045:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_RIGHT, 38+6, 13, OR );
1046:screens.c     **** 					}
1047:screens.c     **** 				}
1048:screens.c     **** 			}
1049:screens.c     **** 
1050:screens.c     **** 			// Always drawing the central dot in the middle
1051:screens.c     **** 			{
1052:screens.c     **** 				write_bitmap( adm, DRIVING_ARROWS_NONE, 38+3, 13, OR ); // drawing just the middle dot
1053:screens.c     **** 			}
1054:screens.c     **** 		}
1055:screens.c     **** 		else // Chamber open or any of the stage completion flags have been set
1056:screens.c     **** 		{
1057:screens.c     **** 			if( !ArrowsCleared )
1058:screens.c     **** 			{
1059:screens.c     **** 				// Erase driving arrows (and middle dot)
1060:screens.c     **** 				ArrowsCleared = 1;
1061:screens.c     **** 				draw_box( adm, 38, 13, (38+67+6), (13+11), CLEAR );
1062:screens.c     **** 			}
1063:screens.c     **** 		}
1064:screens.c     **** 	}
1065:screens.c     **** 
1066:screens.c     **** 
1067:screens.c     **** 	// -----------------------------------------------------------
1068:screens.c     **** 	// Sound beeps to accompany driving arrows
1069:screens.c     **** 
1070:screens.c     **** 	if( pFac.pf.GW302_BaleShapeIndicator == BSI_BEEP ) // Bale Shape Indicator to be displayed with be
1071:screens.c     **** 	{
1072:screens.c     **** 		if( CHAMBER_CLOSED && (stagecomp == SC_CLEAR) && !DrivingArrowBeepsDisabled )
1073:screens.c     **** 		{
1074:screens.c     **** 			if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - pFac.pf.GW302_FillPotIgnore) )
1075:screens.c     **** 			{
1076:screens.c     **** 				if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+(3.0*
1077:screens.c     **** 				{
1078:screens.c     **** 					// Beeps to accompany DRIVING_ARROWS_X4_RIGHT / DRIVING_ARROWS_X4_LEFT
1079:screens.c     **** 					if( DrivingArrowsX4BeepDelay )
1080:screens.c     **** 					{
1081:screens.c     **** 						DrivingArrowsX4BeepDelay--;
1082:screens.c     **** 					}
1083:screens.c     **** 					else
1084:screens.c     **** 					{
1085:screens.c     **** 						buzz_count = 4;
1086:screens.c     **** 						buzz_length = DRIVING_ARROWS_X4_BEEP; // Beep length (for each of 4 beeps)
1087:screens.c     **** 						DrivingArrowsX4BeepDelay = DRIVING_ARROWS_X4_BEEP_DELAY; // Delay (before first beep of 4 sta
1088:screens.c     **** 					}
1089:screens.c     **** 
1090:screens.c     **** 					DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // To delay hearing 3 beeps if drivin
1091:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
1092:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
1093:screens.c     **** 				}
1094:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
1095:screens.c     **** 				{
1096:screens.c     **** 					// Beeps to accompany DRIVING_ARROWS_X3_RIGHT / DRIVING_ARROWS_X3_LEFT
1097:screens.c     **** 					if( DrivingArrowsX3BeepDelay )
1098:screens.c     **** 					{
1099:screens.c     **** 						DrivingArrowsX3BeepDelay--;
1100:screens.c     **** 					}
1101:screens.c     **** 					else
1102:screens.c     **** 					{
1103:screens.c     **** 						buzz_count = 3;
1104:screens.c     **** 						buzz_length = DRIVING_ARROWS_X3_BEEP; // Beep length (for each of 3 beeps)
1105:screens.c     **** 						DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // Delay (before first beep of 3 sta
1106:screens.c     **** 					}
1107:screens.c     **** 
1108:screens.c     **** 					DrivingArrowsX4BeepDelay = 0;  // To hear 4 beeps immediately if driving gets worst
1109:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
1110:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
1111:screens.c     **** 				}
1112:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
1113:screens.c     **** 				{
1114:screens.c     **** 					// Beeps to accompany DRIVING_ARROWS_X2_RIGHT / DRIVING_ARROWS_X2_LEFT
1115:screens.c     **** 					if( DrivingArrowsX2BeepDelay )
1116:screens.c     **** 					{
1117:screens.c     **** 						DrivingArrowsX2BeepDelay--;
1118:screens.c     **** 					}
1119:screens.c     **** 					else
1120:screens.c     **** 					{
1121:screens.c     **** 						buzz_count = 2;
1122:screens.c     **** 						buzz_length = DRIVING_ARROWS_X2_BEEP; // Beep length (for each of 2 beeps)
1123:screens.c     **** 						DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // Delay (before first beep of 2 sta
1124:screens.c     **** 					}
1125:screens.c     **** 
1126:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
1127:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
1128:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
1129:screens.c     **** 				}
1130:screens.c     **** 				else
1131:screens.c     **** 				{
1132:screens.c     **** 					// Beep to accompany DRIVING_ARROWS_X1_RIGHT / DRIVING_ARROWS_X1_LEFT
1133:screens.c     **** 					if( DrivingArrowsX1BeepDelay )
1134:screens.c     **** 					{
1135:screens.c     **** 						DrivingArrowsX1BeepDelay--;
1136:screens.c     **** 					}
1137:screens.c     **** 					else
1138:screens.c     **** 					{
1139:screens.c     **** 						buzz_count = 1;
1140:screens.c     **** 						buzz_length = DRIVING_ARROWS_X1_BEEP; // Beep length
1141:screens.c     **** 						DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // Delay (before beep starts)
1142:screens.c     **** 					}
1143:screens.c     **** 
1144:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
1145:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
1146:screens.c     **** 					DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately if driving gets worst
1147:screens.c     **** 				}
1148:screens.c     **** 			}
1149:screens.c     **** 			else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + pFac.pf.GW302_FillPotIgnore) )
1150:screens.c     **** 			{
1151:screens.c     **** 				if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+(3.0*
1152:screens.c     **** 				{
1153:screens.c     **** 					// Beeps to accompany DRIVING_ARROWS_X4_RIGHT / DRIVING_ARROWS_X4_LEFT
1154:screens.c     **** 					if( DrivingArrowsX4BeepDelay )
1155:screens.c     **** 					{
1156:screens.c     **** 						DrivingArrowsX4BeepDelay--;
1157:screens.c     **** 					}
1158:screens.c     **** 					else
1159:screens.c     **** 					{
1160:screens.c     **** 						buzz_count = 4;
1161:screens.c     **** 						buzz_length = DRIVING_ARROWS_X4_BEEP; // Beep length (for each of 4 beeps)
1162:screens.c     **** 						DrivingArrowsX4BeepDelay = DRIVING_ARROWS_X4_BEEP_DELAY; // Delay (before first beep of 4 sta
1163:screens.c     **** 					}
1164:screens.c     **** 
1165:screens.c     **** 					DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // To delay hearing 3 beeps if drivin
1166:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
1167:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
1168:screens.c     **** 				}
1169:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
1170:screens.c     **** 				{
1171:screens.c     **** 					// Beeps to accompany DRIVING_ARROWS_X3_LEFT / DRIVING_ARROWS_X3_RIGHT
1172:screens.c     **** 					if( DrivingArrowsX3BeepDelay )
1173:screens.c     **** 					{
1174:screens.c     **** 						DrivingArrowsX3BeepDelay--;
1175:screens.c     **** 					}
1176:screens.c     **** 					else
1177:screens.c     **** 					{
1178:screens.c     **** 						buzz_count = 3;
1179:screens.c     **** 						buzz_length = DRIVING_ARROWS_X3_BEEP; // Beep length (for each of 3 beeps)
1180:screens.c     **** 						DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // Delay (before first beep of 3 sta
1181:screens.c     **** 					}
1182:screens.c     **** 
1183:screens.c     **** 					DrivingArrowsX4BeepDelay = 0;  // To hear 4 beeps immediately if driving gets worst
1184:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
1185:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
1186:screens.c     **** 				}
1187:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
1188:screens.c     **** 				{
1189:screens.c     **** 					// Beeps to accompany DRIVING_ARROWS_X2_LEFT / DRIVING_ARROWS_X2_RIGHT
1190:screens.c     **** 					if( DrivingArrowsX2BeepDelay )
1191:screens.c     **** 					{
1192:screens.c     **** 						DrivingArrowsX2BeepDelay--;
1193:screens.c     **** 					}
1194:screens.c     **** 					else
1195:screens.c     **** 					{
1196:screens.c     **** 						buzz_count = 2;
1197:screens.c     **** 						buzz_length = DRIVING_ARROWS_X2_BEEP; // Beep length (for each of 2 beeps)
1198:screens.c     **** 						DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // Delay (before first beep of 2 sta
1199:screens.c     **** 					}
1200:screens.c     **** 
1201:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
1202:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
1203:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
1204:screens.c     **** 				}
1205:screens.c     **** 				else
1206:screens.c     **** 				{
1207:screens.c     **** 					// Beep to accompany DRIVING_ARROWS_X1_LEFT / DRIVING_ARROWS_X1_RIGHT
1208:screens.c     **** 					if( DrivingArrowsX1BeepDelay )
1209:screens.c     **** 					{
1210:screens.c     **** 						DrivingArrowsX1BeepDelay--;
1211:screens.c     **** 					}
1212:screens.c     **** 					else
1213:screens.c     **** 					{
1214:screens.c     **** 						buzz_count = 1;
1215:screens.c     **** 						buzz_length = DRIVING_ARROWS_X1_BEEP; // Beep length
1216:screens.c     **** 						DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // Delay (before beep starts)
1217:screens.c     **** 					}
1218:screens.c     **** 
1219:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
1220:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
1221:screens.c     **** 					DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately if driving gets worst
1222:screens.c     **** 				}
1223:screens.c     **** 			}
1224:screens.c     **** 			else
1225:screens.c     **** 			{
1226:screens.c     **** 				// Beeping off
1227:screens.c     **** 				DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
1228:screens.c     **** 				DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
1229:screens.c     **** 				DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately if driving gets worst
1230:screens.c     **** 				DrivingArrowsX1BeepDelay = 0; // To hear 1 beep immediately if driving gets worst
1231:screens.c     **** 			}
1232:screens.c     **** 		}
1233:screens.c     **** 		else // Chamber open or any of the stage completion flags have been set
1234:screens.c     **** 		{
1235:screens.c     **** 			// Beeping off
1236:screens.c     **** 			DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately (when driving indication starts & i
1237:screens.c     **** 			DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately (when driving indication starts & i
1238:screens.c     **** 			DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately (when driving indication starts & i
1239:screens.c     **** 			DrivingArrowsX1BeepDelay = 0; // To hear 1 beep immediately  (when driving indication starts & i
1240:screens.c     **** 		}
1241:screens.c     **** 	}
1242:screens.c     **** 
1243:screens.c     **** 
1244:screens.c     **** 	// -----------------------------------------------------------
1245:screens.c     **** 	// Display Bale Profile (Preset A - E)
1246:screens.c     **** 
1247:screens.c     **** 	draw_box( adm, 68, 1, (68+13-1), (1+17-1), CLEAR ); // Clearing
1248:screens.c     **** 
1249:screens.c     **** 	if( !(MWarn & MW_DENSITYPRESS) ) // Bale Profile letter (A - E) not displayed if Density Pressure 
1250:screens.c     **** 	{
1251:screens.c     **** 		switch( pFac.pf.GW302_BaleProfile )
1252:screens.c     **** 		{
1253:screens.c     **** 		case BP_PRESET_A:
1254:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_A, 68, 1, OR );
1255:screens.c     **** 			break;
1256:screens.c     **** 		case BP_PRESET_B:
1257:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_B, 68, 1, OR );
1258:screens.c     **** 			break;
1259:screens.c     **** 		case BP_PRESET_C:
1260:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_C, 68, 1, OR );
1261:screens.c     **** 			break;
1262:screens.c     **** 		case BP_PRESET_D:
1263:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_D, 68, 1, OR );
1264:screens.c     **** 			break;
1265:screens.c     **** 		default: /* BP_PRESET_E */
1266:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_E, 68, 1, OR );
1267:screens.c     **** 			break;
1268:screens.c     **** 		} /* end switch( pFac.pf.GW302_BaleProfile ) */
1269:screens.c     **** 	}
1270:screens.c     **** 
1271:screens.c     **** 
1272:screens.c     **** 	// -----------------------------------------------------------
1273:screens.c     **** 	// Show current bale diameter -- shown on graduated scale with target & minimum bale diameters ind
1274:screens.c     **** 
1275:screens.c     **** 	// Erase previous diameter scale and indicator
1276:screens.c     **** 	draw_box( adm, 112, 18, 128, 106, CLEAR );
1277:screens.c     **** 
1278:screens.c     **** 	// Draw bale diameter scale -- 0 to 100 % of extended display range from PotZero to DiaMax
1279:screens.c     **** 	write_bitmap( adm, DIASCALE, (114+3), (18+2), OR );
1280:screens.c     **** 
1281:screens.c     **** 	// Draw minimum bale diameter indicator -- a line
1282:screens.c     **** 	if( DiaMinExtDisplayPercent > 0.0 )
1283:screens.c     **** 	{
1284:screens.c     **** 		TempY = 100 - (unsigned char)( (DiaMinExtDisplayPercent + 0.5) * 0.8 ); // Percentage rounded up 
1285:screens.c     **** 		draw_line( adm, 118, TempY, 122, TempY, OR );
1286:screens.c     **** 	}
1287:screens.c     **** 
1288:screens.c     **** 	// Draw target bale diameter indicator -- a line & arrow
1289:screens.c     **** 	if( DiaTargetExtDisplayPercent > 0.0 )
1290:screens.c     **** 	{
1291:screens.c     **** 		TempY = (unsigned char)( (DiaTargetExtDisplayPercent + 0.5) * 0.8 ); // Percentage rounded up to 
1292:screens.c     **** 		write_bitmap( adm, DIAMIND, 114, (100-2) - TempY, OR );
1293:screens.c     **** 	}
1294:screens.c     **** 
1295:screens.c     **** 	// Show current bale diameter by black filling
1296:screens.c     **** 	if( BaleDiaExtDisplayPercent > 0.0 )
1297:screens.c     **** 	{
1298:screens.c     **** 		TempY = 100 - (unsigned char)( (BaleDiaExtDisplayPercent + 0.5) * 0.8 ); // Percentage rounded up
1299:screens.c     **** 		draw_box( adm, 118, TempY, 122, 100, FULL );
1300:screens.c     **** 	}
1301:screens.c     **** 
1302:screens.c     **** 
1303:screens.c     **** 	// -----------------------------------------------------------
1304:screens.c     **** 	// 	Display Stage Completed Indicator -- Only appears when diagnostics are displayed on the screen
1305:screens.c     **** 
1306:screens.c     **** #ifdef DEVELOP // Testing Stage Completed (stagecomp) Flags
1307:screens.c     **** 	DisplayStageCompletedIndicator();
1308:screens.c     **** #endif
1309:screens.c     **** 
1310:screens.c     **** 
1311:screens.c     **** 	// -----------------------------------------------------------
1312:screens.c     **** 	// Display warnings
1313:screens.c     **** 
1314:screens.c     **** 	if( MWarn )
1315:screens.c     **** 	{		
1316:screens.c     **** 		draw_box( adm, 35, 40, 118, 87, CLEAR );
1317:screens.c     **** 
1318:screens.c     **** 		if( MWarn & MW_DENSITYPRESS ) // Highest prioity
1319:screens.c     **** 		{
1320:screens.c     **** 			// Density Pressure Too High Warning 
1321:screens.c     **** 
1322:screens.c     **** 			// Clear area except for tabs
1323:screens.c     **** 			draw_box( adm, 38, 13, (38+67+6), (13+11), CLEAR ); // Clearing driving arrows
1324:screens.c     **** 			draw_box( adm, 112, 2, (129+(28-1)), 106, CLEAR );  // Clearing diameter scale and indicator & i
1325:screens.c     **** 			draw_box( adm, 1, 10, (129+28), 97, CLEAR );        // Clearing machine picture area -- includin
1326:screens.c     **** 
1327:screens.c     **** 			//  Display (Bale) Density Pressure (AnIP2)
1328:screens.c     **** 			sprintf( tstring, "%3u", TempIntDPV );
1329:screens.c     **** 			display_f1_text( tstring, TSMAX, 3, 9+6, FIXED );
1330:screens.c     **** 			write_bitmap( adm, BAR_UNIT,  3+(6*3)+2, 9+6, OR );
1331:screens.c     **** 
1332:screens.c     **** 			write_bitmap( adm, WARNING_DENSITY_PRESSURE_SCREEN_IMAGE, 2+6, 30, OR );
1333:screens.c     **** 			if( !half_second ) // Flashing warning symbol every second
1334:screens.c     **** 			{
1335:screens.c     **** 				draw_box( adm, 1,   50, (129+28), 97, CLEAR );  // Flashing bottom warning symbol off
1336:screens.c     **** 				draw_box( adm, 1,   30,       40, 97, CLEAR );  // Flashing left warning symbol off
1337:screens.c     **** 				draw_box( adm, 120, 30, (129+28), 97, CLEAR );  // Flashing right warning symbol off
1338:screens.c     **** 			}
1339:screens.c     **** 		}
1340:screens.c     **** 		else if( MWarn & MW_CHECKNET )
1341:screens.c     **** 		{
1342:screens.c     **** 			// Check Net Error (AKA Net Warning)
1343:screens.c     **** 			write_bitmap( adm, WARNING_CHECKNET, 35, 40, OR );
1344:screens.c     **** 		}
1345:screens.c     **** 		else if( MWarn & MW_DROPFLOOR )
1346:screens.c     **** 		{
1347:screens.c     **** 			// Drop Floor (AKA Floor Position) Warning
1348:screens.c     **** 			write_bitmap( adm, WARNING_DROPFLOOR, 35, 40, OR );
1349:screens.c     **** 		}
1350:screens.c     **** 		else if( MWarn & MW_KNIFEPRES )
1351:screens.c     **** 		{
1352:screens.c     **** 			// Knife Maximum Pressure Warning 
1353:screens.c     **** 			write_bitmap( adm, WARNING_KNIFEPRES, 35, 40, OR );
1354:screens.c     **** 		}
1355:screens.c     **** 		else if( MWarn & MW_CHOPKNIVPOS1 )
1356:screens.c     **** 		{
1357:screens.c     **** 			// Chopping Knives Position Warning
1358:screens.c     **** 			write_bitmap( adm, WARNING_CHOP_KNIV_POS, 35, 40, OR );
1359:screens.c     **** 			draw_box( adm, 31, 107, 61, 126, CLEAR );
1360:screens.c     **** 			write_bitmap( adm, TABESC, 31, 107, OR );
1361:screens.c     **** 		}
1362:screens.c     **** 		else if( MWarn & MW_LOWBAT ) // Lowest priority
1363:screens.c     **** 		{
1364:screens.c     **** 			// Low Battery (AKA Low voltage) Warning
1365:screens.c     **** 			write_bitmap( adm, WARNING_LOWBATT, 35, 40, OR );
1366:screens.c     **** 		}
1367:screens.c     **** 
1368:screens.c     **** 	} // end if( MWarn )
1369:screens.c     **** 
1370:screens.c     **** 
1371:screens.c     **** 	// -----------------------------------------------------------
1372:screens.c     **** 	// Display 'Reset Lube Counter to Lube Alarm Confirm/Cancel' Message box
1373:screens.c     **** 
1374:screens.c     **** 	if( ResetLube )
1375:screens.c     **** 	{
1376:screens.c     **** 		draw_box( adm, 14+6, 40+10, 14+6+123-1, 40+10+32-1, CLEAR );
1377:screens.c     **** 
1378:screens.c     **** 		// Graphical elements
1379:screens.c     **** 		write_bitmap( adm, LUBE_COUNT_RESET_PROMPT, 14+6, 40+10, OR );
1380:screens.c     **** 
1381:screens.c     **** 		// 'Lube Alarm' set in Technician Menu
1382:screens.c     **** 		sprintf( tstring, "%3u", pFac.pf.GW302_LubeAlarm );
1383:screens.c     **** 		display_f1_text( tstring, TSMAX, 14+6+17+62-2, 40+10+5+7, FIXED );
1384:screens.c     **** 
1385:screens.c     **** 	}
1386:screens.c     **** 
1387:screens.c     **** }
1388:screens.c     **** // -----------------------------------------------------------
1389:screens.c     **** 
1390:screens.c     **** 
1391:screens.c     **** // -----------------------------------------------------------
1392:screens.c     **** // Function Name       : screen100
1393:screens.c     **** // Description         : Machine Menu
1394:screens.c     **** // -----------------------------------------------------------
1395:screens.c     **** 
1396:screens.c     **** /*  Origin 
1397:screens.c     ****        x ------------------------------------------------------------ 
1398:screens.c     ****        | (1,1) Bale Setup Menu Icon | (2,1) Machine Setup Menu Icon  |
1399:screens.c     ****        | ----------------------------------------------------------- |
1400:screens.c     ****        | (1,2) Bale Count Menu Icon | (2,2) Operator Setup Menu Icon |
1401:screens.c     ****          ----------------------------------------------------------- */
1402:screens.c     **** 
1403:screens.c     **** /* Origin */
1404:screens.c     **** #define MACHINE_MENU_ICONS_ORIGIN_X         0
1405:screens.c     **** #define MACHINE_MENU_ICONS_ORIGIN_Y         0
1406:screens.c     **** 
1407:screens.c     **** /* Grid position (1,1) */
1408:screens.c     **** #define ICON_BALE_SETUP_MENU_OFFSET_X      15
1409:screens.c     **** #define ICON_BALE_SETUP_MENU_OFFSET_Y      20
1410:screens.c     **** 
1411:screens.c     **** /* Grid position (2,1) */ 
1412:screens.c     **** #define ICON_MACHINE_SETUP_MENU_OFFSET_X   78
1413:screens.c     **** #define ICON_MACHINE_SETUP_MENU_OFFSET_Y   20
1414:screens.c     **** 
1415:screens.c     **** /* Grid position (1,2) */
1416:screens.c     **** #define ICON_BALE_COUNT_MENU_OFFSET_X      15 
1417:screens.c     **** #define ICON_BALE_COUNT_MENU_OFFSET_Y      58
1418:screens.c     **** 
1419:screens.c     **** /* Grid position (2,2) */
1420:screens.c     **** #define ICON_OPERATOR_SETUP_MENU_OFFSET_X  78
1421:screens.c     **** #define ICON_OPERATOR_SETUP_MENU_OFFSET_Y  58
1422:screens.c     **** 
1423:screens.c     **** 
1424:screens.c     **** /* Top left icon co-ordinates (x,y) */
1425:screens.c     **** 
1426:screens.c     **** #define ICON_BALE_SETUP_MENU_X      MACHINE_MENU_ICONS_ORIGIN_X + ICON_BALE_SETUP_MENU_OFFSET_X 
1427:screens.c     **** #define ICON_BALE_SETUP_MENU_Y      MACHINE_MENU_ICONS_ORIGIN_Y + ICON_BALE_SETUP_MENU_OFFSET_Y
1428:screens.c     **** 
1429:screens.c     **** #define ICON_MACHINE_SETUP_MENU_X   MACHINE_MENU_ICONS_ORIGIN_X + ICON_MACHINE_SETUP_MENU_OFFSET_X
1430:screens.c     **** #define ICON_MACHINE_SETUP_MENU_Y   MACHINE_MENU_ICONS_ORIGIN_Y + ICON_MACHINE_SETUP_MENU_OFFSET_Y
1431:screens.c     **** 
1432:screens.c     **** #define ICON_BALE_COUNT_MENU_X      MACHINE_MENU_ICONS_ORIGIN_X + ICON_BALE_COUNT_MENU_OFFSET_X
1433:screens.c     **** #define ICON_BALE_COUNT_MENU_Y      MACHINE_MENU_ICONS_ORIGIN_Y + ICON_BALE_COUNT_MENU_OFFSET_Y
1434:screens.c     **** 
1435:screens.c     **** #define ICON_OPERATOR_SETUP_MENU_X  MACHINE_MENU_ICONS_ORIGIN_X + ICON_OPERATOR_SETUP_MENU_OFFSET_X
1436:screens.c     **** #define ICON_OPERATOR_SETUP_MENU_Y  MACHINE_MENU_ICONS_ORIGIN_Y + ICON_OPERATOR_SETUP_MENU_OFFSET_Y
1437:screens.c     **** 
1438:screens.c     **** 
1439:screens.c     **** void screen100( unsigned int lkey )
1440:screens.c     **** {
1441:screens.c     **** 	unsigned int key_status;
1442:screens.c     **** 	unsigned char old_selection;
1443:screens.c     **** 
1444:screens.c     **** 
1445:screens.c     **** 	if( !startup )
1446:screens.c     **** 	{
1447:screens.c     **** 		startup = 1;
1448:screens.c     **** 
1449:screens.c     **** 		draw_frame( adm );
1450:screens.c     **** 
1451:screens.c     **** 
1452:screens.c     **** 		/* -----------------------------------------------------------
1453:screens.c     **** 		 * Drawing icons -- none highlighted */
1454:screens.c     **** 
1455:screens.c     **** 		write_bitmap( adm, ICON_BALE_SETUP_MENU,      ICON_BALE_SETUP_MENU_X,     ICON_BALE_SETUP_MENU_Y,
1456:screens.c     **** 		write_bitmap( adm, ICON_MACHINE_SETUP_MENU,   ICON_MACHINE_SETUP_MENU_X,  ICON_MACHINE_SETUP_MENU
1457:screens.c     **** 		write_bitmap( adm, ICON_BALE_COUNT_MENU,      ICON_BALE_COUNT_MENU_X,     ICON_BALE_COUNT_MENU_Y,
1458:screens.c     **** 		write_bitmap( adm, ICON_OPERATOR_SETUP_MENU,  ICON_OPERATOR_SETUP_MENU_X, ICON_OPERATOR_SETUP_MEN
1459:screens.c     **** 
1460:screens.c     **** 
1461:screens.c     **** 		/* -----------------------------------------------------------
1462:screens.c     **** 		 * Drawing tabs -- OL, IL, IR & OR tab */
1463:screens.c     **** 
1464:screens.c     **** 		write_bitmap( adm, TAB,      0, 107, OR );
1465:screens.c     **** 		write_bitmap( adm, TAB,     31, 107, OR );
1466:screens.c     **** 
1467:screens.c     **** 		write_bitmap( adm, TABENT,  99, 107, OR ); // ENTER
1468:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
1469:screens.c     **** 
1470:screens.c     **** 
1471:screens.c     **** 		looptime = 0;
1472:screens.c     **** 
1473:screens.c     **** 		old_selection = 0xff;
1474:screens.c     **** 	}
1475:screens.c     **** 	else
1476:screens.c     **** 	{
1477:screens.c     **** 		old_selection = selection;
1478:screens.c     **** 	}
1479:screens.c     **** 
1480:screens.c     **** #ifdef SHOW_TIME
1481:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
1482:screens.c     **** #endif	
1483:screens.c     **** 
1484:screens.c     **** 	/* -----------------------------------------------------------
1485:screens.c     **** 	 * Key press */
1486:screens.c     **** 
1487:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
1488:screens.c     **** 
1489:screens.c     **** 	if( key_status )
1490:screens.c     **** 	{		
1491:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
1492:screens.c     **** 
1493:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
1494:screens.c     **** 		{
1495:screens.c     **** 			escape = 1;
1496:screens.c     **** 		}
1497:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey ENT)
1498:screens.c     **** 		{
1499:screens.c     **** 			switch( selection )
1500:screens.c     **** 			{
1501:screens.c     **** 			case 0: /* (1,1) */
1502:screens.c     **** 				window = screen110; // Bale Setup Menu
1503:screens.c     **** 				break;
1504:screens.c     **** 
1505:screens.c     **** 			case 1: /* (2,1) */
1506:screens.c     **** 				window = screen111; // Machine Setup Menu
1507:screens.c     **** 				break;
1508:screens.c     **** 
1509:screens.c     **** 			case 2: /* (1,2) */ 
1510:screens.c     **** 				window = screen112; // Bale Count Menu
1511:screens.c     **** 				break;
1512:screens.c     **** 
1513:screens.c     **** 			case 3: /* (2,2) */
1514:screens.c     **** 				window = screen113; // Operator Setup Menu
1515:screens.c     **** 				break;
1516:screens.c     **** 			}
1517:screens.c     **** 		}
1518:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
1519:screens.c     **** 		{
1520:screens.c     **** 			switch( selection )
1521:screens.c     **** 			{
1522:screens.c     **** 			case 0: /* (1,1) */
1523:screens.c     **** 				break;
1524:screens.c     **** 
1525:screens.c     **** 			case 1: /* (2,1) */
1526:screens.c     **** 				selection = 2; /* (1,2) */
1527:screens.c     **** 				break;
1528:screens.c     **** 
1529:screens.c     **** 			case 2: /* (1,2) */
1530:screens.c     **** 				selection = 0; /* (1,1) */
1531:screens.c     **** 				break;
1532:screens.c     **** 
1533:screens.c     **** 			case 3: /* (2,2) */
1534:screens.c     **** 				selection = 1; /* (2,1) */
1535:screens.c     **** 				break;
1536:screens.c     **** 			}			
1537:screens.c     **** 		}
1538:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
1539:screens.c     **** 		{
1540:screens.c     **** 			switch( selection )
1541:screens.c     **** 			{
1542:screens.c     **** 			case 0: /* (1,1) */
1543:screens.c     **** 				selection = 2; /* (1,2) */
1544:screens.c     **** 				break;
1545:screens.c     **** 
1546:screens.c     **** 			case 1: /* (2,1) */
1547:screens.c     **** 				selection = 3; /* (2,2) */
1548:screens.c     **** 				break;
1549:screens.c     **** 
1550:screens.c     **** 			case 2: /* (1,2) */
1551:screens.c     **** 				selection = 1; /* (2,1) */
1552:screens.c     **** 				break;
1553:screens.c     **** 
1554:screens.c     **** 			case 3: /* (2,2) */
1555:screens.c     **** 				break;
1556:screens.c     **** 			}
1557:screens.c     **** 		}
1558:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
1559:screens.c     **** 		{
1560:screens.c     **** 			switch( selection )
1561:screens.c     **** 			{
1562:screens.c     **** 			case 1: /* (2,1) */
1563:screens.c     **** 				selection = 0; /* (1,1) */
1564:screens.c     **** 				break;
1565:screens.c     **** 
1566:screens.c     **** 			case 2: /* (1,2) */
1567:screens.c     **** 				selection = 1; /* (2,1) */
1568:screens.c     **** 				break;
1569:screens.c     **** 
1570:screens.c     **** 			case 3: /* (2,2) */
1571:screens.c     **** 				selection = 2; /* (1,2) */
1572:screens.c     **** 				break;
1573:screens.c     **** 			}
1574:screens.c     **** 		}
1575:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
1576:screens.c     **** 		{
1577:screens.c     **** 			switch( selection )
1578:screens.c     **** 			{
1579:screens.c     **** 			case 0: /* (1,1) */
1580:screens.c     **** 				selection = 1; /* (2,1) */
1581:screens.c     **** 				break;
1582:screens.c     **** 
1583:screens.c     **** 			case 1: /* (2,1) */
1584:screens.c     **** 				selection = 2; /* (1,2) */
1585:screens.c     **** 				break;
1586:screens.c     **** 
1587:screens.c     **** 			case 2: /* (1,2) */
1588:screens.c     **** 				selection = 3; /* (2,2) */
1589:screens.c     **** 				break;
1590:screens.c     **** 			}
1591:screens.c     **** 		}
1592:screens.c     **** 
1593:screens.c     **** 	} /* end if( key_status ) */
1594:screens.c     **** 
1595:screens.c     **** 
1596:screens.c     **** 	/* -----------------------------------------------------------
1597:screens.c     **** 	 * Selection pointer & Icon highlighting */
1598:screens.c     **** 
1599:screens.c     **** 	if( selection != old_selection )
1600:screens.c     **** 	{
1601:screens.c     **** 		/* Clear old selection */
1602:screens.c     **** 		switch( old_selection )
1603:screens.c     **** 		{
1604:screens.c     **** 		case 0: /* (1,1) */
1605:screens.c     **** 			write_bitmap( adm, ICON_BALE_SETUP_MENU, ICON_BALE_SETUP_MENU_X, ICON_BALE_SETUP_MENU_Y, AND );
1606:screens.c     **** 			break;
1607:screens.c     **** 		case 1: /* (2,1) */ 
1608:screens.c     **** 			write_bitmap( adm, ICON_MACHINE_SETUP_MENU, ICON_MACHINE_SETUP_MENU_X, ICON_MACHINE_SETUP_MENU_Y
1609:screens.c     **** 			break;
1610:screens.c     **** 		case 2: /* (1,2) */ 
1611:screens.c     **** 			write_bitmap( adm, ICON_BALE_COUNT_MENU, ICON_BALE_COUNT_MENU_X, ICON_BALE_COUNT_MENU_Y, AND );
1612:screens.c     **** 			break;
1613:screens.c     **** 		case 3: /* (2,2) */
1614:screens.c     **** 			write_bitmap( adm, ICON_OPERATOR_SETUP_MENU, ICON_OPERATOR_SETUP_MENU_X, ICON_OPERATOR_SETUP_MEN
1615:screens.c     **** 			break;
1616:screens.c     **** 		}
1617:screens.c     **** 
1618:screens.c     **** 		/* Draw new selection */
1619:screens.c     **** 		switch( selection )
1620:screens.c     **** 		{
1621:screens.c     **** 		case 0: /* (1,1) */
1622:screens.c     **** 			write_bitmap( adm, ICON_BALE_SETUP_MENU_SELECTED, ICON_BALE_SETUP_MENU_X, ICON_BALE_SETUP_MENU_Y
1623:screens.c     **** 			break;
1624:screens.c     **** 		case 1: /* (2,1) */ 
1625:screens.c     **** 			write_bitmap( adm, ICON_MACHINE_SETUP_MENU_SELECTED, ICON_MACHINE_SETUP_MENU_X, ICON_MACHINE_SET
1626:screens.c     **** 			break;
1627:screens.c     **** 		case 2: /* (1,2) */ 
1628:screens.c     **** 			write_bitmap( adm, ICON_BALE_COUNT_MENU_SELECTED, ICON_BALE_COUNT_MENU_X, ICON_BALE_COUNT_MENU_Y
1629:screens.c     **** 			break;
1630:screens.c     **** 		case 3: /* (2,2) */
1631:screens.c     **** 			write_bitmap( adm, ICON_OPERATOR_SETUP_MENU_SELECTED, ICON_OPERATOR_SETUP_MENU_X, ICON_OPERATOR_
1632:screens.c     **** 			break;
1633:screens.c     **** 		}
1634:screens.c     **** 	} /* end if( selection != old_selection ) */
1635:screens.c     **** 
1636:screens.c     **** 
1637:screens.c     **** 	/* -----------------------------------------------------------
1638:screens.c     **** 	 * Drawing tabs -- NAVIGATION tab */
1639:screens.c     **** 
1640:screens.c     **** 	if( selection != old_selection )
1641:screens.c     **** 	{
1642:screens.c     **** 		draw_box( adm, 62, 102, 62+36-1, 102+24-1, CLEAR ); // Clear NAVIGATION tab area
1643:screens.c     **** 
1644:screens.c     **** 		switch( selection )
1645:screens.c     **** 		{
1646:screens.c     **** 		case 0: /* (1,1) */
1647:screens.c     **** 			write_bitmap( adm, TABNAV_DR, 62, 102, OR ); // NAVIGATION: Down Right
1648:screens.c     **** 			break;
1649:screens.c     **** 
1650:screens.c     **** 		case 1: /* (2,1) */
1651:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
1652:screens.c     **** 			break;
1653:screens.c     **** 
1654:screens.c     **** 		case 2: /* (1,2) */
1655:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
1656:screens.c     **** 			break;
1657:screens.c     **** 
1658:screens.c     **** 		case 3: /* (2,2) */
1659:screens.c     **** 			write_bitmap( adm, TABNAV_UL, 62, 102, OR ); // NAVIGATION: Up Left
1660:screens.c     **** 			break;
1661:screens.c     **** 		}
1662:screens.c     **** 	} /* end if( selection != old_selection ) */
1663:screens.c     **** 
1664:screens.c     **** }
1665:screens.c     **** // -----------------------------------------------------------
1666:screens.c     **** 
1667:screens.c     **** 
1668:screens.c     **** // -----------------------------------------------------------
1669:screens.c     **** // Function Name       : screen110
1670:screens.c     **** // Description         : Machine Menu - Bale Setup Menu                 
1671:screens.c     **** // -----------------------------------------------------------
1672:screens.c     **** 
1673:screens.c     **** /*  Origin 
1674:screens.c     ****        x ------------------------------------------------------------------ 
1675:screens.c     ****        | (1,1) Bale Profile  | (2,1) Core Diameter  | (3,1) Bale Diameter  |
1676:screens.c     ****        | ----------------------------------------------------------------- |
1677:screens.c     ****        | (1,2) Core Density             | (2,2) Bale Density               |
1678:screens.c     ****        | ----------------------------------------------------------------- |
1679:screens.c     ****        | (3,1) Net Layers                                                  |
1680:screens.c     ****          ----------------------------------------------------------------- */
1681:screens.c     ****  
1682:screens.c     **** /* Origin */
1683:screens.c     **** #define BALE_SETUP_MENU_ICONS_ORIGIN_X         0
1684:screens.c     **** #define BALE_SETUP_MENU_ICONS_ORIGIN_Y         0
1685:screens.c     **** 
1686:screens.c     **** /* Grid positions (1,1) (2,1) & (3,1) */
1687:screens.c     **** #define ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_OFFSET_X      10
1688:screens.c     **** #define ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_OFFSET_Y      10
1689:screens.c     **** /* Grid position (1,1) */
1690:screens.c     **** #define ICON_BALE_PROFILE_SETTING_OFFSET_X                          39 - 10 - 3
1691:screens.c     **** #define ICON_BALE_PROFILE_SETTING_OFFSET_Y                          26 - 10 - 4
1692:screens.c     **** /* Grid position (2,1) */
1693:screens.c     **** #define ICON_CORE_DIAMETER_TEXT_OFFSET_X                            77 - 10
1694:screens.c     **** #define ICON_CORE_DIAMETER_TEXT_OFFSET_Y                            26 - 10
1695:screens.c     **** /* Grid position (3,1) */
1696:screens.c     **** #define ICON_BALE_DIAMETER_TEXT_OFFSET_X                            115 - 10
1697:screens.c     **** #define ICON_BALE_DIAMETER_TEXT_OFFSET_Y                            26  - 10
1698:screens.c     **** 
1699:screens.c     **** /* Grid position (1,2) */
1700:screens.c     **** #define ICON_CORE_DENSITY_OFFSET_X        10 
1701:screens.c     **** #define ICON_CORE_DENSITY_OFFSET_Y        59
1702:screens.c     **** #define ICON_CORE_DENSITY_TEXT_OFFSET_X   50 - 10 
1703:screens.c     **** #define ICON_CORE_DENSITY_TEXT_OFFSET_Y   61 - 59
1704:screens.c     **** 
1705:screens.c     **** /* Grid position (2,2) */
1706:screens.c     **** #define ICON_BALE_DENSITY_OFFSET_X        81
1707:screens.c     **** #define ICON_BALE_DENSITY_OFFSET_Y        59
1708:screens.c     **** #define ICON_BALE_DENSITY_TEXT_OFFSET_X   130 - 81 
1709:screens.c     **** #define ICON_BALE_DENSITY_TEXT_OFFSET_Y   61  - 59
1710:screens.c     **** 
1711:screens.c     **** /* Grid position (1,3) */
1712:screens.c     **** #define ICON_NET_LAYERS_OFFSET_X          10 
1713:screens.c     **** #define ICON_NET_LAYERS_OFFSET_Y          86
1714:screens.c     **** #define ICON_NET_LAYERS_TEXT_OFFSET_X     51 - 10
1715:screens.c     **** #define ICON_NET_LAYERS_TEXT_OFFSET_Y     88 - 86
1716:screens.c     **** 
1717:screens.c     **** 
1718:screens.c     **** /* Top left icon co-ordinates (x,y) */
1719:screens.c     **** 
1720:screens.c     **** #define ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X   BALE_SETUP_MENU_ICONS_ORIGIN_X + ICON_BAL
1721:screens.c     **** #define ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_Y   BALE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_BAL
1722:screens.c     **** 
1723:screens.c     **** #define ICON_CORE_DENSITY_X   BALE_SETUP_MENU_ICONS_ORIGIN_X + ICON_CORE_DENSITY_OFFSET_X
1724:screens.c     **** #define ICON_CORE_DENSITY_Y   BALE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_CORE_DENSITY_OFFSET_Y
1725:screens.c     **** 
1726:screens.c     **** #define ICON_BALE_DENSITY_X   BALE_SETUP_MENU_ICONS_ORIGIN_X + ICON_BALE_DENSITY_OFFSET_X
1727:screens.c     **** #define ICON_BALE_DENSITY_Y   BALE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_BALE_DENSITY_OFFSET_Y
1728:screens.c     **** 
1729:screens.c     **** #define ICON_NET_LAYERS_X     BALE_SETUP_MENU_ICONS_ORIGIN_X + ICON_NET_LAYERS_OFFSET_X
1730:screens.c     **** #define ICON_NET_LAYERS_Y     BALE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_NET_LAYERS_OFFSET_Y
1731:screens.c     **** 
1732:screens.c     **** 
1733:screens.c     **** /* Text/setting top left co-ordinates (x,y) & bottom right co-ordinates (x2,y2) */
1734:screens.c     **** 
1735:screens.c     **** #define ICON_BALE_PROFILE_SETTING_X    ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X + ICON_BALE_
1736:screens.c     **** #define ICON_BALE_PROFILE_SETTING_Y    ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_Y + ICON_BALE_
1737:screens.c     **** #define ICON_BALE_PROFILE_SETTING_X2   ICON_BALE_PROFILE_SETTING_X + 13 - 1  /* ICON_BALE_PROFILE_A
1738:screens.c     **** #define ICON_BALE_PROFILE_SETTING_Y2   ICON_BALE_PROFILE_SETTING_Y + 17 - 1  /* ICON_BALE_PROFILE_A
1739:screens.c     **** 
1740:screens.c     **** #define ICON_CORE_DIAMETER_TEXT_X   ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X + ICON_CORE_DIA
1741:screens.c     **** #define ICON_CORE_DIAMETER_TEXT_Y   ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_Y + ICON_CORE_DIA
1742:screens.c     **** 
1743:screens.c     **** #define ICON_BALE_DIAMETER_TEXT_X   ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X + ICON_BALE_DIA
1744:screens.c     **** #define ICON_BALE_DIAMETER_TEXT_Y   ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_Y + ICON_BALE_DIA
1745:screens.c     **** 
1746:screens.c     **** #define ICON_CORE_DENSITY_TEXT_X    ICON_CORE_DENSITY_X + ICON_CORE_DENSITY_TEXT_OFFSET_X
1747:screens.c     **** #define ICON_CORE_DENSITY_TEXT_Y    ICON_CORE_DENSITY_Y + ICON_CORE_DENSITY_TEXT_OFFSET_Y
1748:screens.c     **** 
1749:screens.c     **** #define ICON_BALE_DENSITY_TEXT_X    ICON_BALE_DENSITY_X + ICON_BALE_DENSITY_TEXT_OFFSET_X
1750:screens.c     **** #define ICON_BALE_DENSITY_TEXT_Y    ICON_BALE_DENSITY_Y + ICON_BALE_DENSITY_TEXT_OFFSET_Y
1751:screens.c     **** 
1752:screens.c     **** #define ICON_NET_LAYERS_TEXT_X      ICON_NET_LAYERS_X + ICON_NET_LAYERS_TEXT_OFFSET_X
1753:screens.c     **** #define ICON_NET_LAYERS_TEXT_Y      ICON_NET_LAYERS_Y + ICON_NET_LAYERS_TEXT_OFFSET_Y
1754:screens.c     **** 
1755:screens.c     **** 
1756:screens.c     **** void screen110( unsigned int lkey )
1757:screens.c     **** {
1758:screens.c     **** 	unsigned int  key_status;
1759:screens.c     **** 	unsigned char old_selection;
1760:screens.c     **** 	unsigned char tstring[128];
1761:screens.c     **** 
1762:screens.c     **** 	static unsigned char TryingToSetBaleDiaBelowCore;
1763:screens.c     **** 
1764:screens.c     **** 
1765:screens.c     **** 	if( startup != 1 )
1766:screens.c     **** 	{
1767:screens.c     **** 		startup = 1;
1768:screens.c     **** 
1769:screens.c     **** 		draw_frame( adm );
1770:screens.c     **** 
1771:screens.c     **** 
1772:screens.c     **** 		/* -----------------------------------------------------------
1773:screens.c     **** 		 * Drawing icons -- none highlighted */
1774:screens.c     **** 
1775:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETER
1776:screens.c     **** 		write_bitmap( adm, ICON_CORE_DENSITY,   ICON_CORE_DENSITY_X,  ICON_CORE_DENSITY_Y,  OR );
1777:screens.c     **** 		write_bitmap( adm, ICON_BALE_DENSITY,   ICON_BALE_DENSITY_X,  ICON_BALE_DENSITY_Y,  OR );
1778:screens.c     **** 		write_bitmap( adm, ICON_NET_LAYERS,     ICON_NET_LAYERS_X,    ICON_NET_LAYERS_Y,    OR );
1779:screens.c     **** 
1780:screens.c     **** 
1781:screens.c     **** 		/* -----------------------------------------------------------
1782:screens.c     **** 		 * Drawing tabs -- IR & OR tab */
1783:screens.c     **** 
1784:screens.c     **** 		write_bitmap( adm, TAB,     99, 107, OR );
1785:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
1786:screens.c     **** 
1787:screens.c     **** 
1788:screens.c     **** 		TryingToSetBaleDiaBelowCore = 0;
1789:screens.c     **** 
1790:screens.c     **** 		old_selection = 0xff;
1791:screens.c     **** 	}
1792:screens.c     **** 	else
1793:screens.c     **** 	{
1794:screens.c     **** 		old_selection = selection;
1795:screens.c     **** 	}
1796:screens.c     **** 
1797:screens.c     **** #ifdef SHOW_TIME
1798:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
1799:screens.c     **** #endif
1800:screens.c     **** 
1801:screens.c     **** 	/* -----------------------------------------------------------
1802:screens.c     **** 	 * Key press */
1803:screens.c     **** 
1804:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
1805:screens.c     **** 
1806:screens.c     **** 	if( key_status )
1807:screens.c     **** 	{
1808:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
1809:screens.c     **** 
1810:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
1811:screens.c     **** 		{
1812:screens.c     **** 			escape = 1;
1813:screens.c     **** 		}
1814:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey -)
1815:screens.c     **** 		{
1816:screens.c     **** 			TryingToSetBaleDiaBelowCore = 0;
1817:screens.c     **** 
1818:screens.c     **** 			switch( selection )
1819:screens.c     **** 			{
1820:screens.c     **** 			case 0: // (1,1) Bale Profile
1821:screens.c     **** 				if( pFac.pf.GW302_BaleProfile > PF_GW302_BaleProfile[PF_MIN] )
1822:screens.c     **** 					pFac.pf.GW302_BaleProfile -= PF_GW302_BaleProfile[PF_STEP];
1823:screens.c     **** 				else
1824:screens.c     **** 					pFac.pf.GW302_BaleProfile = PF_GW302_BaleProfile[PF_MAX];  // Cycling round presets A-E
1825:screens.c     **** 				break;
1826:screens.c     **** 
1827:screens.c     **** 			case 1: // (2,1) Core Diameter
1828:screens.c     **** 				pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_CoreDiameter[PF_STEP];
1829:screens.c     **** 				if( pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] < PF_GW302_CoreDiameter[PF_MIN] )
1830:screens.c     **** 					pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDiameter[PF_MIN];  // Lim
1831:screens.c     **** 				break;
1832:screens.c     **** 
1833:screens.c     **** 			case 2: // (3,1) Bale Diameter
1834:screens.c     **** 				pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_BaleDiameter[PF_STEP];
1835:screens.c     **** 				if( pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] < pFac.pf.GW302_CoreDiameter[pFac.pf.
1836:screens.c     **** 				{
1837:screens.c     **** 					pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] = pFac.pf.GW302_CoreDiameter[pFac.pf.GW3
1838:screens.c     **** 					TryingToSetBaleDiaBelowCore = 1;
1839:screens.c     **** 				}
1840:screens.c     **** 				break;
1841:screens.c     **** 
1842:screens.c     **** 			case 3: // (1,2) Core Density
1843:screens.c     **** 				pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] -= PF_GW302_CoreDensity[PF_STEP];
1844:screens.c     **** 				if( pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] < PF_GW302_CoreDensity[PF_MIN] )
1845:screens.c     **** 					pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDensity[PF_MIN];   // Limi
1846:screens.c     **** 				break;
1847:screens.c     **** 
1848:screens.c     **** 			case 4: // (2,2) Bale Density
1849:screens.c     **** 				pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] -= PF_GW302_BaleDensity[PF_STEP];
1850:screens.c     **** 				if( pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] < PF_GW302_BaleDensity[PF_MIN] )
1851:screens.c     **** 					pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_BaleDensity[PF_MIN];   // Limi
1852:screens.c     **** 				break;
1853:screens.c     **** 
1854:screens.c     **** 			case 5: // (1,3) Net Layers
1855:screens.c     **** 				pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] -= PF_GW302_NetLayers[PF_STEP];
1856:screens.c     **** 				if( pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] < PF_GW302_NetLayers[PF_MIN] )
1857:screens.c     **** 					pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] = PF_GW302_NetLayers[PF_MIN];  // Limiting 
1858:screens.c     **** 				break;
1859:screens.c     **** 			}
1860:screens.c     **** 			SavecalDelayWithinMenus = 1;
1861:screens.c     **** 		}
1862:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey +)
1863:screens.c     **** 		{
1864:screens.c     **** 			switch( selection )
1865:screens.c     **** 			{
1866:screens.c     **** 			case 0: // (1,1) Bale Profile
1867:screens.c     **** 				pFac.pf.GW302_BaleProfile += PF_GW302_BaleProfile[PF_STEP];
1868:screens.c     **** 				if( pFac.pf.GW302_BaleProfile > PF_GW302_BaleProfile[PF_MAX] )
1869:screens.c     **** 					pFac.pf.GW302_BaleProfile = PF_GW302_BaleProfile[PF_MIN];  // Cycling round presets A-E
1870:screens.c     **** 				break;
1871:screens.c     **** 
1872:screens.c     **** 			case 1: // (2,1) Core Diameter
1873:screens.c     **** 				pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] += PF_GW302_CoreDiameter[PF_STEP];
1874:screens.c     **** 				if( pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_CoreDiameter[PF_MAX] )
1875:screens.c     **** 					pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDiameter[PF_MAX];  // Lim
1876:screens.c     **** 				break;
1877:screens.c     **** 
1878:screens.c     **** 			case 2: // (3,1) Bale Diameter
1879:screens.c     **** 				pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] += PF_GW302_BaleDiameter[PF_STEP];
1880:screens.c     **** 				if( pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_BaleDiameter[PF_MAX] )
1881:screens.c     **** 					pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_BaleDiameter[PF_MAX];  // Lim
1882:screens.c     **** 				break;
1883:screens.c     **** 
1884:screens.c     **** 			case 3: // (1,2) Core Density
1885:screens.c     **** 				pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] += PF_GW302_CoreDensity[PF_STEP];
1886:screens.c     **** 				if( pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] > PF_GW302_CoreDensity[PF_MAX] )
1887:screens.c     **** 					pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDensity[PF_MAX];   // Limi
1888:screens.c     **** 				break;
1889:screens.c     **** 
1890:screens.c     **** 			case 4: // (2,2) Bale Density
1891:screens.c     **** 				pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] += PF_GW302_BaleDensity[PF_STEP];
1892:screens.c     **** 				if( pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] > PF_GW302_BaleDensity[PF_MAX] )
1893:screens.c     **** 					pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_BaleDensity[PF_MAX];   // Limi
1894:screens.c     **** 				break;
1895:screens.c     **** 
1896:screens.c     **** 			case 5: // (1,3) Net Layers
1897:screens.c     **** 				pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] += PF_GW302_NetLayers[PF_STEP];
1898:screens.c     **** 				if( pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] > PF_GW302_NetLayers[PF_MAX] )
1899:screens.c     **** 					pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] = PF_GW302_NetLayers[PF_MAX];  // Limiting 
1900:screens.c     **** 				break;
1901:screens.c     **** 			}
1902:screens.c     **** 			SavecalDelayWithinMenus = 1;
1903:screens.c     **** 		}
1904:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
1905:screens.c     **** 		{
1906:screens.c     **** 			switch( selection )
1907:screens.c     **** 			{
1908:screens.c     **** 			case 0: /* (1,1) Bale Profile */
1909:screens.c     **** 				break;
1910:screens.c     **** 			case 1: /* (2,1) Core Diameter */
1911:screens.c     **** 				break;
1912:screens.c     **** 			case 2: /* (3,1) Bale Diameter */
1913:screens.c     **** 				break;
1914:screens.c     **** 			case 3: /* (1,2) Core Density */
1915:screens.c     **** 				selection = 0; /* (1,1) Bale Profile */
1916:screens.c     **** 				break;
1917:screens.c     **** 			case 4: /* (2,2) Bale Density */
1918:screens.c     **** 				selection = 1; /* (2,1) Core Diameter */
1919:screens.c     **** 				break;
1920:screens.c     **** 			case 5: /* (1,3) Net Layers */
1921:screens.c     **** 				selection = 3; /* (1,2) Core Density */
1922:screens.c     **** 				break;
1923:screens.c     **** 			}		
1924:screens.c     **** 		}
1925:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
1926:screens.c     **** 		{
1927:screens.c     **** 			switch( selection )
1928:screens.c     **** 			{
1929:screens.c     **** 			case 0: /* (1,1) Bale Profile */
1930:screens.c     **** 				selection = 3; /* (1,2) Core Density */
1931:screens.c     **** 				break;
1932:screens.c     **** 			case 1: /* (2,1) Core Diameter */
1933:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
1934:screens.c     **** 				break;
1935:screens.c     **** 			case 2: /* (3,1) Bale Diameter */
1936:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
1937:screens.c     **** 				break;
1938:screens.c     **** 			case 3: /* (1,2) Core Density */
1939:screens.c     **** 				selection = 5; /* (1,3) Net Layers */
1940:screens.c     **** 				break;
1941:screens.c     **** 			case 4: /* (2,2) Bale Density */
1942:screens.c     **** 				selection = 5; /* (1,3) Net Layers */
1943:screens.c     **** 				break;
1944:screens.c     **** 			case 5: /* (1,3) Net Layers */
1945:screens.c     **** 				break;
1946:screens.c     **** 			}
1947:screens.c     **** 		}
1948:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
1949:screens.c     **** 		{
1950:screens.c     **** 			switch( selection )
1951:screens.c     **** 			{
1952:screens.c     **** 			case 0: /* (1,1) Bale Profile */
1953:screens.c     **** 				break;
1954:screens.c     **** 			case 1: /* (2,1) Core Diameter */
1955:screens.c     **** 				selection = 0; /* (1,1) Bale Profile */
1956:screens.c     **** 				break;
1957:screens.c     **** 			case 2: /* (3,1) Bale Diameter */
1958:screens.c     **** 				selection = 1; /* (2,1) Core Diameter */
1959:screens.c     **** 				break;
1960:screens.c     **** 			case 3: /* (1,2) Core Density */
1961:screens.c     **** 				selection = 2; /* (3,1) Bale Diameter */
1962:screens.c     **** 				break;
1963:screens.c     **** 			case 4: /* (2,2) Bale Density */
1964:screens.c     **** 				selection = 3; /* (1,2) Core Density */
1965:screens.c     **** 				break;
1966:screens.c     **** 			case 5: /* (1,3) Net Layers */
1967:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
1968:screens.c     **** 				break;
1969:screens.c     **** 			}
1970:screens.c     **** 		}
1971:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
1972:screens.c     **** 		{
1973:screens.c     **** 			switch( selection )
1974:screens.c     **** 			{
1975:screens.c     **** 			case 0: /* (1,1) Bale Profile */
1976:screens.c     **** 				selection = 1; /* (2,1) Core Diameter */
1977:screens.c     **** 				break;
1978:screens.c     **** 			case 1: /* (2,1) Core Diameter */
1979:screens.c     **** 				selection = 2; /* (3,1) Bale Diameter */
1980:screens.c     **** 				break;
1981:screens.c     **** 			case 2: /* (3,1) Bale Diameter */
1982:screens.c     **** 				selection = 3; /* (1,2) Core Density */
1983:screens.c     **** 				break;
1984:screens.c     **** 			case 3: /* (1,2) Core Density */
1985:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
1986:screens.c     **** 				break;
1987:screens.c     **** 			case 4: /* (2,2) Bale Density */
1988:screens.c     **** 				selection = 5; /* (1,3) Net Layers */
1989:screens.c     **** 				break;
1990:screens.c     **** 			case 5: /* (1,3) Net Layers */
1991:screens.c     **** 				break;
1992:screens.c     **** 			}
1993:screens.c     **** 		}
1994:screens.c     **** 		else // No key press
1995:screens.c     **** 		{
1996:screens.c     **** 			TryingToSetBaleDiaBelowCore = 0;
1997:screens.c     **** 		}
1998:screens.c     **** 
1999:screens.c     **** 	} /* end if( key_status ) */
2000:screens.c     **** 
2001:screens.c     **** 
2002:screens.c     **** 	/* -----------------------------------------------------------
2003:screens.c     **** 	 * Selection pointer & Icon highlighting */
2004:screens.c     **** 
2005:screens.c     **** 	if( selection != old_selection )
2006:screens.c     **** 	{
2007:screens.c     **** 		/* Clear old selection */
2008:screens.c     **** 		switch( old_selection )
2009:screens.c     **** 		{
2010:screens.c     **** 		case 0: /* (1,1) */
2011:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETE
2012:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
2013:screens.c     **** 			break;
2014:screens.c     **** 		case 1: /* (2,1) */ 
2015:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETE
2016:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
2017:screens.c     **** 			break;
2018:screens.c     **** 		case 2: /* (3,1) */ 
2019:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETE
2020:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
2021:screens.c     **** 			break;
2022:screens.c     **** 		case 3: /* (1,2) */ 
2023:screens.c     **** 			write_bitmap( adm, ICON_CORE_DENSITY, ICON_CORE_DENSITY_X, ICON_CORE_DENSITY_Y, AND );
2024:screens.c     **** 			break;
2025:screens.c     **** 		case 4: /* (2,2) */
2026:screens.c     **** 			write_bitmap( adm, ICON_BALE_DENSITY, ICON_BALE_DENSITY_X, ICON_BALE_DENSITY_Y, AND );
2027:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
2028:screens.c     **** 			break;
2029:screens.c     **** 		case 5: /* (1,3) */ 
2030:screens.c     **** 			write_bitmap( adm, ICON_NET_LAYERS, ICON_NET_LAYERS_X, ICON_NET_LAYERS_Y, AND );
2031:screens.c     **** 			break;
2032:screens.c     **** 		}
2033:screens.c     **** 
2034:screens.c     **** 		/* Draw new selection */
2035:screens.c     **** 		switch( selection )
2036:screens.c     **** 		{
2037:screens.c     **** 		case 0: /* (1,1) */
2038:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_SELECTED,  ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X,
2039:screens.c     **** 			break;
2040:screens.c     **** 		case 1: /* (2,1) */ 
2041:screens.c     **** 			write_bitmap( adm, ICON_CORE_DIAMETER_SELECTED, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X,
2042:screens.c     **** 			break;
2043:screens.c     **** 		case 2: /* (3,1) */ 
2044:screens.c     **** 			write_bitmap( adm, ICON_BALE_DIAMETER_SELECTED, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X,
2045:screens.c     **** 			break;
2046:screens.c     **** 		case 3: /* (1,2) */ 
2047:screens.c     **** 			write_bitmap( adm, ICON_CORE_DENSITY_SELECTED, ICON_CORE_DENSITY_X, ICON_CORE_DENSITY_Y, OR );
2048:screens.c     **** 			break;
2049:screens.c     **** 		case 4: /* (2,2) */
2050:screens.c     **** 			write_bitmap( adm, ICON_BALE_DENSITY_SELECTED, ICON_BALE_DENSITY_X, ICON_BALE_DENSITY_Y, OR );
2051:screens.c     **** 			break;
2052:screens.c     **** 		case 5: /* (1,3) */ 
2053:screens.c     **** 			write_bitmap( adm, ICON_NET_LAYERS_SELECTED, ICON_NET_LAYERS_X, ICON_NET_LAYERS_Y, OR );
2054:screens.c     **** 			break;
2055:screens.c     **** 		}
2056:screens.c     **** 	} /* end if( selection != old_selection ) */
2057:screens.c     **** 
2058:screens.c     **** 
2059:screens.c     **** 	/* -----------------------------------------------------------
2060:screens.c     **** 	 * Update values */
2061:screens.c     **** 
2062:screens.c     **** 	/* Bale Profile (Preset A - E) */
2063:screens.c     **** 	draw_box( adm, ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y, ICON_BALE_PROFILE_SETTING
2064:screens.c     **** 	switch( pFac.pf.GW302_BaleProfile )
2065:screens.c     **** 	{
2066:screens.c     **** 	case BP_PRESET_A:
2067:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_A,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
2068:screens.c     **** 		break;
2069:screens.c     **** 	case BP_PRESET_B:
2070:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_B,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
2071:screens.c     **** 		break;
2072:screens.c     **** 	case BP_PRESET_C:
2073:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_C,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
2074:screens.c     **** 		break;
2075:screens.c     **** 	case BP_PRESET_D:
2076:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_D,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
2077:screens.c     **** 		break;
2078:screens.c     **** 	default: /* BP_PRESET_E */
2079:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_E,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
2080:screens.c     **** 		break;
2081:screens.c     **** 	} /* end switch( pFac.pf.GW302_BaleProfile ) */
2082:screens.c     **** 
2083:screens.c     **** 	sprintf( tstring, "%3u", pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] );
2084:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_CORE_DIAMETER_TEXT_X, ICON_CORE_DIAMETER_TEXT_Y, FIXED );
2085:screens.c     **** 
2086:screens.c     **** 	sprintf( tstring, "%3u", pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] );
2087:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_BALE_DIAMETER_TEXT_X, ICON_BALE_DIAMETER_TEXT_Y, FIXED );
2088:screens.c     **** 
2089:screens.c     **** 	sprintf( tstring, "%3u", Bar[pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] - 1] );
2090:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_CORE_DENSITY_TEXT_X, ICON_CORE_DENSITY_TEXT_Y, FIXED );
2091:screens.c     **** 
2092:screens.c     **** 	sprintf( tstring, "%3u", Bar[pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] - 1] );
2093:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_BALE_DENSITY_TEXT_X, ICON_BALE_DENSITY_TEXT_Y, FIXED );
2094:screens.c     **** 
2095:screens.c     **** 	sprintf( tstring, "%2.1f", pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] );
2096:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_NET_LAYERS_TEXT_X, ICON_NET_LAYERS_TEXT_Y, FIXED );
2097:screens.c     **** 
2098:screens.c     **** 
2099:screens.c     **** 	/* -----------------------------------------------------------
2100:screens.c     **** 	 * Flash currently selected value */
2101:screens.c     **** 
2102:screens.c     **** 	if( half_second )
2103:screens.c     **** 	{
2104:screens.c     **** 		/* flashing currently selected value off */
2105:screens.c     **** 		switch( selection )
2106:screens.c     **** 		{
2107:screens.c     **** 		case 0: /* (1,1) */
2108:screens.c     **** 			draw_box( adm, ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y, ICON_BALE_PROFILE_SETTI
2109:screens.c     **** 			break;
2110:screens.c     **** 		case 1: /* (2,1) */ 
2111:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_CORE_DIAMETER_TEXT_X, ICON_CORE_DIAMETER_TEXT_Y, FIXED );
2112:screens.c     **** 			break;
2113:screens.c     **** 		case 2: /* (3,1) */ 
2114:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_BALE_DIAMETER_TEXT_X, ICON_BALE_DIAMETER_TEXT_Y, FIXED );
2115:screens.c     **** 			if( TryingToSetBaleDiaBelowCore )
2116:screens.c     **** 			{
2117:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_CORE_DIAMETER_TEXT_X, ICON_CORE_DIAMETER_TEXT_Y, FIXED ); /
2118:screens.c     **** 			}
2119:screens.c     **** 			break;
2120:screens.c     **** 		case 3: /* (1,2) */ 
2121:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_CORE_DENSITY_TEXT_X, ICON_CORE_DENSITY_TEXT_Y, FIXED );
2122:screens.c     **** 			break;
2123:screens.c     **** 		case 4: /* (2,2) */
2124:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_BALE_DENSITY_TEXT_X, ICON_BALE_DENSITY_TEXT_Y, FIXED );
2125:screens.c     **** 			break;
2126:screens.c     **** 		case 5: /* (1,3) */ 
2127:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_NET_LAYERS_TEXT_X, ICON_NET_LAYERS_TEXT_Y, FIXED );
2128:screens.c     **** 			break;
2129:screens.c     **** 		}
2130:screens.c     **** 	} /* end if( half_second ) */
2131:screens.c     **** 
2132:screens.c     **** 
2133:screens.c     **** 	/* -----------------------------------------------------------
2134:screens.c     **** 	 * Drawing tabs -- OL, IL & NAVIGATION tab */
2135:screens.c     **** 
2136:screens.c     **** 	if( selection != old_selection )
2137:screens.c     **** 	{
2138:screens.c     **** 		// Clear OL, IL & NAVIGATION tab area -- avoiding deleting section of frame border
2139:screens.c     **** 		draw_box( adm, 1, 102, 62+36-1, 102+24-1,   CLEAR ); 
2140:screens.c     **** 
2141:screens.c     **** 		switch( selection )
2142:screens.c     **** 		{
2143:screens.c     **** 		case 0: /* (1,1) Bale Profile */
2144:screens.c     **** 			write_bitmap( adm, TABLEFT,    0, 107, OR ); // <
2145:screens.c     **** 			write_bitmap( adm, TABRIGHT,  31, 107, OR ); // >
2146:screens.c     **** 			write_bitmap( adm, TABNAV_DR, 62, 102, OR ); // NAVIGATION: Down Right
2147:screens.c     **** 			break;
2148:screens.c     **** 		case 1: /* (2,1) Core Diameter */
2149:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR ); // -
2150:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR ); // +
2151:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
2152:screens.c     **** 			break;
2153:screens.c     **** 		case 2: /* (3,1) Bale Diameter */
2154:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR ); // -
2155:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR ); // +
2156:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
2157:screens.c     **** 			break;
2158:screens.c     **** 		case 3: /* (1,2) Core Density */
2159:screens.c     **** 			write_bitmap( adm, TABMINUS,     0, 107, OR ); // -
2160:screens.c     **** 			write_bitmap( adm, TABPLUS,     31, 107, OR ); // +
2161:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
2162:screens.c     **** 			break;
2163:screens.c     **** 		case 4: /* (2,2) Bale Density */
2164:screens.c     **** 			write_bitmap( adm, TABMINUS,     0, 107, OR ); // -
2165:screens.c     **** 			write_bitmap( adm, TABPLUS,     31, 107, OR ); // +
2166:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
2167:screens.c     **** 			break;
2168:screens.c     **** 		case 5: /* (1,3) Net Layers */
2169:screens.c     **** 			write_bitmap( adm, TABMINUS,   0, 107, OR ); // -
2170:screens.c     **** 			write_bitmap( adm, TABPLUS,   31, 107, OR ); // +
2171:screens.c     **** 			write_bitmap( adm, TABNAV_UL, 62, 102, OR ); // NAVIGATION: Up Left
2172:screens.c     **** 			break;
2173:screens.c     **** 		}
2174:screens.c     **** 	} /* end if( selection != old_selection ) */
2175:screens.c     **** 
2176:screens.c     **** }
2177:screens.c     **** // -----------------------------------------------------------
2178:screens.c     **** 
2179:screens.c     **** 
2180:screens.c     **** // -----------------------------------------------------------
2181:screens.c     **** // Function Name       : screen111
2182:screens.c     **** // Description         : Machine Menu - Machine Setup Menu                 
2183:screens.c     **** // -----------------------------------------------------------
2184:screens.c     **** 
2185:screens.c     **** /*  Origin          Page 1                 Origin          Page 2            
2186:screens.c     ****        x ----------------------------         x ----------------------------
2187:screens.c     ****        | (1,1) Diameter Correction   |        | (1,1) Bale Indicators       |
2188:screens.c     ****        | ----------------------------          -----------------------------
2189:screens.c     ****        | (1,2) Net Delay             |        | (1,2) Fill Pot Zero (Reset) |
2190:screens.c     ****        | ----------------------------          -----------------------------
2191:screens.c     ****        | (1,3) Net Metres (Reset)    |        |                             |
2192:screens.c     ****        | ----------------------------          -----------------------------
2193:screens.c     ****        | (1,4) Pre Warning Beep      |        |                             |
2194:screens.c     ****          ----------------------------          ---------------------------- */
2195:screens.c     ****  
2196:screens.c     **** /* Origin */
2197:screens.c     **** #define MACHINE_SETUP_MENU_ICONS_ORIGIN_X         0
2198:screens.c     **** #define MACHINE_SETUP_MENU_ICONS_ORIGIN_Y         0
2199:screens.c     **** 
2200:screens.c     **** /* Page 1 - Grid position (1,1) */
2201:screens.c     **** #define ICON_DIAMETER_CORRECTION_OFFSET_X        32 
2202:screens.c     **** #define ICON_DIAMETER_CORRECTION_OFFSET_Y        5
2203:screens.c     **** #define ICON_DIAMETER_CORRECTION_TEXT_OFFSET_X   92 - 10   /* For right justified text */
2204:screens.c     **** #define ICON_DIAMETER_CORRECTION_TEXT_OFFSET_Y   15 - 5
2205:screens.c     **** 
2206:screens.c     **** /* Page 1 - Grid position (1,2) */
2207:screens.c     **** #define ICON_NET_DELAY_OFFSET_X        32 
2208:screens.c     **** #define ICON_NET_DELAY_OFFSET_Y        32
2209:screens.c     **** #define ICON_NET_DELAY_TEXT_OFFSET_X   99 - 32
2210:screens.c     **** #define ICON_NET_DELAY_TEXT_OFFSET_Y   38 - 32
2211:screens.c     **** 
2212:screens.c     **** /* Page 1 - Grid position (1.3) */
2213:screens.c     **** #define ICON_NET_METRES_OFFSET_X        32
2214:screens.c     **** #define ICON_NET_METRES_OFFSET_Y        56 - 1 - 1
2215:screens.c     **** #define ICON_NET_METRES_TEXT_OFFSET_X   81        /* For right justified text */
2216:screens.c     **** #define ICON_NET_METRES_TEXT_OFFSET_Y   63 - 56
2217:screens.c     **** 
2218:screens.c     **** /* Page 1 - Grid position (1,4) */
2219:screens.c     **** #define ICON_PRE_WARNING_BEEP_OFFSET_X          32 
2220:screens.c     **** #define ICON_PRE_WARNING_BEEP_OFFSET_Y          82 - 1 - 2
2221:screens.c     **** #define ICON_PRE_WARNING_BEEP_TEXT_OFFSET_X     102 - 32 + (2*6)  /* For right justified text */
2222:screens.c     **** #define ICON_PRE_WARNING_BEEP_TEXT_OFFSET_Y     88 - 82
2223:screens.c     **** 
2224:screens.c     **** /* Page 2 - Grid position (1,1) */
2225:screens.c     **** #define ICON_BALE_INDICATOR_OFFSET_X           32
2226:screens.c     **** #define ICON_BALE_INDICATOR_OFFSET_Y           10
2227:screens.c     **** #define ICON_BALE_INDICATOR_SETTING_OFFSET_X  113 - 32
2228:screens.c     **** #define ICON_BALE_INDICATOR_SETTING_OFFSET_Y   10 - 10
2229:screens.c     **** 
2230:screens.c     **** /* Page 2 - Grid position (1,2) */
2231:screens.c     **** #define ICON_FILL_POT_ZERO_OFFSET_X        32
2232:screens.c     **** #define ICON_FILL_POT_ZERO_OFFSET_Y        33
2233:screens.c     **** #define ICON_FILL_POT_ZERO_TEXT_OFFSET_X   99 - 32
2234:screens.c     **** #define ICON_FILL_POT_ZERO_TEXT_OFFSET_Y   38 - 33
2235:screens.c     **** 
2236:screens.c     **** /* Page 2 - Grid position (1,3) */
2237:screens.c     **** #define ICON_TWINE_ZERO_OFFSET_X        42
2238:screens.c     **** #define ICON_TWINE_ZERO_OFFSET_Y        56 - 1 - 1
2239:screens.c     **** #define ICON_TWINE_ZERO_TEXT_OFFSET_X   81
2240:screens.c     **** #define ICON_TWINE_ZERO_TEXT_OFFSET_Y   63 - 56
2241:screens.c     **** 
2242:screens.c     **** /* Top left icon co-ordinates (x,y) */
2243:screens.c     **** 
2244:screens.c     **** #define ICON_DIAMETER_CORRECTION_X  MACHINE_SETUP_MENU_ICONS_ORIGIN_X + ICON_DIAMETER_CORRECTION_OF
2245:screens.c     **** #define ICON_DIAMETER_CORRECTION_Y  MACHINE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_DIAMETER_CORRECTION_OF
2246:screens.c     **** 
2247:screens.c     **** #define ICON_NET_DELAY_X            MACHINE_SETUP_MENU_ICONS_ORIGIN_X + ICON_NET_DELAY_OFFSET_X
2248:screens.c     **** #define ICON_NET_DELAY_Y            MACHINE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_NET_DELAY_OFFSET_Y
2249:screens.c     **** 
2250:screens.c     **** #define ICON_NET_METRES_X           MACHINE_SETUP_MENU_ICONS_ORIGIN_X + ICON_NET_METRES_OFFSET_X
2251:screens.c     **** #define ICON_NET_METRES_Y           MACHINE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_NET_METRES_OFFSET_Y
2252:screens.c     **** 
2253:screens.c     **** #define ICON_PRE_WARNING_BEEP_X     MACHINE_SETUP_MENU_ICONS_ORIGIN_X + ICON_PRE_WARNING_BEEP_OFFSE
2254:screens.c     **** #define ICON_PRE_WARNING_BEEP_Y     MACHINE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_PRE_WARNING_BEEP_OFFSE
2255:screens.c     **** 
2256:screens.c     **** #define ICON_BALE_INDICATOR_X       MACHINE_SETUP_MENU_ICONS_ORIGIN_X + ICON_BALE_INDICATOR_OFFSET_
2257:screens.c     **** #define ICON_BALE_INDICATOR_Y       MACHINE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_BALE_INDICATOR_OFFSET_
2258:screens.c     **** 
2259:screens.c     **** #define ICON_FILL_POT_ZERO_X        MACHINE_SETUP_MENU_ICONS_ORIGIN_X + ICON_FILL_POT_ZERO_OFFSET_X
2260:screens.c     **** #define ICON_FILL_POT_ZERO_Y        MACHINE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_FILL_POT_ZERO_OFFSET_Y
2261:screens.c     **** 
2262:screens.c     **** #define ICON_TWINE_ZERO_X       	MACHINE_SETUP_MENU_ICONS_ORIGIN_X + ICON_TWINE_ZERO_OFFSET_X
2263:screens.c     **** #define ICON_TWINE_ZERO_Y      	 	MACHINE_SETUP_MENU_ICONS_ORIGIN_Y + ICON_TWINE_ZERO_OFFSET_Y
2264:screens.c     **** 
2265:screens.c     **** 
2266:screens.c     **** /* Text (top left) co-ordinates (textx,texty) / Setting icon & dimensions */
2267:screens.c     **** 
2268:screens.c     **** #define ICON_DIAMETER_CORRECTION_TEXT_X   ICON_DIAMETER_CORRECTION_X + ICON_DIAMETER_CORRECTION_TEX
2269:screens.c     **** #define ICON_DIAMETER_CORRECTION_TEXT_Y   ICON_DIAMETER_CORRECTION_Y + ICON_DIAMETER_CORRECTION_TEX
2270:screens.c     **** 
2271:screens.c     **** #define ICON_NET_DELAY_TEXT_X             ICON_NET_DELAY_X + ICON_NET_DELAY_TEXT_OFFSET_X
2272:screens.c     **** #define ICON_NET_DELAY_TEXT_Y             ICON_NET_DELAY_Y + ICON_NET_DELAY_TEXT_OFFSET_Y
2273:screens.c     **** 
2274:screens.c     **** #define ICON_NET_METRES_TEXT_X            ICON_NET_METRES_X + ICON_NET_METRES_TEXT_OFFSET_X
2275:screens.c     **** #define ICON_NET_METRES_TEXT_Y            ICON_NET_METRES_Y + ICON_NET_METRES_TEXT_OFFSET_Y
2276:screens.c     **** 
2277:screens.c     **** #define ICON_PRE_WARNING_BEEP_TEXT_X      ICON_PRE_WARNING_BEEP_X + ICON_PRE_WARNING_BEEP_TEXT_OFFS
2278:screens.c     **** #define ICON_PRE_WARNING_BEEP_TEXT_Y      ICON_PRE_WARNING_BEEP_Y + ICON_PRE_WARNING_BEEP_TEXT_OFFS
2279:screens.c     **** 
2280:screens.c     **** #define ICON_BALE_INDICATOR_SETTING_X     ICON_BALE_INDICATOR_X + ICON_BALE_INDICATOR_SETTING_OFFSE
2281:screens.c     **** #define ICON_BALE_INDICATOR_SETTING_Y     ICON_BALE_INDICATOR_Y + ICON_BALE_INDICATOR_SETTING_OFFSE
2282:screens.c     **** #define ICON_BALE_INDICATOR_SETTING_X2    ICON_BALE_INDICATOR_SETTING_X + 12 - 1  /* ICON_BALE_INDI
2283:screens.c     **** #define ICON_BALE_INDICATOR_SETTING_Y2    ICON_BALE_INDICATOR_SETTING_Y + 18 - 1  /* ICON_BALE_INDI
2284:screens.c     **** 
2285:screens.c     **** #define ICON_FILL_POT_ZERO_TEXT_X         ICON_FILL_POT_ZERO_X + ICON_FILL_POT_ZERO_TEXT_OFFSET_X
2286:screens.c     **** #define ICON_FILL_POT_ZERO_TEXT_Y         ICON_FILL_POT_ZERO_Y + ICON_FILL_POT_ZERO_TEXT_OFFSET_Y
2287:screens.c     **** 
2288:screens.c     **** #define ICON_TWINE_TEXT_X        		  ICON_TWINE_ZERO_X + ICON_TWINE_ZERO_TEXT_OFFSET_X
2289:screens.c     **** #define ICON_TWINE_TEXT_Y        		  ICON_TWINE_ZERO_Y + ICON_TWINE_ZERO_TEXT_OFFSET_Y
2290:screens.c     **** 
2291:screens.c     **** 
2292:screens.c     **** /* Page (of icons) */
2293:screens.c     **** #define PAGE_X1    ICON_DIAMETER_CORRECTION_X
2294:screens.c     **** #define PAGE_Y1    ICON_DIAMETER_CORRECTION_Y
2295:screens.c     **** #define PAGE_X2    ICON_PRE_WARNING_BEEP_X + 100 - 1  /* ICON_DIAMETER_CORRECTION bitmap X dim - 1 
2296:screens.c     **** #define PAGE_Y2    ICON_PRE_WARNING_BEEP_Y + 19  - 1  /* ICON_PRE_WARNING_BEEP bitmap Y dim - 1    
2297:screens.c     **** 
2298:screens.c     **** /* Scroll bar */
2299:screens.c     **** #define ICON_SCROLL_BAR_X      146
2300:screens.c     **** #define ICON_SCROLL_BAR_Y       11
2301:screens.c     **** 
2302:screens.c     **** 
2303:screens.c     **** void screen111( unsigned int lkey )
2304:screens.c     **** {
2305:screens.c     **** 	unsigned int  key_status;
2306:screens.c     **** 	unsigned char old_selection;
2307:screens.c     **** 	unsigned char old_page;
2308:screens.c     **** 
2309:screens.c     **** 	static unsigned char page;
2310:screens.c     **** 
2311:screens.c     **** 
2312:screens.c     **** 	if( startup != 1)
2313:screens.c     **** 	{
2314:screens.c     **** 		startup = 1;
2315:screens.c     **** 
2316:screens.c     **** 		draw_frame( adm );
2317:screens.c     **** 
2318:screens.c     **** 
2319:screens.c     **** 		/* -----------------------------------------------------------
2320:screens.c     **** 		 * Drawing tabs -- IR & OR tab */
2321:screens.c     **** 
2322:screens.c     **** 		write_bitmap( adm, TAB,     99, 107, OR );
2323:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
2324:screens.c     **** 
2325:screens.c     **** 
2326:screens.c     **** 		old_selection = 0xff;
2327:screens.c     **** 		old_page = 0xff;
2328:screens.c     **** 	}
2329:screens.c     **** 	else
2330:screens.c     **** 	{
2331:screens.c     **** 		old_selection = selection;
2332:screens.c     **** 		old_page = page;
2333:screens.c     **** 	}
2334:screens.c     **** 
2335:screens.c     **** #ifdef SHOW_TIME
2336:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
2337:screens.c     **** #endif	
2338:screens.c     **** 
2339:screens.c     **** 	/* -----------------------------------------------------------
2340:screens.c     **** 	 * Key press */
2341:screens.c     **** 
2342:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
2343:screens.c     **** 
2344:screens.c     **** 	if( key_status )
2345:screens.c     **** 	{		
2346:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
2347:screens.c     **** 
2348:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
2349:screens.c     **** 		{
2350:screens.c     **** 			escape = 1;
2351:screens.c     **** 			page = 0;
2352:screens.c     **** 		}
2353:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey -)
2354:screens.c     **** 		{
2355:screens.c     **** 			if( page == 0 )
2356:screens.c     **** 			{
2357:screens.c     **** 				switch( selection )
2358:screens.c     **** 				{
2359:screens.c     **** 				case 0: /* Page 1 - Grid position (1,1) - Diameter Correction*/
2360:screens.c     **** 					// -
2361:screens.c     **** 					pFac.pf.GW302_DiameterCorrection -= PF_GW302_DiameterCorrection[PF_STEP];
2362:screens.c     **** 					if( pFac.pf.GW302_DiameterCorrection < PF_GW302_DiameterCorrection[PF_MIN] )
2363:screens.c     **** 						pFac.pf.GW302_DiameterCorrection = PF_GW302_DiameterCorrection[PF_MIN];  // Limiting to minim
2364:screens.c     **** 					break;
2365:screens.c     **** 				case 1: /* Page 1 - Grid position (1,2) - Net Delay */
2366:screens.c     **** 					// -
2367:screens.c     **** 					pFac.pf.GW302_NetDelay -= PF_GW302_NetDelay[PF_STEP];
2368:screens.c     **** 					if( pFac.pf.GW302_NetDelay < PF_GW302_NetDelay[PF_MIN] )
2369:screens.c     **** 						pFac.pf.GW302_NetDelay = PF_GW302_NetDelay[PF_MIN];  // Limiting to minimum value
2370:screens.c     **** 					break;
2371:screens.c     **** 				case 2: /* Page 1 - Grid position (1.3) - Net Metres */
2372:screens.c     **** 					// RESET 
2373:screens.c     **** 					window = screen125;	
2374:screens.c     **** 					break;
2375:screens.c     **** 				case 3: /* Page 1 - Grid position (1,4) - Pre Warning Beep */
2376:screens.c     **** 					// -
2377:screens.c     **** 					pFac.pf.GW302_PreWarningBeep -= PF_GW302_PreWarningBeep[PF_STEP];
2378:screens.c     **** 					if( pFac.pf.GW302_PreWarningBeep < PF_GW302_PreWarningBeep[PF_MIN] )
2379:screens.c     **** 						pFac.pf.GW302_PreWarningBeep = PF_GW302_PreWarningBeep[PF_MIN];    // Limiting to minimum val
2380:screens.c     **** 					break;
2381:screens.c     **** 				}
2382:screens.c     **** 			}
2383:screens.c     **** 			else /* page == 1 */
2384:screens.c     **** 			{
2385:screens.c     **** 				switch( selection )
2386:screens.c     **** 				{
2387:screens.c     **** 				case 0: /* Page 2 - Grid position (1,1) - Bale Shape Indicator  ( OFF < ON < BEEP < OFF ) */
2388:screens.c     **** 					// <
2389:screens.c     **** 					if( pFac.pf.GW302_BaleShapeIndicator == BSI_ON )
2390:screens.c     **** 					{
2391:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_OFF;
2392:screens.c     **** 					}
2393:screens.c     **** 					else if( pFac.pf.GW302_BaleShapeIndicator == BSI_BEEP )
2394:screens.c     **** 					{
2395:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_ON;
2396:screens.c     **** 					}
2397:screens.c     **** 					else /* pFac.pf.GW302_BaleShapeIndicator == BSI_OFF */
2398:screens.c     **** 					{
2399:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_BEEP;
2400:screens.c     **** 					}
2401:screens.c     **** 					break;
2402:screens.c     **** 				case 1: /* Page 2 - Grid position (1,2) - Bale Shape Indicator Zero */
2403:screens.c     **** 					// RESET 
2404:screens.c     **** 					window = screen124; // Fill Pot Zero Reset Screen (AKA Bale Shape Indicator Zero)
2405:screens.c     **** 					break;
2406:screens.c     **** 				case 2: /* Page 2 - Grid position (1,2) - Bale Shape Indicator Zero */
2407:screens.c     **** 
2408:screens.c     **** 					if( pFac.pf.GW302_NetTwineOption > PF_GW302_NetTwineOption[PF_MIN] )  /* Net/Twine ICON  [Net/
2409:screens.c     **** 					{
2410:screens.c     **** 						pFac.pf.GW302_NetTwineOption--;
2411:screens.c     **** 					}
2412:screens.c     **** 					else
2413:screens.c     **** 					{
2414:screens.c     **** 						pFac.pf.GW302_NetTwineOption = PF_GW302_NetTwineOption[PF_MAX];
2415:screens.c     **** 					}
2416:screens.c     **** 
2417:screens.c     **** 					draw_box( adm, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y, ICON_TWINE_ZERO_X + 100, ICON_TWINE_ZERO_
2418:screens.c     **** 						switch( pFac.pf.GW302_NetTwineOption )
2419:screens.c     **** 						{
2420:screens.c     **** 						case TO_TWINE:
2421:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO
2422:screens.c     **** 							break;
2423:screens.c     **** 						default:  /*case NTO_NET*/
2424:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_NET_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y
2425:screens.c     **** 							break;
2426:screens.c     **** 						}
2427:screens.c     **** 
2428:screens.c     **** 					break;
2429:screens.c     **** 				}
2430:screens.c     **** 			}
2431:screens.c     **** 			SavecalDelayWithinMenus = 1;
2432:screens.c     **** 		}
2433:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey +)
2434:screens.c     **** 		{
2435:screens.c     **** 			if( page == 0 )
2436:screens.c     **** 			{
2437:screens.c     **** 				switch( selection )
2438:screens.c     **** 				{
2439:screens.c     **** 				case 0: /* Page 1 - Grid position (1,1) - Diameter Correction*/
2440:screens.c     **** 					// +
2441:screens.c     **** 					pFac.pf.GW302_DiameterCorrection += PF_GW302_DiameterCorrection[PF_STEP];
2442:screens.c     **** 					if( pFac.pf.GW302_DiameterCorrection > PF_GW302_DiameterCorrection[PF_MAX] )
2443:screens.c     **** 						pFac.pf.GW302_DiameterCorrection = PF_GW302_DiameterCorrection[PF_MAX];  // Limiting to maxim
2444:screens.c     **** 					break;
2445:screens.c     **** 				case 1: /* Page 1 - Grid position (1,2) - Net Delay */
2446:screens.c     **** 					// +
2447:screens.c     **** 					pFac.pf.GW302_NetDelay += PF_GW302_NetDelay[PF_STEP];
2448:screens.c     **** 					if( pFac.pf.GW302_NetDelay > PF_GW302_NetDelay[PF_MAX] )
2449:screens.c     **** 						pFac.pf.GW302_NetDelay = PF_GW302_NetDelay[PF_MAX];  // Limiting to maximum value
2450:screens.c     **** 					break;
2451:screens.c     **** 				case 2: /* Page 1 - Grid position (1.3) - Net Metres */
2452:screens.c     **** 					break;
2453:screens.c     **** 				case 3: /* Page 1 - Grid position (1,4) - Pre Warning Beep */
2454:screens.c     **** 					// +
2455:screens.c     **** 					pFac.pf.GW302_PreWarningBeep += PF_GW302_PreWarningBeep[PF_STEP];
2456:screens.c     **** 					if( pFac.pf.GW302_PreWarningBeep > PF_GW302_PreWarningBeep[PF_MAX] )
2457:screens.c     **** 						pFac.pf.GW302_PreWarningBeep = PF_GW302_PreWarningBeep[PF_MAX];  // Limiting to maximum value
2458:screens.c     **** 					break;
2459:screens.c     **** 				}
2460:screens.c     **** 			}
2461:screens.c     **** 			else /* page == 1 */
2462:screens.c     **** 			{
2463:screens.c     **** 				switch( selection )
2464:screens.c     **** 				{
2465:screens.c     **** 				case 0: /* Page 2 - Grid position (1,1) - Bale Shape Indicator  ( OFF < ON < BEEP < OFF ) */
2466:screens.c     **** 					// >
2467:screens.c     **** 					if( pFac.pf.GW302_BaleShapeIndicator == BSI_ON )
2468:screens.c     **** 					{
2469:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_BEEP;
2470:screens.c     **** 					}
2471:screens.c     **** 					else if( pFac.pf.GW302_BaleShapeIndicator == BSI_BEEP )
2472:screens.c     **** 					{
2473:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_OFF;
2474:screens.c     **** 					}
2475:screens.c     **** 					else /* pFac.pf.GW302_BaleShapeIndicator == BSI_OFF */
2476:screens.c     **** 					{
2477:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_ON;
2478:screens.c     **** 					}
2479:screens.c     **** 					break;
2480:screens.c     **** 				case 1: /* Page 2 - Grid position (1,2) - Bale Shape Indicator Zero */ 
2481:screens.c     **** 					break;
2482:screens.c     **** 				case 2: /* Page 2 - Grid position (1,2) - Bale Shape Indicator Zero */
2483:screens.c     **** 					if( pFac.pf.GW302_NetTwineOption < PF_GW302_NetTwineOption[PF_MAX] )  /* Net/Twine ICON  [Net/
2484:screens.c     **** 					{
2485:screens.c     **** 						pFac.pf.GW302_NetTwineOption++; /*TO_TWINE*/
2486:screens.c     **** 					}
2487:screens.c     **** 					else
2488:screens.c     **** 					{
2489:screens.c     **** 						pFac.pf.GW302_NetTwineOption = PF_GW302_NetTwineOption[PF_MIN]; /*TO_NET*/
2490:screens.c     **** 					}
2491:screens.c     **** 					draw_box( adm, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y, ICON_TWINE_ZERO_X + 100, ICON_TWINE_ZERO_
2492:screens.c     **** 
2493:screens.c     **** 						switch( pFac.pf.GW302_NetTwineOption )
2494:screens.c     **** 						{
2495:screens.c     **** 						case TO_TWINE:
2496:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO
2497:screens.c     **** 							break;
2498:screens.c     **** 						default:  /*case TO_NET*/
2499:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_NET_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y
2500:screens.c     **** 							break;
2501:screens.c     **** 						}
2502:screens.c     **** 					break;
2503:screens.c     **** 				}		
2504:screens.c     **** 			}
2505:screens.c     **** 			SavecalDelayWithinMenus = 1;
2506:screens.c     **** 		}
2507:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
2508:screens.c     **** 		{	
2509:screens.c     **** 			if( page == 0 )
2510:screens.c     **** 			{
2511:screens.c     **** 				if( selection )
2512:screens.c     **** 				{
2513:screens.c     **** 					selection--;
2514:screens.c     **** 				}
2515:screens.c     **** 			}
2516:screens.c     **** 			else /* page == 1 */
2517:screens.c     **** 			{
2518:screens.c     **** 				if( selection )
2519:screens.c     **** 				{
2520:screens.c     **** 					selection--;
2521:screens.c     **** 				}
2522:screens.c     **** 				else /* Goto first page */
2523:screens.c     **** 				{
2524:screens.c     **** 					selection = 3; /* last option */
2525:screens.c     **** 					page = 0;
2526:screens.c     **** 				}
2527:screens.c     **** 			}		
2528:screens.c     **** 		}
2529:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
2530:screens.c     **** 		{
2531:screens.c     **** 			if( page == 0 )
2532:screens.c     **** 			{
2533:screens.c     **** 				if( selection < 3 )
2534:screens.c     **** 				{
2535:screens.c     **** 					selection++;
2536:screens.c     **** 				}
2537:screens.c     **** 				else /* Goto second page */
2538:screens.c     **** 				{
2539:screens.c     **** 					selection = 0; /* first option */
2540:screens.c     **** 					page = 1;
2541:screens.c     **** 				}
2542:screens.c     **** 			}
2543:screens.c     **** 			else /* page == 1 */
2544:screens.c     **** 			{
2545:screens.c     **** 				if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
2546:screens.c     **** 				{
2547:screens.c     **** 					if( selection < 2 )
2548:screens.c     **** 					{
2549:screens.c     **** 						selection++;
2550:screens.c     **** 					}
2551:screens.c     **** 				}
2552:screens.c     **** 				else
2553:screens.c     **** 				{
2554:screens.c     **** 					if( selection < 1 )
2555:screens.c     **** 					{
2556:screens.c     **** 						selection++;
2557:screens.c     **** 					}
2558:screens.c     **** 				}
2559:screens.c     **** 			}		
2560:screens.c     **** 		}
2561:screens.c     **** 
2562:screens.c     **** 	} /* end if( key_status ) */
2563:screens.c     **** 
2564:screens.c     **** 
2565:screens.c     **** 	/* -----------------------------------------------------------
2566:screens.c     **** 	 * Drawing icons */
2567:screens.c     **** 
2568:screens.c     **** 	if( page != old_page )
2569:screens.c     **** 	{
2570:screens.c     **** 		draw_box( adm, PAGE_X1, PAGE_Y1, PAGE_X2, PAGE_Y2, CLEAR );
2571:screens.c     **** 
2572:screens.c     **** 		if( page == 0 )
2573:screens.c     **** 		{
2574:screens.c     **** 			write_bitmap( adm, ICON_DIAMETER_CORRECTION, ICON_DIAMETER_CORRECTION_X,  ICON_DIAMETER_CORRECTI
2575:screens.c     **** 			write_bitmap( adm, ICON_NET_DELAY,           ICON_NET_DELAY_X,            ICON_NET_DELAY_Y,     
2576:screens.c     **** 			write_bitmap( adm, ICON_NET_METRES,          ICON_NET_METRES_X,           ICON_NET_METRES_Y,    
2577:screens.c     **** 			write_bitmap( adm, ICON_PRE_WARNING_BEEP,    ICON_PRE_WARNING_BEEP_X,     ICON_PRE_WARNING_BEEP_
2578:screens.c     **** 		}
2579:screens.c     **** 		else /* page == 1 */
2580:screens.c     **** 		{
2581:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR,      ICON_BALE_INDICATOR_X,       ICON_BALE_INDICATOR_Y,
2582:screens.c     **** 			write_bitmap( adm, ICON_FILL_POT_ZERO,       ICON_FILL_POT_ZERO_X,        ICON_FILL_POT_ZERO_Y, 
2583:screens.c     **** 
2584:screens.c     **** 			if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
2585:screens.c     **** 			{/*write_bitmap( adm, ICON_FILL_POT_ZERO,       ICON_TWINE_ZERO_X,        	  ICON_TWINE_ZERO_Y, 
2586:screens.c     **** 				switch( pFac.pf.GW302_NetTwineOption )
2587:screens.c     **** 				{
2588:screens.c     **** 				case TO_TWINE:
2589:screens.c     **** 					write_bitmap( adm, ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y
2590:screens.c     **** 					break;
2591:screens.c     **** 				default:  /*case NTO_NET*/
2592:screens.c     **** 					write_bitmap( adm, ICON_NET_TWINE_WITH_NET_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y, 
2593:screens.c     **** 					break;
2594:screens.c     **** 				}
2595:screens.c     **** 			}
2596:screens.c     **** 		}
2597:screens.c     **** 	}
2598:screens.c     **** 
2599:screens.c     **** 
2600:screens.c     **** 	/* -----------------------------------------------------------
2601:screens.c     **** 	 * Drawing scroll bar */
2602:screens.c     **** 
2603:screens.c     **** 	if( page != old_page )
2604:screens.c     **** 	{
2605:screens.c     **** 		if( page == 0 )
2606:screens.c     **** 		{
2607:screens.c     **** 			write_bitmap( adm, ICON_SCROLL_BAR_PAGE_1_OF_2, ICON_SCROLL_BAR_X, ICON_SCROLL_BAR_Y, AND );
2608:screens.c     **** 		}
2609:screens.c     **** 		else /* page == 1 */
2610:screens.c     **** 		{
2611:screens.c     **** 			write_bitmap( adm, ICON_SCROLL_BAR_PAGE_2_OF_2, ICON_SCROLL_BAR_X, ICON_SCROLL_BAR_Y, AND );
2612:screens.c     **** 		}
2613:screens.c     **** 
2614:screens.c     **** 		draw_line( adm,   0, 0,   0, 127, OR ); /* restoring left-hand frame border */
2615:screens.c     **** 		draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
2616:screens.c     **** 	}
2617:screens.c     **** 
2618:screens.c     **** 
2619:screens.c     **** 	/* -----------------------------------------------------------
2620:screens.c     **** 	 * Drawing tabs -- OL, IL & NAVIGATION tab */
2621:screens.c     **** 
2622:screens.c     **** 	if( (selection != old_selection) || (page != old_page) )
2623:screens.c     **** 	{
2624:screens.c     **** 		/* Clear OL, IL & NAVIGATION tab area -- avoiding deleting section of frame border */
2625:screens.c     **** 		draw_box( adm, 1, 102, 62+36-1, 102+24-1,   CLEAR ); 
2626:screens.c     **** 
2627:screens.c     **** 		if( page == 0 )
2628:screens.c     **** 		{
2629:screens.c     **** 			switch( selection )
2630:screens.c     **** 			{
2631:screens.c     **** 			case 0: /* Page 1 - Grid position (1,1) */
2632:screens.c     **** 				write_bitmap( adm, TABMINUS,  0, 107, OR ); // -
2633:screens.c     **** 				write_bitmap( adm, TABPLUS,  31, 107, OR ); // +
2634:screens.c     **** 				write_bitmap( adm, TABNAV_D, 62, 102, OR ); // NAVIGATION: Down
2635:screens.c     **** 				break;
2636:screens.c     **** 			case 1: /* Page 1 - Grid position (1,2) */
2637:screens.c     **** 			case 3: /* Page 1 - Grid position (1,4) */ 
2638:screens.c     **** 				write_bitmap( adm, TABMINUS,  0, 107, OR ); // -
2639:screens.c     **** 				write_bitmap( adm, TABPLUS,  31, 107, OR ); // +
2640:screens.c     **** 				write_bitmap( adm, TABNAV_UD,62, 102, OR ); // NAVIGATION: Up Down
2641:screens.c     **** 				break;
2642:screens.c     **** 			case 2: /* Page 1 - Grid position (1.3) */
2643:screens.c     **** 				write_bitmap( adm, TABRESET,   0, 107, OR ); // RESET
2644:screens.c     **** 				write_bitmap( adm, TAB,       31, 107, OR );
2645:screens.c     **** 				write_bitmap( adm, TABNAV_UD, 62, 102, OR ); // NAVIGATION: Up Down
2646:screens.c     **** 				break;
2647:screens.c     **** 			}
2648:screens.c     **** 		}
2649:screens.c     **** 		else /* page == 1 */
2650:screens.c     **** 		{
2651:screens.c     **** 			switch( selection )
2652:screens.c     **** 			{
2653:screens.c     **** 			case 0: /* Page 2 - Grid position (1,1) */
2654:screens.c     **** 				write_bitmap( adm, TABLEFT,    0, 107, OR ); // <
2655:screens.c     **** 				write_bitmap( adm, TABRIGHT,  31, 107, OR ); // >
2656:screens.c     **** 				write_bitmap( adm, TABNAV_UD, 62, 102, OR ); // NAVIGATION: Up Down
2657:screens.c     **** 				break;
2658:screens.c     **** 			case 1: /* Page 2 - Grid position (1,2) */ 
2659:screens.c     **** 				write_bitmap( adm, TABRESET,   0, 107, OR ); // RESET
2660:screens.c     **** 				write_bitmap( adm, TAB,       31, 107, OR );
2661:screens.c     **** 
2662:screens.c     **** 				if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
2663:screens.c     **** 					write_bitmap( adm, TABNAV_UD,  62, 102, OR ); // NAVIGATION: Up
2664:screens.c     **** 				else
2665:screens.c     **** 					write_bitmap( adm, TABNAV_U,  62, 102, OR );
2666:screens.c     **** 				break;
2667:screens.c     **** 			case 2: /* Page 2 - Grid position (1,2) */
2668:screens.c     **** 				if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
2669:screens.c     **** 				{
2670:screens.c     **** 					write_bitmap( adm, TABLEFT,    0, 107, OR ); // <
2671:screens.c     **** 					write_bitmap( adm, TABRIGHT,  31, 107, OR ); // >
2672:screens.c     **** 					write_bitmap( adm, TABNAV_U, 62, 102, OR ); // NAVIGATION: Up Down
2673:screens.c     **** 				}
2674:screens.c     **** 
2675:screens.c     **** 				break;
2676:screens.c     **** 			}
2677:screens.c     **** 		}
2678:screens.c     **** 	} /* end selection != old_selection */
2679:screens.c     **** 
2680:screens.c     **** 
2681:screens.c     **** 	/* -----------------------------------------------------------
2682:screens.c     **** 	 * Selection pointer */
2683:screens.c     **** 
2684:screens.c     **** 	if( selection != old_selection )
2685:screens.c     **** 	{
2686:screens.c     **** 		if( page == old_page )
2687:screens.c     **** 		{
2688:screens.c     **** 			/* Clear old selection */
2689:screens.c     **** 			if( page == 0 )
2690:screens.c     **** 			{
2691:screens.c     **** 				switch( old_selection )
2692:screens.c     **** 				{
2693:screens.c     **** 				case 0: /* Page 1 - Grid position (1,1) */
2694:screens.c     **** 					write_bitmap( adm, ICON_DIAMETER_CORRECTION, ICON_DIAMETER_CORRECTION_OFFSET_X, ICON_DIAMETER_
2695:screens.c     **** 					break;
2696:screens.c     **** 				case 1: /* Page 1 - Grid position (1,2) */ 
2697:screens.c     **** 					write_bitmap( adm, ICON_NET_DELAY, ICON_NET_DELAY_OFFSET_X, ICON_NET_DELAY_OFFSET_Y, AND );
2698:screens.c     **** 					break;
2699:screens.c     **** 				case 2: /* Page 1 - Grid position (1.3) */ 
2700:screens.c     **** 					write_bitmap( adm, ICON_NET_METRES, ICON_NET_METRES_OFFSET_X, ICON_NET_METRES_OFFSET_Y, AND );
2701:screens.c     **** 					break;
2702:screens.c     **** 				case 3: /* Page 1 - Grid position (1,4) */ 
2703:screens.c     **** 					write_bitmap( adm, ICON_PRE_WARNING_BEEP, ICON_PRE_WARNING_BEEP_OFFSET_X, ICON_PRE_WARNING_BEE
2704:screens.c     **** 					break;
2705:screens.c     **** 				}
2706:screens.c     **** 			}
2707:screens.c     **** 			else /* page == 1 */
2708:screens.c     **** 			{
2709:screens.c     **** 				switch( old_selection )
2710:screens.c     **** 				{
2711:screens.c     **** 				case 0: /* Page 2 - Grid position (1,1) */
2712:screens.c     **** 					write_bitmap( adm, ICON_BALE_INDICATOR, ICON_BALE_INDICATOR_OFFSET_X, ICON_BALE_INDICATOR_OFFS
2713:screens.c     **** 					break;
2714:screens.c     **** 				case 1: /* Page 2 - Grid position (1,2) */ 
2715:screens.c     **** 					write_bitmap( adm, ICON_FILL_POT_ZERO, ICON_FILL_POT_ZERO_OFFSET_X, ICON_FILL_POT_ZERO_OFFSET_
2716:screens.c     **** 					break;
2717:screens.c     **** 				case 2: /* Page 2 - Grid position (1,3) -- not reached if 'Twine Option' set to Off */
2718:screens.c     **** 					/*write_bitmap( adm, ICON_SELECTION_POINTER, ICON_TWINE_ZERO_X - 8, ICON_TWINE_ZERO_Y + 4, AND
2719:screens.c     **** 					draw_box( adm, ICON_TWINE_ZERO_X - 12, ICON_TWINE_ZERO_Y + 4, ICON_TWINE_ZERO_X - 2, ICON_TWIN
2720:screens.c     **** 					break;
2721:screens.c     **** 				}
2722:screens.c     **** 			}
2723:screens.c     **** 		}
2724:screens.c     **** 
2725:screens.c     **** 		/* Draw new selection */
2726:screens.c     **** 		if( page == 0 )
2727:screens.c     **** 		{
2728:screens.c     **** 			switch( selection )
2729:screens.c     **** 			{
2730:screens.c     **** 			case 0: /* Page 1 - Grid position (1,1) */
2731:screens.c     **** 				write_bitmap( adm, ICON_DIAMETER_CORRECTION_SELECTED, ICON_DIAMETER_CORRECTION_OFFSET_X, ICON_D
2732:screens.c     **** 				break;
2733:screens.c     **** 			case 1: /* Page 1 - Grid position (1,2) */ 
2734:screens.c     **** 				write_bitmap( adm, ICON_NET_DELAY_SELECTED, ICON_NET_DELAY_OFFSET_X, ICON_NET_DELAY_OFFSET_Y, O
2735:screens.c     **** 				break;
2736:screens.c     **** 			case 2: /* Page 1 - Grid position (1.3) */ 
2737:screens.c     **** 				write_bitmap( adm, ICON_NET_METRES_SELECTED, ICON_NET_METRES_OFFSET_X, ICON_NET_METRES_OFFSET_Y
2738:screens.c     **** 				break;
2739:screens.c     **** 			case 3: /* Page 1 - Grid position (1,4) */ 
2740:screens.c     **** 				write_bitmap( adm, ICON_PRE_WARNING_BEEP_SELECTED, ICON_PRE_WARNING_BEEP_OFFSET_X, ICON_PRE_WAR
2741:screens.c     **** 				break;
2742:screens.c     **** 			}
2743:screens.c     **** 		}
2744:screens.c     **** 		else /* page == 1 */
2745:screens.c     **** 		{
2746:screens.c     **** 			switch( selection )
2747:screens.c     **** 			{
2748:screens.c     **** 			case 0: /* Page 2 - Grid position (1,1) */
2749:screens.c     **** 				write_bitmap( adm, ICON_BALE_INDICATOR_SELECTED, ICON_BALE_INDICATOR_OFFSET_X, ICON_BALE_INDICA
2750:screens.c     **** 				break;
2751:screens.c     **** 			case 1: /* Page 2 - Grid position (1,2) */ 
2752:screens.c     **** 				write_bitmap( adm, ICON_FILL_POT_ZERO_SELECTED, ICON_FILL_POT_ZERO_OFFSET_X, ICON_FILL_POT_ZERO
2753:screens.c     **** 				break;
2754:screens.c     **** 			case 2: /* Page 2 - Grid position (1,3) -- not reached if 'Twine Option' set to Off */
2755:screens.c     **** 				write_bitmap( adm, ICON_SELECTION_POINTER, ICON_TWINE_ZERO_X - 10, ICON_TWINE_ZERO_Y + 4, OR );
2756:screens.c     **** 				break;
2757:screens.c     **** 			}
2758:screens.c     **** 		}
2759:screens.c     **** 	} /* end if( selection != old_selection ) */
2760:screens.c     **** 
2761:screens.c     **** 
2762:screens.c     **** 	/* -----------------------------------------------------------
2763:screens.c     **** 	 * Update values */
2764:screens.c     **** 
2765:screens.c     **** 	if( page == 0 )
2766:screens.c     **** 	{
2767:screens.c     **** 		// Diameter Correction
2768:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterCorrection,
2769:screens.c     **** 				(float)PF_GW302_DiameterCorrection[PF_MIN], (float)PF_GW302_DiameterCorrection[PF_MAX],
2770:screens.c     **** 				1.0, DP0, ICON_DIAMETER_CORRECTION_TEXT_X, ICON_DIAMETER_CORRECTION_TEXT_Y,
2771:screens.c     **** 				DW3, (RIGHT|NSIGN), &RDSfnt1, NULL, PNULL );
2772:screens.c     **** 
2773:screens.c     **** 		// Net Delay
2774:screens.c     **** 		display_number( (float)pFac.pf.GW302_NetDelay,
2775:screens.c     **** 				(float)PF_GW302_NetDelay[PF_MIN], (float)PF_GW302_NetDelay[PF_MAX],
2776:screens.c     **** 				1.0, DP1, ICON_NET_DELAY_TEXT_X, ICON_NET_DELAY_TEXT_Y,
2777:screens.c     **** 				DW3, LEFT, &RDSfnt1, NULL, PNULL );
2778:screens.c     **** 
2779:screens.c     **** 		// Net Metres
2780:screens.c     **** 		display_number( (float)((unsigned int)pFac.pf.GW302_TotalNetMetres),
2781:screens.c     **** 				(float)PF_GW302_TotalNetMetres[PF_MIN], (float)PF_GW302_TotalNetMetres[PF_MAX],
2782:screens.c     **** 				1.0, DP0, ICON_NET_METRES_TEXT_X, ICON_NET_METRES_TEXT_Y,
2783:screens.c     **** 				DW4, RIGHT, &RDSfnt1, NULL, PNULL );
2784:screens.c     **** 
2785:screens.c     **** 		// Pre Warning Beep
2786:screens.c     **** 		display_number( (float)pFac.pf.GW302_PreWarningBeep,
2787:screens.c     **** 				(float)PF_GW302_PreWarningBeep[PF_MIN], (float)PF_GW302_PreWarningBeep[PF_MAX],
2788:screens.c     **** 				1.0, DP0, ICON_PRE_WARNING_BEEP_TEXT_X, ICON_PRE_WARNING_BEEP_TEXT_Y,
2789:screens.c     **** 				DW3, RIGHT, &RDSfnt1, NULL, PNULL );
2790:screens.c     **** 	}
2791:screens.c     **** 	else /* page == 0 */
2792:screens.c     **** 	{
2793:screens.c     **** 		// Bale Shape Indicator  ( OFF < ON < BEEP < OFF )
2794:screens.c     **** 		draw_box( adm, ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_SETTING_Y, ICON_BALE_INDICATOR_
2795:screens.c     **** 		switch( pFac.pf.GW302_BaleShapeIndicator )
2796:screens.c     **** 		{
2797:screens.c     **** 		case BSI_OFF:
2798:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR_OFF,  ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_
2799:screens.c     **** 			break;
2800:screens.c     **** 		case BSI_ON:
2801:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR_ON,   ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_
2802:screens.c     **** 			break;
2803:screens.c     **** 		default: /* case BSI_BEEP */
2804:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR_BEEP, ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_
2805:screens.c     **** 			break;
2806:screens.c     **** 		}
2807:screens.c     **** 
2808:screens.c     **** 		// Bale Shape Indicator Zero
2809:screens.c     **** 		display_number( (float)pFac.pf.GW302_BaleShapeIndicatorZero,
2810:screens.c     **** 				(float)PF_GW302_BaleShapeIndicatorZero[PF_MIN], (float)PF_GW302_BaleShapeIndicatorZero[PF_MAX],
2811:screens.c     **** 				1.0, DP1, ICON_FILL_POT_ZERO_TEXT_X, ICON_FILL_POT_ZERO_TEXT_Y,
2812:screens.c     **** 				DW4, LEFT, &RDSfnt1, NULL, PNULL );
2813:screens.c     **** 		display_f1_text( "V", TSMAX, ICON_FILL_POT_ZERO_TEXT_X+(4*6)-2, ICON_FILL_POT_ZERO_TEXT_Y,  FIXED
2814:screens.c     **** 
2815:screens.c     **** 	}
2816:screens.c     **** 
2817:screens.c     **** 
2818:screens.c     **** 	/* -----------------------------------------------------------
2819:screens.c     **** 	 * Flash currently selected value */
2820:screens.c     **** 
2821:screens.c     **** 	if( half_second )
2822:screens.c     **** 	{
2823:screens.c     **** 		/* flashing currently selected value off */
2824:screens.c     **** 		if( page == 0 )
2825:screens.c     **** 		{
2826:screens.c     **** 			switch( selection )
2827:screens.c     **** 			{
2828:screens.c     **** 			case 0: /* Page 1 - Grid position (1,1) */
2829:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_DIAMETER_CORRECTION_TEXT_X -(3*6), ICON_DIAMETER_CORRECTION
2830:screens.c     **** 				break;
2831:screens.c     **** 			case 1: /* Page 1 - Grid position (1,2) */ 
2832:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_NET_DELAY_TEXT_X, ICON_NET_DELAY_TEXT_Y, FIXED );
2833:screens.c     **** 				break;
2834:screens.c     **** 			case 2: /* Page 1 - Grid position (1.3) */ 
2835:screens.c     **** 				display_f1_text( "     ", TSMAX, ICON_NET_METRES_TEXT_X -(5*6), ICON_NET_METRES_TEXT_Y, FIXED )
2836:screens.c     **** 				break;
2837:screens.c     **** 			case 3: /* Page 1 - Grid position (1,4) */ 
2838:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_PRE_WARNING_BEEP_TEXT_X -(3*6), ICON_PRE_WARNING_BEEP_TEXT_
2839:screens.c     **** 				break;
2840:screens.c     **** 			}
2841:screens.c     **** 		}
2842:screens.c     **** 		else /* page == 1 */
2843:screens.c     **** 		{
2844:screens.c     **** 			switch( selection )
2845:screens.c     **** 			{
2846:screens.c     **** 			case 0: /* Page 2 - Grid position (1,1) */
2847:screens.c     **** 				draw_box( adm, ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_SETTING_Y, ICON_BALE_INDICATO
2848:screens.c     **** 				break;
2849:screens.c     **** 			case 1: /* Page 2 - Grid position (1,2) */ 
2850:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_FILL_POT_ZERO_TEXT_X, ICON_FILL_POT_ZERO_TEXT_Y, FIXED );
2851:screens.c     **** 				break;
2852:screens.c     **** 
2853:screens.c     **** /*			case 2:  Page 2 - Grid position (1,3)
2854:screens.c     **** 				if( pFac.pf.GW302_TwineOption == TO_ON )  Only displayed if 'Twine Option' set to On; nothing d
2855:screens.c     **** 					display_f1_text( "   ", TSMAX, ICON_TWINE_TEXT_X, ICON_TWINE_TEXT_Y, FIXED );
2856:screens.c     **** 				break;*/
2857:screens.c     **** 			}
2858:screens.c     **** 		}
2859:screens.c     **** 	} /* end if( half_second ) */
2860:screens.c     **** 
2861:screens.c     **** }
2862:screens.c     **** // -----------------------------------------------------------
2863:screens.c     **** 
2864:screens.c     **** 
2865:screens.c     **** // -----------------------------------------------------------
2866:screens.c     **** // Function Name       : screen112
2867:screens.c     **** // Description         : Machine Menu - Bale Count Menu             
2868:screens.c     **** // -----------------------------------------------------------
2869:screens.c     **** 
2870:screens.c     **** /*  Origin 
2871:screens.c     ****        x ---------------------------------------------------------- 
2872:screens.c     ****        | (1,1) Bale Count in Store A | (2,1) Bale Count in Store G |
2873:screens.c     ****        | --------------------------------------------------------- |
2874:screens.c     ****        | (1,2) Bale Count in Store B | (2,2) Bale Count in Store H |
2875:screens.c     ****        | --------------------------------------------------------- |
2876:screens.c     ****        | (1,3) Bale Count in Store C | (2,3) Bale Count in Store I |
2877:screens.c     ****        | --------------------------------------------------------- |
2878:screens.c     ****        | (1,4) Bale Count in Store D | (2,4) Bale Count in Store J |
2879:screens.c     ****        | --------------------------------------------------------- |
2880:screens.c     ****        | (1,5) Bale Count in Store E | (2,5) Lube Count            |
2881:screens.c     ****        | --------------------------------------------------------- |
2882:screens.c     ****        | (1,6) Bale Count in Store F | (2,6) Grand Total Bales     |
2883:screens.c     ****          --------------------------------------------------------- */
2884:screens.c     **** 
2885:screens.c     **** 
2886:screens.c     **** /* Origin */
2887:screens.c     **** #define BALE_COUNT_MENU_ORIGIN_X         6
2888:screens.c     **** #define BALE_COUNT_MENU_ORIGIN_Y         16
2889:screens.c     **** 
2890:screens.c     **** 
2891:screens.c     **** /* Offsets from origin for each grid position:(1,1),(2,1),(1,2),(2,2),(1,3)(2,3),(1,4),(2,4),(1,5),
2892:screens.c     **** #define BALE_COUNT_MENU_ITEM_OFFSET_X      78
2893:screens.c     **** #define BALE_COUNT_MENU_ITEM_OFFSET_Y      14
2894:screens.c     **** 
2895:screens.c     **** 
2896:screens.c     **** /* Offsets within each grid position */
2897:screens.c     **** 
2898:screens.c     **** /* > */
2899:screens.c     **** #define SELECTION_POINTER_OFFSET_X  0
2900:screens.c     **** #define SELECTION_POINTER_OFFSET_Y  0
2901:screens.c     **** 
2902:screens.c     **** /* A - J */
2903:screens.c     **** #define BALE_STORE_OFFSET_X  8
2904:screens.c     **** #define BALE_STORE_OFFSET_Y  3
2905:screens.c     **** 
2906:screens.c     **** /* Pile of bales / Oil can / Large pile of bales */
2907:screens.c     **** #define PICTURE_OFFSET_X  8
2908:screens.c     **** #define PICTURE_OFFSET_Y  0
2909:screens.c     **** 
2910:screens.c     **** /* Tick */
2911:screens.c     **** #define CURRENT_SELECTION_INDICATOR_OFFSET_X  33
2912:screens.c     **** #define CURRENT_SELECTION_INDICATOR_OFFSET_Y   0
2913:screens.c     **** 
2914:screens.c     **** /* 0 - 9999 */
2915:screens.c     **** #define COUNT_OFFSET_X  33
2916:screens.c     **** #define COUNT_OFFSET_Y  3
2917:screens.c     **** 
2918:screens.c     **** 
2919:screens.c     **** /* Dimensions */
2920:screens.c     **** 
2921:screens.c     **** /* > */
2922:screens.c     **** #define SELECTION_POINTER_DIM_X  4   /* ICON_SELECTION_POINTER bitmap x dim */
2923:screens.c     **** #define SELECTION_POINTER_DIM_Y  13  /* ICON_SELECTION_POINTER bitmap y dim */
2924:screens.c     **** 
2925:screens.c     **** /* Tick */
2926:screens.c     **** #define CURRENT_SELECTION_INDICATOR_DIM_X  12  /* ICON_CURRENT_SELECTION_INDICATOR bitmap x dim */
2927:screens.c     **** #define CURRENT_SELECTION_INDICATOR_DIM_Y  13  /* ICON_CURRENT_SELECTION_INDICATOR bitmap y dim */
2928:screens.c     **** 
2929:screens.c     **** 
2930:screens.c     **** void screen112( unsigned int lkey )
2931:screens.c     **** {
2932:screens.c     **** 	unsigned int  key_status;
2933:screens.c     **** 	unsigned char tstring[50], i;
2934:screens.c     **** 	unsigned char x, y;         /* Grid positions */
2935:screens.c     **** 	unsigned int x_pos, y_pos;  /* Screen positions [pixels] */
2936:screens.c     **** 	unsigned char old_selection;
2937:screens.c     **** 	unsigned char old_BaleStore;
2938:screens.c     **** 
2939:screens.c     **** 
2940:screens.c     **** 	if( startup != 1 )
2941:screens.c     **** 	{
2942:screens.c     **** 		startup = 1;
2943:screens.c     **** 
2944:screens.c     **** 		draw_frame( adm );
2945:screens.c     **** 
2946:screens.c     **** 
2947:screens.c     **** 		/* -----------------------------------------------------------
2948:screens.c     **** 		 * Drawing tabs -- IR & OR tab */
2949:screens.c     **** 
2950:screens.c     **** 		write_bitmap( adm, TAB,       99, 107, OR );
2951:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
2952:screens.c     **** 
2953:screens.c     **** 
2954:screens.c     **** 		/* -----------------------------------------------------------
2955:screens.c     **** 		 * Drawing pictures (including bale store letter A - J for bale count) */
2956:screens.c     **** 
2957:screens.c     **** 		for( y=0; y<6; y++ )
2958:screens.c     **** 		{
2959:screens.c     **** 			for( x=0; x<2; x++ )
2960:screens.c     **** 			{
2961:screens.c     **** 				/* Drawing Bale Count Menu item in Grid position (x,y) */
2962:screens.c     **** 				if( (x==1) && (y==4) ) /* (2,5) Lube Count */
2963:screens.c     **** 				{
2964:screens.c     **** 					/* Oil can */
2965:screens.c     **** 					x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + PICTURE_OFFSET_X;
2966:screens.c     **** 					y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + PICTURE_OFFSET_Y;
2967:screens.c     **** 					write_bitmap( adm, ICON_LUBE_COUNT, x_pos, y_pos, OR );
2968:screens.c     **** 				}
2969:screens.c     **** 				else if( (x==1) && (y==5) ) /* (2,6) Grand Total Bales */
2970:screens.c     **** 				{
2971:screens.c     **** 					/* Large pile of bales */
2972:screens.c     **** 					x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + PICTURE_OFFSET_X;
2973:screens.c     **** 					y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + PICTURE_OFFSET_Y;
2974:screens.c     **** 					write_bitmap( adm, ICON_GRAND_TOTAL_BALES, x_pos, y_pos, OR );
2975:screens.c     **** 				}
2976:screens.c     **** 				else /* Bale Count in Store A - J */
2977:screens.c     **** 				{
2978:screens.c     **** 					/* Pile of bales */
2979:screens.c     **** 					x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + PICTURE_OFFSET_X;
2980:screens.c     **** 					y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + PICTURE_OFFSET_Y;
2981:screens.c     **** 					write_bitmap( adm, ICON_BALE_COUNT, x_pos, y_pos, OR );
2982:screens.c     **** 
2983:screens.c     **** 					/* A - J */
2984:screens.c     **** 					x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + BALE_STORE_OFFSET_X;
2985:screens.c     **** 					y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + BALE_STORE_OFFSET_Y;
2986:screens.c     **** 					i = (x*6) + y; /* 0 - 9 */
2987:screens.c     **** 					sprintf ( tstring, "%c", ('A' + i) );
2988:screens.c     **** 					display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );
2989:screens.c     **** 				}
2990:screens.c     **** 			} /* end for( x=0; x<2; x++) */
2991:screens.c     **** 		} /* end for( y=0; y<6; y++) */
2992:screens.c     **** 
2993:screens.c     **** 
2994:screens.c     **** 		/* -----------------------------------------------------------
2995:screens.c     **** 		 * Grand Total Bales at grid position (2, 6) */
2996:screens.c     **** 
2997:screens.c     **** 		x = 1 ;
2998:screens.c     **** 		x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + COUNT_OFFSET_X;
2999:screens.c     **** 		y = 5 ;
3000:screens.c     **** 		y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + COUNT_OFFSET_Y;
3001:screens.c     **** 		sprintf ( tstring, "%6lu", pFac.pf.GrandBaleTotal );
3002:screens.c     **** 		display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );
3003:screens.c     **** 
3004:screens.c     **** 		old_selection = 0xff;
3005:screens.c     **** 		old_BaleStore = 0xff;
3006:screens.c     **** 	}
3007:screens.c     **** 	else
3008:screens.c     **** 	{
3009:screens.c     **** 		old_selection = selection;
3010:screens.c     **** 		old_BaleStore = pFac.pf.BaleStore;
3011:screens.c     **** 	}
3012:screens.c     **** 
3013:screens.c     **** #ifdef SHOW_TIME
3014:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
3015:screens.c     **** #endif	
3016:screens.c     **** 
3017:screens.c     **** 
3018:screens.c     **** 	/* -----------------------------------------------------------
3019:screens.c     **** 	 * Key press */
3020:screens.c     **** 
3021:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
3022:screens.c     **** 
3023:screens.c     **** 	if( key_status )
3024:screens.c     **** 	{		
3025:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
3026:screens.c     **** 
3027:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
3028:screens.c     **** 		{
3029:screens.c     **** 			escape = 1;
3030:screens.c     **** 		}
3031:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey ENT)
3032:screens.c     **** 		{
3033:screens.c     **** 			if( selection < 10 ) /* Bale count, A - J */
3034:screens.c     **** 			{
3035:screens.c     **** 				pFac.pf.BaleStore = selection; /* Reset current bale store to that currently selected */
3036:screens.c     **** 			}
3037:screens.c     **** 		}
3038:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey RESET)
3039:screens.c     **** 		{
3040:screens.c     **** 			if( selection < 10 ) /* Bale count, A - J */
3041:screens.c     **** 			{
3042:screens.c     **** 				SelectedBaleStore = selection;
3043:screens.c     **** 				window = screen121;  /* Bale Count Reset Screen */
3044:screens.c     **** 			}
3045:screens.c     **** 			else if( selection == 10 ) /* Lube count */
3046:screens.c     **** 			{
3047:screens.c     **** 				window = screen120;  /* Lube Count Reset Screen */
3048:screens.c     **** 			}
3049:screens.c     **** 		}
3050:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
3051:screens.c     **** 		{
3052:screens.c     **** 			if( selection ) /* Bale count, B - J & Lube Count */
3053:screens.c     **** 			{
3054:screens.c     **** 				selection--;
3055:screens.c     **** 			}
3056:screens.c     **** 		}
3057:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
3058:screens.c     **** 		{
3059:screens.c     **** 			if( selection < 11 ) /* Bale count, A - J & Lube Count */
3060:screens.c     **** 			{
3061:screens.c     **** 				selection++;
3062:screens.c     **** 			}
3063:screens.c     **** 		}
3064:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
3065:screens.c     **** 		{
3066:screens.c     **** 			if( selection == 6 )      /* Bale count, G */
3067:screens.c     **** 				selection = 0; /* Bale count, A */
3068:screens.c     **** 			else if( selection == 7 ) /* Bale count, H */
3069:screens.c     **** 				selection = 1; /* Bale count, B */
3070:screens.c     **** 			else if( selection == 8 ) /* Bale count, I */
3071:screens.c     **** 				selection = 2; /* Bale count, C */
3072:screens.c     **** 			else if( selection == 9 ) /* Bale count, J */
3073:screens.c     **** 				selection = 3; /* Bale count, D */
3074:screens.c     **** 			else if( selection == 10 ) /* Lube Count */
3075:screens.c     **** 				selection = 4; /* Bale count, E */
3076:screens.c     **** 			else if( selection == 11 ) /* Grand Total Bales */
3077:screens.c     **** 				selection = 5; /* Bale count, F */
3078:screens.c     **** 		}
3079:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
3080:screens.c     **** 		{
3081:screens.c     **** 			if( selection == 0 )      /* Bale count, A */
3082:screens.c     **** 				selection = 6; /* Bale count, G */
3083:screens.c     **** 			else if( selection == 1 ) /* Bale count, B */
3084:screens.c     **** 				selection = 7; /* Bale count, H */
3085:screens.c     **** 			else if( selection == 2 ) /* Bale count, C */
3086:screens.c     **** 				selection = 8; /* Bale count, I */
3087:screens.c     **** 			else if( selection == 3 ) /* Bale count, D */
3088:screens.c     **** 				selection = 9; /* Bale count, J */
3089:screens.c     **** 			else if( selection == 4 ) /* Bale count, E */
3090:screens.c     **** 				selection = 10; /* Lube Count */
3091:screens.c     **** 			else if( selection == 5 ) /* Bale count, F */
3092:screens.c     **** 				selection = 11; /* Grand Total Bales */	
3093:screens.c     **** 		}
3094:screens.c     **** 
3095:screens.c     **** 	} /* end if( key_status ) */
3096:screens.c     **** 
3097:screens.c     **** 
3098:screens.c     **** 	/* -----------------------------------------------------------
3099:screens.c     **** 	 * Clearing previously selected bale store -- indicated by a tick */
3100:screens.c     **** 
3101:screens.c     **** 	if( pFac.pf.BaleStore != old_BaleStore )
3102:screens.c     **** 	{
3103:screens.c     **** 		if( old_BaleStore != 0xff ) /* not starting up */
3104:screens.c     **** 		{
3105:screens.c     **** 			/* Clear old tick -- was superimposed over highest digits of bale count value */
3106:screens.c     **** 			x = old_BaleStore / 6 ;
3107:screens.c     **** 			x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + CURRENT_SELECTION_INDIC
3108:screens.c     **** 			y = old_BaleStore % 6 ;
3109:screens.c     **** 			y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + CURRENT_SELECTION_INDIC
3110:screens.c     **** 			draw_box( adm, x_pos, y_pos, (x_pos + CURRENT_SELECTION_INDICATOR_DIM_X - 1), (y_pos + CURRENT_S
3111:screens.c     **** 		}
3112:screens.c     **** 	} /* end if( pFac.pf.BaleStore != BaleTotal ) */
3113:screens.c     **** 
3114:screens.c     **** 
3115:screens.c     **** 	/* -----------------------------------------------------------
3116:screens.c     **** 	 * Update all values to cover values updated / flashed off */
3117:screens.c     **** 
3118:screens.c     **** 	for( y=0; y<6; y++)
3119:screens.c     **** 	{
3120:screens.c     **** 		for( x=0; x<2; x++)
3121:screens.c     **** 		{
3122:screens.c     **** 			/* Drawing Bale Count Menu item in Grid position (x,y) */
3123:screens.c     **** 			if( (x==1) && (y==4) ) /* (2,5) Lube Count */
3124:screens.c     **** 			{
3125:screens.c     **** 				x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + COUNT_OFFSET_X;
3126:screens.c     **** 				y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + COUNT_OFFSET_Y;
3127:screens.c     **** 				if( pRun.pr.LubeCounter < 0 )
3128:screens.c     **** 					sprintf( tstring, "   %3u", 0 );
3129:screens.c     **** 				else
3130:screens.c     **** 					sprintf( tstring, "   %3u", pRun.pr.LubeCounter );
3131:screens.c     **** 				display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );
3132:screens.c     **** 			}
3133:screens.c     **** 			else if( (x==1) && (y==5) ) /* (2,6) Grand Total Bales */
3134:screens.c     **** 			{
3135:screens.c     **** 				/* No change */
3136:screens.c     **** 			}
3137:screens.c     **** 			else /* Bale Count in Store A - J */
3138:screens.c     **** 			{
3139:screens.c     **** 				x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + COUNT_OFFSET_X;
3140:screens.c     **** 				y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + COUNT_OFFSET_Y;
3141:screens.c     **** 				i = (x*6) + y; /* 0 - 9 */
3142:screens.c     **** 				sprintf ( tstring, "%6lu", pFac.pf.BaleTotal[i] );
3143:screens.c     **** 				display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );	
3144:screens.c     **** 			}
3145:screens.c     **** 		} /* end for( x=0; x<2; x++) */
3146:screens.c     **** 	} /* end for( y=0; y<6; y++) */	 
3147:screens.c     **** 
3148:screens.c     **** 
3149:screens.c     **** 	/* -----------------------------------------------------------
3150:screens.c     **** 	 * Selection pointer */
3151:screens.c     **** 
3152:screens.c     **** 	if( selection != old_selection )
3153:screens.c     **** 	{
3154:screens.c     **** 		if( old_selection != 0xff ) /* not starting up */
3155:screens.c     **** 		{
3156:screens.c     **** 			/* Clear old selection */
3157:screens.c     **** 			x = old_selection / 6 ;
3158:screens.c     **** 			x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + SELECTION_POINTER_OFFSE
3159:screens.c     **** 			y = old_selection % 6 ;
3160:screens.c     **** 			y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + SELECTION_POINTER_OFFSE
3161:screens.c     **** 			draw_box( adm, x_pos, y_pos, (x_pos + SELECTION_POINTER_DIM_X - 1), (y_pos + SELECTION_POINTER_D
3162:screens.c     **** 		}
3163:screens.c     **** 
3164:screens.c     **** 		/* Draw new selection */
3165:screens.c     **** 		x = selection / 6 ;
3166:screens.c     **** 		x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + SELECTION_POINTER_OFFSET
3167:screens.c     **** 		y = selection % 6 ;
3168:screens.c     **** 		y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + SELECTION_POINTER_OFFSET
3169:screens.c     **** 		write_bitmap( adm, ICON_SELECTION_POINTER, x_pos, y_pos, OR ); /* Draw pointer in new position */
3170:screens.c     **** 
3171:screens.c     **** 	} /* end if( selection != old_selection ) */
3172:screens.c     **** 
3173:screens.c     **** 
3174:screens.c     **** 	/* -----------------------------------------------------------
3175:screens.c     **** 	 * Flash currently selected value -- except if Grand Total Bales selected which cannot be changed 
3176:screens.c     **** 
3177:screens.c     **** 	if( half_second )
3178:screens.c     **** 	{
3179:screens.c     **** 		if( selection < 11 ) /* Bale count, A - J  &  Lube count  */
3180:screens.c     **** 		{
3181:screens.c     **** 			/* flashing currently selected value off */
3182:screens.c     **** 			x = selection / 6 ;
3183:screens.c     **** 			x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + COUNT_OFFSET_X;
3184:screens.c     **** 			y = selection % 6 ;
3185:screens.c     **** 			y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + COUNT_OFFSET_Y;
3186:screens.c     **** 			display_f1_text( "      ", TSMAX, x_pos, y_pos, FIXED );
3187:screens.c     **** 		}
3188:screens.c     **** 	} /* end if( half_second ) */
3189:screens.c     **** 
3190:screens.c     **** 
3191:screens.c     **** 	/* -----------------------------------------------------------
3192:screens.c     **** 	 * Indicating currently selected bale store by a tick */
3193:screens.c     **** 
3194:screens.c     **** 	/* Draw new selection -- superimposed over highest digits of bale count value */
3195:screens.c     **** 	x = pFac.pf.BaleStore / 6 ;
3196:screens.c     **** 	x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + CURRENT_SELECTION_INDICAT
3197:screens.c     **** 	y = pFac.pf.BaleStore % 6 ;
3198:screens.c     **** 	y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + CURRENT_SELECTION_INDICAT
3199:screens.c     **** 	write_bitmap( adm, ICON_CURRENT_SELECTION_INDICATOR, x_pos, y_pos, OR ); /* Draw tick in new posit
3200:screens.c     **** 
3201:screens.c     **** 
3202:screens.c     **** 	/* -----------------------------------------------------------
3203:screens.c     **** 	 * Drawing tabs -- tabs OL, IL & NAVIGATION */
3204:screens.c     **** 
3205:screens.c     **** 	if( selection != old_selection )
3206:screens.c     **** 	{
3207:screens.c     **** 		/* Clear OL, IL & NAVIGATION tab area -- avoiding deleting section of frame border */
3208:screens.c     **** 		draw_box( adm, 1, 102, 62+36-1, 102+24-1,   CLEAR );
3209:screens.c     **** 
3210:screens.c     **** 		switch( selection )
3211:screens.c     **** 		{
3212:screens.c     **** 		case 0: /* (1,1) Bale Count in Store A */
3213:screens.c     **** 			write_bitmap( adm, TABRESET,                    0, 107, OR ); // RESET
3214:screens.c     **** 			write_bitmap( adm, TAB_MAKE_SELECTION_CURRENT, 31, 107, OR ); // TICK
3215:screens.c     **** 			write_bitmap( adm, TABNAV_DR,                  62, 102, OR ); // NAVIGATION: Down Right
3216:screens.c     **** 			break;
3217:screens.c     **** 		case 1: /* (1,2) Bale Count in Store B */
3218:screens.c     **** 		case 2: /* (1,3) Bale Count in Store C */
3219:screens.c     **** 		case 3: /* (1,4) Bale Count in Store D */
3220:screens.c     **** 		case 4: /* (1,5) Bale Count in Store E */
3221:screens.c     **** 		case 5: /* (1,6) Bale Count in Store F */
3222:screens.c     **** 			write_bitmap( adm, TABRESET,                    0, 107, OR ); // RESET
3223:screens.c     **** 			write_bitmap( adm, TAB_MAKE_SELECTION_CURRENT, 31, 107, OR ); // TICK
3224:screens.c     **** 			write_bitmap( adm, TABNAV_UDR,                 62, 102, OR ); // NAVIGATION: Up Down Right
3225:screens.c     **** 			break;
3226:screens.c     **** 		case 6: /* (2,1) Bale Count in Store G */
3227:screens.c     **** 		case 7: /* (2,2) Bale Count in Store H */
3228:screens.c     **** 		case 8: /* (2,3) Bale Count in Store I */
3229:screens.c     **** 		case 9: /* (2,4) Bale Count in Store J */
3230:screens.c     **** 			write_bitmap( adm, TABRESET,                    0, 107, OR ); // RESET
3231:screens.c     **** 			write_bitmap( adm, TAB_MAKE_SELECTION_CURRENT, 31, 107, OR ); // TICK
3232:screens.c     **** 			write_bitmap( adm, TABNAV_UDL,                 62, 102, OR ); // NAVIGATION: Up Down Left
3233:screens.c     **** 			break;
3234:screens.c     **** 		case 10: /* (2,5) Lube Count */
3235:screens.c     **** 			write_bitmap( adm, TABRESET,    0, 107, OR ); // RESET
3236:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
3237:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR ); // NAVIGATION: Up Down Left
3238:screens.c     **** 			break;
3239:screens.c     **** 		default: /* 11 - (2,6) Grand Total Bales */
3240:screens.c     **** 			write_bitmap( adm, TAB,         0, 107, OR );
3241:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
3242:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR ); // NAVIGATION: Up Left
3243:screens.c     **** 			break;
3244:screens.c     **** 		}
3245:screens.c     **** 	} /* if( selection != old_selection ) */
3246:screens.c     **** 
3247:screens.c     **** }
3248:screens.c     **** // -----------------------------------------------------------
3249:screens.c     **** 
3250:screens.c     **** 
3251:screens.c     **** // -----------------------------------------------------------
3252:screens.c     **** // Function Name       : screen113
3253:screens.c     **** // Description         : Machine Menu - Operator Setup Menu                 
3254:screens.c     **** // -----------------------------------------------------------
3255:screens.c     ****  
3256:screens.c     ****  /*  Origin                                            
3257:screens.c     ****        x ---------------------------------------------- 
3258:screens.c     ****        | (1,1) Brightness & Contrast Adjust Menu Icon  |
3259:screens.c     ****        | ----------------------------------------------
3260:screens.c     ****        | (1,2) Time & Date Adjust Menu Icon            |
3261:screens.c     ****        | ----------------------------------------------
3262:screens.c     ****        | (1,3) Technician Menu Icon                    |
3263:screens.c     ****        | ---------------------------------------------- 
3264:screens.c     ****        | (1,4) Diagnostics (Screens Access) Icon       |
3265:screens.c     ****         ---------------------------------------------- */
3266:screens.c     **** 
3267:screens.c     **** /* Origin */
3268:screens.c     **** #define OPERATOR_SETUP_MENU_ICONS_ORIGIN_X         0
3269:screens.c     **** #define OPERATOR_SETUP_MENU_ICONS_ORIGIN_Y         0
3270:screens.c     **** 
3271:screens.c     **** 
3272:screens.c     **** /* Grid position (1,1) */
3273:screens.c     **** #define ICON_BRIGHTNESS_AND_CONTRAST_MENU_OFFSET_X     43 
3274:screens.c     **** #define ICON_BRIGHTNESS_AND_CONTRAST_MENU_OFFSET_Y      8 + 5 + 4
3275:screens.c     **** 
3276:screens.c     **** /* Grid position (1,2) */
3277:screens.c     **** #define ICON_TIME_AND_DATE_ADJUST_MENU_OFFSET_X        43 
3278:screens.c     **** #define ICON_TIME_AND_DATE_ADJUST_MENU_OFFSET_Y        30 + 10 + 4
3279:screens.c     **** 
3280:screens.c     **** /* Grid position (1,3) */
3281:screens.c     **** #define ICON_TECHNICIAN_MENU_OFFSET_X                  43 
3282:screens.c     **** #define ICON_TECHNICIAN_MENU_OFFSET_Y                  78 - 27 + 15 + 4 
3283:screens.c     **** 
3284:screens.c     **** /* Grid position (1,4) */
3285:screens.c     **** #define ICON_DIAGNOSTICS_SCREENS_OFFSET_X              43 
3286:screens.c     **** #define ICON_DIAGNOSTICS_SCREENS_OFFSET_Y              91 - 27 + 20 + 4 - 1
3287:screens.c     **** 
3288:screens.c     **** 
3289:screens.c     **** /* Top left icon co-ordinates (x,y) */
3290:screens.c     **** 
3291:screens.c     **** #define ICON_BRIGHTNESS_AND_CONTRAST_MENU_X    OPERATOR_SETUP_MENU_ICONS_ORIGIN_X + ICON_BRIGHTNESS
3292:screens.c     **** #define ICON_BRIGHTNESS_AND_CONTRAST_MENU_Y    OPERATOR_SETUP_MENU_ICONS_ORIGIN_Y + ICON_BRIGHTNESS
3293:screens.c     **** 
3294:screens.c     **** #define ICON_TIME_AND_DATE_ADJUST_MENU_X       OPERATOR_SETUP_MENU_ICONS_ORIGIN_X + ICON_TIME_AND_D
3295:screens.c     **** #define ICON_TIME_AND_DATE_ADJUST_MENU_Y       OPERATOR_SETUP_MENU_ICONS_ORIGIN_Y + ICON_TIME_AND_D
3296:screens.c     **** 
3297:screens.c     **** #define ICON_TECHNICIAN_MENU_X                 OPERATOR_SETUP_MENU_ICONS_ORIGIN_X + ICON_TECHNICIAN
3298:screens.c     **** #define ICON_TECHNICIAN_MENU_Y                 OPERATOR_SETUP_MENU_ICONS_ORIGIN_Y + ICON_TECHNICIAN
3299:screens.c     **** 
3300:screens.c     **** #define ICON_DIAGNOSTICS_SCREENS_X             OPERATOR_SETUP_MENU_ICONS_ORIGIN_X + ICON_DIAGNOSTIC
3301:screens.c     **** #define ICON_DIAGNOSTICS_SCREENS_Y             OPERATOR_SETUP_MENU_ICONS_ORIGIN_Y + ICON_DIAGNOSTIC
3302:screens.c     **** 
3303:screens.c     **** 
3304:screens.c     **** /* Bottom right icon co-ordinates (x2,y2) */
3305:screens.c     **** 
3306:screens.c     **** #define ICON_DIAGNOSTICS_SCREENS_X2            ICON_DIAGNOSTICS_SCREENS_X + 54 - 1 /* + ICON_DIAGNO
3307:screens.c     **** #define ICON_DIAGNOSTICS_SCREENS_Y2            ICON_DIAGNOSTICS_SCREENS_Y + 14 - 1 /* + ICON_DIAGNO
3308:screens.c     **** 
3309:screens.c     **** 
3310:screens.c     **** void screen113( unsigned int lkey )
3311:screens.c     **** {
3312:screens.c     **** 	unsigned int  key_status;
3313:screens.c     **** 	unsigned char old_selection;
3314:screens.c     **** 
3315:screens.c     **** 	static unsigned char swtim;
3316:screens.c     **** 
3317:screens.c     **** 
3318:screens.c     **** 	if( startup != 1 )
3319:screens.c     **** 	{
3320:screens.c     **** 		startup = 1;
3321:screens.c     **** 
3322:screens.c     **** 		draw_frame( adm );
3323:screens.c     **** 
3324:screens.c     **** 
3325:screens.c     **** 		/* -----------------------------------------------------------
3326:screens.c     **** 		 * Drawing icons -- none highlighted */
3327:screens.c     **** 
3328:screens.c     **** 		write_bitmap( adm, ICON_BRIGHTNESS_AND_CONTRAST_MENU, ICON_BRIGHTNESS_AND_CONTRAST_MENU_X,  ICON_
3329:screens.c     **** 		write_bitmap( adm, ICON_TIME_AND_DATE_ADJUST_MENU,    ICON_TIME_AND_DATE_ADJUST_MENU_X,     ICON_
3330:screens.c     **** 		write_bitmap( adm, ICON_TECHNICIAN_MENU,              ICON_TECHNICIAN_MENU_X,               ICON_
3331:screens.c     **** 
3332:screens.c     **** 
3333:screens.c     **** 		/* -----------------------------------------------------------
3334:screens.c     **** 		 * Drawing tabs -- OL, IL, IR & OR tab */
3335:screens.c     **** 
3336:screens.c     **** 		write_bitmap( adm, TAB,        0, 107, OR );
3337:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
3338:screens.c     **** 
3339:screens.c     **** 		write_bitmap( adm, TABENT,    99, 107, OR ); // ENTER
3340:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
3341:screens.c     **** 
3342:screens.c     **** 
3343:screens.c     **** 		old_selection = 0xff;
3344:screens.c     **** 	}
3345:screens.c     **** 	else
3346:screens.c     **** 	{
3347:screens.c     **** 		old_selection = selection;
3348:screens.c     **** 	}
3349:screens.c     **** 
3350:screens.c     **** #ifdef SHOW_TIME
3351:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
3352:screens.c     **** #endif
3353:screens.c     **** 
3354:screens.c     **** 
3355:screens.c     **** 	/* -----------------------------------------------------------
3356:screens.c     **** 	 * Key press */
3357:screens.c     **** 
3358:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
3359:screens.c     **** 
3360:screens.c     **** 	if( key_status )
3361:screens.c     **** 	{		
3362:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
3363:screens.c     **** 
3364:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
3365:screens.c     **** 		{
3366:screens.c     **** 			escape = 1;
3367:screens.c     **** 		}
3368:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey ENT)
3369:screens.c     **** 		{
3370:screens.c     **** 			switch( selection )
3371:screens.c     **** 			{
3372:screens.c     **** 			case 0: /* (1,1) - Brightness & Contrast Adjust Menu */
3373:screens.c     **** 				window = screen131; /* Brightness & Contrast Adjust Menu */
3374:screens.c     **** 				break;
3375:screens.c     **** 
3376:screens.c     **** 			case 1: /* (1,2) - Time & Date Adjust Menu */
3377:screens.c     **** 				window = screen132; /* Time & Date Adjust Menu */
3378:screens.c     **** 				break;
3379:screens.c     **** 
3380:screens.c     **** 			case 2: /* (1,3) - Technician Menu */
3381:screens.c     **** #ifndef DEVELOP
3382:screens.c     **** 				window = screen140; /* Pin Entry Display for Technician Menu */
3383:screens.c     **** #else
3384:screens.c     **** 				window = screen141; /* Technician Menu */
3385:screens.c     **** #endif
3386:screens.c     **** 				break;
3387:screens.c     **** 			case 3: /* (1,4) - Diagnostics (Screens Access) */
3388:screens.c     **** 				window = screen150; /* Diagnostics - Digital Inputs */
3389:screens.c     **** 				break;
3390:screens.c     **** 			}
3391:screens.c     **** 		}
3392:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
3393:screens.c     **** 		{
3394:screens.c     **** 			if( selection )
3395:screens.c     **** 			{
3396:screens.c     **** 				selection--;
3397:screens.c     **** 			}
3398:screens.c     **** 		}
3399:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
3400:screens.c     **** 		{
3401:screens.c     **** 			if( selection < 2 )  /* Technician Menu */
3402:screens.c     **** 			{
3403:screens.c     **** 				selection++;
3404:screens.c     **** 			}
3405:screens.c     **** 			else if( swtim > 25 ) /* 5 s */
3406:screens.c     **** 			{
3407:screens.c     **** 				selection = 3; /* Diagnostics Screens */
3408:screens.c     **** 			}
3409:screens.c     **** 			else
3410:screens.c     **** 			{
3411:screens.c     **** 				swtim++;
3412:screens.c     **** 			}
3413:screens.c     **** 		}
3414:screens.c     **** 		else // No key press
3415:screens.c     **** 		{
3416:screens.c     **** 			swtim = 0;
3417:screens.c     **** 		}
3418:screens.c     **** 
3419:screens.c     **** 	} /* end if( key_status ) */
3420:screens.c     **** 
3421:screens.c     **** 
3422:screens.c     **** 	/* -----------------------------------------------------------
3423:screens.c     **** 	 * Selection pointer */
3424:screens.c     **** 
3425:screens.c     **** 	if( selection != old_selection )
3426:screens.c     **** 	{
3427:screens.c     **** 		/* Clear old selection */
3428:screens.c     **** 		switch( old_selection )
3429:screens.c     **** 		{
3430:screens.c     **** 		case 0: /* (1,1) */
3431:screens.c     **** 			write_bitmap( adm, ICON_BRIGHTNESS_AND_CONTRAST_MENU, ICON_BRIGHTNESS_AND_CONTRAST_MENU_X, ICON_
3432:screens.c     **** 			break;
3433:screens.c     **** 		case 1: /* (1,2) */ 
3434:screens.c     **** 			write_bitmap( adm, ICON_TIME_AND_DATE_ADJUST_MENU, ICON_TIME_AND_DATE_ADJUST_MENU_X, ICON_TIME_A
3435:screens.c     **** 			break;
3436:screens.c     **** 		case 2: /* (1,3) */
3437:screens.c     **** 			write_bitmap( adm, ICON_TECHNICIAN_MENU, ICON_TECHNICIAN_MENU_X, ICON_TECHNICIAN_MENU_Y, AND );
3438:screens.c     **** 			break;
3439:screens.c     **** 		case 3: /* (1,4) -- Completely removing Diagnostics Screens Icon */
3440:screens.c     **** 			draw_box( adm, ICON_DIAGNOSTICS_SCREENS_X, ICON_DIAGNOSTICS_SCREENS_Y, ICON_DIAGNOSTICS_SCREENS_
3441:screens.c     **** 			break;
3442:screens.c     **** 		}
3443:screens.c     **** 
3444:screens.c     **** 		/* Draw new selection */
3445:screens.c     **** 		switch( selection )
3446:screens.c     **** 		{
3447:screens.c     **** 		case 0: /* (1,1) */
3448:screens.c     **** 			write_bitmap( adm, ICON_BRIGHTNESS_AND_CONTRAST_MENU_SELECTED, ICON_BRIGHTNESS_AND_CONTRAST_MENU
3449:screens.c     **** 			break;
3450:screens.c     **** 		case 1: /* (1,2) */ 
3451:screens.c     **** 			write_bitmap( adm, ICON_TIME_AND_DATE_ADJUST_MENU_SELECTED, ICON_TIME_AND_DATE_ADJUST_MENU_X, IC
3452:screens.c     **** 			break;
3453:screens.c     **** 		case 2: /* (1,3) */
3454:screens.c     **** 			write_bitmap( adm, ICON_TECHNICIAN_MENU_SELECTED, ICON_TECHNICIAN_MENU_X, ICON_TECHNICIAN_MENU_Y
3455:screens.c     **** 			break;
3456:screens.c     **** 		case 3: /* (1,4) */
3457:screens.c     **** 			write_bitmap( adm, ICON_DIAGNOSTICS_SCREENS_SELECTED, ICON_DIAGNOSTICS_SCREENS_X, ICON_DIAGNOSTI
3458:screens.c     **** 			break;
3459:screens.c     **** 		}
3460:screens.c     **** 	} /* end if( selection != old_selection ) */
3461:screens.c     **** 
3462:screens.c     **** 
3463:screens.c     **** 	/* -----------------------------------------------------------
3464:screens.c     **** 	 * Drawing tabs -- NAVIGATION tab */
3465:screens.c     **** 
3466:screens.c     **** 	if( selection != old_selection )
3467:screens.c     **** 	{
3468:screens.c     **** 		draw_box( adm, 62, 102, 62+36-1, 102+24-1, CLEAR ); // Clear NAVIGATION tab area
3469:screens.c     **** 
3470:screens.c     **** 		switch( selection )
3471:screens.c     **** 		{
3472:screens.c     **** 		case 0: /* (1,1) */
3473:screens.c     **** 			write_bitmap( adm, TABNAV_D,  62, 102, OR ); // NAVIGATION: Down
3474:screens.c     **** 			break;
3475:screens.c     **** 
3476:screens.c     **** 		case 1: /* (1,2) */
3477:screens.c     **** 			write_bitmap( adm, TABNAV_UD, 62, 102, OR ); // NAVIGATION: Up Down
3478:screens.c     **** 			break;
3479:screens.c     **** 
3480:screens.c     **** 		case 2: /* (1,3) */
3481:screens.c     **** 		case 3: /* (1,4) */
3482:screens.c     **** 			write_bitmap( adm, TABNAV_U,  62, 102, OR ); // NAVIGATION: Up
3483:screens.c     **** 			break;
3484:screens.c     **** 		}
3485:screens.c     **** 	} /* end if( selection != old_selection ) */
3486:screens.c     **** 
3487:screens.c     **** }
3488:screens.c     **** // -----------------------------------------------------------
3489:screens.c     **** 
3490:screens.c     **** 
3491:screens.c     **** // -----------------------------------------------------------
3492:screens.c     **** // Function Name       : screen120
3493:screens.c     **** // Description         : Lube Count Reset Screen
3494:screens.c     **** // -----------------------------------------------------------
3495:screens.c     **** 
3496:screens.c     **** /* Top left screen image co-ordinates (x,y) */
3497:screens.c     **** #define ICON_LUBE_COUNT_RESET_X      38         
3498:screens.c     **** #define ICON_LUBE_COUNT_RESET_Y      45  
3499:screens.c     **** 
3500:screens.c     **** /* Top left text offsets -- offset from screen image co-ordinates (x,y) */
3501:screens.c     **** #define ICON_LUBE_COUNT_RESET_TEXT_OFFSET_X      62 - 2        
3502:screens.c     **** #define ICON_LUBE_COUNT_RESET_TEXT_OFFSET_Y       7     
3503:screens.c     **** 
3504:screens.c     **** /* Top left text co-ordinates */
3505:screens.c     **** #define ICON_LUBE_COUNT_RESET_TEXT_X   ICON_LUBE_COUNT_RESET_X + ICON_LUBE_COUNT_RESET_TEXT_OFFSET_
3506:screens.c     **** #define ICON_LUBE_COUNT_RESET_TEXT_Y   ICON_LUBE_COUNT_RESET_Y + ICON_LUBE_COUNT_RESET_TEXT_OFFSET_
3507:screens.c     **** 
3508:screens.c     **** 
3509:screens.c     **** void screen120( unsigned int lkey )
3510:screens.c     **** {
3511:screens.c     **** 	unsigned int key_status;
3512:screens.c     **** 	unsigned char tstring[32];
3513:screens.c     **** 
3514:screens.c     **** 
3515:screens.c     **** 	if( !startup )
3516:screens.c     **** 	{
3517:screens.c     **** 		startup = 1;
3518:screens.c     **** 
3519:screens.c     **** 		draw_frame( adm );
3520:screens.c     **** 
3521:screens.c     **** 
3522:screens.c     **** 		/* -----------------------------------------------------------
3523:screens.c     **** 		 * Drawing screen image -- containing 'Lube Alarm' set in Technician Menu */
3524:screens.c     **** 
3525:screens.c     **** 		write_bitmap( adm, ICON_LUBE_COUNT_RESET, ICON_LUBE_COUNT_RESET_X, ICON_LUBE_COUNT_RESET_Y, OR );
3526:screens.c     **** 
3527:screens.c     **** 		sprintf( tstring, "%3u", pFac.pf.GW302_LubeAlarm );
3528:screens.c     **** 		display_f1_text( tstring, TSMAX, ICON_LUBE_COUNT_RESET_TEXT_X, ICON_LUBE_COUNT_RESET_TEXT_Y, FIXE
3529:screens.c     **** 
3530:screens.c     **** 
3531:screens.c     **** 		/* -----------------------------------------------------------
3532:screens.c     **** 		 * Drawing tabs */
3533:screens.c     **** 
3534:screens.c     **** 		write_bitmap( adm, TAB,       0,  107, OR );
3535:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
3536:screens.c     **** 		write_bitmap( adm, TABNAV_,   62, 102, OR ); // NAVIGATION: Blank
3537:screens.c     **** 		write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
3538:screens.c     **** 		write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
3539:screens.c     **** 	}
3540:screens.c     **** 
3541:screens.c     **** #ifdef SHOW_TIME
3542:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
3543:screens.c     **** #endif
3544:screens.c     **** 
3545:screens.c     **** 	/* -----------------------------------------------------------
3546:screens.c     **** 	 * Key press */
3547:screens.c     **** 
3548:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
3549:screens.c     **** 
3550:screens.c     **** 	if( key_status )
3551:screens.c     **** 	{
3552:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
3553:screens.c     **** 
3554:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey CROSS)
3555:screens.c     **** 		{
3556:screens.c     **** 			escape = 1;
3557:screens.c     **** 		}
3558:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
3559:screens.c     **** 		{
3560:screens.c     **** 			pRun.pr.LubeCounter = pFac.pf.GW302_LubeAlarm;
3561:screens.c     **** 			SavecalDelayWithinMenus = 1;
3562:screens.c     **** 			escape = 1;
3563:screens.c     **** 		}
3564:screens.c     **** 	}
3565:screens.c     **** 
3566:screens.c     **** }
3567:screens.c     **** // -----------------------------------------------------------
3568:screens.c     **** 
3569:screens.c     **** 
3570:screens.c     **** // -----------------------------------------------------------
3571:screens.c     **** // Function Name       : screen121
3572:screens.c     **** // Description         : Bale Count Reset Screen
3573:screens.c     **** // -----------------------------------------------------------
3574:screens.c     **** 
3575:screens.c     **** /* Top left screen image co-ordinates (x,y) */
3576:screens.c     **** #define ICON_BALE_COUNT_RESET_X      38         
3577:screens.c     **** #define ICON_BALE_COUNT_RESET_Y      45      
3578:screens.c     **** 
3579:screens.c     **** /* Top left text offsets -- offset from screen image co-ordinates (x,y) */
3580:screens.c     **** #define ICON_BALE_COUNT_RESET_TEXT_OFFSET_X       2        
3581:screens.c     **** #define ICON_BALE_COUNT_RESET_TEXT_OFFSET_Y       7     
3582:screens.c     **** 
3583:screens.c     **** /* Top left text co-ordinates */
3584:screens.c     **** #define ICON_BALE_COUNT_RESET_TEXT_X   ICON_BALE_COUNT_RESET_X + ICON_BALE_COUNT_RESET_TEXT_OFFSET_
3585:screens.c     **** #define ICON_BALE_COUNT_RESET_TEXT_Y   ICON_BALE_COUNT_RESET_Y + ICON_BALE_COUNT_RESET_TEXT_OFFSET_
3586:screens.c     **** 
3587:screens.c     **** 
3588:screens.c     **** void screen121( unsigned int lkey )
3589:screens.c     **** {
3590:screens.c     **** 	unsigned int key_status;
3591:screens.c     **** 	unsigned char tstring[32];
3592:screens.c     **** 
3593:screens.c     **** 
3594:screens.c     **** 	if( !startup )
3595:screens.c     **** 	{
3596:screens.c     **** 		startup = 1;
3597:screens.c     **** 
3598:screens.c     **** 		draw_frame( adm );
3599:screens.c     **** 
3600:screens.c     **** 
3601:screens.c     **** 		/* -----------------------------------------------------------
3602:screens.c     **** 		 * Drawing screen image */
3603:screens.c     **** 
3604:screens.c     **** 		write_bitmap( adm, ICON_BALE_COUNT_RESET, ICON_BALE_COUNT_RESET_X, ICON_BALE_COUNT_RESET_Y, OR );
3605:screens.c     **** 
3606:screens.c     **** 		sprintf ( tstring, "%c", ('A' + SelectedBaleStore) ); /* A - J */
3607:screens.c     **** 		display_f1_text( tstring, TSMAX, ICON_BALE_COUNT_RESET_TEXT_X, ICON_BALE_COUNT_RESET_TEXT_Y, FIXE
3608:screens.c     **** 
3609:screens.c     **** 
3610:screens.c     **** 		/* -----------------------------------------------------------
3611:screens.c     **** 		 * Drawing tabs */
3612:screens.c     **** 
3613:screens.c     **** 		write_bitmap( adm, TAB,       0,  107, OR );
3614:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
3615:screens.c     **** 		write_bitmap( adm, TABNAV_,   62, 102, OR ); // NAVIGATION: Blank
3616:screens.c     **** 		write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
3617:screens.c     **** 		write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
3618:screens.c     **** 	}
3619:screens.c     **** 
3620:screens.c     **** #ifdef SHOW_TIME
3621:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
3622:screens.c     **** #endif
3623:screens.c     **** 
3624:screens.c     **** 	/* -----------------------------------------------------------
3625:screens.c     **** 	 * Key press */
3626:screens.c     **** 
3627:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP); 
3628:screens.c     **** 
3629:screens.c     **** 	if( key_status )
3630:screens.c     **** 	{
3631:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
3632:screens.c     **** 
3633:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey CROSS)
3634:screens.c     **** 		{
3635:screens.c     **** 			escape = 1;	  
3636:screens.c     **** 		}
3637:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
3638:screens.c     **** 		{
3639:screens.c     **** 			pFac.pf.BaleTotal[SelectedBaleStore] = PF_GW302_BaleTotal[PF_MIN]; // 0UL
3640:screens.c     **** 			SavecalDelayWithinMenus = 1;
3641:screens.c     **** 			escape = 1;	  
3642:screens.c     **** 		}
3643:screens.c     **** 	}
3644:screens.c     **** 
3645:screens.c     **** }
3646:screens.c     **** // -----------------------------------------------------------
3647:screens.c     **** 
3648:screens.c     **** 
3649:screens.c     **** // -----------------------------------------------------------
3650:screens.c     **** // Function Name       : screen123
3651:screens.c     **** // Description         : Dia Pot Zero Reset Screen
3652:screens.c     **** // -----------------------------------------------------------
3653:screens.c     **** #if 0 // Removed -- Dia pot zero value fixed
3654:screens.c     **** void screen123( unsigned int lkey )
3655:screens.c     **** {
3656:screens.c     **** 	unsigned int key_status;
3657:screens.c     **** 
3658:screens.c     **** 	if( !startup )
3659:screens.c     **** 	{
3660:screens.c     **** 		startup = 1;
3661:screens.c     **** 
3662:screens.c     **** 		draw_frame( adm );
3663:screens.c     **** 	}
3664:screens.c     **** 
3665:screens.c     **** #ifdef SHOW_TIME
3666:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
3667:screens.c     **** #endif
3668:screens.c     **** 
3669:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP); 
3670:screens.c     **** 	if( key_status )
3671:screens.c     **** 	{
3672:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
3673:screens.c     **** 
3674:screens.c     **** 		if( (lkey == SW_OR) || (lkey == SW_CL) ) // outer-right button (softkey CROSS) OR centre-left nav
3675:screens.c     **** 		{
3676:screens.c     **** 			escape = 1;
3677:screens.c     **** 		}
3678:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
3679:screens.c     **** 		{
3680:screens.c     **** 			pFac.pf.GW302_DiaPotZero = BaleDiaVolts;
3681:screens.c     **** 			SavecalDelayWithinMenus = 1;
3682:screens.c     **** 			escape = 1;
3683:screens.c     **** 		}
3684:screens.c     **** 	}
3685:screens.c     **** 
3686:screens.c     **** 	// Clear display area (above tabs)
3687:screens.c     **** 	draw_box( adm, 30, 1, 158, 11, CLEAR );
3688:screens.c     **** 	draw_box( adm, 1, (11+1), 158, (102-1), CLEAR );
3689:screens.c     **** 
3690:screens.c     **** 	// Current Bale Diameter Voltage
3691:screens.c     **** 	display_number( BaleDiaVolts, 0.0, 0.0, 1.0, DP1, 147, 4, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
3692:screens.c     **** 	display_f1_text( "V", TSMAX, 149, 4,  FIXED );
3693:screens.c     **** 
3694:screens.c     **** 	// Icon & '=' sign
3695:screens.c     **** 	write_bitmap( adm, Reset_Dia_Pot_Zero, 31, 38, OR );
3696:screens.c     **** 
3697:screens.c     **** 	// Default value & '?' symbol 
3698:screens.c     **** 	display_number( (float)0UL, 0.0, 0.0, 1.0, DP0, 108, 52, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
3699:screens.c     **** 	display_f1_text( "?", TSMAX, 111, 52, FIXED );
3700:screens.c     **** 
3701:screens.c     **** 	// Clear area underneath tabs
3702:screens.c     **** 	draw_box( adm, 1, 102, 158, 126, CLEAR );    
3703:screens.c     **** 
3704:screens.c     **** 	// Tabs
3705:screens.c     **** 	write_bitmap( adm, TAB,       0,  107, OR );
3706:screens.c     **** 	write_bitmap( adm, TAB,       31, 107, OR );
3707:screens.c     **** 	write_bitmap( adm, TABNAV_L,  62, 102, OR ); // NAVIGATION: left only
3708:screens.c     **** 	write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
3709:screens.c     **** 	write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
3710:screens.c     **** 
3711:screens.c     **** }
3712:screens.c     **** #endif
3713:screens.c     **** // -----------------------------------------------------------
3714:screens.c     **** 
3715:screens.c     **** 
3716:screens.c     **** // -----------------------------------------------------------
3717:screens.c     **** // Function Name       : screen124
3718:screens.c     **** // Description         : Fill Pot Zero Reset Screen (AKA Bale Shape Indicator Zero)
3719:screens.c     **** // -----------------------------------------------------------
3720:screens.c     **** 
3721:screens.c     **** /* Top left screen image co-ordinates (x,y) */
3722:screens.c     **** #define ICON_FILL_POT_ZERO_RESET_X      38         
3723:screens.c     **** #define ICON_FILL_POT_ZERO_RESET_Y      45    
3724:screens.c     **** 
3725:screens.c     **** 
3726:screens.c     **** void screen124( unsigned int lkey )
3727:screens.c     **** {
3728:screens.c     **** 	unsigned int key_status;
3729:screens.c     **** 
3730:screens.c     **** 
3731:screens.c     **** 	if( !startup )
3732:screens.c     **** 	{
3733:screens.c     **** 		startup = 1;
3734:screens.c     **** 
3735:screens.c     **** 		draw_frame( adm );
3736:screens.c     **** 
3737:screens.c     **** 
3738:screens.c     **** 		/* -----------------------------------------------------------
3739:screens.c     **** 		 * Drawing screen image */
3740:screens.c     **** 
3741:screens.c     **** 		write_bitmap( adm, ICON_FILL_POT_ZERO_RESET, ICON_FILL_POT_ZERO_RESET_X, ICON_FILL_POT_ZERO_RESET
3742:screens.c     **** 
3743:screens.c     **** 
3744:screens.c     **** 		/* -----------------------------------------------------------
3745:screens.c     **** 		 * Drawing tabs */
3746:screens.c     **** 
3747:screens.c     **** 		write_bitmap( adm, TAB,       0,  107, OR );
3748:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
3749:screens.c     **** 		write_bitmap( adm, TABNAV_,   62, 102, OR ); // NAVIGATION: Blank
3750:screens.c     **** 		write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
3751:screens.c     **** 		write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
3752:screens.c     **** 	}
3753:screens.c     **** 
3754:screens.c     **** #ifdef SHOW_TIME
3755:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
3756:screens.c     **** #endif	
3757:screens.c     **** 
3758:screens.c     **** 	/* -----------------------------------------------------------
3759:screens.c     **** 	 * Key press */
3760:screens.c     **** 
3761:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
3762:screens.c     **** 
3763:screens.c     **** 	if( key_status )
3764:screens.c     **** 	{
3765:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
3766:screens.c     **** 
3767:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey CROSS)
3768:screens.c     **** 		{
3769:screens.c     **** 			escape = 1;
3770:screens.c     **** 		}
3771:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
3772:screens.c     **** 		{
3773:screens.c     **** 			pFac.pf.GW302_BaleShapeIndicatorZero = BaleShapeVolts;
3774:screens.c     **** 			SavecalDelayWithinMenus = 1;
3775:screens.c     **** 			escape = 1;
3776:screens.c     **** 		}
3777:screens.c     **** 	}
3778:screens.c     **** 
3779:screens.c     **** 
3780:screens.c     **** 	/* -----------------------------------------------------------
3781:screens.c     **** 	 * Display voltage to which Bale Shape Indicator (Zero) can be set */
3782:screens.c     **** 
3783:screens.c     **** 	display_number( BaleShapeVolts, 0.0, 0.0, 1.0, DP1, 147, 4, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
3784:screens.c     **** 	display_f1_text( "V", TSMAX, 149, 4,  FIXED );
3785:screens.c     **** 
3786:screens.c     **** }
3787:screens.c     **** // -----------------------------------------------------------
3788:screens.c     **** 
3789:screens.c     **** 
3790:screens.c     **** // -----------------------------------------------------------
3791:screens.c     **** // Function Name       : screen125
3792:screens.c     **** // Description         : Net Metres Reset Screen
3793:screens.c     **** // -----------------------------------------------------------
3794:screens.c     **** 
3795:screens.c     **** /* Top left screen image co-ordinates (x,y) */
3796:screens.c     **** #define ICON_NET_METRES_RESET_X      38         
3797:screens.c     **** #define ICON_NET_METRES_RESET_Y      45
3798:screens.c     **** 
3799:screens.c     **** 
3800:screens.c     **** void screen125( unsigned int lkey )
3801:screens.c     **** {
  26              		.loc 1 3801 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 041C     		mov	r4, r0
3802:screens.c     **** 	unsigned int key_status;
3803:screens.c     **** 
3804:screens.c     **** 	if( !startup )
  41              		.loc 1 3804 0
  42 0006 2D4B     		ldr	r3, .L5
  43 0008 1B78     		ldrb	r3, [r3]
  44 000a 002B     		cmp	r3, #0
  45 000c 32D1     		bne	.L2
3805:screens.c     **** 	{
3806:screens.c     **** 		startup = 1;
  46              		.loc 1 3806 0
  47 000e 0122     		mov	r2, #1
  48 0010 2A4B     		ldr	r3, .L5
  49 0012 1A70     		strb	r2, [r3]
3807:screens.c     **** 
3808:screens.c     **** 		draw_frame( adm );
  50              		.loc 1 3808 0
  51 0014 2A4D     		ldr	r5, .L5+4
  52 0016 281C     		mov	r0, r5
  53              	.LVL1:
  54 0018 FFF7FEFF 		bl	draw_frame
  55              	.LVL2:
3809:screens.c     **** 
3810:screens.c     **** 
3811:screens.c     **** 		/* -----------------------------------------------------------
3812:screens.c     **** 		 * Drawing screen image */
3813:screens.c     **** 
3814:screens.c     **** 		write_bitmap( adm, ICON_NET_METRES_RESET, ICON_NET_METRES_RESET_X, ICON_NET_METRES_RESET_Y, OR );
  56              		.loc 1 3814 0
  57 001c 0226     		mov	r6, #2
  58 001e 0096     		str	r6, [sp]
  59 0020 281C     		mov	r0, r5
  60 0022 2849     		ldr	r1, .L5+8
  61 0024 2622     		mov	r2, #38
  62 0026 2D23     		mov	r3, #45
  63 0028 FFF7FEFF 		bl	write_bitmap
  64              	.LVL3:
3815:screens.c     **** 
3816:screens.c     **** 
3817:screens.c     **** 		/* -----------------------------------------------------------
3818:screens.c     **** 		 * Drawing tabs */
3819:screens.c     **** 
3820:screens.c     **** 		write_bitmap( adm, TAB,       0,  107, OR );
  65              		.loc 1 3820 0
  66 002c 264F     		ldr	r7, .L5+12
  67 002e 0096     		str	r6, [sp]
  68 0030 281C     		mov	r0, r5
  69 0032 391C     		mov	r1, r7
  70 0034 0022     		mov	r2, #0
  71 0036 6B23     		mov	r3, #107
  72 0038 FFF7FEFF 		bl	write_bitmap
  73              	.LVL4:
3821:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
  74              		.loc 1 3821 0
  75 003c 0096     		str	r6, [sp]
  76 003e 281C     		mov	r0, r5
  77 0040 391C     		mov	r1, r7
  78 0042 1F22     		mov	r2, #31
  79 0044 6B23     		mov	r3, #107
  80 0046 FFF7FEFF 		bl	write_bitmap
  81              	.LVL5:
3822:screens.c     **** 		write_bitmap( adm, TABNAV_,   62, 102, OR ); // NAVIGATION: Blank
  82              		.loc 1 3822 0
  83 004a 0096     		str	r6, [sp]
  84 004c 281C     		mov	r0, r5
  85 004e 1F49     		ldr	r1, .L5+16
  86 0050 3E22     		mov	r2, #62
  87 0052 6623     		mov	r3, #102
  88 0054 FFF7FEFF 		bl	write_bitmap
  89              	.LVL6:
3823:screens.c     **** 		write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
  90              		.loc 1 3823 0
  91 0058 0096     		str	r6, [sp]
  92 005a 281C     		mov	r0, r5
  93 005c 1C49     		ldr	r1, .L5+20
  94 005e 6322     		mov	r2, #99
  95 0060 6B23     		mov	r3, #107
  96 0062 FFF7FEFF 		bl	write_bitmap
  97              	.LVL7:
3824:screens.c     **** 		write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
  98              		.loc 1 3824 0
  99 0066 0096     		str	r6, [sp]
 100 0068 281C     		mov	r0, r5
 101 006a 1A49     		ldr	r1, .L5+24
 102 006c 8222     		mov	r2, #130
 103 006e 6B23     		mov	r3, #107
 104 0070 FFF7FEFF 		bl	write_bitmap
 105              	.LVL8:
 106              	.L2:
3825:screens.c     **** 	}
3826:screens.c     **** 
3827:screens.c     **** #ifdef SHOW_TIME
3828:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 107              		.loc 1 3828 0
 108 0074 0020     		mov	r0, #0
 109 0076 FFF7FEFF 		bl	ClockDisplay
 110              	.LVL9:
3829:screens.c     **** #endif
3830:screens.c     **** 
3831:screens.c     **** 	/* -----------------------------------------------------------
3832:screens.c     **** 	 * Key press */
3833:screens.c     **** 
3834:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP); 
 111              		.loc 1 3834 0
 112 007a A30F     		lsr	r3, r4, #30
3835:screens.c     **** 
3836:screens.c     **** 	if( key_status )
 113              		.loc 1 3836 0
 114 007c 1AD0     		beq	.L1
3837:screens.c     **** 	{
3838:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 115              		.loc 1 3838 0
 116 007e A400     		lsl	r4, r4, #2
 117              	.LVL10:
 118 0080 A408     		lsr	r4, r4, #2
 119              	.LVL11:
3839:screens.c     **** 
3840:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey CROSS)
 120              		.loc 1 3840 0
 121 0082 8023     		mov	r3, #128
 122 0084 5B00     		lsl	r3, r3, #1
 123 0086 9C42     		cmp	r4, r3
 124 0088 03D1     		bne	.L4
3841:screens.c     **** 		{
3842:screens.c     **** 			escape = 1;
 125              		.loc 1 3842 0
 126 008a 0122     		mov	r2, #1
 127 008c 124B     		ldr	r3, .L5+28
 128 008e 1A70     		strb	r2, [r3]
 129 0090 10E0     		b	.L1
 130              	.L4:
3843:screens.c     **** 		}
3844:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
 131              		.loc 1 3844 0
 132 0092 082C     		cmp	r4, #8
 133 0094 0ED1     		bne	.L1
3845:screens.c     **** 		{
3846:screens.c     **** 			pFac.pf.GW302_TotalNetMetres = PF_GW302_TotalNetMetres[PF_MIN]; // m
 134              		.loc 1 3846 0
 135 0096 114B     		ldr	r3, .L5+32
 136 0098 5A68     		ldr	r2, [r3, #4]
 137 009a 114B     		ldr	r3, .L5+36
 138 009c 1A67     		str	r2, [r3, #112]
3847:screens.c     **** 			NetMetresAppliedForCount = 0.0; // m -- will be reset on resetting below but resetting here so i
 139              		.loc 1 3847 0
 140 009e 0022     		mov	r2, #0
 141 00a0 104B     		ldr	r3, .L5+40
 142 00a2 1A60     		str	r2, [r3]
3848:screens.c     **** 			NetMetresPulseCount = 0UL; // Resetting IP4 pulse count for Net applied (in metres)
 143              		.loc 1 3848 0
 144 00a4 0022     		mov	r2, #0
 145 00a6 104B     		ldr	r3, .L5+44
 146 00a8 1A60     		str	r2, [r3]
3849:screens.c     **** 			SavecalDelayWithinMenus = 1;
 147              		.loc 1 3849 0
 148 00aa 0123     		mov	r3, #1
 149 00ac 0F4A     		ldr	r2, .L5+48
 150 00ae 1370     		strb	r3, [r2]
3850:screens.c     **** 			escape = 1;
 151              		.loc 1 3850 0
 152 00b0 094A     		ldr	r2, .L5+28
 153 00b2 1370     		strb	r3, [r2]
 154              	.L1:
3851:screens.c     **** 		}
3852:screens.c     **** 	}
3853:screens.c     **** 
3854:screens.c     **** }
 155              		.loc 1 3854 0
 156 00b4 03B0     		add	sp, sp, #12
 157              		@ sp needed for prologue
 158              	.LVL12:
 159 00b6 F0BC     		pop	{r4, r5, r6, r7}
 160 00b8 01BC     		pop	{r0}
 161 00ba 0047     		bx	r0
 162              	.L6:
 163              		.align	2
 164              	.L5:
 165 00bc 00000000 		.word	startup
 166 00c0 00000000 		.word	adm
 167 00c4 00000000 		.word	ICON_NET_METRES_RESET
 168 00c8 00000000 		.word	TAB
 169 00cc 00000000 		.word	TABNAV_
 170 00d0 00000000 		.word	TABTICK
 171 00d4 00000000 		.word	TABCROSS
 172 00d8 00000000 		.word	escape
 173 00dc 00000000 		.word	PF_GW302_TotalNetMetres
 174 00e0 00000000 		.word	pFac
 175 00e4 00000000 		.word	NetMetresAppliedForCount
 176 00e8 00000000 		.word	NetMetresPulseCount
 177 00ec 00000000 		.word	SavecalDelayWithinMenus
 178              		.cfi_endproc
 179              	.LFE386:
 181              		.section	.text.screen113,"ax",%progbits
 182              		.align	2
 183              		.global	screen113
 184              		.code	16
 185              		.thumb_func
 187              	screen113:
 188              	.LFB382:
3311:screens.c     **** {
 189              		.loc 1 3311 0
 190              		.cfi_startproc
 191              	.LVL13:
 192 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 193              	.LCFI2:
 194              		.cfi_def_cfa_offset 20
 195              		.cfi_offset 4, -20
 196              		.cfi_offset 5, -16
 197              		.cfi_offset 6, -12
 198              		.cfi_offset 7, -8
 199              		.cfi_offset 14, -4
 200 0002 83B0     		sub	sp, sp, #12
 201              	.LCFI3:
 202              		.cfi_def_cfa_offset 32
 203 0004 061C     		mov	r6, r0
3318:screens.c     **** 	if( startup != 1 )
 204              		.loc 1 3318 0
 205 0006 934B     		ldr	r3, .L36
 206 0008 1B78     		ldrb	r3, [r3]
 207 000a 012B     		cmp	r3, #1
 208 000c 3BD0     		beq	.L8
3320:screens.c     **** 		startup = 1;
 209              		.loc 1 3320 0
 210 000e 0122     		mov	r2, #1
 211 0010 904B     		ldr	r3, .L36
 212 0012 1A70     		strb	r2, [r3]
3322:screens.c     **** 		draw_frame( adm );
 213              		.loc 1 3322 0
 214 0014 904C     		ldr	r4, .L36+4
 215 0016 201C     		mov	r0, r4
 216              	.LVL14:
 217 0018 FFF7FEFF 		bl	draw_frame
 218              	.LVL15:
3328:screens.c     **** 		write_bitmap( adm, ICON_BRIGHTNESS_AND_CONTRAST_MENU, ICON_BRIGHTNESS_AND_CONTRAST_MENU_X,  ICON_
 219              		.loc 1 3328 0
 220 001c 0225     		mov	r5, #2
 221 001e 0095     		str	r5, [sp]
 222 0020 201C     		mov	r0, r4
 223 0022 8E49     		ldr	r1, .L36+8
 224 0024 2B22     		mov	r2, #43
 225 0026 1123     		mov	r3, #17
 226 0028 FFF7FEFF 		bl	write_bitmap
 227              	.LVL16:
3329:screens.c     **** 		write_bitmap( adm, ICON_TIME_AND_DATE_ADJUST_MENU,    ICON_TIME_AND_DATE_ADJUST_MENU_X,     ICON_
 228              		.loc 1 3329 0
 229 002c 0095     		str	r5, [sp]
 230 002e 201C     		mov	r0, r4
 231 0030 8B49     		ldr	r1, .L36+12
 232 0032 2B22     		mov	r2, #43
 233 0034 2C23     		mov	r3, #44
 234 0036 FFF7FEFF 		bl	write_bitmap
 235              	.LVL17:
3330:screens.c     **** 		write_bitmap( adm, ICON_TECHNICIAN_MENU,              ICON_TECHNICIAN_MENU_X,               ICON_
 236              		.loc 1 3330 0
 237 003a 0095     		str	r5, [sp]
 238 003c 201C     		mov	r0, r4
 239 003e 8949     		ldr	r1, .L36+16
 240 0040 2B22     		mov	r2, #43
 241 0042 4623     		mov	r3, #70
 242 0044 FFF7FEFF 		bl	write_bitmap
 243              	.LVL18:
3336:screens.c     **** 		write_bitmap( adm, TAB,        0, 107, OR );
 244              		.loc 1 3336 0
 245 0048 874F     		ldr	r7, .L36+20
 246 004a 0095     		str	r5, [sp]
 247 004c 201C     		mov	r0, r4
 248 004e 391C     		mov	r1, r7
 249 0050 0022     		mov	r2, #0
 250 0052 6B23     		mov	r3, #107
 251 0054 FFF7FEFF 		bl	write_bitmap
 252              	.LVL19:
3337:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
 253              		.loc 1 3337 0
 254 0058 0095     		str	r5, [sp]
 255 005a 201C     		mov	r0, r4
 256 005c 391C     		mov	r1, r7
 257 005e 1F22     		mov	r2, #31
 258 0060 6B23     		mov	r3, #107
 259 0062 FFF7FEFF 		bl	write_bitmap
 260              	.LVL20:
3339:screens.c     **** 		write_bitmap( adm, TABENT,    99, 107, OR ); // ENTER
 261              		.loc 1 3339 0
 262 0066 0095     		str	r5, [sp]
 263 0068 201C     		mov	r0, r4
 264 006a 8049     		ldr	r1, .L36+24
 265 006c 6322     		mov	r2, #99
 266 006e 6B23     		mov	r3, #107
 267 0070 FFF7FEFF 		bl	write_bitmap
 268              	.LVL21:
3340:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
 269              		.loc 1 3340 0
 270 0074 0095     		str	r5, [sp]
 271 0076 201C     		mov	r0, r4
 272 0078 7D49     		ldr	r1, .L36+28
 273 007a 8222     		mov	r2, #130
 274 007c 6B23     		mov	r3, #107
 275 007e FFF7FEFF 		bl	write_bitmap
 276              	.LVL22:
3343:screens.c     **** 		old_selection = 0xff;
 277              		.loc 1 3343 0
 278 0082 FF24     		mov	r4, #255
 279 0084 01E0     		b	.L9
 280              	.LVL23:
 281              	.L8:
3347:screens.c     **** 		old_selection = selection;
 282              		.loc 1 3347 0
 283 0086 7B4B     		ldr	r3, .L36+32
 284 0088 1C78     		ldrb	r4, [r3]
 285              	.LVL24:
 286              	.L9:
3351:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 287              		.loc 1 3351 0
 288 008a 0020     		mov	r0, #0
 289 008c FFF7FEFF 		bl	ClockDisplay
 290              	.LVL25:
3358:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 291              		.loc 1 3358 0
 292 0090 B30F     		lsr	r3, r6, #30
3360:screens.c     **** 	if( key_status )
 293              		.loc 1 3360 0
 294 0092 49D0     		beq	.L10
3362:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 295              		.loc 1 3362 0
 296 0094 B600     		lsl	r6, r6, #2
 297              	.LVL26:
 298 0096 B608     		lsr	r6, r6, #2
 299              	.LVL27:
3364:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
 300              		.loc 1 3364 0
 301 0098 8023     		mov	r3, #128
 302 009a 5B00     		lsl	r3, r3, #1
 303 009c 9E42     		cmp	r6, r3
 304 009e 03D1     		bne	.L11
3366:screens.c     **** 			escape = 1;
 305              		.loc 1 3366 0
 306 00a0 0122     		mov	r2, #1
 307 00a2 754B     		ldr	r3, .L36+36
 308 00a4 1A70     		strb	r2, [r3]
 309 00a6 3FE0     		b	.L10
 310              	.L11:
3368:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey ENT)
 311              		.loc 1 3368 0
 312 00a8 082E     		cmp	r6, #8
 313 00aa 1AD1     		bne	.L12
3370:screens.c     **** 			switch( selection )
 314              		.loc 1 3370 0
 315 00ac 714B     		ldr	r3, .L36+32
 316 00ae 1B78     		ldrb	r3, [r3]
 317 00b0 012B     		cmp	r3, #1
 318 00b2 0AD0     		beq	.L14
 319 00b4 002B     		cmp	r3, #0
 320 00b6 04D0     		beq	.L13
 321 00b8 022B     		cmp	r3, #2
 322 00ba 0AD0     		beq	.L15
 323 00bc 032B     		cmp	r3, #3
 324 00be 33D1     		bne	.L10
 325 00c0 0BE0     		b	.L16
 326              	.L13:
3373:screens.c     **** 				window = screen131; /* Brightness & Contrast Adjust Menu */
 327              		.loc 1 3373 0
 328 00c2 6E4A     		ldr	r2, .L36+40
 329 00c4 6E4B     		ldr	r3, .L36+44
 330 00c6 1A60     		str	r2, [r3]
3374:screens.c     **** 				break;
 331              		.loc 1 3374 0
 332 00c8 2EE0     		b	.L10
 333              	.L14:
3377:screens.c     **** 				window = screen132; /* Time & Date Adjust Menu */
 334              		.loc 1 3377 0
 335 00ca 6E4A     		ldr	r2, .L36+48
 336 00cc 6C4B     		ldr	r3, .L36+44
 337 00ce 1A60     		str	r2, [r3]
3378:screens.c     **** 				break;
 338              		.loc 1 3378 0
 339 00d0 2AE0     		b	.L10
 340              	.L15:
3382:screens.c     **** 				window = screen140; /* Pin Entry Display for Technician Menu */
 341              		.loc 1 3382 0
 342 00d2 6D4A     		ldr	r2, .L36+52
 343 00d4 6A4B     		ldr	r3, .L36+44
 344 00d6 1A60     		str	r2, [r3]
3386:screens.c     **** 				break;
 345              		.loc 1 3386 0
 346 00d8 26E0     		b	.L10
 347              	.L16:
3388:screens.c     **** 				window = screen150; /* Diagnostics - Digital Inputs */
 348              		.loc 1 3388 0
 349 00da 6C4A     		ldr	r2, .L36+56
 350 00dc 684B     		ldr	r3, .L36+44
 351 00de 1A60     		str	r2, [r3]
3389:screens.c     **** 				break;
 352              		.loc 1 3389 0
 353 00e0 22E0     		b	.L10
 354              	.L12:
3392:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
 355              		.loc 1 3392 0
 356 00e2 202E     		cmp	r6, #32
 357 00e4 07D1     		bne	.L17
3394:screens.c     **** 			if( selection )
 358              		.loc 1 3394 0
 359 00e6 634B     		ldr	r3, .L36+32
 360 00e8 1B78     		ldrb	r3, [r3]
 361 00ea 002B     		cmp	r3, #0
 362 00ec 1CD0     		beq	.L10
3396:screens.c     **** 				selection--;
 363              		.loc 1 3396 0
 364 00ee 013B     		sub	r3, r3, #1
 365 00f0 604A     		ldr	r2, .L36+32
 366 00f2 1370     		strb	r3, [r2]
 367 00f4 18E0     		b	.L10
 368              	.L17:
3399:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
 369              		.loc 1 3399 0
 370 00f6 402E     		cmp	r6, #64
 371 00f8 13D1     		bne	.L18
3401:screens.c     **** 			if( selection < 2 )  /* Technician Menu */
 372              		.loc 1 3401 0
 373 00fa 5E4B     		ldr	r3, .L36+32
 374 00fc 1B78     		ldrb	r3, [r3]
 375 00fe 012B     		cmp	r3, #1
 376 0100 03D8     		bhi	.L19
3403:screens.c     **** 				selection++;
 377              		.loc 1 3403 0
 378 0102 0133     		add	r3, r3, #1
 379 0104 5B4A     		ldr	r2, .L36+32
 380 0106 1370     		strb	r3, [r2]
 381 0108 0EE0     		b	.L10
 382              	.L19:
3405:screens.c     **** 			else if( swtim > 25 ) /* 5 s */
 383              		.loc 1 3405 0
 384 010a 614B     		ldr	r3, .L36+60
 385 010c 1B78     		ldrb	r3, [r3]
 386 010e 192B     		cmp	r3, #25
 387 0110 03D9     		bls	.L20
3407:screens.c     **** 				selection = 3; /* Diagnostics Screens */
 388              		.loc 1 3407 0
 389 0112 0322     		mov	r2, #3
 390 0114 574B     		ldr	r3, .L36+32
 391 0116 1A70     		strb	r2, [r3]
 392 0118 06E0     		b	.L10
 393              	.L20:
3411:screens.c     **** 				swtim++;
 394              		.loc 1 3411 0
 395 011a 0133     		add	r3, r3, #1
 396 011c 5C4A     		ldr	r2, .L36+60
 397 011e 1370     		strb	r3, [r2]
 398 0120 02E0     		b	.L10
 399              	.L18:
3416:screens.c     **** 			swtim = 0;
 400              		.loc 1 3416 0
 401 0122 0022     		mov	r2, #0
 402 0124 5A4B     		ldr	r3, .L36+60
 403 0126 1A70     		strb	r2, [r3]
 404              	.L10:
3425:screens.c     **** 	if( selection != old_selection )
 405              		.loc 1 3425 0
 406 0128 524B     		ldr	r3, .L36+32
 407 012a 1B78     		ldrb	r3, [r3]
 408 012c A342     		cmp	r3, r4
 409 012e 00D1     		bne	.LCB374
 410 0130 8CE0     		b	.L7	@long jump
 411              	.LCB374:
3428:screens.c     **** 		switch( old_selection )
 412              		.loc 1 3428 0
 413 0132 012C     		cmp	r4, #1
 414 0134 0FD0     		beq	.L24
 415 0136 002C     		cmp	r4, #0
 416 0138 04D0     		beq	.L23
 417 013a 022C     		cmp	r4, #2
 418 013c 14D0     		beq	.L25
 419 013e 032C     		cmp	r4, #3
 420 0140 25D1     		bne	.L22
 421 0142 1AE0     		b	.L26
 422              	.L23:
3431:screens.c     **** 			write_bitmap( adm, ICON_BRIGHTNESS_AND_CONTRAST_MENU, ICON_BRIGHTNESS_AND_CONTRAST_MENU_X, ICON_
 423              		.loc 1 3431 0
 424 0144 0123     		mov	r3, #1
 425 0146 0093     		str	r3, [sp]
 426 0148 4348     		ldr	r0, .L36+4
 427 014a 4449     		ldr	r1, .L36+8
 428 014c 2B22     		mov	r2, #43
 429 014e 1123     		mov	r3, #17
 430 0150 FFF7FEFF 		bl	write_bitmap
 431              	.LVL28:
3432:screens.c     **** 			break;
 432              		.loc 1 3432 0
 433 0154 1BE0     		b	.L22
 434              	.L24:
3434:screens.c     **** 			write_bitmap( adm, ICON_TIME_AND_DATE_ADJUST_MENU, ICON_TIME_AND_DATE_ADJUST_MENU_X, ICON_TIME_A
 435              		.loc 1 3434 0
 436 0156 0123     		mov	r3, #1
 437 0158 0093     		str	r3, [sp]
 438 015a 3F48     		ldr	r0, .L36+4
 439 015c 4049     		ldr	r1, .L36+12
 440 015e 2B22     		mov	r2, #43
 441 0160 2C23     		mov	r3, #44
 442 0162 FFF7FEFF 		bl	write_bitmap
 443              	.LVL29:
3435:screens.c     **** 			break;
 444              		.loc 1 3435 0
 445 0166 12E0     		b	.L22
 446              	.L25:
3437:screens.c     **** 			write_bitmap( adm, ICON_TECHNICIAN_MENU, ICON_TECHNICIAN_MENU_X, ICON_TECHNICIAN_MENU_Y, AND );
 447              		.loc 1 3437 0
 448 0168 0123     		mov	r3, #1
 449 016a 0093     		str	r3, [sp]
 450 016c 3A48     		ldr	r0, .L36+4
 451 016e 3D49     		ldr	r1, .L36+16
 452 0170 2B22     		mov	r2, #43
 453 0172 4623     		mov	r3, #70
 454 0174 FFF7FEFF 		bl	write_bitmap
 455              	.LVL30:
3438:screens.c     **** 			break;
 456              		.loc 1 3438 0
 457 0178 09E0     		b	.L22
 458              	.L26:
3440:screens.c     **** 			draw_box( adm, ICON_DIAGNOSTICS_SCREENS_X, ICON_DIAGNOSTICS_SCREENS_Y, ICON_DIAGNOSTICS_SCREENS_
 459              		.loc 1 3440 0
 460 017a 6423     		mov	r3, #100
 461 017c 0093     		str	r3, [sp]
 462 017e 4023     		mov	r3, #64
 463 0180 0193     		str	r3, [sp, #4]
 464 0182 3548     		ldr	r0, .L36+4
 465 0184 2B21     		mov	r1, #43
 466 0186 5722     		mov	r2, #87
 467 0188 6023     		mov	r3, #96
 468 018a FFF7FEFF 		bl	draw_box
 469              	.LVL31:
 470              	.L22:
3445:screens.c     **** 		switch( selection )
 471              		.loc 1 3445 0
 472 018e 394B     		ldr	r3, .L36+32
 473 0190 1B78     		ldrb	r3, [r3]
 474 0192 012B     		cmp	r3, #1
 475 0194 0FD0     		beq	.L29
 476 0196 002B     		cmp	r3, #0
 477 0198 04D0     		beq	.L28
 478 019a 022B     		cmp	r3, #2
 479 019c 14D0     		beq	.L30
 480 019e 032B     		cmp	r3, #3
 481 01a0 23D1     		bne	.L27
 482 01a2 1AE0     		b	.L31
 483              	.L28:
3448:screens.c     **** 			write_bitmap( adm, ICON_BRIGHTNESS_AND_CONTRAST_MENU_SELECTED, ICON_BRIGHTNESS_AND_CONTRAST_MENU
 484              		.loc 1 3448 0
 485 01a4 0223     		mov	r3, #2
 486 01a6 0093     		str	r3, [sp]
 487 01a8 2B48     		ldr	r0, .L36+4
 488 01aa 3A49     		ldr	r1, .L36+64
 489 01ac 2B22     		mov	r2, #43
 490 01ae 1123     		mov	r3, #17
 491 01b0 FFF7FEFF 		bl	write_bitmap
 492              	.LVL32:
3449:screens.c     **** 			break;
 493              		.loc 1 3449 0
 494 01b4 19E0     		b	.L27
 495              	.L29:
3451:screens.c     **** 			write_bitmap( adm, ICON_TIME_AND_DATE_ADJUST_MENU_SELECTED, ICON_TIME_AND_DATE_ADJUST_MENU_X, IC
 496              		.loc 1 3451 0
 497 01b6 0223     		mov	r3, #2
 498 01b8 0093     		str	r3, [sp]
 499 01ba 2748     		ldr	r0, .L36+4
 500 01bc 3649     		ldr	r1, .L36+68
 501 01be 2B22     		mov	r2, #43
 502 01c0 2C23     		mov	r3, #44
 503 01c2 FFF7FEFF 		bl	write_bitmap
 504              	.LVL33:
3452:screens.c     **** 			break;
 505              		.loc 1 3452 0
 506 01c6 10E0     		b	.L27
 507              	.L30:
3454:screens.c     **** 			write_bitmap( adm, ICON_TECHNICIAN_MENU_SELECTED, ICON_TECHNICIAN_MENU_X, ICON_TECHNICIAN_MENU_Y
 508              		.loc 1 3454 0
 509 01c8 0223     		mov	r3, #2
 510 01ca 0093     		str	r3, [sp]
 511 01cc 2248     		ldr	r0, .L36+4
 512 01ce 3349     		ldr	r1, .L36+72
 513 01d0 2B22     		mov	r2, #43
 514 01d2 4623     		mov	r3, #70
 515 01d4 FFF7FEFF 		bl	write_bitmap
 516              	.LVL34:
3455:screens.c     **** 			break;
 517              		.loc 1 3455 0
 518 01d8 07E0     		b	.L27
 519              	.L31:
3457:screens.c     **** 			write_bitmap( adm, ICON_DIAGNOSTICS_SCREENS_SELECTED, ICON_DIAGNOSTICS_SCREENS_X, ICON_DIAGNOSTI
 520              		.loc 1 3457 0
 521 01da 0223     		mov	r3, #2
 522 01dc 0093     		str	r3, [sp]
 523 01de 1E48     		ldr	r0, .L36+4
 524 01e0 2F49     		ldr	r1, .L36+76
 525 01e2 2B22     		mov	r2, #43
 526 01e4 5723     		mov	r3, #87
 527 01e6 FFF7FEFF 		bl	write_bitmap
 528              	.LVL35:
 529              	.L27:
3466:screens.c     **** 	if( selection != old_selection )
 530              		.loc 1 3466 0
 531 01ea 224B     		ldr	r3, .L36+32
 532 01ec 1B78     		ldrb	r3, [r3]
 533 01ee A342     		cmp	r3, r4
 534 01f0 2CD0     		beq	.L7
3468:screens.c     **** 		draw_box( adm, 62, 102, 62+36-1, 102+24-1, CLEAR ); // Clear NAVIGATION tab area
 535              		.loc 1 3468 0
 536 01f2 7D23     		mov	r3, #125
 537 01f4 0093     		str	r3, [sp]
 538 01f6 4023     		mov	r3, #64
 539 01f8 0193     		str	r3, [sp, #4]
 540 01fa 1748     		ldr	r0, .L36+4
 541 01fc 3E21     		mov	r1, #62
 542 01fe 6622     		mov	r2, #102
 543 0200 6123     		mov	r3, #97
 544 0202 FFF7FEFF 		bl	draw_box
 545              	.LVL36:
3470:screens.c     **** 		switch( selection )
 546              		.loc 1 3470 0
 547 0206 1B4B     		ldr	r3, .L36+32
 548 0208 1B78     		ldrb	r3, [r3]
 549 020a 012B     		cmp	r3, #1
 550 020c 0DD0     		beq	.L33
 551 020e 002B     		cmp	r3, #0
 552 0210 02D0     		beq	.L32
 553 0212 032B     		cmp	r3, #3
 554 0214 1AD8     		bhi	.L7
 555 0216 11E0     		b	.L35
 556              	.L32:
3473:screens.c     **** 			write_bitmap( adm, TABNAV_D,  62, 102, OR ); // NAVIGATION: Down
 557              		.loc 1 3473 0
 558 0218 0223     		mov	r3, #2
 559 021a 0093     		str	r3, [sp]
 560 021c 0E48     		ldr	r0, .L36+4
 561 021e 2149     		ldr	r1, .L36+80
 562 0220 3E22     		mov	r2, #62
 563 0222 6623     		mov	r3, #102
 564 0224 FFF7FEFF 		bl	write_bitmap
 565              	.LVL37:
3474:screens.c     **** 			break;
 566              		.loc 1 3474 0
 567 0228 10E0     		b	.L7
 568              	.L33:
3477:screens.c     **** 			write_bitmap( adm, TABNAV_UD, 62, 102, OR ); // NAVIGATION: Up Down
 569              		.loc 1 3477 0
 570 022a 0223     		mov	r3, #2
 571 022c 0093     		str	r3, [sp]
 572 022e 0A48     		ldr	r0, .L36+4
 573 0230 1D49     		ldr	r1, .L36+84
 574 0232 3E22     		mov	r2, #62
 575 0234 6623     		mov	r3, #102
 576 0236 FFF7FEFF 		bl	write_bitmap
 577              	.LVL38:
3478:screens.c     **** 			break;
 578              		.loc 1 3478 0
 579 023a 07E0     		b	.L7
 580              	.L35:
3482:screens.c     **** 			write_bitmap( adm, TABNAV_U,  62, 102, OR ); // NAVIGATION: Up
 581              		.loc 1 3482 0
 582 023c 0223     		mov	r3, #2
 583 023e 0093     		str	r3, [sp]
 584 0240 0548     		ldr	r0, .L36+4
 585 0242 1A49     		ldr	r1, .L36+88
 586 0244 3E22     		mov	r2, #62
 587 0246 6623     		mov	r3, #102
 588 0248 FFF7FEFF 		bl	write_bitmap
 589              	.LVL39:
 590              	.L7:
3487:screens.c     **** }
 591              		.loc 1 3487 0
 592 024c 03B0     		add	sp, sp, #12
 593              		@ sp needed for prologue
 594              	.LVL40:
 595              	.LVL41:
 596 024e F0BC     		pop	{r4, r5, r6, r7}
 597 0250 01BC     		pop	{r0}
 598 0252 0047     		bx	r0
 599              	.L37:
 600              		.align	2
 601              	.L36:
 602 0254 00000000 		.word	startup
 603 0258 00000000 		.word	adm
 604 025c 00000000 		.word	ICON_BRIGHTNESS_AND_CONTRAST_MENU
 605 0260 00000000 		.word	ICON_TIME_AND_DATE_ADJUST_MENU
 606 0264 00000000 		.word	ICON_TECHNICIAN_MENU
 607 0268 00000000 		.word	TAB
 608 026c 00000000 		.word	TABENT
 609 0270 00000000 		.word	TABESC
 610 0274 00000000 		.word	selection
 611 0278 00000000 		.word	escape
 612 027c 00000000 		.word	screen131
 613 0280 00000000 		.word	window
 614 0284 00000000 		.word	screen132
 615 0288 00000000 		.word	screen140
 616 028c 00000000 		.word	screen150
 617 0290 00000000 		.word	.LANCHOR0
 618 0294 00000000 		.word	ICON_BRIGHTNESS_AND_CONTRAST_MENU_SELECTED
 619 0298 00000000 		.word	ICON_TIME_AND_DATE_ADJUST_MENU_SELECTED
 620 029c 00000000 		.word	ICON_TECHNICIAN_MENU_SELECTED
 621 02a0 00000000 		.word	ICON_DIAGNOSTICS_SCREENS_SELECTED
 622 02a4 00000000 		.word	TABNAV_D
 623 02a8 00000000 		.word	TABNAV_UD
 624 02ac 00000000 		.word	TABNAV_U
 625              		.cfi_endproc
 626              	.LFE382:
 628              		.section	.text.screen100,"ax",%progbits
 629              		.align	2
 630              		.global	screen100
 631              		.code	16
 632              		.thumb_func
 634              	screen100:
 635              	.LFB378:
1440:screens.c     **** {
 636              		.loc 1 1440 0
 637              		.cfi_startproc
 638              	.LVL42:
 639 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 640              	.LCFI4:
 641              		.cfi_def_cfa_offset 20
 642              		.cfi_offset 4, -20
 643              		.cfi_offset 5, -16
 644              		.cfi_offset 6, -12
 645              		.cfi_offset 7, -8
 646              		.cfi_offset 14, -4
 647 0002 83B0     		sub	sp, sp, #12
 648              	.LCFI5:
 649              		.cfi_def_cfa_offset 32
 650 0004 061C     		mov	r6, r0
1445:screens.c     **** 	if( !startup )
 651              		.loc 1 1445 0
 652 0006 B84B     		ldr	r3, .L78
 653 0008 1B78     		ldrb	r3, [r3]
 654 000a 002B     		cmp	r3, #0
 655 000c 45D1     		bne	.L39
1447:screens.c     **** 		startup = 1;
 656              		.loc 1 1447 0
 657 000e 0122     		mov	r2, #1
 658 0010 B54B     		ldr	r3, .L78
 659 0012 1A70     		strb	r2, [r3]
1449:screens.c     **** 		draw_frame( adm );
 660              		.loc 1 1449 0
 661 0014 B54C     		ldr	r4, .L78+4
 662 0016 201C     		mov	r0, r4
 663              	.LVL43:
 664 0018 FFF7FEFF 		bl	draw_frame
 665              	.LVL44:
1455:screens.c     **** 		write_bitmap( adm, ICON_BALE_SETUP_MENU,      ICON_BALE_SETUP_MENU_X,     ICON_BALE_SETUP_MENU_Y,
 666              		.loc 1 1455 0
 667 001c 0225     		mov	r5, #2
 668 001e 0095     		str	r5, [sp]
 669 0020 201C     		mov	r0, r4
 670 0022 B349     		ldr	r1, .L78+8
 671 0024 0F22     		mov	r2, #15
 672 0026 1423     		mov	r3, #20
 673 0028 FFF7FEFF 		bl	write_bitmap
 674              	.LVL45:
1456:screens.c     **** 		write_bitmap( adm, ICON_MACHINE_SETUP_MENU,   ICON_MACHINE_SETUP_MENU_X,  ICON_MACHINE_SETUP_MENU
 675              		.loc 1 1456 0
 676 002c 0095     		str	r5, [sp]
 677 002e 201C     		mov	r0, r4
 678 0030 B049     		ldr	r1, .L78+12
 679 0032 4E22     		mov	r2, #78
 680 0034 1423     		mov	r3, #20
 681 0036 FFF7FEFF 		bl	write_bitmap
 682              	.LVL46:
1457:screens.c     **** 		write_bitmap( adm, ICON_BALE_COUNT_MENU,      ICON_BALE_COUNT_MENU_X,     ICON_BALE_COUNT_MENU_Y,
 683              		.loc 1 1457 0
 684 003a 0095     		str	r5, [sp]
 685 003c 201C     		mov	r0, r4
 686 003e AE49     		ldr	r1, .L78+16
 687 0040 0F22     		mov	r2, #15
 688 0042 3A23     		mov	r3, #58
 689 0044 FFF7FEFF 		bl	write_bitmap
 690              	.LVL47:
1458:screens.c     **** 		write_bitmap( adm, ICON_OPERATOR_SETUP_MENU,  ICON_OPERATOR_SETUP_MENU_X, ICON_OPERATOR_SETUP_MEN
 691              		.loc 1 1458 0
 692 0048 0095     		str	r5, [sp]
 693 004a 201C     		mov	r0, r4
 694 004c AB49     		ldr	r1, .L78+20
 695 004e 4E22     		mov	r2, #78
 696 0050 3A23     		mov	r3, #58
 697 0052 FFF7FEFF 		bl	write_bitmap
 698              	.LVL48:
1464:screens.c     **** 		write_bitmap( adm, TAB,      0, 107, OR );
 699              		.loc 1 1464 0
 700 0056 AA4F     		ldr	r7, .L78+24
 701 0058 0095     		str	r5, [sp]
 702 005a 201C     		mov	r0, r4
 703 005c 391C     		mov	r1, r7
 704 005e 0022     		mov	r2, #0
 705 0060 6B23     		mov	r3, #107
 706 0062 FFF7FEFF 		bl	write_bitmap
 707              	.LVL49:
1465:screens.c     **** 		write_bitmap( adm, TAB,     31, 107, OR );
 708              		.loc 1 1465 0
 709 0066 0095     		str	r5, [sp]
 710 0068 201C     		mov	r0, r4
 711 006a 391C     		mov	r1, r7
 712 006c 1F22     		mov	r2, #31
 713 006e 6B23     		mov	r3, #107
 714 0070 FFF7FEFF 		bl	write_bitmap
 715              	.LVL50:
1467:screens.c     **** 		write_bitmap( adm, TABENT,  99, 107, OR ); // ENTER
 716              		.loc 1 1467 0
 717 0074 0095     		str	r5, [sp]
 718 0076 201C     		mov	r0, r4
 719 0078 A249     		ldr	r1, .L78+28
 720 007a 6322     		mov	r2, #99
 721 007c 6B23     		mov	r3, #107
 722 007e FFF7FEFF 		bl	write_bitmap
 723              	.LVL51:
1468:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
 724              		.loc 1 1468 0
 725 0082 0095     		str	r5, [sp]
 726 0084 201C     		mov	r0, r4
 727 0086 A049     		ldr	r1, .L78+32
 728 0088 8222     		mov	r2, #130
 729 008a 6B23     		mov	r3, #107
 730 008c FFF7FEFF 		bl	write_bitmap
 731              	.LVL52:
1471:screens.c     **** 		looptime = 0;
 732              		.loc 1 1471 0
 733 0090 0022     		mov	r2, #0
 734 0092 9E4B     		ldr	r3, .L78+36
 735 0094 1A70     		strb	r2, [r3]
 736              	.LVL53:
1473:screens.c     **** 		old_selection = 0xff;
 737              		.loc 1 1473 0
 738 0096 FF24     		mov	r4, #255
 739 0098 01E0     		b	.L40
 740              	.LVL54:
 741              	.L39:
1477:screens.c     **** 		old_selection = selection;
 742              		.loc 1 1477 0
 743 009a 9D4B     		ldr	r3, .L78+40
 744 009c 1C78     		ldrb	r4, [r3]
 745              	.LVL55:
 746              	.L40:
1481:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 747              		.loc 1 1481 0
 748 009e 0020     		mov	r0, #0
 749 00a0 FFF7FEFF 		bl	ClockDisplay
 750              	.LVL56:
1487:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 751              		.loc 1 1487 0
 752 00a4 B30F     		lsr	r3, r6, #30
1489:screens.c     **** 	if( key_status )
 753              		.loc 1 1489 0
 754 00a6 7FD0     		beq	.L41
1491:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 755              		.loc 1 1491 0
 756 00a8 B600     		lsl	r6, r6, #2
 757              	.LVL57:
 758 00aa B608     		lsr	r6, r6, #2
 759              	.LVL58:
1493:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
 760              		.loc 1 1493 0
 761 00ac 8023     		mov	r3, #128
 762 00ae 5B00     		lsl	r3, r3, #1
 763 00b0 9E42     		cmp	r6, r3
 764 00b2 03D1     		bne	.L42
1495:screens.c     **** 			escape = 1;
 765              		.loc 1 1495 0
 766 00b4 0122     		mov	r2, #1
 767 00b6 974B     		ldr	r3, .L78+44
 768 00b8 1A70     		strb	r2, [r3]
 769 00ba 75E0     		b	.L41
 770              	.L42:
1497:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey ENT)
 771              		.loc 1 1497 0
 772 00bc 082E     		cmp	r6, #8
 773 00be 1AD1     		bne	.L43
1499:screens.c     **** 			switch( selection )
 774              		.loc 1 1499 0
 775 00c0 934B     		ldr	r3, .L78+40
 776 00c2 1B78     		ldrb	r3, [r3]
 777 00c4 012B     		cmp	r3, #1
 778 00c6 0AD0     		beq	.L45
 779 00c8 002B     		cmp	r3, #0
 780 00ca 04D0     		beq	.L44
 781 00cc 022B     		cmp	r3, #2
 782 00ce 0AD0     		beq	.L46
 783 00d0 032B     		cmp	r3, #3
 784 00d2 69D1     		bne	.L41
 785 00d4 0BE0     		b	.L47
 786              	.L44:
1502:screens.c     **** 				window = screen110; // Bale Setup Menu
 787              		.loc 1 1502 0
 788 00d6 904A     		ldr	r2, .L78+48
 789 00d8 904B     		ldr	r3, .L78+52
 790 00da 1A60     		str	r2, [r3]
1503:screens.c     **** 				break;
 791              		.loc 1 1503 0
 792 00dc 64E0     		b	.L41
 793              	.L45:
1506:screens.c     **** 				window = screen111; // Machine Setup Menu
 794              		.loc 1 1506 0
 795 00de 904A     		ldr	r2, .L78+56
 796 00e0 8E4B     		ldr	r3, .L78+52
 797 00e2 1A60     		str	r2, [r3]
1507:screens.c     **** 				break;
 798              		.loc 1 1507 0
 799 00e4 60E0     		b	.L41
 800              	.L46:
1510:screens.c     **** 				window = screen112; // Bale Count Menu
 801              		.loc 1 1510 0
 802 00e6 8F4A     		ldr	r2, .L78+60
 803 00e8 8C4B     		ldr	r3, .L78+52
 804 00ea 1A60     		str	r2, [r3]
1511:screens.c     **** 				break;
 805              		.loc 1 1511 0
 806 00ec 5CE0     		b	.L41
 807              	.L47:
1514:screens.c     **** 				window = screen113; // Operator Setup Menu
 808              		.loc 1 1514 0
 809 00ee 8E4A     		ldr	r2, .L78+64
 810 00f0 8A4B     		ldr	r3, .L78+52
 811 00f2 1A60     		str	r2, [r3]
1515:screens.c     **** 				break;
 812              		.loc 1 1515 0
 813 00f4 58E0     		b	.L41
 814              	.L43:
1518:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
 815              		.loc 1 1518 0
 816 00f6 202E     		cmp	r6, #32
 817 00f8 13D1     		bne	.L48
1520:screens.c     **** 			switch( selection )
 818              		.loc 1 1520 0
 819 00fa 854B     		ldr	r3, .L78+40
 820 00fc 1B78     		ldrb	r3, [r3]
 821 00fe 022B     		cmp	r3, #2
 822 0100 07D0     		beq	.L50
 823 0102 032B     		cmp	r3, #3
 824 0104 09D0     		beq	.L51
 825 0106 012B     		cmp	r3, #1
 826 0108 4ED1     		bne	.L41
1526:screens.c     **** 				selection = 2; /* (1,2) */
 827              		.loc 1 1526 0
 828 010a 0222     		mov	r2, #2
 829 010c 804B     		ldr	r3, .L78+40
 830 010e 1A70     		strb	r2, [r3]
1527:screens.c     **** 				break;
 831              		.loc 1 1527 0
 832 0110 4AE0     		b	.L41
 833              	.L50:
1530:screens.c     **** 				selection = 0; /* (1,1) */
 834              		.loc 1 1530 0
 835 0112 0022     		mov	r2, #0
 836 0114 7E4B     		ldr	r3, .L78+40
 837 0116 1A70     		strb	r2, [r3]
1531:screens.c     **** 				break;
 838              		.loc 1 1531 0
 839 0118 46E0     		b	.L41
 840              	.L51:
1534:screens.c     **** 				selection = 1; /* (2,1) */
 841              		.loc 1 1534 0
 842 011a 0122     		mov	r2, #1
 843 011c 7C4B     		ldr	r3, .L78+40
 844 011e 1A70     		strb	r2, [r3]
1535:screens.c     **** 				break;
 845              		.loc 1 1535 0
 846 0120 42E0     		b	.L41
 847              	.L48:
1538:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
 848              		.loc 1 1538 0
 849 0122 402E     		cmp	r6, #64
 850 0124 14D1     		bne	.L52
1540:screens.c     **** 			switch( selection )
 851              		.loc 1 1540 0
 852 0126 7A4B     		ldr	r3, .L78+40
 853 0128 1B78     		ldrb	r3, [r3]
 854 012a 012B     		cmp	r3, #1
 855 012c 08D0     		beq	.L54
 856 012e 002B     		cmp	r3, #0
 857 0130 02D0     		beq	.L53
 858 0132 022B     		cmp	r3, #2
 859 0134 38D1     		bne	.L41
 860 0136 07E0     		b	.L55
 861              	.L53:
1543:screens.c     **** 				selection = 2; /* (1,2) */
 862              		.loc 1 1543 0
 863 0138 0222     		mov	r2, #2
 864 013a 754B     		ldr	r3, .L78+40
 865 013c 1A70     		strb	r2, [r3]
1544:screens.c     **** 				break;
 866              		.loc 1 1544 0
 867 013e 33E0     		b	.L41
 868              	.L54:
1547:screens.c     **** 				selection = 3; /* (2,2) */
 869              		.loc 1 1547 0
 870 0140 0322     		mov	r2, #3
 871 0142 734B     		ldr	r3, .L78+40
 872 0144 1A70     		strb	r2, [r3]
1548:screens.c     **** 				break;
 873              		.loc 1 1548 0
 874 0146 2FE0     		b	.L41
 875              	.L55:
1551:screens.c     **** 				selection = 1; /* (2,1) */
 876              		.loc 1 1551 0
 877 0148 0122     		mov	r2, #1
 878 014a 714B     		ldr	r3, .L78+40
 879 014c 1A70     		strb	r2, [r3]
1552:screens.c     **** 				break;
 880              		.loc 1 1552 0
 881 014e 2BE0     		b	.L41
 882              	.L52:
1558:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
 883              		.loc 1 1558 0
 884 0150 102E     		cmp	r6, #16
 885 0152 13D1     		bne	.L56
1560:screens.c     **** 			switch( selection )
 886              		.loc 1 1560 0
 887 0154 6E4B     		ldr	r3, .L78+40
 888 0156 1B78     		ldrb	r3, [r3]
 889 0158 022B     		cmp	r3, #2
 890 015a 07D0     		beq	.L58
 891 015c 032B     		cmp	r3, #3
 892 015e 09D0     		beq	.L59
 893 0160 012B     		cmp	r3, #1
 894 0162 21D1     		bne	.L41
1563:screens.c     **** 				selection = 0; /* (1,1) */
 895              		.loc 1 1563 0
 896 0164 0022     		mov	r2, #0
 897 0166 6A4B     		ldr	r3, .L78+40
 898 0168 1A70     		strb	r2, [r3]
1564:screens.c     **** 				break;
 899              		.loc 1 1564 0
 900 016a 1DE0     		b	.L41
 901              	.L58:
1567:screens.c     **** 				selection = 1; /* (2,1) */
 902              		.loc 1 1567 0
 903 016c 0122     		mov	r2, #1
 904 016e 684B     		ldr	r3, .L78+40
 905 0170 1A70     		strb	r2, [r3]
1568:screens.c     **** 				break;
 906              		.loc 1 1568 0
 907 0172 19E0     		b	.L41
 908              	.L59:
1571:screens.c     **** 				selection = 2; /* (1,2) */
 909              		.loc 1 1571 0
 910 0174 0222     		mov	r2, #2
 911 0176 664B     		ldr	r3, .L78+40
 912 0178 1A70     		strb	r2, [r3]
1572:screens.c     **** 				break;
 913              		.loc 1 1572 0
 914 017a 15E0     		b	.L41
 915              	.L56:
1575:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
 916              		.loc 1 1575 0
 917 017c 802E     		cmp	r6, #128
 918 017e 13D1     		bne	.L41
1577:screens.c     **** 			switch( selection )
 919              		.loc 1 1577 0
 920 0180 634B     		ldr	r3, .L78+40
 921 0182 1B78     		ldrb	r3, [r3]
 922 0184 012B     		cmp	r3, #1
 923 0186 08D0     		beq	.L61
 924 0188 002B     		cmp	r3, #0
 925 018a 02D0     		beq	.L60
 926 018c 022B     		cmp	r3, #2
 927 018e 0BD1     		bne	.L41
 928 0190 07E0     		b	.L62
 929              	.L60:
1580:screens.c     **** 				selection = 1; /* (2,1) */
 930              		.loc 1 1580 0
 931 0192 0122     		mov	r2, #1
 932 0194 5E4B     		ldr	r3, .L78+40
 933 0196 1A70     		strb	r2, [r3]
1581:screens.c     **** 				break;
 934              		.loc 1 1581 0
 935 0198 06E0     		b	.L41
 936              	.L61:
1584:screens.c     **** 				selection = 2; /* (1,2) */
 937              		.loc 1 1584 0
 938 019a 0222     		mov	r2, #2
 939 019c 5C4B     		ldr	r3, .L78+40
 940 019e 1A70     		strb	r2, [r3]
1585:screens.c     **** 				break;
 941              		.loc 1 1585 0
 942 01a0 02E0     		b	.L41
 943              	.L62:
1588:screens.c     **** 				selection = 3; /* (2,2) */
 944              		.loc 1 1588 0
 945 01a2 0322     		mov	r2, #3
 946 01a4 5A4B     		ldr	r3, .L78+40
 947 01a6 1A70     		strb	r2, [r3]
 948              	.L41:
1599:screens.c     **** 	if( selection != old_selection )
 949              		.loc 1 1599 0
 950 01a8 594B     		ldr	r3, .L78+40
 951 01aa 1B78     		ldrb	r3, [r3]
 952 01ac A342     		cmp	r3, r4
 953 01ae 00D1     		bne	.LCB950
 954 01b0 95E0     		b	.L38	@long jump
 955              	.LCB950:
1602:screens.c     **** 		switch( old_selection )
 956              		.loc 1 1602 0
 957 01b2 012C     		cmp	r4, #1
 958 01b4 0FD0     		beq	.L66
 959 01b6 002C     		cmp	r4, #0
 960 01b8 04D0     		beq	.L65
 961 01ba 022C     		cmp	r4, #2
 962 01bc 14D0     		beq	.L67
 963 01be 032C     		cmp	r4, #3
 964 01c0 23D1     		bne	.L64
 965 01c2 1AE0     		b	.L68
 966              	.L65:
1605:screens.c     **** 			write_bitmap( adm, ICON_BALE_SETUP_MENU, ICON_BALE_SETUP_MENU_X, ICON_BALE_SETUP_MENU_Y, AND );
 967              		.loc 1 1605 0
 968 01c4 0123     		mov	r3, #1
 969 01c6 0093     		str	r3, [sp]
 970 01c8 4848     		ldr	r0, .L78+4
 971 01ca 4949     		ldr	r1, .L78+8
 972 01cc 0F22     		mov	r2, #15
 973 01ce 1423     		mov	r3, #20
 974 01d0 FFF7FEFF 		bl	write_bitmap
 975              	.LVL59:
1606:screens.c     **** 			break;
 976              		.loc 1 1606 0
 977 01d4 19E0     		b	.L64
 978              	.L66:
1608:screens.c     **** 			write_bitmap( adm, ICON_MACHINE_SETUP_MENU, ICON_MACHINE_SETUP_MENU_X, ICON_MACHINE_SETUP_MENU_Y
 979              		.loc 1 1608 0
 980 01d6 0123     		mov	r3, #1
 981 01d8 0093     		str	r3, [sp]
 982 01da 4448     		ldr	r0, .L78+4
 983 01dc 4549     		ldr	r1, .L78+12
 984 01de 4E22     		mov	r2, #78
 985 01e0 1423     		mov	r3, #20
 986 01e2 FFF7FEFF 		bl	write_bitmap
 987              	.LVL60:
1609:screens.c     **** 			break;
 988              		.loc 1 1609 0
 989 01e6 10E0     		b	.L64
 990              	.L67:
1611:screens.c     **** 			write_bitmap( adm, ICON_BALE_COUNT_MENU, ICON_BALE_COUNT_MENU_X, ICON_BALE_COUNT_MENU_Y, AND );
 991              		.loc 1 1611 0
 992 01e8 0123     		mov	r3, #1
 993 01ea 0093     		str	r3, [sp]
 994 01ec 3F48     		ldr	r0, .L78+4
 995 01ee 4249     		ldr	r1, .L78+16
 996 01f0 0F22     		mov	r2, #15
 997 01f2 3A23     		mov	r3, #58
 998 01f4 FFF7FEFF 		bl	write_bitmap
 999              	.LVL61:
1612:screens.c     **** 			break;
 1000              		.loc 1 1612 0
 1001 01f8 07E0     		b	.L64
 1002              	.L68:
1614:screens.c     **** 			write_bitmap( adm, ICON_OPERATOR_SETUP_MENU, ICON_OPERATOR_SETUP_MENU_X, ICON_OPERATOR_SETUP_MEN
 1003              		.loc 1 1614 0
 1004 01fa 0123     		mov	r3, #1
 1005 01fc 0093     		str	r3, [sp]
 1006 01fe 3B48     		ldr	r0, .L78+4
 1007 0200 3E49     		ldr	r1, .L78+20
 1008 0202 4E22     		mov	r2, #78
 1009 0204 3A23     		mov	r3, #58
 1010 0206 FFF7FEFF 		bl	write_bitmap
 1011              	.LVL62:
 1012              	.L64:
1619:screens.c     **** 		switch( selection )
 1013              		.loc 1 1619 0
 1014 020a 414B     		ldr	r3, .L78+40
 1015 020c 1B78     		ldrb	r3, [r3]
 1016 020e 012B     		cmp	r3, #1
 1017 0210 0FD0     		beq	.L71
 1018 0212 002B     		cmp	r3, #0
 1019 0214 04D0     		beq	.L70
 1020 0216 022B     		cmp	r3, #2
 1021 0218 14D0     		beq	.L72
 1022 021a 032B     		cmp	r3, #3
 1023 021c 23D1     		bne	.L69
 1024 021e 1AE0     		b	.L73
 1025              	.L70:
1622:screens.c     **** 			write_bitmap( adm, ICON_BALE_SETUP_MENU_SELECTED, ICON_BALE_SETUP_MENU_X, ICON_BALE_SETUP_MENU_Y
 1026              		.loc 1 1622 0
 1027 0220 0223     		mov	r3, #2
 1028 0222 0093     		str	r3, [sp]
 1029 0224 3148     		ldr	r0, .L78+4
 1030 0226 4149     		ldr	r1, .L78+68
 1031 0228 0F22     		mov	r2, #15
 1032 022a 1423     		mov	r3, #20
 1033 022c FFF7FEFF 		bl	write_bitmap
 1034              	.LVL63:
1623:screens.c     **** 			break;
 1035              		.loc 1 1623 0
 1036 0230 19E0     		b	.L69
 1037              	.L71:
1625:screens.c     **** 			write_bitmap( adm, ICON_MACHINE_SETUP_MENU_SELECTED, ICON_MACHINE_SETUP_MENU_X, ICON_MACHINE_SET
 1038              		.loc 1 1625 0
 1039 0232 0223     		mov	r3, #2
 1040 0234 0093     		str	r3, [sp]
 1041 0236 2D48     		ldr	r0, .L78+4
 1042 0238 3D49     		ldr	r1, .L78+72
 1043 023a 4E22     		mov	r2, #78
 1044 023c 1423     		mov	r3, #20
 1045 023e FFF7FEFF 		bl	write_bitmap
 1046              	.LVL64:
1626:screens.c     **** 			break;
 1047              		.loc 1 1626 0
 1048 0242 10E0     		b	.L69
 1049              	.L72:
1628:screens.c     **** 			write_bitmap( adm, ICON_BALE_COUNT_MENU_SELECTED, ICON_BALE_COUNT_MENU_X, ICON_BALE_COUNT_MENU_Y
 1050              		.loc 1 1628 0
 1051 0244 0223     		mov	r3, #2
 1052 0246 0093     		str	r3, [sp]
 1053 0248 2848     		ldr	r0, .L78+4
 1054 024a 3A49     		ldr	r1, .L78+76
 1055 024c 0F22     		mov	r2, #15
 1056 024e 3A23     		mov	r3, #58
 1057 0250 FFF7FEFF 		bl	write_bitmap
 1058              	.LVL65:
1629:screens.c     **** 			break;
 1059              		.loc 1 1629 0
 1060 0254 07E0     		b	.L69
 1061              	.L73:
1631:screens.c     **** 			write_bitmap( adm, ICON_OPERATOR_SETUP_MENU_SELECTED, ICON_OPERATOR_SETUP_MENU_X, ICON_OPERATOR_
 1062              		.loc 1 1631 0
 1063 0256 0223     		mov	r3, #2
 1064 0258 0093     		str	r3, [sp]
 1065 025a 2448     		ldr	r0, .L78+4
 1066 025c 3649     		ldr	r1, .L78+80
 1067 025e 4E22     		mov	r2, #78
 1068 0260 3A23     		mov	r3, #58
 1069 0262 FFF7FEFF 		bl	write_bitmap
 1070              	.LVL66:
 1071              	.L69:
1640:screens.c     **** 	if( selection != old_selection )
 1072              		.loc 1 1640 0
 1073 0266 2A4B     		ldr	r3, .L78+40
 1074 0268 1B78     		ldrb	r3, [r3]
 1075 026a A342     		cmp	r3, r4
 1076 026c 37D0     		beq	.L38
1642:screens.c     **** 		draw_box( adm, 62, 102, 62+36-1, 102+24-1, CLEAR ); // Clear NAVIGATION tab area
 1077              		.loc 1 1642 0
 1078 026e 7D23     		mov	r3, #125
 1079 0270 0093     		str	r3, [sp]
 1080 0272 4023     		mov	r3, #64
 1081 0274 0193     		str	r3, [sp, #4]
 1082 0276 1D48     		ldr	r0, .L78+4
 1083 0278 3E21     		mov	r1, #62
 1084 027a 6622     		mov	r2, #102
 1085 027c 6123     		mov	r3, #97
 1086 027e FFF7FEFF 		bl	draw_box
 1087              	.LVL67:
1644:screens.c     **** 		switch( selection )
 1088              		.loc 1 1644 0
 1089 0282 234B     		ldr	r3, .L78+40
 1090 0284 1B78     		ldrb	r3, [r3]
 1091 0286 012B     		cmp	r3, #1
 1092 0288 0FD0     		beq	.L75
 1093 028a 002B     		cmp	r3, #0
 1094 028c 04D0     		beq	.L74
 1095 028e 022B     		cmp	r3, #2
 1096 0290 14D0     		beq	.L76
 1097 0292 032B     		cmp	r3, #3
 1098 0294 23D1     		bne	.L38
 1099 0296 1AE0     		b	.L77
 1100              	.L74:
1647:screens.c     **** 			write_bitmap( adm, TABNAV_DR, 62, 102, OR ); // NAVIGATION: Down Right
 1101              		.loc 1 1647 0
 1102 0298 0223     		mov	r3, #2
 1103 029a 0093     		str	r3, [sp]
 1104 029c 1348     		ldr	r0, .L78+4
 1105 029e 2749     		ldr	r1, .L78+84
 1106 02a0 3E22     		mov	r2, #62
 1107 02a2 6623     		mov	r3, #102
 1108 02a4 FFF7FEFF 		bl	write_bitmap
 1109              	.LVL68:
1648:screens.c     **** 			break;
 1110              		.loc 1 1648 0
 1111 02a8 19E0     		b	.L38
 1112              	.L75:
1651:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
 1113              		.loc 1 1651 0
 1114 02aa 0223     		mov	r3, #2
 1115 02ac 0093     		str	r3, [sp]
 1116 02ae 0F48     		ldr	r0, .L78+4
 1117 02b0 2349     		ldr	r1, .L78+88
 1118 02b2 3E22     		mov	r2, #62
 1119 02b4 6623     		mov	r3, #102
 1120 02b6 FFF7FEFF 		bl	write_bitmap
 1121              	.LVL69:
1652:screens.c     **** 			break;
 1122              		.loc 1 1652 0
 1123 02ba 10E0     		b	.L38
 1124              	.L76:
1655:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
 1125              		.loc 1 1655 0
 1126 02bc 0223     		mov	r3, #2
 1127 02be 0093     		str	r3, [sp]
 1128 02c0 0A48     		ldr	r0, .L78+4
 1129 02c2 1F49     		ldr	r1, .L78+88
 1130 02c4 3E22     		mov	r2, #62
 1131 02c6 6623     		mov	r3, #102
 1132 02c8 FFF7FEFF 		bl	write_bitmap
 1133              	.LVL70:
1656:screens.c     **** 			break;
 1134              		.loc 1 1656 0
 1135 02cc 07E0     		b	.L38
 1136              	.L77:
1659:screens.c     **** 			write_bitmap( adm, TABNAV_UL, 62, 102, OR ); // NAVIGATION: Up Left
 1137              		.loc 1 1659 0
 1138 02ce 0223     		mov	r3, #2
 1139 02d0 0093     		str	r3, [sp]
 1140 02d2 0648     		ldr	r0, .L78+4
 1141 02d4 1B49     		ldr	r1, .L78+92
 1142 02d6 3E22     		mov	r2, #62
 1143 02d8 6623     		mov	r3, #102
 1144 02da FFF7FEFF 		bl	write_bitmap
 1145              	.LVL71:
 1146              	.L38:
1664:screens.c     **** }
 1147              		.loc 1 1664 0
 1148 02de 03B0     		add	sp, sp, #12
 1149              		@ sp needed for prologue
 1150              	.LVL72:
 1151              	.LVL73:
 1152 02e0 F0BC     		pop	{r4, r5, r6, r7}
 1153 02e2 01BC     		pop	{r0}
 1154 02e4 0047     		bx	r0
 1155              	.L79:
 1156 02e6 C046     		.align	2
 1157              	.L78:
 1158 02e8 00000000 		.word	startup
 1159 02ec 00000000 		.word	adm
 1160 02f0 00000000 		.word	ICON_BALE_SETUP_MENU
 1161 02f4 00000000 		.word	ICON_MACHINE_SETUP_MENU
 1162 02f8 00000000 		.word	ICON_BALE_COUNT_MENU
 1163 02fc 00000000 		.word	ICON_OPERATOR_SETUP_MENU
 1164 0300 00000000 		.word	TAB
 1165 0304 00000000 		.word	TABENT
 1166 0308 00000000 		.word	TABESC
 1167 030c 00000000 		.word	looptime
 1168 0310 00000000 		.word	selection
 1169 0314 00000000 		.word	escape
 1170 0318 00000000 		.word	screen110
 1171 031c 00000000 		.word	window
 1172 0320 00000000 		.word	screen111
 1173 0324 00000000 		.word	screen112
 1174 0328 00000000 		.word	screen113
 1175 032c 00000000 		.word	ICON_BALE_SETUP_MENU_SELECTED
 1176 0330 00000000 		.word	ICON_MACHINE_SETUP_MENU_SELECTED
 1177 0334 00000000 		.word	ICON_BALE_COUNT_MENU_SELECTED
 1178 0338 00000000 		.word	ICON_OPERATOR_SETUP_MENU_SELECTED
 1179 033c 00000000 		.word	TABNAV_DR
 1180 0340 00000000 		.word	TABNAV_UDLR
 1181 0344 00000000 		.word	TABNAV_UL
 1182              		.cfi_endproc
 1183              	.LFE378:
 1185              		.global	__aeabi_ui2f
 1186              		.global	__aeabi_f2d
 1187              		.global	__aeabi_dmul
 1188              		.global	__aeabi_dadd
 1189              		.global	__aeabi_d2f
 1190              		.section	.text.screen151,"ax",%progbits
 1191              		.align	2
 1192              		.global	screen151
 1193              		.code	16
 1194              		.thumb_func
 1196              	screen151:
 1197              	.LFB400:
3855:screens.c     **** // -----------------------------------------------------------
3856:screens.c     **** 
3857:screens.c     **** 
3858:screens.c     **** // -----------------------------------------------------------
3859:screens.c     **** // Function Name       : screen131
3860:screens.c     **** // Description         : Operator Setup Menu - Brightness & Contrast Adjust Menu
3861:screens.c     **** // -----------------------------------------------------------
3862:screens.c     **** 
3863:screens.c     **** #define XSIZE 107
3864:screens.c     **** #define YSIZE 9
3865:screens.c     **** #define XPOS1 40
3866:screens.c     **** #define XPOS2 100
3867:screens.c     **** #define YPOS1 34 
3868:screens.c     **** #define YPOS2 59  
3869:screens.c     **** #define YPOS3 79 
3870:screens.c     **** 
3871:screens.c     **** 
3872:screens.c     **** void screen131( unsigned int lkey  )  
3873:screens.c     **** {
3874:screens.c     **** 	//unsigned char *pd, x_co, change;
3875:screens.c     **** 	unsigned char xp, change, command[8];
3876:screens.c     **** 	unsigned int key_status;
3877:screens.c     **** 
3878:screens.c     **** 	if( !startup )
3879:screens.c     **** 	{
3880:screens.c     **** 		startup = 1;
3881:screens.c     **** 
3882:screens.c     **** 		draw_frame( adm );
3883:screens.c     **** 
3884:screens.c     **** 		write_bitmap( adm, CONTRST1, 25, YPOS2+2, OR );
3885:screens.c     **** 		write_bitmap( adm, BRIGHTN1, 25, YPOS3, OR );
3886:screens.c     **** 
3887:screens.c     **** 		leaf = 1;
3888:screens.c     **** 		change = 1;
3889:screens.c     **** 	}
3890:screens.c     **** 	else
3891:screens.c     **** 	{
3892:screens.c     **** 		change = 0;
3893:screens.c     **** 	}
3894:screens.c     **** 
3895:screens.c     **** #ifdef SHOW_TIME
3896:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
3897:screens.c     **** #endif	
3898:screens.c     **** 
3899:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
3900:screens.c     **** 	if( key_status )
3901:screens.c     **** 	{
3902:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
3903:screens.c     **** 		if( lkey == SW_OR )
3904:screens.c     **** 		{
3905:screens.c     **** 			escape = 1;
3906:screens.c     **** 		}
3907:screens.c     **** 		else if( lkey == SW_CR )
3908:screens.c     **** 		{
3909:screens.c     **** 			switch( selection )
3910:screens.c     **** 			{
3911:screens.c     **** 			case 0:
3912:screens.c     **** 				pRun.pr.DayNight = pRun.pr.DayNight ? 0 : 1;
3913:screens.c     **** 				change = 1;
3914:screens.c     **** 				break;
3915:screens.c     **** 
3916:screens.c     **** 			case 1:
3917:screens.c     **** 				if( pRun.pr.Contrast[pRun.pr.DayNight] < DISPLAY_CONTRAST_MAX )
3918:screens.c     **** 				{
3919:screens.c     **** 					pRun.pr.Contrast[pRun.pr.DayNight]++;
3920:screens.c     **** 				}
3921:screens.c     **** 
3922:screens.c     **** 				change = 1;
3923:screens.c     **** 				break;
3924:screens.c     **** 
3925:screens.c     **** 			case 2:
3926:screens.c     **** 				if( pRun.pr.Brightness[pRun.pr.DayNight] <= 96 )
3927:screens.c     **** 				{
3928:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] += 4;
3929:screens.c     **** 				}
3930:screens.c     **** 				else
3931:screens.c     **** 				{
3932:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] = 100;
3933:screens.c     **** 				}
3934:screens.c     **** 				change = 1;
3935:screens.c     **** 				break;
3936:screens.c     **** 			}
3937:screens.c     **** 		}
3938:screens.c     **** 		else if( lkey == SW_CL )
3939:screens.c     **** 		{
3940:screens.c     **** 			switch( selection )
3941:screens.c     **** 			{
3942:screens.c     **** 			case 0:
3943:screens.c     **** 				/*if( pRun.pr.Contrast[pRun.pr.DayNight] < DISPLAY_CONTRAST_MAX )
3944:screens.c     **** 			{
3945:screens.c     **** 				pRun.pr.Contrast[pRun.pr.DayNight]++;
3946:screens.c     **** 			}
3947:screens.c     ****     	  change = 1;*/
3948:screens.c     **** 				pRun.pr.DayNight =   pRun.pr.DayNight ? 0 : 1;
3949:screens.c     **** 				change = 1;
3950:screens.c     **** 				break;
3951:screens.c     **** 
3952:screens.c     **** 			case 1:
3953:screens.c     **** 				if( pRun.pr.Contrast[pRun.pr.DayNight] > DISPLAY_CONTRAST_MIN )
3954:screens.c     **** 				{
3955:screens.c     **** 					pRun.pr.Contrast[pRun.pr.DayNight]--;
3956:screens.c     **** 				}
3957:screens.c     **** 				change = 1;
3958:screens.c     **** 				break;
3959:screens.c     **** 
3960:screens.c     **** 			case 2:
3961:screens.c     **** 				if( pRun.pr.Brightness[pRun.pr.DayNight] >= 4 )
3962:screens.c     **** 				{
3963:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] -= 4;
3964:screens.c     **** 				}
3965:screens.c     **** 				else
3966:screens.c     **** 				{
3967:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] = 0;
3968:screens.c     **** 				}
3969:screens.c     **** 				change = 1;
3970:screens.c     **** 				break;
3971:screens.c     **** 			}
3972:screens.c     **** 		}
3973:screens.c     **** 		else if( lkey == SW_CU )
3974:screens.c     **** 		{
3975:screens.c     **** 			if( selection )
3976:screens.c     **** 			{
3977:screens.c     **** 				selection--;
3978:screens.c     **** 			}
3979:screens.c     **** 			change = 1;
3980:screens.c     **** 		}
3981:screens.c     **** 		else if( lkey == SW_CD )
3982:screens.c     **** 		{
3983:screens.c     **** 			if( selection < 2 )
3984:screens.c     **** 				selection++;
3985:screens.c     **** 
3986:screens.c     **** 			change = 1;
3987:screens.c     **** 		}
3988:screens.c     **** 	}
3989:screens.c     **** 
3990:screens.c     **** 	// Tabs
3991:screens.c     **** 	if( change == 1 )
3992:screens.c     **** 	{
3993:screens.c     **** 		// Clear area underneath tabs
3994:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR );
3995:screens.c     **** 
3996:screens.c     **** 		// Draw tabs according to position of selection pointer
3997:screens.c     **** 		switch( selection )
3998:screens.c     **** 		{
3999:screens.c     **** 		case 0:
4000:screens.c     **** 			write_bitmap( adm, TAB,         0, 107, OR );
4001:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
4002:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
4003:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
4004:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR ); // ESC
4005:screens.c     **** 			break;
4006:screens.c     **** 		case 1:
4007:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
4008:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
4009:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
4010:screens.c     **** 			write_bitmap( adm, TAB,         99, 107, OR );
4011:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
4012:screens.c     **** 			break;
4013:screens.c     **** 		case 2:
4014:screens.c     **** 			write_bitmap( adm, TAB,         0, 107, OR );
4015:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
4016:screens.c     **** 			write_bitmap( adm, TABNAV_ULR, 62, 102, OR ); // NAVIGATION: Up Left Right
4017:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
4018:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR ); // ESC
4019:screens.c     **** 			break;
4020:screens.c     **** 		}
4021:screens.c     **** 	}
4022:screens.c     **** 
4023:screens.c     **** 	if( change == 1 )
4024:screens.c     **** 	{
4025:screens.c     **** 		change = 0;
4026:screens.c     **** 
4027:screens.c     **** #ifndef WINDOWS
4028:screens.c     **** 		// if Brightness is Zero PIO mode is used, else peripheral PWM is used, Backlight run at 500Hz
4029:screens.c     **** 		SetOutputPWM( BACK, 500, pRun.pr.Brightness[pRun.pr.DayNight] );
4030:screens.c     **** 
4031:screens.c     **** 		// wait until SPI PDC ready (don't overwrite command registers)
4032:screens.c     **** 		while( !(AT91C_BASE_SPI0->SPI_SR & AT91C_SPI_TXBUFE) )
4033:screens.c     **** 		{
4034:screens.c     **** 		}
4035:screens.c     **** 
4036:screens.c     **** 		// set Gain/Pot (2 bytes 0x81 + 'GGPPPPPP')
4037:screens.c     **** 		command[0] = 0x81;
4038:screens.c     **** 		command[1] = DISPLAY_DEFAULT_GAIN | pRun.pr.Contrast[pRun.pr.DayNight];
4039:screens.c     **** 		// send command
4040:screens.c     **** 		SendToDisplay( command, 2, DM_COMMAND );
4041:screens.c     **** #endif 
4042:screens.c     **** 	}
4043:screens.c     **** 
4044:screens.c     **** 
4045:screens.c     **** 	// Pointer
4046:screens.c     **** 	draw_box( adm, 9, (YPOS1-3 - 6), 13, (YPOS3+9), CLEAR );
4047:screens.c     **** 	switch( selection )
4048:screens.c     **** 	{
4049:screens.c     **** 	case 0: // Day/Night
4050:screens.c     **** 		write_bitmap( adm, F1_POINT, 9, (YPOS1+6 - 10), OR );
4051:screens.c     **** 		break;
4052:screens.c     **** 
4053:screens.c     **** 	case 1: // Contrast bar
4054:screens.c     **** 		write_bitmap( adm, F1_POINT, 9, (YPOS1+6 + 21), OR );
4055:screens.c     **** 		break;
4056:screens.c     **** 
4057:screens.c     **** 	default: // case 2: Brightness bar
4058:screens.c     **** 		write_bitmap( adm, F1_POINT, 9, (YPOS1+6 + 41), OR );
4059:screens.c     **** 		break;
4060:screens.c     **** 	}
4061:screens.c     **** 
4062:screens.c     **** 
4063:screens.c     **** 	draw_box( adm, XPOS1, YPOS1-(DAYSYM[1]/2)-2,
4064:screens.c     **** 			XPOS2+DAYSYM[1]+2, YPOS1+(DAYSYM[1]/2)+2, CLEAR );
4065:screens.c     **** 	if( pRun.pr.DayNight )
4066:screens.c     **** 	{
4067:screens.c     **** 		draw_box( adm, XPOS2-3, YPOS1-(DAYSYM[1]/2)-2,
4068:screens.c     **** 				XPOS2+DAYSYM[1]+1, YPOS1+(DAYSYM[1]/2)+1, EMPTY );
4069:screens.c     **** 		clip_box( XPOS2-3, YPOS1-(DAYSYM[1]/2)-2,
4070:screens.c     **** 				XPOS2+DAYSYM[1]+1, YPOS1+(DAYSYM[1]/2)+1 );
4071:screens.c     **** 	}
4072:screens.c     **** 	else
4073:screens.c     **** 	{
4074:screens.c     **** 		draw_box( adm, XPOS1, YPOS1-(DAYSYM[1]/2)-2,
4075:screens.c     **** 				XPOS1+DAYSYM[1]+3, YPOS1+(DAYSYM[1]/2)+1, EMPTY );
4076:screens.c     **** 		clip_box( XPOS1, YPOS1-(DAYSYM[1]/2)-2,
4077:screens.c     **** 				XPOS1+DAYSYM[1]+3, YPOS1+(DAYSYM[1]/2)+1 );
4078:screens.c     **** 	}
4079:screens.c     **** 
4080:screens.c     **** 	write_bitmap( adm, DAYSYM, XPOS1+2, YPOS1-(DAYSYM[1]/2), OR );
4081:screens.c     **** 	write_bitmap( adm, NIGHTSYM, XPOS2+2, YPOS1-(NIGHTSYM[1]/2), OR );
4082:screens.c     **** 
4083:screens.c     **** 	// contrast bar
4084:screens.c     **** 	xp = (unsigned char)((((unsigned int)pRun.pr.Contrast[pRun.pr.DayNight] - DISPLAY_CONTRAST_MIN) * 
4085:screens.c     **** 	draw_box( adm, 42, 68-6, 139, 68-6 + 7, CLEAR );
4086:screens.c     **** 	draw_box( adm, 42, 68-6,  xp, 68-6 + 7, FULL );
4087:screens.c     **** 	draw_box( adm, xp, 68-6, 139, 68-6 + 7, EMPTY );
4088:screens.c     **** 	clip_box(      42, 68-6, 139, 68-6 + 7 );
4089:screens.c     **** 
4090:screens.c     **** 	// brightness bar
4091:screens.c     **** 	xp = (unsigned char)((((unsigned int)pRun.pr.Brightness[pRun.pr.DayNight] - 0) * (139 - 42)) / 100
4092:screens.c     **** 	draw_box( adm, 42, 87-6, 139, 87-6 + 7, CLEAR );
4093:screens.c     **** 	draw_box( adm, 42, 87-6,  xp, 87-6 + 7, FULL );
4094:screens.c     **** 	draw_box( adm, xp, 87-6, 139, 87-6 + 7, EMPTY );
4095:screens.c     **** 	clip_box(      42, 87-6, 139, 87-6 + 7 );
4096:screens.c     **** 
4097:screens.c     **** }
4098:screens.c     **** // -----------------------------------------------------------
4099:screens.c     **** 
4100:screens.c     **** 
4101:screens.c     **** // -----------------------------------------------------------
4102:screens.c     **** // Function Name       : screen132 
4103:screens.c     **** // Description         : Operator Setup Menu - Time & Date Adjust Menu
4104:screens.c     **** // -----------------------------------------------------------
4105:screens.c     **** 
4106:screens.c     **** /*  Origin
4107:screens.c     ****        x ---------------------------------------------------------- 
4108:screens.c     ****        |  CLOCK ICON          HH:MM                                |
4109:screens.c     ****        |                      DD/MM/YYYY                           |
4110:screens.c     ****          --------------------------------------------------------- */
4111:screens.c     **** 
4112:screens.c     **** 
4113:screens.c     **** /* Origin */
4114:screens.c     **** #define TIME_AND_DATE_ADJUST_MENU_ORIGIN_X         0
4115:screens.c     **** #define TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y         0
4116:screens.c     **** 
4117:screens.c     **** 
4118:screens.c     **** /* Offsets */
4119:screens.c     **** 
4120:screens.c     **** /* Clock picture */
4121:screens.c     **** #define CLOCK_PICTURE_OFFSET_X          31
4122:screens.c     **** #define CLOCK_PICTURE_OFFSET_Y          38
4123:screens.c     **** 
4124:screens.c     **** /* "Hours:Minutes" text string */
4125:screens.c     **** #define HOURS_MINUTES_TEXT_OFFSET_X     60
4126:screens.c     **** #define HOURS_MINUTES_TEXT_OFFSET_Y     44
4127:screens.c     **** 
4128:screens.c     **** /* "Date/Month/Year" string */
4129:screens.c     **** #define DATE_MONTH_YEAR_TEXT_OFFSET_X   60
4130:screens.c     **** #define DATE_MONTH_YEAR_TEXT_OFFSET_Y   63
4131:screens.c     **** 
4132:screens.c     **** /* Hours _ */
4133:screens.c     **** #define HOURS_UNDERLINE_OFFSET_X        60
4134:screens.c     **** #define HOURS_UNDERLINE_OFFSET_Y        53
4135:screens.c     **** 
4136:screens.c     **** /* Minutes _ */
4137:screens.c     **** #define MINUTES_UNDERLINE_OFFSET_X      75
4138:screens.c     **** #define MINUTES_UNDERLINE_OFFSET_Y      53
4139:screens.c     **** 
4140:screens.c     **** /* Date _ */
4141:screens.c     **** #define DATE_UNDERLINE_OFFSET_X         60
4142:screens.c     **** #define DATE_UNDERLINE_OFFSET_Y         72
4143:screens.c     **** 
4144:screens.c     **** /* Month _ */
4145:screens.c     **** #define MONTH_UNDERLINE_OFFSET_X        78
4146:screens.c     **** #define MONTH_UNDERLINE_OFFSET_Y        72
4147:screens.c     **** 
4148:screens.c     **** /* Year _ */
4149:screens.c     **** #define YEAR_UNDERLINE_OFFSET_X         96
4150:screens.c     **** #define YEAR_UNDERLINE_OFFSET_Y         72
4151:screens.c     **** 
4152:screens.c     **** 
4153:screens.c     **** /* Top left screen position co-ordinates (x,y) */
4154:screens.c     **** 
4155:screens.c     **** /* Clock picture */
4156:screens.c     **** #define CLOCK_PICTURE_X          TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + CLOCK_PICTURE_OFFSET_X
4157:screens.c     **** #define CLOCK_PICTURE_Y          TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + CLOCK_PICTURE_OFFSET_Y
4158:screens.c     **** 
4159:screens.c     **** /* "Hours:Minutes" text string */
4160:screens.c     **** #define HOURS_MINUTES_TEXT_X     TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + HOURS_MINUTES_TEXT_OFFSET_X
4161:screens.c     **** #define HOURS_MINUTES_TEXT_Y     TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + HOURS_MINUTES_TEXT_OFFSET_Y
4162:screens.c     **** 
4163:screens.c     **** /* "Date/Month/Year" string */
4164:screens.c     **** #define DATE_MONTH_YEAR_TEXT_X   TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + DATE_MONTH_YEAR_TEXT_OFFSET_X
4165:screens.c     **** #define DATE_MONTH_YEAR_TEXT_Y   TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + DATE_MONTH_YEAR_TEXT_OFFSET_Y
4166:screens.c     **** 
4167:screens.c     **** /* Hours _ */
4168:screens.c     **** #define HOURS_UNDERLINE_X        TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + HOURS_UNDERLINE_OFFSET_X
4169:screens.c     **** #define HOURS_UNDERLINE_Y        TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + HOURS_UNDERLINE_OFFSET_Y
4170:screens.c     **** 
4171:screens.c     **** /* Minutes _ */
4172:screens.c     **** #define MINUTES_UNDERLINE_X      TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + MINUTES_UNDERLINE_OFFSET_X
4173:screens.c     **** #define MINUTES_UNDERLINE_Y      TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + MINUTES_UNDERLINE_OFFSET_Y
4174:screens.c     **** 
4175:screens.c     **** /* Date _ */
4176:screens.c     **** #define DATE_UNDERLINE_X         TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + DATE_UNDERLINE_OFFSET_X 
4177:screens.c     **** #define DATE_UNDERLINE_Y         TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + DATE_UNDERLINE_OFFSET_Y
4178:screens.c     **** 
4179:screens.c     **** /* Month _ */
4180:screens.c     **** #define MONTH_UNDERLINE_X        TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + MONTH_UNDERLINE_OFFSET_X
4181:screens.c     **** #define MONTH_UNDERLINE_Y        TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + MONTH_UNDERLINE_OFFSET_Y
4182:screens.c     **** 
4183:screens.c     **** /* Year _ */
4184:screens.c     **** #define YEAR_UNDERLINE_X         TIME_AND_DATE_ADJUST_MENU_ORIGIN_X + YEAR_UNDERLINE_OFFSET_X 
4185:screens.c     **** #define YEAR_UNDERLINE_Y         TIME_AND_DATE_ADJUST_MENU_ORIGIN_Y + YEAR_UNDERLINE_OFFSET_Y
4186:screens.c     **** 
4187:screens.c     **** 
4188:screens.c     **** void screen132( unsigned int lkey )
4189:screens.c     **** {
4190:screens.c     **** 	unsigned int key_status;
4191:screens.c     **** 	unsigned char old_selection;
4192:screens.c     **** 	unsigned char ChangeTime;
4193:screens.c     **** 	unsigned char tstring[32];
4194:screens.c     **** 
4195:screens.c     **** 	static unsigned short int t_year;
4196:screens.c     **** 	static unsigned char t_sec, t_min, t_hrs, t_date, t_day, t_month; // t_sec & t_day not displayed 	
4197:screens.c     **** 
4198:screens.c     **** 	if( !startup )
4199:screens.c     **** 	{
4200:screens.c     **** 		startup = 1;
4201:screens.c     **** 
4202:screens.c     **** 		draw_frame( adm );
4203:screens.c     **** 
4204:screens.c     **** 
4205:screens.c     **** 		/* -----------------------------------------------------------
4206:screens.c     **** 		 * Drawing tabs -- OL, IL, IR & OR tab */
4207:screens.c     **** 
4208:screens.c     **** 		write_bitmap( adm, TABMINUS,  0, 107, OR ); // -
4209:screens.c     **** 		write_bitmap( adm, TABPLUS,  31, 107, OR ); // +
4210:screens.c     **** 
4211:screens.c     **** 		write_bitmap( adm, TAB,      99, 107, OR );
4212:screens.c     **** 		write_bitmap( adm, TABESC,  130, 107, OR ); // ESC
4213:screens.c     **** 
4214:screens.c     **** 
4215:screens.c     **** 		/* -----------------------------------------------------------
4216:screens.c     **** 		 * Displaying clock picture */
4217:screens.c     **** 
4218:screens.c     **** 		write_bitmap( adm, ICON_CLOCK_AT_TEN_TO_TWO, CLOCK_PICTURE_X, CLOCK_PICTURE_Y, OR );
4219:screens.c     **** 
4220:screens.c     **** 
4221:screens.c     **** 		leaf = 1;
4222:screens.c     **** 		ChangeTime = 0;
4223:screens.c     **** 
4224:screens.c     **** 		old_selection = 0xff;
4225:screens.c     **** 	}
4226:screens.c     **** 	else
4227:screens.c     **** 	{
4228:screens.c     **** 		old_selection = selection;
4229:screens.c     **** 	}
4230:screens.c     **** 
4231:screens.c     **** #ifdef SHOW_TIME
4232:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
4233:screens.c     **** #endif
4234:screens.c     **** 
4235:screens.c     **** 	/* -----------------------------------------------------------
4236:screens.c     **** 	 * Set local time variables */
4237:screens.c     **** 
4238:screens.c     **** 	t_sec = bcdtob( ClockRam[0] );
4239:screens.c     **** 	t_min = bcdtob( ClockRam[1] );
4240:screens.c     **** 	t_hrs = bcdtob( ClockRam[2] );
4241:screens.c     **** 	t_day = bcdtob( ClockRam[3] );
4242:screens.c     **** 	t_date = bcdtob( ClockRam[4] );
4243:screens.c     **** 	t_month = bcdtob( ClockRam[5] & 0x1f );
4244:screens.c     **** 	t_year = ((ClockRam[5] & 0x80) ? 2000 : 2100) + bcdtob( ClockRam[6] );
4245:screens.c     **** 
4246:screens.c     **** 
4247:screens.c     **** 	/* -----------------------------------------------------------
4248:screens.c     **** 	 * Key press */
4249:screens.c     **** 
4250:screens.c     **** 	key_status = !editing && (lkey & (SW_NEW | SW_REP));
4251:screens.c     **** 
4252:screens.c     **** 	if( key_status )
4253:screens.c     **** 	{		
4254:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
4255:screens.c     **** 
4256:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
4257:screens.c     **** 		{
4258:screens.c     **** 			escape = 1;
4259:screens.c     **** 		}
4260:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey -)
4261:screens.c     **** 		{
4262:screens.c     **** 			switch( selection )
4263:screens.c     **** 			{
4264:screens.c     **** 			case 0:
4265:screens.c     **** 				if( t_hrs )
4266:screens.c     **** 				{
4267:screens.c     **** 					t_hrs--; 
4268:screens.c     **** 					ChangeTime = 1;
4269:screens.c     **** 				}
4270:screens.c     **** 				break;
4271:screens.c     **** 
4272:screens.c     **** 			case 1:
4273:screens.c     **** 				if( t_min )
4274:screens.c     **** 				{
4275:screens.c     **** 					t_min--; 
4276:screens.c     **** 					ChangeTime = 1;
4277:screens.c     **** 				}
4278:screens.c     **** 				break;
4279:screens.c     **** 
4280:screens.c     **** 			case 2:
4281:screens.c     **** 				if( t_date > 1 )
4282:screens.c     **** 				{
4283:screens.c     **** 					t_date--; 
4284:screens.c     **** 					ChangeTime = 1;
4285:screens.c     **** 				}
4286:screens.c     **** 				break;
4287:screens.c     **** 
4288:screens.c     **** 			case 3:
4289:screens.c     **** 				if( t_month > 1 )
4290:screens.c     **** 				{
4291:screens.c     **** 					t_month--; 
4292:screens.c     **** 					ChangeTime = 1;
4293:screens.c     **** 				}
4294:screens.c     **** 				break;
4295:screens.c     **** 
4296:screens.c     **** 			case 4:
4297:screens.c     **** 				if( t_year > 2000 )
4298:screens.c     **** 				{
4299:screens.c     **** 					t_year--; 
4300:screens.c     **** 					ChangeTime = 1;
4301:screens.c     **** 				}
4302:screens.c     **** 				break;
4303:screens.c     **** 			}
4304:screens.c     **** 			savecal = 1;
4305:screens.c     **** 		}
4306:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey +)
4307:screens.c     **** 		{
4308:screens.c     **** 			switch( selection )
4309:screens.c     **** 			{
4310:screens.c     **** 			case 0:
4311:screens.c     **** 				if( t_hrs < 23 )
4312:screens.c     **** 				{
4313:screens.c     **** 					t_hrs++; 
4314:screens.c     **** 					ChangeTime = 1;
4315:screens.c     **** 				}
4316:screens.c     **** 				break;
4317:screens.c     **** 
4318:screens.c     **** 			case 1:
4319:screens.c     **** 				if( t_min < 59 )
4320:screens.c     **** 				{
4321:screens.c     **** 					t_min++; 
4322:screens.c     **** 					ChangeTime = 1;
4323:screens.c     **** 				}
4324:screens.c     **** 				break;
4325:screens.c     **** 
4326:screens.c     **** 			case 2:
4327:screens.c     **** 				if( t_date < 31 )
4328:screens.c     **** 				{
4329:screens.c     **** 					t_date++; 
4330:screens.c     **** 					ChangeTime = 1;
4331:screens.c     **** 				}
4332:screens.c     **** 				break;
4333:screens.c     **** 
4334:screens.c     **** 			case 3:
4335:screens.c     **** 				if( t_month < 12 )
4336:screens.c     **** 				{
4337:screens.c     **** 					t_month++; 
4338:screens.c     **** 					ChangeTime = 1;
4339:screens.c     **** 				}
4340:screens.c     **** 				break;
4341:screens.c     **** 
4342:screens.c     **** 			case 4:
4343:screens.c     **** 				if( t_year < 2099 )
4344:screens.c     **** 				{
4345:screens.c     **** 					t_year++; 
4346:screens.c     **** 					ChangeTime = 1;
4347:screens.c     **** 				}
4348:screens.c     **** 				break;
4349:screens.c     **** 			}
4350:screens.c     **** 			savecal = 1;
4351:screens.c     **** 		}
4352:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
4353:screens.c     **** 		{
4354:screens.c     **** 			switch( selection )
4355:screens.c     **** 			{
4356:screens.c     **** 			case 0: /* hours (t_hrs) */
4357:screens.c     **** 				break;
4358:screens.c     **** 			case 1: /* minutes (t_min) */
4359:screens.c     **** 				break;
4360:screens.c     **** 			case 2: /* _date (t_date) */
4361:screens.c     **** 				selection = 0; /* hours (t_hrs) */
4362:screens.c     **** 				break;
4363:screens.c     **** 			case 3: /* month (t_month) */
4364:screens.c     **** 				selection = 1; /* minutes (t_min) */
4365:screens.c     **** 				break;
4366:screens.c     **** 			case 4: /* year (t_year) */
4367:screens.c     **** 				selection = 1; /* minutes (t_min) */
4368:screens.c     **** 				break;
4369:screens.c     **** 			}
4370:screens.c     **** 		}
4371:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
4372:screens.c     **** 		{
4373:screens.c     **** 			switch( selection )
4374:screens.c     **** 			{
4375:screens.c     **** 			case 0: /* hours (t_hrs) */
4376:screens.c     **** 				selection = 2; /* _date (t_date) */
4377:screens.c     **** 				break;
4378:screens.c     **** 			case 1: /* minutes (t_min) */
4379:screens.c     **** 				selection = 3; /* month (t_month) */
4380:screens.c     **** 				break;
4381:screens.c     **** 			case 2: /* _date (t_date) */
4382:screens.c     **** 				break;
4383:screens.c     **** 			case 3: /* month (t_month) */
4384:screens.c     **** 				break;
4385:screens.c     **** 			case 4: /* year (t_year) */
4386:screens.c     **** 				break;
4387:screens.c     **** 			}		
4388:screens.c     **** 		}
4389:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
4390:screens.c     **** 		{
4391:screens.c     **** 			switch( selection )
4392:screens.c     **** 			{
4393:screens.c     **** 			case 0: /* hours (t_hrs) */
4394:screens.c     **** 				break;
4395:screens.c     **** 			case 1: /* minutes (t_min) */
4396:screens.c     **** 				selection = 0; /* hours (t_hrs) */
4397:screens.c     **** 				break;
4398:screens.c     **** 			case 2: /* _date (t_date) */
4399:screens.c     **** 				selection = 1; /* minutes (t_min) */
4400:screens.c     **** 				break;
4401:screens.c     **** 			case 3: /* month (t_month) */
4402:screens.c     **** 				selection = 2; /* _date (t_date) */
4403:screens.c     **** 				break;
4404:screens.c     **** 			case 4: /* year (t_year) */
4405:screens.c     **** 				selection = 3; /* month (t_month) */
4406:screens.c     **** 				break;
4407:screens.c     **** 			}
4408:screens.c     **** 		}
4409:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
4410:screens.c     **** 		{
4411:screens.c     **** 			switch( selection )
4412:screens.c     **** 			{
4413:screens.c     **** 			case 0: /* hours (t_hrs) */
4414:screens.c     **** 				selection = 1; /* minutes (t_min) */
4415:screens.c     **** 				break;
4416:screens.c     **** 			case 1: /* minutes (t_min) */
4417:screens.c     **** 				selection = 2; /* _date (t_date) */
4418:screens.c     **** 				break;
4419:screens.c     **** 			case 2: /* _date (t_date) */
4420:screens.c     **** 				selection = 3; /* month (t_month) */
4421:screens.c     **** 				break;
4422:screens.c     **** 			case 3: /* month (t_month) */
4423:screens.c     **** 				selection = 4; /* year (t_year) */
4424:screens.c     **** 				break;
4425:screens.c     **** 			case 4: /* year (t_year) */
4426:screens.c     **** 				break;
4427:screens.c     **** 			}
4428:screens.c     **** 		}
4429:screens.c     **** 	} /* end if( key_status ) */
4430:screens.c     **** 
4431:screens.c     **** 
4432:screens.c     **** 	/* -----------------------------------------------------------
4433:screens.c     **** 	 * Displaying time & date -- all values displayed not limiting to those that have changed */ 
4434:screens.c     **** 
4435:screens.c     **** 	sprintf( tstring, "%02u:%02u", t_hrs, t_min ); /* '%02u:%02u' */
4436:screens.c     **** 	display_f1_text( tstring, TSMAX, HOURS_MINUTES_TEXT_X, HOURS_MINUTES_TEXT_Y, FIXED | LEFT );
4437:screens.c     **** 	sprintf( tstring, "%02u/%02u/%04u", t_date, t_month, t_year ); /* '%02u/%02u/%04u' */
4438:screens.c     **** 	display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
4439:screens.c     **** 
4440:screens.c     **** 
4441:screens.c     **** 	/* -----------------------------------------------------------
4442:screens.c     **** 	 * Flashing currently selected value */
4443:screens.c     **** 
4444:screens.c     **** 	if( half_second )
4445:screens.c     **** 	{
4446:screens.c     **** 		/* flashing currently selected value off */
4447:screens.c     **** 		switch( selection )
4448:screens.c     **** 		{
4449:screens.c     **** 		case 0: /* hours (t_hrs) flashed off */
4450:screens.c     **** 			sprintf( tstring, "  :%02u", t_min ); /* '  :%02u' */
4451:screens.c     **** 			display_f1_text( tstring, TSMAX, HOURS_MINUTES_TEXT_X, HOURS_MINUTES_TEXT_Y, FIXED | LEFT );
4452:screens.c     **** 			break;
4453:screens.c     **** 		case 1: /* minutes (t_min) flashed off */ 
4454:screens.c     **** 			sprintf( tstring, "%02u:  ", t_hrs ); /* '%02u:  ' */
4455:screens.c     **** 			display_f1_text( tstring, TSMAX, HOURS_MINUTES_TEXT_X, HOURS_MINUTES_TEXT_Y, FIXED | LEFT );
4456:screens.c     **** 			break;
4457:screens.c     **** 		case 2: /* _date (t_date) flashed off */ 
4458:screens.c     **** 			sprintf( tstring, "  /%02u/%04u", t_month, t_year ); /* '  /%02u/%04u' */
4459:screens.c     **** 			display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
4460:screens.c     **** 			break;
4461:screens.c     **** 		case 3: /* month (t_month) flashed off */ 
4462:screens.c     **** 			sprintf( tstring, "%02u/  /%04u", t_date, t_year ); /* '%02u/  /%04u' */
4463:screens.c     **** 			display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
4464:screens.c     **** 			break;
4465:screens.c     **** 		case 4: /* year (t_year) flashed off */
4466:screens.c     **** 			sprintf( tstring, "%02u/%02u/    ", t_date, t_month ); /* '%02u/%02u/    ' */
4467:screens.c     **** 			display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
4468:screens.c     **** 			break;
4469:screens.c     **** 		}
4470:screens.c     **** 	} /* end if( half_second ) */ 	
4471:screens.c     **** 
4472:screens.c     **** 
4473:screens.c     **** 	/* -----------------------------------------------------------
4474:screens.c     **** 	 * Underlining currently selected value */
4475:screens.c     **** 
4476:screens.c     **** 	if( selection != old_selection )
4477:screens.c     **** 	{
4478:screens.c     **** 		if( old_selection != 0xff ) /* not starting up */
4479:screens.c     **** 		{
4480:screens.c     **** 			/* Undrawing underline for previously selected value */
4481:screens.c     **** 			switch( old_selection )
4482:screens.c     **** 			{
4483:screens.c     **** 			case 0: /* hours (t_hrs) */
4484:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, HOURS_UNDERLINE_X, HOURS_UNDERLINE_Y, INV );
4485:screens.c     **** 				break;
4486:screens.c     **** 			case 1: /* minutes (t_min) */ 
4487:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, MINUTES_UNDERLINE_X, MINUTES_UNDERLINE_Y, INV );
4488:screens.c     **** 				break;
4489:screens.c     **** 			case 2: /* _date (t_date) */ 
4490:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, DATE_UNDERLINE_X, DATE_UNDERLINE_Y, INV );
4491:screens.c     **** 				break;
4492:screens.c     **** 			case 3: /* month (t_month) */ 
4493:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, MONTH_UNDERLINE_X, MONTH_UNDERLINE_Y, INV );
4494:screens.c     **** 				break;
4495:screens.c     **** 			case 4: /* year (t_year) */
4496:screens.c     **** 				write_bitmap( adm, UNDERLINE_FOUR_DIGIT, YEAR_UNDERLINE_X, YEAR_UNDERLINE_Y, INV );
4497:screens.c     **** 				break;
4498:screens.c     **** 			}
4499:screens.c     **** 		}
4500:screens.c     **** 
4501:screens.c     **** 		/* Drawing underline for currently selected value */
4502:screens.c     **** 		switch( selection )
4503:screens.c     **** 		{
4504:screens.c     **** 		case 0: /* hours (t_hrs) */
4505:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, HOURS_UNDERLINE_X, HOURS_UNDERLINE_Y, OR );
4506:screens.c     **** 			break;
4507:screens.c     **** 		case 1: /* minutes (t_min) */ 
4508:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, MINUTES_UNDERLINE_X, MINUTES_UNDERLINE_Y, OR );
4509:screens.c     **** 			break;
4510:screens.c     **** 		case 2: /* _date (t_date) */ 
4511:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, DATE_UNDERLINE_X, DATE_UNDERLINE_Y, OR );
4512:screens.c     **** 			break;
4513:screens.c     **** 		case 3: /* month (t_month) */ 
4514:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, MONTH_UNDERLINE_X, MONTH_UNDERLINE_Y, OR );
4515:screens.c     **** 			break;
4516:screens.c     **** 		case 4: /* year (t_year) */
4517:screens.c     **** 			write_bitmap( adm, UNDERLINE_FOUR_DIGIT, YEAR_UNDERLINE_X, YEAR_UNDERLINE_Y, OR );
4518:screens.c     **** 			break;
4519:screens.c     **** 		}
4520:screens.c     **** 	}
4521:screens.c     **** 
4522:screens.c     **** 
4523:screens.c     **** 	/* -----------------------------------------------------------
4524:screens.c     **** 	 * Drawing tabs -- NAVIGATION tab */
4525:screens.c     **** 
4526:screens.c     **** 	if( selection != old_selection )
4527:screens.c     **** 	{
4528:screens.c     **** 		draw_box( adm, 62, 102, 62+36-1, 102+24-1, CLEAR ); // Clear NAVIGATION tab area
4529:screens.c     **** 
4530:screens.c     **** 		switch( selection )
4531:screens.c     **** 		{
4532:screens.c     **** 		case 0: /* hours (t_hrs) */
4533:screens.c     **** 			write_bitmap( adm, TABNAV_DR,  62, 102, OR ); // NAVIGATION: Down Right
4534:screens.c     **** 			break;
4535:screens.c     **** 		case 1: /* minutes (t_min) */
4536:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
4537:screens.c     **** 			break;
4538:screens.c     **** 		case 2: /* _date (t_date) */
4539:screens.c     **** 			write_bitmap( adm, TABNAV_ULR, 62, 102, OR ); // NAVIGATION: Up Left Right
4540:screens.c     **** 			break;
4541:screens.c     **** 		case 3: /* month (t_month) */
4542:screens.c     **** 			write_bitmap( adm, TABNAV_ULR, 62, 102, OR ); // NAVIGATION: Up Left Right		
4543:screens.c     **** 			break;
4544:screens.c     **** 		case 4: /* year (t_year) */
4545:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR ); // NAVIGATION: Up Left
4546:screens.c     **** 			break;
4547:screens.c     **** 		}		
4548:screens.c     **** 	} /* end if( selection != old_selection ) */
4549:screens.c     **** 
4550:screens.c     **** 
4551:screens.c     **** 	/* -----------------------------------------------------------
4552:screens.c     **** 	 * Setting time */
4553:screens.c     **** 
4554:screens.c     **** 	if(	ChangeTime )
4555:screens.c     **** 	{
4556:screens.c     **** 		ChangeTime = 0;
4557:screens.c     **** #ifndef WINDOWS
4558:screens.c     **** 		if( xSemaphoreTake( SetTime, (portTickType)(2 / portTICK_RATE_MS) ) == pdTRUE ) // 2ms wait
4559:screens.c     **** 		{
4560:screens.c     **** 			// suspend task, else it will set time if it runs while we are setting ClockRam	
4561:screens.c     **** 			vTaskSuspend( TWItaskhandle );
4562:screens.c     **** 
4563:screens.c     **** 			// only reset seconds if adjusting minutes
4564:screens.c     **** 			ClockRam[0] = (selection == 1) ? 0x00 : btobcd( t_sec ); // seconds
4565:screens.c     **** 			ClockRam[1] = btobcd( t_min ); // minutes
4566:screens.c     **** 			ClockRam[2] = btobcd( t_hrs ); // hours
4567:screens.c     **** 			ClockRam[3] = btobcd( t_day ); // day of week
4568:screens.c     **** 			ClockRam[4] = btobcd( t_date ); // day of month
4569:screens.c     **** 			ClockRam[5] = ((t_year > 2099) ? 0x00 : 0x80) | btobcd( t_month ); // century & month
4570:screens.c     **** 			ClockRam[6]  = btobcd( (unsigned char)(t_year % 100) ); // year   
4571:screens.c     **** 			ClockRam[7] = 0x00; // Oscillation Adjust
4572:screens.c     **** 			ClockRam[8] = 0x00; // Weekly Alarm minutes
4573:screens.c     **** 			ClockRam[9] = 0x00; // Weekly Alarm hours
4574:screens.c     **** 			ClockRam[10] = 0x00; // Weekly Alarm day of week
4575:screens.c     **** 			ClockRam[11] = 0x00; // Daily Alarm minutes
4576:screens.c     **** 			ClockRam[12] = 0x00; // Daily Alarm hours
4577:screens.c     **** 			ClockRam[13] = 0x00; // Undefined
4578:screens.c     **** 			ClockRam[14] = 0x20; // Control register 1 
4579:screens.c     **** 			ClockRam[15] = 0x20; // Control register 2
4580:screens.c     **** 
4581:screens.c     **** 			// resume task - resuming higher priority task causes this task to yield to TWI
4582:screens.c     **** 			// TWI needs high priority else it could get interrupted during transfer
4583:screens.c     **** 			vTaskPrioritySet( TWItaskhandle, mainTWI_TASK_SET_PRIORITY );
4584:screens.c     **** 
4585:screens.c     **** 			vTaskResume( TWItaskhandle );
4586:screens.c     **** 		}
4587:screens.c     **** #else
4588:screens.c     **** 		ClockRam[0] = (selection == 1) ? 0x00 : btobcd( t_sec ); // seconds
4589:screens.c     **** #endif
4590:screens.c     **** 	}
4591:screens.c     **** 
4592:screens.c     **** }
4593:screens.c     **** // -----------------------------------------------------------
4594:screens.c     **** 
4595:screens.c     **** 
4596:screens.c     **** // -----------------------------------------------------------
4597:screens.c     **** // Function Name       : screen133
4598:screens.c     **** // Description         : Language Menu
4599:screens.c     **** // -----------------------------------------------------------
4600:screens.c     **** #if 0 // Removed -- Languages not needed with iconized menus
4601:screens.c     **** void screen133( unsigned int lkey )
4602:screens.c     **** {
4603:screens.c     **** 	if( !startup )
4604:screens.c     **** 	{
4605:screens.c     **** 		startup = 1;
4606:screens.c     **** 
4607:screens.c     **** 		draw_frame( adm );
4608:screens.c     **** 
4609:screens.c     **** 		display_f1_text( ptText[16], TSMAX, 80, 8, FIXED | CENTER | UNDERLINED ); // "Language"
4610:screens.c     **** 
4611:screens.c     **** 		display_f1_text( ptText[22], TSMAX, 28, 25, FIXED );  // "English"
4612:screens.c     **** 		display_f1_text( "------",   TSMAX, 28, 40, FIXED ); 
4613:screens.c     **** 		display_f1_text( "------",   TSMAX, 28, 55, FIXED ); 
4614:screens.c     **** 		display_f1_text( "------",   TSMAX, 28, 70, FIXED ); 
4615:screens.c     **** 
4616:screens.c     **** 
4617:screens.c     **** 		write_bitmap( adm, TAB,       0, 107, OR );
4618:screens.c     **** 		write_bitmap( adm, TAB,      31, 107, OR );
4619:screens.c     **** 		write_bitmap( adm, TABNAV00, 62, 102, OR );
4620:screens.c     **** 		write_bitmap( adm, TAB,      99, 107, OR );
4621:screens.c     **** 		write_bitmap( adm, TABESC,  130, 107, OR );
4622:screens.c     **** 
4623:screens.c     **** 		leaf = 1;
4624:screens.c     **** 
4625:screens.c     **** 		selection = pFac.pf.Lang;
4626:screens.c     **** 	}
4627:screens.c     **** 
4628:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF );
4629:screens.c     **** 
4630:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
4631:screens.c     **** 	{
4632:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
4633:screens.c     **** 		if( lkey == SW_OL )
4634:screens.c     **** 		{
4635:screens.c     **** 			//nextwindow = NEXTWINDOW_NOESCAPE;
4636:screens.c     **** 		}     
4637:screens.c     **** 		else if( lkey == SW_CU )
4638:screens.c     **** 		{
4639:screens.c     **** 			/*if( selection )
4640:screens.c     **** 			{
4641:screens.c     **** 				selection--;
4642:screens.c     **** 			}*/
4643:screens.c     **** 		}
4644:screens.c     **** 		else if( lkey == SW_CD )
4645:screens.c     **** 		{
4646:screens.c     **** 			/*if( selection < (MAXLANGUAGES - 1) )
4647:screens.c     **** 			{
4648:screens.c     **** 				selection++;
4649:screens.c     **** 			}
4650:screens.c     **** 			else
4651:screens.c     **** 			{
4652:screens.c     **** 				selection = 0;
4653:screens.c     **** 			}*/
4654:screens.c     **** 		}
4655:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) )
4656:screens.c     **** 		{
4657:screens.c     **** 			escape = 1;
4658:screens.c     **** 		}
4659:screens.c     **** 		else if( lkey == SW_IR )
4660:screens.c     **** 		{
4661:screens.c     **** 			/*pFac.pf.Lang = selection;
4662:screens.c     **** 			ptText = TextString[pFac.pf.Lang];
4663:screens.c     **** 			savecal = 1;*/
4664:screens.c     **** 		}  
4665:screens.c     **** 	}
4666:screens.c     **** 
4667:screens.c     **** 	/*if( !key && nextwindow )
4668:screens.c     **** 	{
4669:screens.c     **** 		window = screen431;
4670:screens.c     **** 	}*/
4671:screens.c     **** 	/*
4672:screens.c     **** 	draw_box( adm, 100, 21-1, 100+8, 72+9, CLEAR );
4673:screens.c     **** 	write_bitmap( adm, Tick, 100, 21-1+(15*pFac.pf.Lang), OR );
4674:screens.c     **** 	 */
4675:screens.c     **** 	draw_box( adm, 16, 25 , 20, 95, CLEAR );
4676:screens.c     **** 	write_bitmap( adm, F1_POINT, 16, 25+(15*selection), OR );
4677:screens.c     **** }
4678:screens.c     **** #endif
4679:screens.c     **** // -----------------------------------------------------------
4680:screens.c     **** 
4681:screens.c     **** 
4682:screens.c     **** // -----------------------------------------------------------
4683:screens.c     **** // Function Name       : screen140
4684:screens.c     **** // Description         : Technician Menu - PIN entry
4685:screens.c     **** // -----------------------------------------------------------
4686:screens.c     **** void screen140( unsigned int lkey )
4687:screens.c     **** {
4688:screens.c     **** 	static unsigned char dig[5];
4689:screens.c     **** 
4690:screens.c     **** 	struct PinWin const *Pop;
4691:screens.c     **** 
4692:screens.c     **** 	unsigned short int pin;
4693:screens.c     **** 	unsigned char *pd, c;
4694:screens.c     **** 
4695:screens.c     **** 	Pop = &PinOption;  
4696:screens.c     **** 
4697:screens.c     **** 	if( startup != 1 )
4698:screens.c     **** 	{
4699:screens.c     **** 		startup = 1;
4700:screens.c     **** 
4701:screens.c     **** 		draw_frame( adm );
4702:screens.c     **** 
4703:screens.c     **** 		write_bitmap( adm, ICON_TECHNICIAN_MENU, 50, 14, OR ); // Spanner picture
4704:screens.c     **** 
4705:screens.c     **** 		display_f1_text( "ENTER PIN CODE", TSMAX, 80, 45, FIXED | CENTER );
4706:screens.c     **** 
4707:screens.c     **** 		write_bitmap( adm, TABMINUS, 0, 107, OR ); // -
4708:screens.c     **** 		write_bitmap( adm, TABPLUS, 31, 107, OR ); // +
4709:screens.c     **** 		write_bitmap( adm, TABNAV_, 62, 102, OR ); // NAVIGATION: blank
4710:screens.c     **** 		write_bitmap( adm, TABENT,  99, 107, OR ); // ENT
4711:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
4712:screens.c     **** 
4713:screens.c     **** 		dig[0] = '0';
4714:screens.c     **** 		dig[1] = '0';
4715:screens.c     **** 		dig[2] = '0';
4716:screens.c     **** 		dig[3] = '0';
4717:screens.c     **** 		dig[4] = 0x00;
4718:screens.c     **** 
4719:screens.c     **** 		leaf = 1; /* don't save this screen */
4720:screens.c     **** 	}
4721:screens.c     **** 
4722:screens.c     **** #ifdef SHOW_TIME
4723:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
4724:screens.c     **** #endif	
4725:screens.c     **** 
4726:screens.c     **** 	if(lkey & (SW_NEW | SW_REP))
4727:screens.c     **** 	{
4728:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
4729:screens.c     **** 
4730:screens.c     **** 		if( lkey == SW_IL )
4731:screens.c     **** 		{
4732:screens.c     **** 			switch( selection )
4733:screens.c     **** 			{
4734:screens.c     **** 			case 0:
4735:screens.c     **** 			case 1:
4736:screens.c     **** 			case 2:
4737:screens.c     **** 			case 3:
4738:screens.c     **** 				pd = &dig[selection];
4739:screens.c     **** 				if( *pd < '9' )
4740:screens.c     **** 				{
4741:screens.c     **** 					(*pd)++;
4742:screens.c     **** 				}
4743:screens.c     **** 				else
4744:screens.c     **** 				{
4745:screens.c     **** 					*pd = '0';
4746:screens.c     **** 				}
4747:screens.c     **** 				break;
4748:screens.c     **** 			}
4749:screens.c     **** 		}
4750:screens.c     **** 		else if( lkey == SW_OL )
4751:screens.c     **** 		{
4752:screens.c     **** 			switch( selection )
4753:screens.c     **** 			{
4754:screens.c     **** 			case 0:
4755:screens.c     **** 			case 1:
4756:screens.c     **** 			case 2:
4757:screens.c     **** 			case 3:
4758:screens.c     **** 				pd = &dig[selection];
4759:screens.c     **** 				if( *pd > '0' )
4760:screens.c     **** 				{
4761:screens.c     **** 					(*pd)--;
4762:screens.c     **** 				}
4763:screens.c     **** 				else
4764:screens.c     **** 				{
4765:screens.c     **** 					*pd = '9';
4766:screens.c     **** 				}
4767:screens.c     **** 				break;
4768:screens.c     **** 			}
4769:screens.c     **** 		}
4770:screens.c     **** 		else if( lkey == SW_OR )
4771:screens.c     **** 		{
4772:screens.c     **** 			escape = 1;
4773:screens.c     **** 		}
4774:screens.c     **** 		else if( lkey == SW_IR )
4775:screens.c     **** 		{
4776:screens.c     **** 			if( selection < 3 )
4777:screens.c     **** 			{
4778:screens.c     **** 				selection++;
4779:screens.c     **** 			}
4780:screens.c     **** 			else
4781:screens.c     **** 			{
4782:screens.c     **** 				pin = Pop->PinNumber;
4783:screens.c     **** 				c = (pin % 10) + '0';
4784:screens.c     **** 				if( dig[3] == c )
4785:screens.c     **** 				{
4786:screens.c     **** 					pin /= 10;
4787:screens.c     **** 					c = (pin % 10) + '0';
4788:screens.c     **** 					if( dig[2] == c )
4789:screens.c     **** 					{
4790:screens.c     **** 						pin /= 10;
4791:screens.c     **** 						c = (pin % 10) + '0';
4792:screens.c     **** 						if( dig[1] == c )
4793:screens.c     **** 						{
4794:screens.c     **** 							pin /= 10;
4795:screens.c     **** 							c = (pin % 10) + '0';
4796:screens.c     **** 							if( dig[0] == c )
4797:screens.c     **** 							{
4798:screens.c     **** 								window = Pop->PinWindow; /* Pin Secured Window */
4799:screens.c     **** 							}
4800:screens.c     **** 						}
4801:screens.c     **** 					}
4802:screens.c     **** 				}
4803:screens.c     **** 				else
4804:screens.c     **** 				{
4805:screens.c     **** 					selection = 0;
4806:screens.c     **** 				}
4807:screens.c     **** 			}
4808:screens.c     **** 		}
4809:screens.c     **** 	}
4810:screens.c     **** 
4811:screens.c     **** 	display_f1_text( dig, TSMAX, 68, 60, FIXED );
4812:screens.c     **** 
4813:screens.c     **** 	draw_line( adm, 68, 68, 68+22, 68, CLEAR );
4814:screens.c     **** 	c = 68+(selection*6);
4815:screens.c     **** 	if( !half_second )
4816:screens.c     **** 	{
4817:screens.c     **** 		draw_line( adm, c, 68, c+4, 68, OR );
4818:screens.c     **** 	}
4819:screens.c     **** }
4820:screens.c     **** // -----------------------------------------------------------
4821:screens.c     **** 
4822:screens.c     **** 
4823:screens.c     **** // -----------------------------------------------------------
4824:screens.c     **** // Function Name       : screen141
4825:screens.c     **** // Description         : Technician Menu
4826:screens.c     **** // -----------------------------------------------------------
4827:screens.c     **** void screen141( unsigned int lkey )
4828:screens.c     **** {
4829:screens.c     **** 	char update_disp;
4830:screens.c     **** 
4831:screens.c     **** 	static unsigned char swtim;
4832:screens.c     **** 
4833:screens.c     **** 
4834:screens.c     **** 	if( !startup )
4835:screens.c     **** 	{
4836:screens.c     **** 		startup = 1;
4837:screens.c     **** 
4838:screens.c     **** 		draw_frame( adm );
4839:screens.c     **** 
4840:screens.c     **** 		display_f1_text( ptText[23], TSMAX, 80, 7, FIXED | CENTER | UNDERLINED ); // "Technician Menu"
4841:screens.c     **** 
4842:screens.c     **** 		// Options
4843:screens.c     **** 		display_f1_text( "  Baler Full",     TSMAX, 24, 21, FIXED );
4844:screens.c     **** 		display_f1_text( "  Netting Setup",  TSMAX, 24, 31, FIXED );
4845:screens.c     **** 		display_f1_text( "  Diameter Setup", TSMAX, 24, 41, FIXED );
4846:screens.c     **** 		display_f1_text( "  Density Setup",  TSMAX, 24, 51, FIXED );
4847:screens.c     **** 		display_f1_text( "  Knives Setup",   TSMAX, 24, 61, FIXED );
4848:screens.c     **** 		display_f1_text( "  Reset Defaults", TSMAX, 24, 71, FIXED );
4849:screens.c     **** 		display_f1_text( " ",                TSMAX, 24, 81, FIXED );
4850:screens.c     **** 
4851:screens.c     **** 		update_disp = 1;
4852:screens.c     **** 	}
4853:screens.c     **** 
4854:screens.c     **** #ifdef SHOW_TIME
4855:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
4856:screens.c     **** #endif
4857:screens.c     **** 
4858:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
4859:screens.c     **** 	{
4860:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
4861:screens.c     **** 
4862:screens.c     **** 		if( (lkey == SW_OL) || (lkey == SW_IL) )
4863:screens.c     **** 		{
4864:screens.c     **** 			// Do nothing
4865:screens.c     **** 		}
4866:screens.c     **** 		else if( lkey == SW_CU )
4867:screens.c     **** 		{
4868:screens.c     **** 			if( selection ) // not first option selected
4869:screens.c     **** 			{
4870:screens.c     **** 				selection--;
4871:screens.c     **** 				if( selection == 6 ) // skip
4872:screens.c     **** 					selection = 5;
4873:screens.c     **** 				update_disp = 1; // Update display: tabs & selection pointer
4874:screens.c     **** 			}
4875:screens.c     **** 		}
4876:screens.c     **** 		else if( lkey == SW_CD )
4877:screens.c     **** 		{
4878:screens.c     **** 			if( selection < 5 ) // not last [visible] option selected
4879:screens.c     **** 			{
4880:screens.c     **** 				selection++;
4881:screens.c     **** 			}
4882:screens.c     **** 			else if( swtim > 30 )
4883:screens.c     **** 			{
4884:screens.c     **** 				selection = 7; // Goto hidden menu -- selection 6 skipped
4885:screens.c     **** 			}
4886:screens.c     **** 			else
4887:screens.c     **** 			{
4888:screens.c     **** 				swtim++;
4889:screens.c     **** 			}
4890:screens.c     **** 			update_disp = 1; // Update display: draw/undraw hidden menu option
4891:screens.c     **** 		}
4892:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) )
4893:screens.c     **** 		{
4894:screens.c     **** 			escape = 1;
4895:screens.c     **** 		}
4896:screens.c     **** 		else if( (lkey == SW_IR) || (lkey == SW_CR) )
4897:screens.c     **** 		{
4898:screens.c     **** 			switch( selection )
4899:screens.c     **** 			{
4900:screens.c     **** 			case 0:
4901:screens.c     **** 				window = screen142; // Technician Menu - Baler Full
4902:screens.c     **** 				break;
4903:screens.c     **** 
4904:screens.c     **** 			case 1:
4905:screens.c     **** 				window = screen143; // Technician Menu - Netting Setup
4906:screens.c     **** 				break;
4907:screens.c     **** 
4908:screens.c     **** 			case 2:
4909:screens.c     **** 				window = screen144; // Technician Menu - Diameter Setup
4910:screens.c     **** 				break;
4911:screens.c     **** 
4912:screens.c     **** 			case 3:
4913:screens.c     **** 				window = screen145; // Technician Menu - Density Setup
4914:screens.c     **** 				break;
4915:screens.c     **** 
4916:screens.c     **** 			case 4:
4917:screens.c     **** 				window = screen146; // Technician Menu - Knives Setup
4918:screens.c     **** 				break;
4919:screens.c     **** 
4920:screens.c     **** 			case 5:
4921:screens.c     **** 				window = screen147; // Technician Menu - Reset Defaults
4922:screens.c     **** 				break;
4923:screens.c     **** 
4924:screens.c     **** 			case 6:
4925:screens.c     **** 				// No selection here -- selection pointer skips this space
4926:screens.c     **** 				break;
4927:screens.c     **** 
4928:screens.c     **** 			case 7:
4929:screens.c     **** 				window = screen148; // Technician Menu - Formation 2
4930:screens.c     **** 				break;
4931:screens.c     **** 			}
4932:screens.c     **** 		}
4933:screens.c     **** 		else
4934:screens.c     **** 		{
4935:screens.c     **** 			swtim = 0;
4936:screens.c     **** 		}
4937:screens.c     **** 	}
4938:screens.c     **** 	else if( !editing ) // Not editing and no keys being pressed
4939:screens.c     **** 	{
4940:screens.c     **** 		// Saving Programmable Factors on releasing the keys for greater than 300 ms
4941:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
4942:screens.c     **** 		{
4943:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
4944:screens.c     **** 			{
4945:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
4946:screens.c     **** 				SavecalDelayWithinMenus = 0;
4947:screens.c     **** 				savecal = 1;
4948:screens.c     **** 			}
4949:screens.c     **** 		}
4950:screens.c     **** 	}
4951:screens.c     **** 
4952:screens.c     **** 	// Update display: draw/undraw hidden menu option
4953:screens.c     **** 	if( update_disp )
4954:screens.c     **** 	{
4955:screens.c     **** 		if( selection == 7 )
4956:screens.c     **** 		{    
4957:screens.c     **** 			display_f1_text( "  Formation 2", TSMAX, 24, 91, FIXED );
4958:screens.c     **** 		}
4959:screens.c     **** 		else // hidden menu option not selected
4960:screens.c     **** 		{
4961:screens.c     **** 			draw_box( adm, 24, 90, 24+(13*6), 90+8, CLEAR ); 
4962:screens.c     **** 		}
4963:screens.c     **** 	}
4964:screens.c     **** 
4965:screens.c     **** 	// Update display: tabs & selection pointer
4966:screens.c     **** 	if( update_disp )
4967:screens.c     **** 	{
4968:screens.c     **** 		// Tabs 
4969:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs
4970:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
4971:screens.c     **** 		{
4972:screens.c     **** 
4973:screens.c     **** 		case 0:
4974:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
4975:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
4976:screens.c     **** 			write_bitmap( adm, TABNAV_DLR,  62, 102, OR ); // NAVIGATION: Down Left Right
4977:screens.c     **** 			write_bitmap( adm, TABENT,      99, 107, OR ); // ENT
4978:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
4979:screens.c     **** 			break;
4980:screens.c     **** 
4981:screens.c     **** 		case 1:
4982:screens.c     **** 		case 2:
4983:screens.c     **** 		case 3:
4984:screens.c     **** 		case 4:
4985:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
4986:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
4987:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
4988:screens.c     **** 			write_bitmap( adm, TABENT,      99, 107, OR ); // ENT
4989:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
4990:screens.c     **** 			break;
4991:screens.c     **** 
4992:screens.c     **** 		case 5:
4993:screens.c     **** 		case 6:
4994:screens.c     **** 		case 7:
4995:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
4996:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
4997:screens.c     **** 			write_bitmap( adm, TABNAV_ULR,  62, 102, OR ); // NAVIGATION: Up Left Right
4998:screens.c     **** 			write_bitmap( adm, TABENT,      99, 107, OR ); // ENT
4999:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
5000:screens.c     **** 			break;
5001:screens.c     **** 		}
5002:screens.c     **** 
5003:screens.c     **** 		// Selection pointer
5004:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
5005:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
5006:screens.c     **** 
5007:screens.c     **** 		update_disp = 0;
5008:screens.c     **** 	}
5009:screens.c     **** 
5010:screens.c     **** }
5011:screens.c     **** // -----------------------------------------------------------
5012:screens.c     **** 
5013:screens.c     **** 
5014:screens.c     **** // -----------------------------------------------------------
5015:screens.c     **** // Function Name       : screen142
5016:screens.c     **** // Description         : Technician Menu - Baler Full
5017:screens.c     **** // -----------------------------------------------------------
5018:screens.c     **** void screen142( unsigned int lkey )
5019:screens.c     **** {
5020:screens.c     **** 	char update_disp;
5021:screens.c     **** 	char update_selection;
5022:screens.c     **** 	char update_values;
5023:screens.c     **** 
5024:screens.c     **** 	static char page;
5025:screens.c     **** 
5026:screens.c     **** 	if( !startup )
5027:screens.c     **** 	{
5028:screens.c     **** 		startup = 1;
5029:screens.c     **** 
5030:screens.c     **** 		draw_frame( adm );
5031:screens.c     **** 
5032:screens.c     **** 		display_f1_text( "Baler Full", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
5033:screens.c     **** 
5034:screens.c     **** 		page = 0;
5035:screens.c     **** 		selection = 0;
5036:screens.c     **** 		update_disp = 1;
5037:screens.c     **** 	}
5038:screens.c     **** 
5039:screens.c     **** #ifdef SHOW_TIME
5040:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
5041:screens.c     **** #endif
5042:screens.c     **** 
5043:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
5044:screens.c     **** 	{
5045:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
5046:screens.c     **** 
5047:screens.c     **** 		if( lkey == SW_OL ) // -
5048:screens.c     **** 		{
5049:screens.c     **** 			if( page == 0 )
5050:screens.c     **** 			{
5051:screens.c     **** 				switch( selection )
5052:screens.c     **** 				{
5053:screens.c     **** 				case 0:
5054:screens.c     **** 					if( pFac.pf.GW302_LubeAlarm > PF_GW302_LubeAlarm[PF_MIN] ) // Limiting unsigned type to minimu
5055:screens.c     **** 						pFac.pf.GW302_LubeAlarm -= PF_GW302_LubeAlarm[PF_STEP];
5056:screens.c     **** 					break;
5057:screens.c     **** 
5058:screens.c     **** 				case 1:
5059:screens.c     **** 					pFac.pf.GW302_PresDeadband -= PF_GW302_PresDeadband[PF_STEP];
5060:screens.c     **** 					if( pFac.pf.GW302_PresDeadband < PF_GW302_PresDeadband[PF_MIN] )
5061:screens.c     **** 						pFac.pf.GW302_PresDeadband = PF_GW302_PresDeadband[PF_MIN]; // Limiting to minimum value
5062:screens.c     **** 					break;
5063:screens.c     **** 
5064:screens.c     **** 				case 2:
5065:screens.c     **** 					pFac.pf.GW302_NetSpeed -= PF_GW302_NetSpeed[PF_STEP];
5066:screens.c     **** 					if( pFac.pf.GW302_NetSpeed < PF_GW302_NetSpeed[PF_MIN] )
5067:screens.c     **** 						pFac.pf.GW302_NetSpeed = PF_GW302_NetSpeed[PF_MIN]; // Limiting to minimum value
5068:screens.c     **** 					break;
5069:screens.c     **** 
5070:screens.c     **** 				case 3:
5071:screens.c     **** 					pFac.pf.GW302_PresSwDelay -= PF_GW302_PresSwDelay[PF_STEP];
5072:screens.c     **** 					if( pFac.pf.GW302_PresSwDelay < PF_GW302_PresSwDelay[PF_MIN] )
5073:screens.c     **** 						pFac.pf.GW302_PresSwDelay = PF_GW302_PresSwDelay[PF_MIN]; // Limiting to minimum value
5074:screens.c     **** 					break;
5075:screens.c     **** 
5076:screens.c     **** 				case 4:
5077:screens.c     **** 					pFac.pf.GW302_DoorClosed -= PF_GW302_DoorClosed[PF_STEP];
5078:screens.c     **** 					if( pFac.pf.GW302_DoorClosed < PF_GW302_DoorClosed[PF_MIN] )
5079:screens.c     **** 						pFac.pf.GW302_DoorClosed = PF_GW302_DoorClosed[PF_MIN]; // Limiting to minimum value
5080:screens.c     **** 					break;
5081:screens.c     **** 
5082:screens.c     **** 				case 5:
5083:screens.c     **** 					if( pFac.pf.GW302_BaleSizeFactor > PF_GW302_BaleSizeFactor[PF_MIN] ) // Limiting unsigned type
5084:screens.c     **** 						pFac.pf.GW302_BaleSizeFactor -= PF_GW302_BaleSizeFactor[PF_STEP];
5085:screens.c     **** 					break;
5086:screens.c     **** 				}
5087:screens.c     **** 			}
5088:screens.c     **** 			else /* page == 1 */
5089:screens.c     **** 			{
5090:screens.c     **** 				switch( selection )
5091:screens.c     **** 				{
5092:screens.c     **** 				case 0:
5093:screens.c     **** 					pFac.pf.GW302_FillPotRange -= PF_GW302_FillPotRange[PF_STEP];
5094:screens.c     **** 					if( pFac.pf.GW302_FillPotRange < PF_GW302_FillPotRange[PF_MIN] )
5095:screens.c     **** 						pFac.pf.GW302_FillPotRange = PF_GW302_FillPotRange[PF_MIN]; // Limiting to minimum value
5096:screens.c     **** 					break;
5097:screens.c     **** 
5098:screens.c     **** 				case 1:
5099:screens.c     **** 					pFac.pf.GW302_FillPotIgnore -= PF_GW302_FillPotIgnore[PF_STEP];
5100:screens.c     **** 					if( pFac.pf.GW302_FillPotIgnore < PF_GW302_FillPotIgnore[PF_MIN] )
5101:screens.c     **** 						pFac.pf.GW302_FillPotIgnore = PF_GW302_FillPotIgnore[PF_MIN]; // Limiting to minimum value
5102:screens.c     **** 					break;
5103:screens.c     **** 
5104:screens.c     **** 				case 2:
5105:screens.c     **** 					if( pFac.pf.GW302_EngageDiameter > PF_GW302_EngageDiameter[PF_MIN] ) // Limiting unsigned type
5106:screens.c     **** 						pFac.pf.GW302_EngageDiameter -= PF_GW302_EngageDiameter[PF_STEP];
5107:screens.c     **** 					break;
5108:screens.c     **** 
5109:screens.c     **** 				case 3:
5110:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_STEER )
5111:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_FILL;
5112:screens.c     **** 					else /* pFac.pf.GW302_BaleIndicator == BI_FILL */
5113:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_STEER;
5114:screens.c     **** 					break;
5115:screens.c     **** 
5116:screens.c     **** 				case 4:
5117:screens.c     **** 					pFac.pf.GW302_RollerDelay -= PF_GW302_RollerDelay[PF_STEP];
5118:screens.c     **** 					if( pFac.pf.GW302_RollerDelay < PF_GW302_RollerDelay[PF_MIN] )
5119:screens.c     **** 						pFac.pf.GW302_RollerDelay = PF_GW302_RollerDelay[PF_MIN]; // Limiting to minimum value
5120:screens.c     **** 					break;
5121:screens.c     **** 				}
5122:screens.c     **** 			}
5123:screens.c     **** 			SavecalDelayWithinMenus = 1;
5124:screens.c     **** 			valuechanged = 1;
5125:screens.c     **** 			update_values = 1;
5126:screens.c     **** 		}
5127:screens.c     **** 		else if( lkey == SW_IL ) // +
5128:screens.c     **** 		{
5129:screens.c     **** 			if( page == 0 )
5130:screens.c     **** 			{
5131:screens.c     **** 				switch( selection )
5132:screens.c     **** 				{
5133:screens.c     **** 				case 0:
5134:screens.c     **** 					pFac.pf.GW302_LubeAlarm += PF_GW302_LubeAlarm[PF_STEP];
5135:screens.c     **** 					if( pFac.pf.GW302_LubeAlarm > PF_GW302_LubeAlarm[PF_MAX] )
5136:screens.c     **** 						pFac.pf.GW302_LubeAlarm = PF_GW302_LubeAlarm[PF_MAX]; // Limiting to maximum value
5137:screens.c     **** 					break;
5138:screens.c     **** 
5139:screens.c     **** 				case 1:
5140:screens.c     **** 					pFac.pf.GW302_PresDeadband += PF_GW302_PresDeadband[PF_STEP];
5141:screens.c     **** 					if( pFac.pf.GW302_PresDeadband > PF_GW302_PresDeadband[PF_MAX]  )
5142:screens.c     **** 						pFac.pf.GW302_PresDeadband = PF_GW302_PresDeadband[PF_MAX]; // Limiting to maximum value
5143:screens.c     **** 					break;
5144:screens.c     **** 
5145:screens.c     **** 				case 2:
5146:screens.c     **** 					pFac.pf.GW302_NetSpeed += PF_GW302_NetSpeed[PF_STEP];
5147:screens.c     **** 					if( pFac.pf.GW302_NetSpeed > PF_GW302_NetSpeed[PF_MAX] )
5148:screens.c     **** 						pFac.pf.GW302_NetSpeed = PF_GW302_NetSpeed[PF_MAX]; // Limiting to maximum value
5149:screens.c     **** 					break;
5150:screens.c     **** 
5151:screens.c     **** 				case 3:
5152:screens.c     **** 					pFac.pf.GW302_PresSwDelay += PF_GW302_PresSwDelay[PF_STEP];
5153:screens.c     **** 					if( pFac.pf.GW302_PresSwDelay > PF_GW302_PresSwDelay[PF_MAX] )
5154:screens.c     **** 						pFac.pf.GW302_PresSwDelay = PF_GW302_PresSwDelay[PF_MAX]; // Limiting to maximum value
5155:screens.c     **** 					break;
5156:screens.c     **** 
5157:screens.c     **** 				case 4:
5158:screens.c     **** 					pFac.pf.GW302_DoorClosed += PF_GW302_DoorClosed[PF_STEP];
5159:screens.c     **** 					if( pFac.pf.GW302_DoorClosed > PF_GW302_DoorClosed[PF_MAX] )
5160:screens.c     **** 						pFac.pf.GW302_DoorClosed = PF_GW302_DoorClosed[PF_MAX]; // Limiting to maximum value
5161:screens.c     **** 					break;
5162:screens.c     **** 
5163:screens.c     **** 				case 5:
5164:screens.c     **** 					pFac.pf.GW302_BaleSizeFactor += PF_GW302_BaleSizeFactor[PF_STEP];
5165:screens.c     **** 					if( pFac.pf.GW302_BaleSizeFactor > PF_GW302_BaleSizeFactor[PF_MAX] )
5166:screens.c     **** 						pFac.pf.GW302_BaleSizeFactor = PF_GW302_BaleSizeFactor[PF_MAX]; // Limiting to maximum value
5167:screens.c     **** 					break;
5168:screens.c     **** 				}
5169:screens.c     **** 			}
5170:screens.c     **** 			else /* page == 1 */
5171:screens.c     **** 			{
5172:screens.c     **** 				switch( selection )
5173:screens.c     **** 				{
5174:screens.c     **** 				case 0:
5175:screens.c     **** 					pFac.pf.GW302_FillPotRange += PF_GW302_FillPotRange[PF_STEP];
5176:screens.c     **** 					if( pFac.pf.GW302_FillPotRange > PF_GW302_FillPotRange[PF_MAX] )
5177:screens.c     **** 						pFac.pf.GW302_FillPotRange = PF_GW302_FillPotRange[PF_MAX]; // Limiting to maximum value
5178:screens.c     **** 					break;
5179:screens.c     **** 
5180:screens.c     **** 				case 1:
5181:screens.c     **** 					pFac.pf.GW302_FillPotIgnore += PF_GW302_FillPotIgnore[PF_STEP];
5182:screens.c     **** 					if( pFac.pf.GW302_FillPotIgnore > PF_GW302_FillPotIgnore[PF_MAX] )
5183:screens.c     **** 						pFac.pf.GW302_FillPotIgnore = PF_GW302_FillPotIgnore[PF_MAX]; // Limiting to maximum value
5184:screens.c     **** 					break;
5185:screens.c     **** 
5186:screens.c     **** 				case 2:
5187:screens.c     **** 					pFac.pf.GW302_EngageDiameter += PF_GW302_EngageDiameter[PF_STEP];
5188:screens.c     **** 					if( pFac.pf.GW302_EngageDiameter > PF_GW302_EngageDiameter[PF_MAX] )
5189:screens.c     **** 						pFac.pf.GW302_EngageDiameter = PF_GW302_EngageDiameter[PF_MAX]; // Limiting to maximum value
5190:screens.c     **** 					break;
5191:screens.c     **** 
5192:screens.c     **** 				case 3:
5193:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_STEER )
5194:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_FILL;
5195:screens.c     **** 					else /* pFac.pf.GW302_BaleIndicator == BI_FILL */
5196:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_STEER;
5197:screens.c     **** 					break;
5198:screens.c     **** 
5199:screens.c     **** 				case 4:
5200:screens.c     **** 					pFac.pf.GW302_RollerDelay += PF_GW302_RollerDelay[PF_STEP];
5201:screens.c     **** 					if( pFac.pf.GW302_RollerDelay > PF_GW302_RollerDelay[PF_MAX] )
5202:screens.c     **** 						pFac.pf.GW302_RollerDelay = PF_GW302_RollerDelay[PF_MAX]; // Limiting to maximum value
5203:screens.c     **** 					break;
5204:screens.c     **** 				}
5205:screens.c     **** 			}
5206:screens.c     **** 			SavecalDelayWithinMenus = 1;
5207:screens.c     **** 			valuechanged = 1;
5208:screens.c     **** 			update_values = 1;
5209:screens.c     **** 		}
5210:screens.c     **** 		else if( lkey == SW_CU ) // ^
5211:screens.c     **** 		{
5212:screens.c     **** 			if( selection )
5213:screens.c     **** 			{
5214:screens.c     **** 				selection--;
5215:screens.c     **** 				update_selection = 1;
5216:screens.c     **** 			}
5217:screens.c     **** 		}
5218:screens.c     **** 		else if( lkey == SW_CD ) // V
5219:screens.c     **** 		{
5220:screens.c     **** 			if( page == 0 )
5221:screens.c     **** 			{
5222:screens.c     **** 				if( selection < 5 )
5223:screens.c     **** 				{
5224:screens.c     **** 					selection++;
5225:screens.c     **** 					update_selection = 1;
5226:screens.c     **** 				}
5227:screens.c     **** 			}
5228:screens.c     **** 			else /* page == 1 */
5229:screens.c     **** 			{
5230:screens.c     **** 				if( selection < 4 )
5231:screens.c     **** 				{
5232:screens.c     **** 					selection++;
5233:screens.c     **** 					update_selection = 1;
5234:screens.c     **** 				}
5235:screens.c     **** 			}
5236:screens.c     **** 		}
5237:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
5238:screens.c     **** 		{
5239:screens.c     **** 			escape = 1;
5240:screens.c     **** 		}
5241:screens.c     **** 		else if( lkey == SW_IR ) // PAGE
5242:screens.c     **** 		{
5243:screens.c     **** 			page = page? 0:1;
5244:screens.c     **** 
5245:screens.c     **** 			selection = 0;
5246:screens.c     **** 			update_disp = 1;
5247:screens.c     **** 		}
5248:screens.c     **** 	}
5249:screens.c     **** 	else if( !editing ) // Not editing and no keys being pressed
5250:screens.c     **** 	{
5251:screens.c     **** 		// Saving Programmable Factors on releasing the keys for greater than 300 ms
5252:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
5253:screens.c     **** 		{
5254:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
5255:screens.c     **** 			{
5256:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
5257:screens.c     **** 				SavecalDelayWithinMenus = 0;
5258:screens.c     **** 				savecal = 1;
5259:screens.c     **** 			}
5260:screens.c     **** 		}
5261:screens.c     **** 	}
5262:screens.c     **** 
5263:screens.c     **** 
5264:screens.c     **** 	if( update_disp )
5265:screens.c     **** 	{
5266:screens.c     **** 		// Page number
5267:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
5268:screens.c     **** 		display_f1_text( "/2", TSMAX, 140, 7, FIXED );
5269:screens.c     **** 
5270:screens.c     **** 		// Clear display area covering factor names, values & units
5271:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
5272:screens.c     **** 
5273:screens.c     **** 		// Factor names & units
5274:screens.c     **** 		if( page == 0 )
5275:screens.c     **** 		{
5276:screens.c     **** 			display_f1_text( "Lube Alarm", TSMAX, 24, 21, FIXED );
5277:screens.c     **** 
5278:screens.c     **** 			display_f1_text( "Pres. Deadband", TSMAX, 24, 31, FIXED );
5279:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
5280:screens.c     **** 
5281:screens.c     **** 			display_f1_text( "Net Speed", TSMAX, 24, 41, FIXED );
5282:screens.c     **** 			display_f1_text( "Hz", TSMAX, 145, 41, FIXED );
5283:screens.c     **** 
5284:screens.c     **** 			display_f1_text( "Pres. Sw. Delay", TSMAX, 24, 51, FIXED );
5285:screens.c     **** 			display_f1_text( "s", TSMAX, 145, 51, FIXED );
5286:screens.c     **** 
5287:screens.c     **** 			display_f1_text( "Door Closed", TSMAX, 24, 61, FIXED );
5288:screens.c     **** 			display_f1_text( "s", TSMAX, 145, 61, FIXED );
5289:screens.c     **** 
5290:screens.c     **** 			display_f1_text( "Bale Size Factor", TSMAX, 24, 71, FIXED );
5291:screens.c     **** 
5292:screens.c     **** 			/* Displaying calculated max dia voltage in brackets */
5293:screens.c     **** 			display_f1_text( "(     V )", TSMAX, 106, 81, FIXED );
5294:screens.c     **** 		}
5295:screens.c     **** 		else /* page == 1 */
5296:screens.c     **** 		{
5297:screens.c     **** 			display_f1_text( "Fill Pot Range", TSMAX, 24, 21, FIXED );
5298:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 21, FIXED );
5299:screens.c     **** 
5300:screens.c     **** 			display_f1_text( "Fill Pot Ignore", TSMAX, 24, 31, FIXED );
5301:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
5302:screens.c     **** 
5303:screens.c     **** 			display_f1_text( "Engage Diameter", TSMAX, 24, 41, FIXED );
5304:screens.c     **** 			display_f1_text( "%", TSMAX, 145, 41, FIXED );
5305:screens.c     **** 
5306:screens.c     **** 			display_f1_text( "Bale Indicator", TSMAX, 24, 51, FIXED );
5307:screens.c     **** 
5308:screens.c     **** 			display_f1_text( "Roller Delay", TSMAX, 24, 61, FIXED );
5309:screens.c     **** 			display_f1_text( "s", TSMAX, 145, 61, FIXED );
5310:screens.c     **** 		}
5311:screens.c     **** 		update_disp = 0;
5312:screens.c     **** 
5313:screens.c     **** 		update_values = 1;    // Display factor values   
5314:screens.c     **** 		update_selection = 1; // Display tabs & selection pointer
5315:screens.c     **** 
5316:screens.c     **** 	} // End of update_disp
5317:screens.c     **** 
5318:screens.c     **** 	if( update_values )
5319:screens.c     **** 	{		
5320:screens.c     **** 		// Factor values
5321:screens.c     **** 		if( page == 0 )
5322:screens.c     **** 		{
5323:screens.c     **** 			display_number( (float)pFac.pf.GW302_LubeAlarm,
5324:screens.c     **** 					(float)PF_GW302_LubeAlarm[PF_MIN], (float)PF_GW302_LubeAlarm[PF_MAX],
5325:screens.c     **** 					1.0, DP0, 142, 21, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5326:screens.c     **** 			display_number( (float)pFac.pf.GW302_PresDeadband,
5327:screens.c     **** 					(float)PF_GW302_PresDeadband[PF_MIN], (float)PF_GW302_PresDeadband[PF_MAX],
5328:screens.c     **** 					1.0, DP2, 142, 31, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
5329:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetSpeed,
5330:screens.c     **** 					(float)PF_GW302_NetSpeed[PF_MIN], (float)PF_GW302_NetSpeed[PF_MAX],
5331:screens.c     **** 					1.0, DP1, 142, 41, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
5332:screens.c     **** 			display_number( (float)pFac.pf.GW302_PresSwDelay,
5333:screens.c     **** 					(float)PF_GW302_PresSwDelay[PF_MIN], (float)PF_GW302_PresSwDelay[PF_MAX],
5334:screens.c     **** 					1.0, DP1, 142, 51, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5335:screens.c     **** 			display_number( (float)pFac.pf.GW302_DoorClosed,
5336:screens.c     **** 					(float)PF_GW302_DoorClosed[PF_MIN], (float)PF_GW302_DoorClosed[PF_MAX],
5337:screens.c     **** 					1.0, DP1, 142, 61, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5338:screens.c     **** 			display_number( (float)pFac.pf.GW302_BaleSizeFactor,
5339:screens.c     **** 					(float)PF_GW302_BaleSizeFactor[PF_MIN], (float)PF_GW302_BaleSizeFactor[PF_MAX],
5340:screens.c     **** 					1.0, DP0, 142, 71, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5341:screens.c     **** 
5342:screens.c     **** 			/* Displaying calculated max dia voltage in brackets */
5343:screens.c     **** 			display_number( DiaMaxVolts, 0.0, 9.99,  1.0, DP2, 136, 81, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
5344:screens.c     **** 		}
5345:screens.c     **** 		else /* page == 1 */
5346:screens.c     **** 		{
5347:screens.c     **** 			display_number( (float)pFac.pf.GW302_FillPotRange,
5348:screens.c     **** 					(float)PF_GW302_FillPotRange[PF_MIN], (float)PF_GW302_FillPotRange[PF_MAX],
5349:screens.c     **** 					1.0, DP2, 142, 21, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
5350:screens.c     **** 			display_number( (float)pFac.pf.GW302_FillPotIgnore,
5351:screens.c     **** 					(float)PF_GW302_FillPotIgnore[PF_MIN], (float)PF_GW302_FillPotIgnore[PF_MAX],
5352:screens.c     **** 					1.0, DP2, 142, 31, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
5353:screens.c     **** 			display_number( (float)pFac.pf.GW302_EngageDiameter,
5354:screens.c     **** 					(float)PF_GW302_EngageDiameter[PF_MIN], (float)PF_GW302_EngageDiameter[PF_MAX],
5355:screens.c     **** 					1.0, DP0, 142, 41, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5356:screens.c     **** 
5357:screens.c     **** 			if( pFac.pf.GW302_BaleIndicator == BI_STEER )
5358:screens.c     **** 				display_f1_text( "Steer", TSMAX, 125, 51, FIXED );
5359:screens.c     **** 			else /* pFac.pf.GW302_BaleIndicator == BI_FILL */
5360:screens.c     **** 				display_f1_text( " Fill", TSMAX, 125, 51, FIXED );
5361:screens.c     **** 
5362:screens.c     **** 			display_number( (float)pFac.pf.GW302_RollerDelay,
5363:screens.c     **** 					(float)PF_GW302_RollerDelay[PF_MIN], (float)PF_GW302_RollerDelay[PF_MAX],
5364:screens.c     **** 					1.0, DP1, 142, 61, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5365:screens.c     **** 		}
5366:screens.c     **** 		update_values = 0;
5367:screens.c     **** 
5368:screens.c     **** 	} // End of update_values
5369:screens.c     **** 
5370:screens.c     **** 	if( update_selection )
5371:screens.c     **** 	{
5372:screens.c     **** 		// Tabs 
5373:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs
5374:screens.c     **** 		// Drawn according to position of selection pointer
5375:screens.c     **** 		if( page == 0 )
5376:screens.c     **** 		{
5377:screens.c     **** 			switch( selection )
5378:screens.c     **** 			{
5379:screens.c     **** 			case 0: 
5380:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5381:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5382:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
5383:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5384:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5385:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5386:screens.c     **** 				break;
5387:screens.c     **** 
5388:screens.c     **** 			case 1:
5389:screens.c     **** 			case 2:
5390:screens.c     **** 			case 3:
5391:screens.c     **** 			case 4:
5392:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5393:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5394:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
5395:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5396:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5397:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5398:screens.c     **** 				break;
5399:screens.c     **** 
5400:screens.c     **** 			case 5:
5401:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5402:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5403:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
5404:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5405:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5406:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5407:screens.c     **** 				break;
5408:screens.c     **** 			}
5409:screens.c     **** 		}
5410:screens.c     **** 		else /* page == 1 */
5411:screens.c     **** 		{
5412:screens.c     **** 			switch( selection ) 
5413:screens.c     **** 			{	    
5414:screens.c     **** 			case 0:
5415:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5416:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5417:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
5418:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5419:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5420:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5421:screens.c     **** 				break;
5422:screens.c     **** 
5423:screens.c     **** 			case 1:
5424:screens.c     **** 			case 2:
5425:screens.c     **** 			case 3:
5426:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5427:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5428:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
5429:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5430:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5431:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5432:screens.c     **** 				break;
5433:screens.c     **** 
5434:screens.c     **** 			case 4:
5435:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5436:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5437:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
5438:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5439:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5440:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5441:screens.c     **** 				break;
5442:screens.c     **** 			}
5443:screens.c     **** 		}
5444:screens.c     **** 
5445:screens.c     **** 		// Selection pointer
5446:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
5447:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
5448:screens.c     **** 
5449:screens.c     **** 		update_selection = 0;
5450:screens.c     **** 
5451:screens.c     **** 	} // End of update_selection
5452:screens.c     **** 
5453:screens.c     **** }
5454:screens.c     **** // -----------------------------------------------------------
5455:screens.c     **** 
5456:screens.c     **** 
5457:screens.c     **** // -----------------------------------------------------------
5458:screens.c     **** // Function Name       : screen143
5459:screens.c     **** // Description         : Technician Menu - Netting Setup
5460:screens.c     **** // -----------------------------------------------------------
5461:screens.c     **** void screen143( unsigned int lkey )
5462:screens.c     **** {
5463:screens.c     **** 	char update_disp;
5464:screens.c     **** 	char update_selection;
5465:screens.c     **** 	char update_values;
5466:screens.c     **** 
5467:screens.c     **** 	static char page;
5468:screens.c     **** 
5469:screens.c     **** 	if( !startup )
5470:screens.c     **** 	{
5471:screens.c     **** 		startup = 1;
5472:screens.c     **** 
5473:screens.c     **** 		draw_frame( adm );
5474:screens.c     **** 
5475:screens.c     **** 		display_f1_text( "Netting Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
5476:screens.c     **** 
5477:screens.c     **** 		page = 0;
5478:screens.c     **** 		selection = 0;
5479:screens.c     **** 		update_disp = 1;
5480:screens.c     **** 	}
5481:screens.c     **** 
5482:screens.c     **** #ifdef SHOW_TIME
5483:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
5484:screens.c     **** #endif	
5485:screens.c     **** 
5486:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
5487:screens.c     **** 	{
5488:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
5489:screens.c     **** 
5490:screens.c     **** 		if( lkey == SW_OL ) // -
5491:screens.c     **** 		{
5492:screens.c     **** 			if( page == 0 )
5493:screens.c     **** 			{
5494:screens.c     **** 				switch( selection )
5495:screens.c     **** 				{
5496:screens.c     **** 				case 0:
5497:screens.c     **** 					pFac.pf.GW302_NetOn -= PF_GW302_NetOn[PF_STEP];
5498:screens.c     **** 					if( pFac.pf.GW302_NetOn < PF_GW302_NetOn[PF_MIN] )
5499:screens.c     **** 						pFac.pf.GW302_NetOn = PF_GW302_NetOn[PF_MIN]; // Limiting to minimum value
5500:screens.c     **** 					break;
5501:screens.c     **** 
5502:screens.c     **** 				case 1:
5503:screens.c     **** 					if( pFac.pf.GW302_NetCutPulse > PF_GW302_NetCutPulse[PF_MIN] ) // Limiting unsigned type to mi
5504:screens.c     **** 						pFac.pf.GW302_NetCutPulse -= PF_GW302_NetCutPulse[PF_STEP];
5505:screens.c     **** 					break;
5506:screens.c     **** 
5507:screens.c     **** 				case 2:
5508:screens.c     **** 					pFac.pf.GW302_NetCutTime -= PF_GW302_NetCutTime[PF_STEP];
5509:screens.c     **** 					if( pFac.pf.GW302_NetCutTime < PF_GW302_NetCutTime[PF_MIN] )
5510:screens.c     **** 						pFac.pf.GW302_NetCutTime = PF_GW302_NetCutTime[PF_MIN]; // Limiting to minimum value
5511:screens.c     **** 					break;
5512:screens.c     **** 
5513:screens.c     **** 				case 3:
5514:screens.c     **** 					pFac.pf.GW302_MinDiaPulsPerLay -= PF_GW302_MinDiaPulsPerLay[PF_STEP];
5515:screens.c     **** 					if( pFac.pf.GW302_MinDiaPulsPerLay < PF_GW302_MinDiaPulsPerLay[PF_MIN] )
5516:screens.c     **** 						pFac.pf.GW302_MinDiaPulsPerLay = PF_GW302_MinDiaPulsPerLay[PF_MIN]; // Limiting to minimum va
5517:screens.c     **** 					break;
5518:screens.c     **** 
5519:screens.c     **** 				case 4:
5520:screens.c     **** 					pFac.pf.GW302_MaxDiaPulsPerLay -= PF_GW302_MaxDiaPulsPerLay[PF_STEP];
5521:screens.c     **** 					if( pFac.pf.GW302_MaxDiaPulsPerLay < PF_GW302_MaxDiaPulsPerLay[PF_MIN] )
5522:screens.c     **** 						pFac.pf.GW302_MaxDiaPulsPerLay = PF_GW302_MaxDiaPulsPerLay[PF_MIN]; // Limiting to minimum va
5523:screens.c     **** 					break;
5524:screens.c     **** 
5525:screens.c     **** 				case 5:
5526:screens.c     **** 					pFac.pf.GW302_NetFactor -= PF_GW302_NetFactor[PF_STEP];
5527:screens.c     **** 					if( pFac.pf.GW302_NetFactor < PF_GW302_NetFactor[PF_MIN] )
5528:screens.c     **** 						pFac.pf.GW302_NetFactor = PF_GW302_NetFactor[PF_MIN]; // Limiting to minimum value
5529:screens.c     **** 					break;
5530:screens.c     **** 
5531:screens.c     **** 				case 6:
5532:screens.c     **** 					pFac.pf.GW302_NoNetPulse -= PF_GW302_NoNetPulse[PF_STEP];
5533:screens.c     **** 					if( pFac.pf.GW302_NoNetPulse < PF_GW302_NoNetPulse[PF_MIN] )
5534:screens.c     **** 						pFac.pf.GW302_NoNetPulse = PF_GW302_NoNetPulse[PF_MIN]; // Limiting to minimum value
5535:screens.c     **** 					break;
5536:screens.c     **** 
5537:screens.c     **** 				case 7:
5538:screens.c     **** 					if(pFac.pf.GW302_NetTwineOption == TO_NET)
5539:screens.c     **** 					{
5540:screens.c     **** 						if( pFac.pf.GW302_PreNetPulse > PF_GW302_PreNetPulse[PF_MIN] ) // Limiting unsigned type to m
5541:screens.c     **** 							pFac.pf.GW302_PreNetPulse -= PF_GW302_PreNetPulse[PF_STEP];
5542:screens.c     **** 					}
5543:screens.c     **** 
5544:screens.c     **** 					break;
5545:screens.c     **** 				}
5546:screens.c     **** 			}
5547:screens.c     **** 			else /* page == 1 */
5548:screens.c     **** 			{
5549:screens.c     **** 				switch( selection )
5550:screens.c     **** 				{
5551:screens.c     **** 				case 0:
5552:screens.c     **** 					if( pFac.pf.GW302_NetSystem == NS_BEAK )
5553:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_ROLLER;
5554:screens.c     **** 					else /* pFac.pf.GW302_NetSystem == NS_ROLLER */
5555:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_BEAK;
5556:screens.c     **** 					break;
5557:screens.c     **** 
5558:screens.c     **** 				case 1:
5559:screens.c     **** 					if( pFac.pf.GW302_BeakEngage > PF_GW302_BeakEngage[PF_MIN] ) // Limiting unsigned type to mini
5560:screens.c     **** 						pFac.pf.GW302_BeakEngage -= PF_GW302_BeakEngage[PF_STEP];
5561:screens.c     **** 					break;
5562:screens.c     **** 
5563:screens.c     **** 				case 2:
5564:screens.c     **** 					if( pFac.pf.GW302_TwineOption == TO_OFF )
5565:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_ON;
5566:screens.c     **** 					else /* pFac.pf.GW302_NetSystem == TO_ON */
5567:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_OFF;
5568:screens.c     **** 
5569:screens.c     **** 					pFac.pf.GW302_NetTwineOption = TO_NET; /* 'Net/Twine' option reset to Net on turning 'Twine Op
5570:screens.c     **** 
5571:screens.c     **** 					break;
5572:screens.c     **** 				}
5573:screens.c     **** 			}
5574:screens.c     **** 			SavecalDelayWithinMenus = 1;
5575:screens.c     **** 			valuechanged = 1;
5576:screens.c     **** 			update_values = 1;
5577:screens.c     **** 		}
5578:screens.c     **** 		else if( lkey == SW_IL ) // +
5579:screens.c     **** 		{
5580:screens.c     **** 			if( page == 0 )
5581:screens.c     **** 			{
5582:screens.c     **** 				switch( selection )
5583:screens.c     **** 				{
5584:screens.c     **** 				case 0:
5585:screens.c     **** 					pFac.pf.GW302_NetOn += PF_GW302_NetOn[PF_STEP];
5586:screens.c     **** 					if( pFac.pf.GW302_NetOn > PF_GW302_NetOn[PF_MAX] )
5587:screens.c     **** 						pFac.pf.GW302_NetOn = PF_GW302_NetOn[PF_MAX]; // Limiting to maximum value
5588:screens.c     **** 					break;
5589:screens.c     **** 
5590:screens.c     **** 				case 1:
5591:screens.c     **** 					pFac.pf.GW302_NetCutPulse += PF_GW302_NetCutPulse[PF_STEP];
5592:screens.c     **** 					if( pFac.pf.GW302_NetCutPulse > PF_GW302_NetCutPulse[PF_MAX] )
5593:screens.c     **** 						pFac.pf.GW302_NetCutPulse = PF_GW302_NetCutPulse[PF_MAX]; // Limiting to maximum value
5594:screens.c     **** 					break;
5595:screens.c     **** 
5596:screens.c     **** 				case 2:
5597:screens.c     **** 					pFac.pf.GW302_NetCutTime += PF_GW302_NetCutTime[PF_STEP];
5598:screens.c     **** 					if( pFac.pf.GW302_NetCutTime > PF_GW302_NetCutTime[PF_MAX] )
5599:screens.c     **** 						pFac.pf.GW302_NetCutTime = PF_GW302_NetCutTime[PF_MAX]; // Limiting to maximum value
5600:screens.c     **** 					break;
5601:screens.c     **** 
5602:screens.c     **** 				case 3:
5603:screens.c     **** 					pFac.pf.GW302_MinDiaPulsPerLay += PF_GW302_MinDiaPulsPerLay[PF_STEP];
5604:screens.c     **** 					if( pFac.pf.GW302_MinDiaPulsPerLay > PF_GW302_MinDiaPulsPerLay[PF_MAX] )
5605:screens.c     **** 						pFac.pf.GW302_MinDiaPulsPerLay = PF_GW302_MinDiaPulsPerLay[PF_MAX]; // Limiting to maximum va
5606:screens.c     **** 					break;
5607:screens.c     **** 
5608:screens.c     **** 				case 4:
5609:screens.c     **** 					pFac.pf.GW302_MaxDiaPulsPerLay += PF_GW302_MaxDiaPulsPerLay[PF_STEP];
5610:screens.c     **** 					if( pFac.pf.GW302_MaxDiaPulsPerLay > PF_GW302_MaxDiaPulsPerLay[PF_MAX] )
5611:screens.c     **** 						pFac.pf.GW302_MaxDiaPulsPerLay = PF_GW302_MaxDiaPulsPerLay[PF_MAX]; // Limiting to maximum va
5612:screens.c     **** 					break;
5613:screens.c     **** 
5614:screens.c     **** 				case 5:
5615:screens.c     **** 					pFac.pf.GW302_NetFactor += PF_GW302_NetFactor[PF_STEP];
5616:screens.c     **** 					if( pFac.pf.GW302_NetFactor > PF_GW302_NetFactor[PF_MAX] )
5617:screens.c     **** 						pFac.pf.GW302_NetFactor = PF_GW302_NetFactor[PF_MAX]; // Limiting to maximum value
5618:screens.c     **** 					break;
5619:screens.c     **** 
5620:screens.c     **** 				case 6:
5621:screens.c     **** 					pFac.pf.GW302_NoNetPulse += PF_GW302_NoNetPulse[PF_STEP];
5622:screens.c     **** 					if( pFac.pf.GW302_NoNetPulse > PF_GW302_NoNetPulse[PF_MAX] )
5623:screens.c     **** 						pFac.pf.GW302_NoNetPulse = PF_GW302_NoNetPulse[PF_MAX]; // Limiting to maximum value
5624:screens.c     **** 					break;
5625:screens.c     **** 
5626:screens.c     **** 				case 7:
5627:screens.c     **** 					if(pFac.pf.GW302_NetTwineOption == TO_NET)
5628:screens.c     **** 					{
5629:screens.c     **** 						pFac.pf.GW302_PreNetPulse += PF_GW302_PreNetPulse[PF_STEP];
5630:screens.c     **** 						if( pFac.pf.GW302_PreNetPulse > PF_GW302_PreNetPulse[PF_MAX] )
5631:screens.c     **** 							pFac.pf.GW302_PreNetPulse = PF_GW302_PreNetPulse[PF_MAX]; // Limiting to maximum value
5632:screens.c     **** 					}
5633:screens.c     **** 					break;
5634:screens.c     **** 				}
5635:screens.c     **** 			}
5636:screens.c     **** 			else /* page == 1 */                                              
5637:screens.c     **** 			{
5638:screens.c     **** 				switch( selection )
5639:screens.c     **** 				{
5640:screens.c     **** 				case 0:
5641:screens.c     **** 					if( pFac.pf.GW302_NetSystem == NS_BEAK )
5642:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_ROLLER;
5643:screens.c     **** 					else /* pFac.pf.GW302_NetSystem == NS_ROLLER */
5644:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_BEAK;
5645:screens.c     **** 					break;
5646:screens.c     **** 
5647:screens.c     **** 				case 1:
5648:screens.c     **** 					pFac.pf.GW302_BeakEngage += PF_GW302_BeakEngage[PF_STEP];
5649:screens.c     **** 					if( pFac.pf.GW302_BeakEngage > PF_GW302_BeakEngage[PF_MAX] )
5650:screens.c     **** 						pFac.pf.GW302_BeakEngage = PF_GW302_BeakEngage[PF_MAX]; // Limiting to maximum value
5651:screens.c     **** 					break;
5652:screens.c     **** 
5653:screens.c     **** 				case 2:
5654:screens.c     **** 					if( pFac.pf.GW302_TwineOption == TO_OFF )
5655:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_ON;
5656:screens.c     **** 					else /* pFac.pf.GW302_NetSystem == TO_ON */
5657:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_OFF;
5658:screens.c     **** 
5659:screens.c     **** 					pFac.pf.GW302_NetTwineOption = TO_NET; /* 'Net/Twine' option reset to Net on turning 'Twine Op
5660:screens.c     **** 
5661:screens.c     **** 					break;
5662:screens.c     **** 				}
5663:screens.c     **** 			}
5664:screens.c     **** 			SavecalDelayWithinMenus = 1;
5665:screens.c     **** 			valuechanged = 1;
5666:screens.c     **** 			update_values = 1;
5667:screens.c     **** 		}
5668:screens.c     **** 		else if( lkey == SW_CU ) // ^
5669:screens.c     **** 		{
5670:screens.c     **** 			if( selection )
5671:screens.c     **** 			{
5672:screens.c     **** 				selection--;
5673:screens.c     **** 				update_selection = 1;
5674:screens.c     **** 			}
5675:screens.c     **** 		}
5676:screens.c     **** 		else if( lkey == SW_CD ) // V
5677:screens.c     **** 		{
5678:screens.c     **** 			if( page == 0 )
5679:screens.c     **** 			{
5680:screens.c     **** 				if( selection < 7 )
5681:screens.c     **** 				{
5682:screens.c     **** 					selection++;
5683:screens.c     **** 					update_selection = 1;
5684:screens.c     **** 				}
5685:screens.c     **** 			}
5686:screens.c     **** 			else /* page == 1 */
5687:screens.c     **** 			{
5688:screens.c     **** 				if( selection < 2 )
5689:screens.c     **** 				{
5690:screens.c     **** 					selection++;
5691:screens.c     **** 					update_selection = 1;
5692:screens.c     **** 				}
5693:screens.c     **** 			}
5694:screens.c     **** 		}
5695:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
5696:screens.c     **** 		{
5697:screens.c     **** 			escape = 1;
5698:screens.c     **** 		}
5699:screens.c     **** 		else if( lkey == SW_IR ) // PAGE
5700:screens.c     **** 		{
5701:screens.c     **** 			page = page? 0:1;
5702:screens.c     **** 
5703:screens.c     **** 			selection = 0;
5704:screens.c     **** 			update_disp = 1;
5705:screens.c     **** 		}	
5706:screens.c     **** 	}
5707:screens.c     **** 	else if( !editing ) // Not editing and no keys being pressed
5708:screens.c     **** 	{
5709:screens.c     **** 		// Saving Programmable Factors on releasing the keys for greater than 300 ms
5710:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
5711:screens.c     **** 		{
5712:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
5713:screens.c     **** 			{
5714:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
5715:screens.c     **** 				SavecalDelayWithinMenus = 0;
5716:screens.c     **** 				savecal = 1;
5717:screens.c     **** 			}
5718:screens.c     **** 		}
5719:screens.c     **** 	}
5720:screens.c     **** 
5721:screens.c     **** 
5722:screens.c     **** 	if( update_disp )
5723:screens.c     **** 	{
5724:screens.c     **** 		// Page number
5725:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
5726:screens.c     **** 		display_f1_text( "/2", TSMAX, 140, 7, FIXED );
5727:screens.c     **** 
5728:screens.c     **** 		// Clear display area covering factor names, values & units
5729:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
5730:screens.c     **** 
5731:screens.c     **** 		// Factor names & units
5732:screens.c     **** 		if( page == 0 )
5733:screens.c     **** 		{
5734:screens.c     **** 			display_f1_text( "Net On", TSMAX, 24, 21, FIXED );
5735:screens.c     **** 			display_f1_text( "s", TSMAX, 146, 21, FIXED );
5736:screens.c     **** 
5737:screens.c     **** 			display_f1_text( "Net Cut Pulse", TSMAX, 24, 31, FIXED );
5738:screens.c     **** 
5739:screens.c     **** 			display_f1_text( "Net Cut Time", TSMAX, 24, 41, FIXED );
5740:screens.c     **** 			display_f1_text( "s", TSMAX, 146, 41, FIXED );	
5741:screens.c     **** 
5742:screens.c     **** 			display_f1_text( "MinDia puls/lay", TSMAX, 24, 51, FIXED );	
5743:screens.c     **** 
5744:screens.c     **** 			display_f1_text( "MaxDia puls/lay", TSMAX, 24, 61, FIXED );
5745:screens.c     **** 
5746:screens.c     **** 			display_f1_text( "Net Factor", TSMAX, 24, 71, FIXED );
5747:screens.c     **** 
5748:screens.c     **** 			display_f1_text( "No Net Pulse", TSMAX, 24, 81, FIXED );
5749:screens.c     **** 			display_f1_text( "s", TSMAX, 146, 81, FIXED );
5750:screens.c     **** 
5751:screens.c     **** 			display_f1_text( "Pre Net Pulse", TSMAX, 24, 91, FIXED );
5752:screens.c     **** 		}
5753:screens.c     **** 		else /* page == 1 */
5754:screens.c     **** 		{
5755:screens.c     **** 			display_f1_text( "Net System", TSMAX, 24, 21, FIXED );
5756:screens.c     **** 
5757:screens.c     **** 			display_f1_text( "Beak Engage", TSMAX, 24, 31, FIXED );	
5758:screens.c     **** 
5759:screens.c     **** 			display_f1_text( "Twine Option", TSMAX, 24, 41, FIXED );
5760:screens.c     **** 		}
5761:screens.c     **** 		update_disp = 0;
5762:screens.c     **** 
5763:screens.c     **** 		update_values = 1;    // Display factor values   
5764:screens.c     **** 		update_selection = 1; // Display tabs & selection pointer
5765:screens.c     **** 
5766:screens.c     **** 	} // End of update_disp
5767:screens.c     **** 
5768:screens.c     **** 	if( update_values )
5769:screens.c     **** 	{
5770:screens.c     **** 		// Factor values
5771:screens.c     **** 		if( page == 0 )
5772:screens.c     **** 		{	
5773:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetOn,
5774:screens.c     **** 					(float)PF_GW302_NetOn[PF_MIN], (float)PF_GW302_NetOn[PF_MAX],
5775:screens.c     **** 					1.0, DP1, 143, 21, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5776:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetCutPulse,
5777:screens.c     **** 					(float)PF_GW302_NetCutPulse[PF_MIN], (float)PF_GW302_NetCutPulse[PF_MAX],
5778:screens.c     **** 					1.0, DP0, 143, 31, DW2, RIGHT, &RDSfnt1, NULL, PNULL );
5779:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetCutTime,
5780:screens.c     **** 					(float)PF_GW302_NetCutTime[PF_MIN], (float)PF_GW302_NetCutTime[PF_MAX],
5781:screens.c     **** 					1.0, DP1, 143, 41, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5782:screens.c     **** 			display_number( (float)pFac.pf.GW302_MinDiaPulsPerLay,
5783:screens.c     **** 					(float)PF_GW302_MinDiaPulsPerLay[PF_MIN], (float)PF_GW302_MinDiaPulsPerLay[PF_MAX],
5784:screens.c     **** 					1.0, DP1, 143, 51, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
5785:screens.c     **** 			display_number( (float)pFac.pf.GW302_MaxDiaPulsPerLay,
5786:screens.c     **** 					(float)PF_GW302_MaxDiaPulsPerLay[PF_MIN], (float)PF_GW302_MaxDiaPulsPerLay[PF_MAX],
5787:screens.c     **** 					1.0, DP1, 143, 61, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
5788:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetFactor,
5789:screens.c     **** 					(float)PF_GW302_NetFactor[PF_MIN], (float)PF_GW302_NetFactor[PF_MAX],
5790:screens.c     **** 					1.0, DP1, 143, 71, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5791:screens.c     **** 			display_number( (float)pFac.pf.GW302_NoNetPulse,
5792:screens.c     **** 					(float)PF_GW302_NoNetPulse[PF_MIN], (float)PF_GW302_NoNetPulse[PF_MAX],
5793:screens.c     **** 					1.0, DP1, 143, 81, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
5794:screens.c     **** 
5795:screens.c     **** 			if(pFac.pf.GW302_NetTwineOption == TO_NET)
5796:screens.c     **** 			{
5797:screens.c     **** 				display_number( (float)pFac.pf.GW302_PreNetPulse,
5798:screens.c     **** 					(float)PF_GW302_PreNetPulse[PF_MIN], (float)PF_GW302_PreNetPulse[PF_MAX],
5799:screens.c     **** 					1.0, DP0, 143, 91, DW2, RIGHT, &RDSfnt1, NULL, PNULL );
5800:screens.c     **** 			}
5801:screens.c     **** 			else
5802:screens.c     **** 			{
5803:screens.c     **** 				display_f1_text( "0", TSMAX, 143, 91, FIXED );
5804:screens.c     **** 			}
5805:screens.c     **** 
5806:screens.c     **** 		}
5807:screens.c     **** 		else /* page == 1 */
5808:screens.c     **** 				{
5809:screens.c     **** 			if( pFac.pf.GW302_NetSystem == NS_BEAK )
5810:screens.c     **** 				display_f1_text( "Beak  ", TSMAX, 119, 21, FIXED );
5811:screens.c     **** 			else /* pFac.pf.GW302_NetSystem == NS_ROLLER */
5812:screens.c     **** 					display_f1_text( "Roller", TSMAX, 119, 21, FIXED );
5813:screens.c     **** 
5814:screens.c     **** 			display_number( (float)pFac.pf.GW302_BeakEngage,
5815:screens.c     **** 					(float)PF_GW302_BeakEngage[PF_MIN], (float)PF_GW302_BeakEngage[PF_MAX],
5816:screens.c     **** 					1.0, DP0, 143, 31, DW2, RIGHT, &RDSfnt1, NULL, PNULL );
5817:screens.c     **** 
5818:screens.c     **** 			if( pFac.pf.GW302_TwineOption == TO_OFF )
5819:screens.c     **** 				display_f1_text( "OFF", TSMAX, 128, 41, FIXED );
5820:screens.c     **** 			else /* pFac.pf.GW302_TwineOption == TO_ON */
5821:screens.c     **** 					display_f1_text( "ON", TSMAX, 133, 41, FIXED );
5822:screens.c     **** 				}
5823:screens.c     **** 		update_values = 0;
5824:screens.c     **** 
5825:screens.c     **** 	} // End of update_values
5826:screens.c     **** 
5827:screens.c     **** 	if( update_selection )
5828:screens.c     **** 	{
5829:screens.c     **** 		// Tabs 
5830:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs
5831:screens.c     **** 		if( page == 0 )
5832:screens.c     **** 		{
5833:screens.c     **** 			switch( selection ) // Drawn according to position of selection pointer
5834:screens.c     **** 			{    
5835:screens.c     **** 			case 0:
5836:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5837:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5838:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
5839:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5840:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5841:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5842:screens.c     **** 				break;
5843:screens.c     **** 
5844:screens.c     **** 			case 1:
5845:screens.c     **** 			case 2:
5846:screens.c     **** 			case 3:
5847:screens.c     **** 			case 4:
5848:screens.c     **** 			case 5:
5849:screens.c     **** 			case 6:
5850:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5851:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5852:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
5853:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5854:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5855:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5856:screens.c     **** 				break;
5857:screens.c     **** 
5858:screens.c     **** 			case 7:
5859:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5860:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5861:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
5862:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5863:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5864:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5865:screens.c     **** 				break;
5866:screens.c     **** 			}
5867:screens.c     **** 		}
5868:screens.c     **** 		else /* page == 1 */
5869:screens.c     **** 		{
5870:screens.c     **** 			switch( selection ) // Drawn according to position of selection pointer
5871:screens.c     **** 			{
5872:screens.c     **** 			case 0:
5873:screens.c     **** 			case 1:
5874:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5875:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5876:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
5877:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5878:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5879:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5880:screens.c     **** 				break;
5881:screens.c     **** 
5882:screens.c     **** 			case 2:
5883:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
5884:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
5885:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
5886:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
5887:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
5888:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
5889:screens.c     **** 				break;
5890:screens.c     **** 			}
5891:screens.c     **** 		}
5892:screens.c     **** 
5893:screens.c     **** 		// Selection pointer
5894:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
5895:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
5896:screens.c     **** 
5897:screens.c     **** 		update_selection = 0;
5898:screens.c     **** 
5899:screens.c     **** 	} // End of update_selection
5900:screens.c     **** 
5901:screens.c     **** }
5902:screens.c     **** // -----------------------------------------------------------
5903:screens.c     **** 
5904:screens.c     **** 
5905:screens.c     **** // -----------------------------------------------------------
5906:screens.c     **** // Function Name       : screen144
5907:screens.c     **** // Description         : Technician Menu - Diameter Setup
5908:screens.c     **** // -----------------------------------------------------------
5909:screens.c     **** void screen144( unsigned int lkey )
5910:screens.c     **** {
5911:screens.c     **** 	char update_disp;
5912:screens.c     **** 	char update_selection;
5913:screens.c     **** 	char update_values;
5914:screens.c     **** 
5915:screens.c     **** 	if( !startup )
5916:screens.c     **** 	{
5917:screens.c     **** 		startup = 1;
5918:screens.c     **** 
5919:screens.c     **** 		draw_frame( adm );
5920:screens.c     **** 
5921:screens.c     **** 		display_f1_text( "Diameter Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
5922:screens.c     **** 
5923:screens.c     **** 		selection = 0;
5924:screens.c     **** 		update_disp = 1;
5925:screens.c     **** 	}
5926:screens.c     **** 
5927:screens.c     **** #ifdef SHOW_TIME
5928:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
5929:screens.c     **** #endif
5930:screens.c     **** 
5931:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
5932:screens.c     **** 	{
5933:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
5934:screens.c     **** 
5935:screens.c     **** 		if( lkey == SW_OL ) // -
5936:screens.c     **** 		{
5937:screens.c     **** 			switch( selection )
5938:screens.c     **** 			{
5939:screens.c     **** 			case 0:
5940:screens.c     **** 				if( pFac.pf.GW302_DiameterMin > PF_GW302_DiameterMin[PF_MIN] ) // Limiting unsigned type to min
5941:screens.c     **** 					pFac.pf.GW302_DiameterMin -= PF_GW302_DiameterMin[PF_STEP];
5942:screens.c     **** 				break;
5943:screens.c     **** 
5944:screens.c     **** 			case 1:
5945:screens.c     **** 				if( pFac.pf.GW302_DiameterMax > PF_GW302_DiameterMax[PF_MIN] ) // Limiting unsigned type to min
5946:screens.c     **** 					pFac.pf.GW302_DiameterMax -= PF_GW302_DiameterMax[PF_STEP];
5947:screens.c     **** 				break;
5948:screens.c     **** 
5949:screens.c     **** 			case 2:
5950:screens.c     **** 				pFac.pf.GW302_DiaCorrection -= PF_GW302_DiaCorrection[PF_STEP];
5951:screens.c     **** 				if( pFac.pf.GW302_DiaCorrection < PF_GW302_DiaCorrection[PF_MIN] )
5952:screens.c     **** 					pFac.pf.GW302_DiaCorrection = PF_GW302_DiaCorrection[PF_MIN]; // Limiting to minimum value
5953:screens.c     **** 				break;
5954:screens.c     **** 
5955:screens.c     **** 			case 3:
5956:screens.c     **** 				if( pFac.pf.GW302_BaleDiaSmoothingFactor > PF_GW302_BaleDiaSmoothingFactor[PF_MIN] ) // Limitin
5957:screens.c     **** 					pFac.pf.GW302_BaleDiaSmoothingFactor -= PF_GW302_BaleDiaSmoothingFactor[PF_STEP];
5958:screens.c     **** 				break;
5959:screens.c     **** 
5960:screens.c     **** 			case 4:
5961:screens.c     **** 				if( pFac.pf.GW302_DensityPresSmoothingFactor > PF_GW302_DensityPresSmoothingFactor[PF_MIN] ) //
5962:screens.c     **** 					pFac.pf.GW302_DensityPresSmoothingFactor -= PF_GW302_DensityPresSmoothingFactor[PF_STEP];
5963:screens.c     **** 				break;
5964:screens.c     **** 
5965:screens.c     **** 			case 5:
5966:screens.c     **** 				if( pFac.pf.GW302_BaleShapeSmoothingFactor >  PF_GW302_BaleShapeSmoothingFactor[PF_MIN] ) // Li
5967:screens.c     **** 					pFac.pf.GW302_BaleShapeSmoothingFactor -=  PF_GW302_BaleShapeSmoothingFactor[PF_STEP];
5968:screens.c     **** 				break;
5969:screens.c     **** 
5970:screens.c     **** 			case 6:
5971:screens.c     **** 				if( pFac.pf.GW302_KnifePresSmoothingFactor > PF_GW302_KnifePresSmoothingFactor[PF_MIN] ) // Lim
5972:screens.c     **** 					pFac.pf.GW302_KnifePresSmoothingFactor -= PF_GW302_KnifePresSmoothingFactor[PF_STEP];
5973:screens.c     **** 				break;
5974:screens.c     **** 			}
5975:screens.c     **** 			SavecalDelayWithinMenus = 1;
5976:screens.c     **** 			valuechanged = 1;
5977:screens.c     **** 			update_values = 1;
5978:screens.c     **** 		}
5979:screens.c     **** 		else if( lkey == SW_IL ) // +
5980:screens.c     **** 		{
5981:screens.c     **** 			switch( selection )
5982:screens.c     **** 			{
5983:screens.c     **** 			case 0:
5984:screens.c     **** 				pFac.pf.GW302_DiameterMin += PF_GW302_DiameterMin[PF_STEP];
5985:screens.c     **** 				if( pFac.pf.GW302_DiameterMin > PF_GW302_DiameterMin[PF_MAX] )
5986:screens.c     **** 					pFac.pf.GW302_DiameterMin = PF_GW302_DiameterMin[PF_MAX]; // Limiting to maximum value
5987:screens.c     **** 				break;
5988:screens.c     **** 
5989:screens.c     **** 			case 1:
5990:screens.c     **** 				pFac.pf.GW302_DiameterMax += PF_GW302_DiameterMax[PF_STEP];
5991:screens.c     **** 				if( pFac.pf.GW302_DiameterMax > PF_GW302_DiameterMax[PF_MAX] )
5992:screens.c     **** 					pFac.pf.GW302_DiameterMax = PF_GW302_DiameterMax[PF_MAX]; // Limiting to maximum value
5993:screens.c     **** 				break;
5994:screens.c     **** 
5995:screens.c     **** 			case 2:
5996:screens.c     **** 				pFac.pf.GW302_DiaCorrection += PF_GW302_DiaCorrection[PF_STEP];
5997:screens.c     **** 				if( pFac.pf.GW302_DiaCorrection > PF_GW302_DiaCorrection[PF_MAX] )
5998:screens.c     **** 					pFac.pf.GW302_DiaCorrection = PF_GW302_DiaCorrection[PF_MAX]; // Limiting to maximum value
5999:screens.c     **** 				break;
6000:screens.c     **** 
6001:screens.c     **** 			case 3:
6002:screens.c     **** 				pFac.pf.GW302_BaleDiaSmoothingFactor += PF_GW302_BaleDiaSmoothingFactor[PF_STEP];
6003:screens.c     **** 				if( pFac.pf.GW302_BaleDiaSmoothingFactor > PF_GW302_BaleDiaSmoothingFactor[PF_MAX] )
6004:screens.c     **** 					pFac.pf.GW302_BaleDiaSmoothingFactor = PF_GW302_BaleDiaSmoothingFactor[PF_MAX]; // Limiting to
6005:screens.c     **** 				break;
6006:screens.c     **** 
6007:screens.c     **** 			case 4:
6008:screens.c     **** 				pFac.pf.GW302_DensityPresSmoothingFactor += PF_GW302_DensityPresSmoothingFactor[PF_STEP];
6009:screens.c     **** 				if( pFac.pf.GW302_DensityPresSmoothingFactor > PF_GW302_DensityPresSmoothingFactor[PF_MAX] )
6010:screens.c     **** 					pFac.pf.GW302_DensityPresSmoothingFactor = PF_GW302_DensityPresSmoothingFactor[PF_MAX]; // Lim
6011:screens.c     **** 				break;
6012:screens.c     **** 
6013:screens.c     **** 			case 5:
6014:screens.c     **** 				pFac.pf.GW302_BaleShapeSmoothingFactor +=  PF_GW302_BaleShapeSmoothingFactor[PF_STEP];
6015:screens.c     **** 				if( pFac.pf.GW302_BaleShapeSmoothingFactor >  PF_GW302_BaleShapeSmoothingFactor[PF_MAX] )
6016:screens.c     **** 					pFac.pf.GW302_BaleShapeSmoothingFactor =  PF_GW302_BaleShapeSmoothingFactor[PF_MAX]; // Limiti
6017:screens.c     **** 				break;
6018:screens.c     **** 
6019:screens.c     **** 			case 6:
6020:screens.c     **** 				pFac.pf.GW302_KnifePresSmoothingFactor += PF_GW302_KnifePresSmoothingFactor[PF_STEP];
6021:screens.c     **** 				if( pFac.pf.GW302_KnifePresSmoothingFactor > PF_GW302_KnifePresSmoothingFactor[PF_MAX] )
6022:screens.c     **** 					pFac.pf.GW302_KnifePresSmoothingFactor = PF_GW302_KnifePresSmoothingFactor[PF_MAX]; // Limitin
6023:screens.c     **** 				break;
6024:screens.c     **** 			}
6025:screens.c     **** 			SavecalDelayWithinMenus = 1;
6026:screens.c     **** 			valuechanged = 1;
6027:screens.c     **** 			update_values = 1;
6028:screens.c     **** 		}
6029:screens.c     **** 		else if( lkey == SW_CU ) // ^
6030:screens.c     **** 		{
6031:screens.c     **** 			if( selection )
6032:screens.c     **** 			{
6033:screens.c     **** 				selection--;
6034:screens.c     **** 				update_selection = 1;
6035:screens.c     **** 			}
6036:screens.c     **** 		}
6037:screens.c     **** 		else if( lkey == SW_CD ) // V
6038:screens.c     **** 		{
6039:screens.c     **** 			if( selection < 6 )
6040:screens.c     **** 			{
6041:screens.c     **** 				selection++;
6042:screens.c     **** 				update_selection = 1;
6043:screens.c     **** 			}
6044:screens.c     **** 		}
6045:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
6046:screens.c     **** 		{
6047:screens.c     **** 			escape = 1;
6048:screens.c     **** 		}
6049:screens.c     **** 		else if( lkey == SW_IR ) // BLANK
6050:screens.c     **** 		{
6051:screens.c     **** 			// nothing
6052:screens.c     **** 		}
6053:screens.c     **** 	}
6054:screens.c     **** 	else if( !editing ) // Not editing and no keys being pressed
6055:screens.c     **** 	{
6056:screens.c     **** 		// Saving Programmable Factors on releasing the keys for greater than 300 ms
6057:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
6058:screens.c     **** 		{
6059:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
6060:screens.c     **** 			{
6061:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
6062:screens.c     **** 				SavecalDelayWithinMenus = 0;
6063:screens.c     **** 				savecal = 1;
6064:screens.c     **** 			}
6065:screens.c     **** 		}
6066:screens.c     **** 	}
6067:screens.c     **** 
6068:screens.c     **** 
6069:screens.c     **** 	if( update_disp )
6070:screens.c     **** 	{
6071:screens.c     **** 		// Clear display area covering factor names, values & units
6072:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
6073:screens.c     **** 
6074:screens.c     **** 		// Factor names & units
6075:screens.c     **** 		display_f1_text( "Diameter Min", TSMAX, 24, 21, FIXED );
6076:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 21, FIXED );
6077:screens.c     **** 
6078:screens.c     **** 		display_f1_text( "Diameter Max", TSMAX, 24, 31, FIXED );
6079:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 31, FIXED );
6080:screens.c     **** 
6081:screens.c     **** 		display_f1_text( "Dia. Correction", TSMAX, 24, 41, FIXED );
6082:screens.c     **** 		display_f1_text( "V", TSMAX, 146, 41, FIXED );
6083:screens.c     **** 
6084:screens.c     **** 		// Bale Diameter (AnIP1) Smoothing Factor
6085:screens.c     **** 		display_f1_text( "BaleDia  AnIP1 SF", TSMAX, 24, 51, FIXED );
6086:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 51, FIXED );	
6087:screens.c     **** 
6088:screens.c     **** 		// (Bale) Density Pressure (AnIP2) Smoothing Factor
6089:screens.c     **** 		display_f1_text( "DensPres AnIP2 SF", TSMAX, 24, 61, FIXED );
6090:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 61, FIXED );
6091:screens.c     **** 
6092:screens.c     **** 		// Bale Shape Indicator (AnIP3) Smoothing Factor
6093:screens.c     **** 		display_f1_text( "BaleShapeAnIP3 SF", TSMAX, 24, 71, FIXED );
6094:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 71, FIXED );
6095:screens.c     **** 
6096:screens.c     **** 		// Knife Pressure (AnIP4) Smoothing Factor
6097:screens.c     **** 		display_f1_text( "KnifePresAnIP4 SF", TSMAX, 24, 81, FIXED );
6098:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 81, FIXED );
6099:screens.c     **** 
6100:screens.c     **** 		display_f1_text( "(1%=MaxSmoothingFactor)", TSMAX, 21, 91, FIXED );
6101:screens.c     **** 
6102:screens.c     **** 
6103:screens.c     **** 		update_disp = 0;
6104:screens.c     **** 
6105:screens.c     **** 		update_values = 1;    // Display factor values   
6106:screens.c     **** 		update_selection = 1; // Display tabs & selection pointer
6107:screens.c     **** 
6108:screens.c     **** 	} // End of update_disp
6109:screens.c     **** 
6110:screens.c     **** 	if( update_values )
6111:screens.c     **** 	{		
6112:screens.c     **** 		// Factor values
6113:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterMin,
6114:screens.c     **** 				(float)PF_GW302_DiameterMin[PF_MIN], (float)PF_GW302_DiameterMin[PF_MAX],
6115:screens.c     **** 				1.0, DP0, 143, 21, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
6116:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterMax,
6117:screens.c     **** 				(float)PF_GW302_DiameterMax[PF_MIN], (float)PF_GW302_DiameterMax[PF_MAX],
6118:screens.c     **** 				1.0, DP0, 143, 31, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
6119:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiaCorrection,
6120:screens.c     **** 				(float)PF_GW302_DiaCorrection[PF_MIN], (float)PF_GW302_DiaCorrection[PF_MAX],
6121:screens.c     **** 				1.0, DP2, 143, 41, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
6122:screens.c     **** 		display_number( (float)pFac.pf.GW302_BaleDiaSmoothingFactor,
6123:screens.c     **** 				(float)PF_GW302_BaleDiaSmoothingFactor[PF_MIN], (float)PF_GW302_BaleDiaSmoothingFactor[PF_MAX],
6124:screens.c     **** 				1.0, DP0, 143, 51, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
6125:screens.c     **** 		display_number( (float)pFac.pf.GW302_DensityPresSmoothingFactor,
6126:screens.c     **** 				(float)PF_GW302_DensityPresSmoothingFactor[PF_MIN], (float)PF_GW302_DensityPresSmoothingFactor[
6127:screens.c     **** 				1.0, DP0, 143, 61, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
6128:screens.c     **** 		display_number( (float)pFac.pf.GW302_BaleShapeSmoothingFactor,
6129:screens.c     **** 				(float)PF_GW302_BaleShapeSmoothingFactor[PF_MIN], (float)PF_GW302_BaleShapeSmoothingFactor[PF_M
6130:screens.c     **** 				1.0, DP0, 143, 71, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
6131:screens.c     **** 		display_number( (float)pFac.pf.GW302_KnifePresSmoothingFactor,
6132:screens.c     **** 				(float)PF_GW302_KnifePresSmoothingFactor[PF_MIN], (float)PF_GW302_KnifePresSmoothingFactor[PF_M
6133:screens.c     **** 				1.0, DP0, 143, 81, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
6134:screens.c     **** 
6135:screens.c     **** 		update_values = 0;
6136:screens.c     **** 
6137:screens.c     **** 	} // End of update_values
6138:screens.c     **** 
6139:screens.c     **** 	if( update_selection )
6140:screens.c     **** 	{	
6141:screens.c     **** 		// Tabs 
6142:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs    
6143:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
6144:screens.c     **** 		{    
6145:screens.c     **** 		case 0:
6146:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6147:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6148:screens.c     **** 			write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
6149:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6150:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6151:screens.c     **** 			break;
6152:screens.c     **** 
6153:screens.c     **** 		case 1:
6154:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6155:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6156:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6157:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6158:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6159:screens.c     **** 			break;
6160:screens.c     **** 
6161:screens.c     **** 		case 2:
6162:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6163:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6164:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6165:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6166:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6167:screens.c     **** 			break;
6168:screens.c     **** 
6169:screens.c     **** 		case 3:
6170:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6171:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6172:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6173:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6174:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6175:screens.c     **** 			break;
6176:screens.c     **** 
6177:screens.c     **** 		case 4:
6178:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6179:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6180:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6181:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6182:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6183:screens.c     **** 			break;
6184:screens.c     **** 
6185:screens.c     **** 		case 5:
6186:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6187:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6188:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6189:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6190:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6191:screens.c     **** 			break;
6192:screens.c     **** 
6193:screens.c     **** 		case 6:
6194:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6195:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6196:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
6197:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6198:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6199:screens.c     **** 			break;
6200:screens.c     **** 		}	
6201:screens.c     **** 
6202:screens.c     **** 		// Selection pointer
6203:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
6204:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
6205:screens.c     **** 
6206:screens.c     **** 		update_selection = 0;
6207:screens.c     **** 
6208:screens.c     **** 	} // End of update_selection
6209:screens.c     **** }
6210:screens.c     **** // -----------------------------------------------------------
6211:screens.c     **** 
6212:screens.c     **** 
6213:screens.c     **** // -----------------------------------------------------------
6214:screens.c     **** // Function Name       : screen145
6215:screens.c     **** // Description         : Technician Menu - Density Setup
6216:screens.c     **** // -----------------------------------------------------------
6217:screens.c     **** void screen145( unsigned int lkey )
6218:screens.c     **** {
6219:screens.c     **** 	char update_disp;
6220:screens.c     **** 	char update_selection;
6221:screens.c     **** 	char update_values;
6222:screens.c     **** 
6223:screens.c     **** 	static char page;
6224:screens.c     **** 
6225:screens.c     **** 	if( !startup )
6226:screens.c     **** 	{
6227:screens.c     **** 		startup = 1;
6228:screens.c     **** 
6229:screens.c     **** 		draw_frame( adm );
6230:screens.c     **** 
6231:screens.c     **** 		display_f1_text( "Density Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
6232:screens.c     **** 
6233:screens.c     **** 		page = 0;
6234:screens.c     **** 		selection = 0;
6235:screens.c     **** 		update_disp = 1;
6236:screens.c     **** 	}
6237:screens.c     **** 
6238:screens.c     **** #ifdef SHOW_TIME
6239:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
6240:screens.c     **** #endif
6241:screens.c     **** 
6242:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
6243:screens.c     **** 	{
6244:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
6245:screens.c     **** 
6246:screens.c     **** 		if( lkey == SW_OL ) // -
6247:screens.c     **** 		{
6248:screens.c     **** 			if( page == 0 )
6249:screens.c     **** 			{
6250:screens.c     **** 				switch( selection )
6251:screens.c     **** 				{
6252:screens.c     **** 				case 0:
6253:screens.c     **** 					pFac.pf.GW302_Density1 -= PF_GW302_Density1[PF_STEP];
6254:screens.c     **** 					if( pFac.pf.GW302_Density1 < PF_GW302_Density1[PF_MIN] )
6255:screens.c     **** 						pFac.pf.GW302_Density1 = PF_GW302_Density1[PF_MIN]; // Limiting to minimum value
6256:screens.c     **** 					break;
6257:screens.c     **** 
6258:screens.c     **** 				case 1:
6259:screens.c     **** 					pFac.pf.GW302_Density2 -= PF_GW302_Density2[PF_STEP];
6260:screens.c     **** 					if( pFac.pf.GW302_Density2 < PF_GW302_Density2[PF_MIN] )
6261:screens.c     **** 						pFac.pf.GW302_Density2 = PF_GW302_Density2[PF_MIN]; // Limiting to minimum value
6262:screens.c     **** 					break;
6263:screens.c     **** 
6264:screens.c     **** 				case 2:
6265:screens.c     **** 					pFac.pf.GW302_Density3 -= PF_GW302_Density3[PF_STEP];
6266:screens.c     **** 					if( pFac.pf.GW302_Density3 < PF_GW302_Density3[PF_MIN] )
6267:screens.c     **** 						pFac.pf.GW302_Density3 = PF_GW302_Density3[PF_MIN]; // Limiting to minimum value
6268:screens.c     **** 					break;
6269:screens.c     **** 
6270:screens.c     **** 				case 3:
6271:screens.c     **** 					pFac.pf.GW302_Density4 -= PF_GW302_Density4[PF_STEP];
6272:screens.c     **** 					if( pFac.pf.GW302_Density4 < PF_GW302_Density4[PF_MIN] )
6273:screens.c     **** 						pFac.pf.GW302_Density4 = PF_GW302_Density4[PF_MIN]; // Limiting to minimum value
6274:screens.c     **** 					break;
6275:screens.c     **** 
6276:screens.c     **** 				case 4:
6277:screens.c     **** 					pFac.pf.GW302_Density5 -= PF_GW302_Density5[PF_STEP];
6278:screens.c     **** 					if( pFac.pf.GW302_Density5 < PF_GW302_Density5[PF_MIN] )
6279:screens.c     **** 						pFac.pf.GW302_Density5 = PF_GW302_Density5[PF_MIN]; // Limiting to minimum value
6280:screens.c     **** 					break;
6281:screens.c     **** 
6282:screens.c     **** 				case 5:
6283:screens.c     **** 					pFac.pf.GW302_Density6 -= PF_GW302_Density6[PF_STEP];
6284:screens.c     **** 					if( pFac.pf.GW302_Density6 < PF_GW302_Density6[PF_MIN] )
6285:screens.c     **** 						pFac.pf.GW302_Density6 = PF_GW302_Density6[PF_MIN]; // Limiting to minimum value
6286:screens.c     **** 					break;
6287:screens.c     **** 				}
6288:screens.c     **** 			}
6289:screens.c     **** 			else /* page == 1 */
6290:screens.c     **** 			{
6291:screens.c     **** 				switch( selection )
6292:screens.c     **** 				{
6293:screens.c     **** 				case 0:
6294:screens.c     **** 					pFac.pf.GW302_Density7 -= PF_GW302_Density7[PF_STEP];
6295:screens.c     **** 					if( pFac.pf.GW302_Density7 < PF_GW302_Density7[PF_MIN] )
6296:screens.c     **** 						pFac.pf.GW302_Density7 = PF_GW302_Density7[PF_MIN]; // Limiting to minimum value
6297:screens.c     **** 					break;
6298:screens.c     **** 
6299:screens.c     **** 				case 1:
6300:screens.c     **** 					pFac.pf.GW302_Density8 -= PF_GW302_Density8[PF_STEP];
6301:screens.c     **** 					if( pFac.pf.GW302_Density8 < PF_GW302_Density8[PF_MIN] )
6302:screens.c     **** 						pFac.pf.GW302_Density8 = PF_GW302_Density8[PF_MIN]; // Limiting to minimum value
6303:screens.c     **** 					break;
6304:screens.c     **** 
6305:screens.c     **** 				case 2:
6306:screens.c     **** 					pFac.pf.GW302_Density9 -= PF_GW302_Density9[PF_STEP];
6307:screens.c     **** 					if( pFac.pf.GW302_Density9 < PF_GW302_Density9[PF_MIN] )
6308:screens.c     **** 						pFac.pf.GW302_Density9 = PF_GW302_Density9[PF_MIN]; // Limiting to minimum value
6309:screens.c     **** 					break;
6310:screens.c     **** 
6311:screens.c     **** 				case 3:
6312:screens.c     **** 					pFac.pf.GW302_Density10 -= PF_GW302_Density10[PF_STEP];
6313:screens.c     **** 					if( pFac.pf.GW302_Density10 < PF_GW302_Density10[PF_MIN] )
6314:screens.c     **** 						pFac.pf.GW302_Density10 = PF_GW302_Density10[PF_MIN]; // Limiting to minimum value
6315:screens.c     **** 					break;
6316:screens.c     **** 				}
6317:screens.c     **** 			}
6318:screens.c     **** 			SavecalDelayWithinMenus = 1;
6319:screens.c     **** 			valuechanged = 1;
6320:screens.c     **** 			update_values = 1;
6321:screens.c     **** 		}
6322:screens.c     **** 		else if( lkey == SW_IL ) // +
6323:screens.c     **** 		{
6324:screens.c     **** 			if( page == 0 )
6325:screens.c     **** 			{
6326:screens.c     **** 				switch( selection )
6327:screens.c     **** 				{
6328:screens.c     **** 				case 0:
6329:screens.c     **** 					pFac.pf.GW302_Density1 += PF_GW302_Density1[PF_STEP];
6330:screens.c     **** 					if( pFac.pf.GW302_Density1 > PF_GW302_Density1[PF_MAX] )
6331:screens.c     **** 						pFac.pf.GW302_Density1 = PF_GW302_Density1[PF_MAX]; // Limiting to maximum value
6332:screens.c     **** 					break;
6333:screens.c     **** 
6334:screens.c     **** 				case 1:
6335:screens.c     **** 					pFac.pf.GW302_Density2 += PF_GW302_Density2[PF_STEP];
6336:screens.c     **** 					if( pFac.pf.GW302_Density2 > PF_GW302_Density2[PF_MAX] )
6337:screens.c     **** 						pFac.pf.GW302_Density2 = PF_GW302_Density2[PF_MAX]; // Limiting to maximum value
6338:screens.c     **** 					break;
6339:screens.c     **** 
6340:screens.c     **** 				case 2:
6341:screens.c     **** 					pFac.pf.GW302_Density3 += PF_GW302_Density3[PF_STEP];
6342:screens.c     **** 					if( pFac.pf.GW302_Density3 > PF_GW302_Density3[PF_MAX] )
6343:screens.c     **** 						pFac.pf.GW302_Density3 = PF_GW302_Density3[PF_MAX]; // Limiting to maximum value
6344:screens.c     **** 					break;
6345:screens.c     **** 
6346:screens.c     **** 				case 3:
6347:screens.c     **** 					pFac.pf.GW302_Density4 += PF_GW302_Density4[PF_STEP];
6348:screens.c     **** 					if( pFac.pf.GW302_Density4 > PF_GW302_Density4[PF_MAX] )
6349:screens.c     **** 						pFac.pf.GW302_Density4 = PF_GW302_Density4[PF_MAX]; // Limiting to maximum value
6350:screens.c     **** 					break;
6351:screens.c     **** 
6352:screens.c     **** 				case 4:
6353:screens.c     **** 					pFac.pf.GW302_Density5 += PF_GW302_Density5[PF_STEP];
6354:screens.c     **** 					if( pFac.pf.GW302_Density5 > PF_GW302_Density5[PF_MAX] )
6355:screens.c     **** 						pFac.pf.GW302_Density5 = PF_GW302_Density5[PF_MAX]; // Limiting to maximum value
6356:screens.c     **** 					break;
6357:screens.c     **** 
6358:screens.c     **** 				case 5:
6359:screens.c     **** 					pFac.pf.GW302_Density6 += PF_GW302_Density6[PF_STEP];
6360:screens.c     **** 					if( pFac.pf.GW302_Density6 > PF_GW302_Density6[PF_MAX] )
6361:screens.c     **** 						pFac.pf.GW302_Density6 = PF_GW302_Density6[PF_MAX]; // Limiting to maximum value
6362:screens.c     **** 					break;
6363:screens.c     **** 				}
6364:screens.c     **** 			}
6365:screens.c     **** 			else /* page == 1 */
6366:screens.c     **** 			{
6367:screens.c     **** 				switch( selection )
6368:screens.c     **** 				{
6369:screens.c     **** 				case 0:
6370:screens.c     **** 					pFac.pf.GW302_Density7 += PF_GW302_Density7[PF_STEP];
6371:screens.c     **** 					if( pFac.pf.GW302_Density7 > PF_GW302_Density7[PF_MAX] )
6372:screens.c     **** 						pFac.pf.GW302_Density7 = PF_GW302_Density7[PF_MAX]; // Limiting to maximum value
6373:screens.c     **** 					break;
6374:screens.c     **** 
6375:screens.c     **** 				case 1:
6376:screens.c     **** 					pFac.pf.GW302_Density8 += PF_GW302_Density8[PF_STEP];
6377:screens.c     **** 					if( pFac.pf.GW302_Density8 > PF_GW302_Density8[PF_MAX] )
6378:screens.c     **** 						pFac.pf.GW302_Density8 = PF_GW302_Density8[PF_MAX]; // Limiting to maximum value
6379:screens.c     **** 					break;
6380:screens.c     **** 
6381:screens.c     **** 				case 2:
6382:screens.c     **** 					pFac.pf.GW302_Density9 += PF_GW302_Density9[PF_STEP];
6383:screens.c     **** 					if( pFac.pf.GW302_Density9 > PF_GW302_Density9[PF_MAX] )
6384:screens.c     **** 						pFac.pf.GW302_Density9 = PF_GW302_Density9[PF_MAX]; // Limiting to maximum value
6385:screens.c     **** 					break;
6386:screens.c     **** 
6387:screens.c     **** 				case 3:
6388:screens.c     **** 					pFac.pf.GW302_Density10 += PF_GW302_Density10[PF_STEP];
6389:screens.c     **** 					if( pFac.pf.GW302_Density10 > PF_GW302_Density10[PF_MAX] )
6390:screens.c     **** 						pFac.pf.GW302_Density10 = PF_GW302_Density10[PF_MAX]; // Limiting to maximum value
6391:screens.c     **** 					break;
6392:screens.c     **** 				}
6393:screens.c     **** 			}
6394:screens.c     **** 			SavecalDelayWithinMenus = 1;
6395:screens.c     **** 			valuechanged = 1;
6396:screens.c     **** 			update_values = 1;
6397:screens.c     **** 		}
6398:screens.c     **** 		else if( lkey == SW_CU ) // ^
6399:screens.c     **** 		{
6400:screens.c     **** 			if( selection )
6401:screens.c     **** 			{
6402:screens.c     **** 				selection--;
6403:screens.c     **** 				update_selection = 1;
6404:screens.c     **** 			}
6405:screens.c     **** 		}
6406:screens.c     **** 		else if( lkey == SW_CD ) // V
6407:screens.c     **** 		{
6408:screens.c     **** 			if( page == 0 )
6409:screens.c     **** 			{
6410:screens.c     **** 				if( selection < 5 )
6411:screens.c     **** 				{
6412:screens.c     **** 					selection++;
6413:screens.c     **** 					update_selection = 1;
6414:screens.c     **** 				}
6415:screens.c     **** 			}
6416:screens.c     **** 			else /* page == 1 */
6417:screens.c     **** 			{
6418:screens.c     **** 				if( selection < 3 )
6419:screens.c     **** 				{
6420:screens.c     **** 					selection++;
6421:screens.c     **** 					update_selection = 1;
6422:screens.c     **** 				}
6423:screens.c     **** 			}
6424:screens.c     **** 		}
6425:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
6426:screens.c     **** 		{
6427:screens.c     **** 			escape = 1;
6428:screens.c     **** 		}
6429:screens.c     **** 		else if( lkey == SW_IR ) // PAGE
6430:screens.c     **** 		{
6431:screens.c     **** 			page = page? 0:1;
6432:screens.c     **** 
6433:screens.c     **** 			selection = 0;
6434:screens.c     **** 			update_disp = 1;
6435:screens.c     **** 		}
6436:screens.c     **** 	}
6437:screens.c     **** 	else if( !editing ) // Not editing and no keys being pressed
6438:screens.c     **** 	{
6439:screens.c     **** 		// Saving Programmable Factors on releasing the keys for greater than 300 ms
6440:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
6441:screens.c     **** 		{
6442:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
6443:screens.c     **** 			{
6444:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
6445:screens.c     **** 				SavecalDelayWithinMenus = 0;
6446:screens.c     **** 				savecal = 1;
6447:screens.c     **** 			}
6448:screens.c     **** 		}
6449:screens.c     **** 	}
6450:screens.c     **** 
6451:screens.c     **** 
6452:screens.c     **** 	if( update_disp )
6453:screens.c     **** 	{
6454:screens.c     **** 		// Page number
6455:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
6456:screens.c     **** 		display_f1_text( "/2", TSMAX, 140, 7, FIXED );
6457:screens.c     **** 
6458:screens.c     **** 		// Clear display area covering factor names, values & units
6459:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
6460:screens.c     **** 
6461:screens.c     **** 		// Factors names & units
6462:screens.c     **** 		if( page == 0 )
6463:screens.c     **** 		{
6464:screens.c     **** 			display_f1_text( "Density 1", TSMAX, 24, 21, FIXED );
6465:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 21, FIXED );
6466:screens.c     **** 
6467:screens.c     **** 			display_f1_text( "Density 2", TSMAX, 24, 31, FIXED );
6468:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
6469:screens.c     **** 
6470:screens.c     **** 			display_f1_text( "Density 3", TSMAX, 24, 41, FIXED );
6471:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 41, FIXED );
6472:screens.c     **** 
6473:screens.c     **** 			display_f1_text( "Density 4", TSMAX, 24, 51, FIXED );
6474:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 51, FIXED );
6475:screens.c     **** 
6476:screens.c     **** 			display_f1_text( "Density 5", TSMAX, 24, 61, FIXED );
6477:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 61, FIXED );
6478:screens.c     **** 
6479:screens.c     **** 			display_f1_text( "Density 6", TSMAX, 24, 71, FIXED );
6480:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 71, FIXED );
6481:screens.c     **** 		}
6482:screens.c     **** 		else /* page == 1 */
6483:screens.c     **** 		{
6484:screens.c     **** 			display_f1_text( "Density 7", TSMAX, 24, 21, FIXED );
6485:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 21, FIXED );
6486:screens.c     **** 
6487:screens.c     **** 			display_f1_text( "Density 8", TSMAX, 24, 31, FIXED );
6488:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
6489:screens.c     **** 
6490:screens.c     **** 			display_f1_text( "Density 9", TSMAX, 24, 41, FIXED );
6491:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 41, FIXED );
6492:screens.c     **** 
6493:screens.c     **** 			display_f1_text( "Density 10", TSMAX, 24, 51, FIXED );
6494:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 51, FIXED );
6495:screens.c     **** 		}
6496:screens.c     **** 		update_disp = 0;
6497:screens.c     **** 
6498:screens.c     **** 		update_values = 1;    // Display factor values   
6499:screens.c     **** 		update_selection = 1; // Display tabs & selection pointer
6500:screens.c     **** 
6501:screens.c     **** 	} // End of update_disp
6502:screens.c     **** 
6503:screens.c     **** 	if( update_values )
6504:screens.c     **** 	{		
6505:screens.c     **** 		// Factor values
6506:screens.c     **** 		if( page == 0 )
6507:screens.c     **** 		{
6508:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density1,
6509:screens.c     **** 					(float)PF_GW302_Density1[PF_MIN], (float)PF_GW302_Density1[PF_MAX],
6510:screens.c     **** 					1.0, DP2, 142, 21, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6511:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density2,
6512:screens.c     **** 					(float)PF_GW302_Density2[PF_MIN], (float)PF_GW302_Density2[PF_MAX],
6513:screens.c     **** 					1.0, DP2, 142, 31, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6514:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density3,
6515:screens.c     **** 					(float)PF_GW302_Density3[PF_MIN], (float)PF_GW302_Density3[PF_MAX],
6516:screens.c     **** 					1.0, DP2, 142, 41, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6517:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density4,
6518:screens.c     **** 					(float)PF_GW302_Density4[PF_MIN], (float)PF_GW302_Density4[PF_MAX],
6519:screens.c     **** 					1.0, DP2, 142, 51, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6520:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density5,
6521:screens.c     **** 					(float)PF_GW302_Density5[PF_MIN], (float)PF_GW302_Density5[PF_MAX],
6522:screens.c     **** 					1.0, DP2, 142, 61, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6523:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density6,
6524:screens.c     **** 					(float)PF_GW302_Density6[PF_MIN], (float)PF_GW302_Density6[PF_MAX],
6525:screens.c     **** 					1.0, DP2, 142, 71, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6526:screens.c     **** 		}
6527:screens.c     **** 		else /* page == 1 */
6528:screens.c     **** 				{
6529:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density7,
6530:screens.c     **** 					(float)PF_GW302_Density7[PF_MIN], (float)PF_GW302_Density7[PF_MAX],
6531:screens.c     **** 					1.0, DP2, 142, 21, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6532:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density8,
6533:screens.c     **** 					(float)PF_GW302_Density8[PF_MIN], (float)PF_GW302_Density8[PF_MAX],
6534:screens.c     **** 					1.0, DP2, 142, 31, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6535:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density9,
6536:screens.c     **** 					(float)PF_GW302_Density9[PF_MIN], (float)PF_GW302_Density9[PF_MAX],
6537:screens.c     **** 					1.0, DP2, 142, 41, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6538:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density10,
6539:screens.c     **** 					(float)PF_GW302_Density10[PF_MIN], (float)PF_GW302_Density10[PF_MAX],
6540:screens.c     **** 					1.0, DP2, 142, 51, DW5, RIGHT, &RDSfnt1, NULL, PNULL );
6541:screens.c     **** 				}
6542:screens.c     **** 		update_values = 0;
6543:screens.c     **** 
6544:screens.c     **** 	} // End of update_values
6545:screens.c     **** 
6546:screens.c     **** 	if( update_selection )
6547:screens.c     **** 	{
6548:screens.c     **** 		// Tabs 
6549:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs 
6550:screens.c     **** 		if( page == 0 )
6551:screens.c     **** 		{
6552:screens.c     **** 			// Drawn according to position of selection pointer
6553:screens.c     **** 			switch( selection ) 
6554:screens.c     **** 			{
6555:screens.c     **** 			case 0:
6556:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6557:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6558:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
6559:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
6560:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
6561:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6562:screens.c     **** 				break;
6563:screens.c     **** 
6564:screens.c     **** 			case 1:
6565:screens.c     **** 			case 2:
6566:screens.c     **** 			case 3:
6567:screens.c     **** 			case 4:
6568:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6569:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6570:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6571:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
6572:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
6573:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6574:screens.c     **** 				break;
6575:screens.c     **** 
6576:screens.c     **** 			case 5:
6577:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6578:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6579:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
6580:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
6581:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
6582:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6583:screens.c     **** 				break;
6584:screens.c     **** 			}
6585:screens.c     **** 		}
6586:screens.c     **** 		else /* page == 1 */
6587:screens.c     **** 		{
6588:screens.c     **** 			switch( selection ) // Drawn according to position of selection pointer
6589:screens.c     **** 			{
6590:screens.c     **** 			case 0:
6591:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6592:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6593:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
6594:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
6595:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
6596:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6597:screens.c     **** 				break;
6598:screens.c     **** 
6599:screens.c     **** 			case 1:
6600:screens.c     **** 			case 2:
6601:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6602:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6603:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6604:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
6605:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
6606:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6607:screens.c     **** 				break;
6608:screens.c     **** 
6609:screens.c     **** 			case 3:
6610:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6611:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6612:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
6613:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
6614:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
6615:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6616:screens.c     **** 				break;
6617:screens.c     **** 			}
6618:screens.c     **** 		}
6619:screens.c     **** 
6620:screens.c     **** 		// Selection pointer
6621:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
6622:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
6623:screens.c     **** 
6624:screens.c     **** 		update_selection = 0;
6625:screens.c     **** 
6626:screens.c     **** 	} // End of update_selection
6627:screens.c     **** 
6628:screens.c     **** }
6629:screens.c     **** // -----------------------------------------------------------
6630:screens.c     **** 
6631:screens.c     **** 
6632:screens.c     **** // -----------------------------------------------------------
6633:screens.c     **** // Function Name       : screen146
6634:screens.c     **** // Description         : Technician Menu - Knives Setup
6635:screens.c     **** // -----------------------------------------------------------
6636:screens.c     **** void screen146( unsigned int lkey )
6637:screens.c     **** {
6638:screens.c     **** 	char update_disp;
6639:screens.c     **** 	char update_selection;
6640:screens.c     **** 	char update_values;
6641:screens.c     **** 
6642:screens.c     **** 	if( !startup )
6643:screens.c     **** 	{
6644:screens.c     **** 		startup = 1;
6645:screens.c     **** 
6646:screens.c     **** 		draw_frame( adm );
6647:screens.c     **** 
6648:screens.c     **** 		display_f1_text( "Knives Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
6649:screens.c     **** 
6650:screens.c     **** 		selection = 0;
6651:screens.c     **** 		update_disp = 1;
6652:screens.c     **** 	}
6653:screens.c     **** 
6654:screens.c     **** #ifdef SHOW_TIME
6655:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
6656:screens.c     **** #endif	
6657:screens.c     **** 
6658:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
6659:screens.c     **** 	{
6660:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
6661:screens.c     **** 
6662:screens.c     **** 		if( lkey == SW_OL ) // -
6663:screens.c     **** 		{
6664:screens.c     **** 			switch( selection )
6665:screens.c     **** 			{
6666:screens.c     **** 			case 0:
6667:screens.c     **** 				pFac.pf.GW302_KnifePressure -= PF_GW302_KnifePressure[PF_STEP];
6668:screens.c     **** 				if( pFac.pf.GW302_KnifePressure < PF_GW302_KnifePressure[PF_MIN] )
6669:screens.c     **** 					pFac.pf.GW302_KnifePressure = PF_GW302_KnifePressure[PF_MIN]; // Limiting to minimum value
6670:screens.c     **** 				break;
6671:screens.c     **** 
6672:screens.c     **** 			case 1:
6673:screens.c     **** 				pFac.pf.GW302_KnifePresWarn -= PF_GW302_KnifePresWarn[PF_STEP];
6674:screens.c     **** 				if( pFac.pf.GW302_KnifePresWarn < PF_GW302_KnifePresWarn[PF_MIN] )
6675:screens.c     **** 					pFac.pf.GW302_KnifePresWarn = PF_GW302_KnifePresWarn[PF_MIN]; // Limiting to minimum value
6676:screens.c     **** 				break;
6677:screens.c     **** 
6678:screens.c     **** 			case 2:
6679:screens.c     **** 				pFac.pf.GW302_DiverterDelay -= PF_GW302_DiverterDelay[PF_STEP];
6680:screens.c     **** 				if( pFac.pf.GW302_DiverterDelay < PF_GW302_DiverterDelay[PF_MIN] )
6681:screens.c     **** 					pFac.pf.GW302_DiverterDelay = PF_GW302_DiverterDelay[PF_MIN]; // Limiting to minimum value
6682:screens.c     **** 				break;
6683:screens.c     **** 			}
6684:screens.c     **** 			SavecalDelayWithinMenus = 1;
6685:screens.c     **** 			valuechanged = 1;
6686:screens.c     **** 			update_values = 1;
6687:screens.c     **** 		}
6688:screens.c     **** 		else if( lkey == SW_IL ) // +
6689:screens.c     **** 		{
6690:screens.c     **** 			switch( selection )
6691:screens.c     **** 			{
6692:screens.c     **** 			case 0:
6693:screens.c     **** 				pFac.pf.GW302_KnifePressure += PF_GW302_KnifePressure[PF_STEP];
6694:screens.c     **** 				if( pFac.pf.GW302_KnifePressure > PF_GW302_KnifePressure[PF_MAX] )
6695:screens.c     **** 					pFac.pf.GW302_KnifePressure = PF_GW302_KnifePressure[PF_MAX]; // Limiting to maximum value
6696:screens.c     **** 				break;
6697:screens.c     **** 
6698:screens.c     **** 			case 1:
6699:screens.c     **** 				pFac.pf.GW302_KnifePresWarn += PF_GW302_KnifePresWarn[PF_STEP];
6700:screens.c     **** 				if( pFac.pf.GW302_KnifePresWarn > PF_GW302_KnifePresWarn[PF_MAX] )
6701:screens.c     **** 					pFac.pf.GW302_KnifePresWarn = PF_GW302_KnifePresWarn[PF_MAX]; // Limiting to maximum value
6702:screens.c     **** 				break;
6703:screens.c     **** 
6704:screens.c     **** 			case 2:
6705:screens.c     **** 				pFac.pf.GW302_DiverterDelay += PF_GW302_DiverterDelay[PF_STEP];
6706:screens.c     **** 				if( pFac.pf.GW302_DiverterDelay > PF_GW302_DiverterDelay[PF_MAX] )
6707:screens.c     **** 					pFac.pf.GW302_DiverterDelay = PF_GW302_DiverterDelay[PF_MAX]; // Limiting to maximum value
6708:screens.c     **** 				break;
6709:screens.c     **** 			}
6710:screens.c     **** 			SavecalDelayWithinMenus = 1;
6711:screens.c     **** 			valuechanged = 1;
6712:screens.c     **** 			update_values = 1;
6713:screens.c     **** 		}
6714:screens.c     **** 		else if( lkey == SW_CU ) // ^
6715:screens.c     **** 		{
6716:screens.c     **** 			if( selection )
6717:screens.c     **** 			{
6718:screens.c     **** 				selection--;
6719:screens.c     **** 				update_selection = 1;
6720:screens.c     **** 			}
6721:screens.c     **** 		}
6722:screens.c     **** 		else if( lkey == SW_CD ) // V
6723:screens.c     **** 		{
6724:screens.c     **** 			if( selection < 2 )
6725:screens.c     **** 			{
6726:screens.c     **** 				selection++;
6727:screens.c     **** 				update_selection = 1;
6728:screens.c     **** 			}
6729:screens.c     **** 		}
6730:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
6731:screens.c     **** 		{
6732:screens.c     **** 			escape = 1;
6733:screens.c     **** 		}
6734:screens.c     **** 		else if( lkey == SW_IR ) // BLANK
6735:screens.c     **** 		{
6736:screens.c     **** 			// nothing
6737:screens.c     **** 		}
6738:screens.c     **** 	}
6739:screens.c     **** 	else if( !editing ) // Not editing and no keys being pressed
6740:screens.c     **** 	{
6741:screens.c     **** 		// Saving Programmable Factors on releasing the keys for greater than 300 ms
6742:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
6743:screens.c     **** 		{
6744:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
6745:screens.c     **** 			{
6746:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
6747:screens.c     **** 				SavecalDelayWithinMenus = 0;
6748:screens.c     **** 				savecal = 1;
6749:screens.c     **** 			}
6750:screens.c     **** 		}
6751:screens.c     **** 	}
6752:screens.c     **** 
6753:screens.c     **** 
6754:screens.c     **** 	if( update_disp )
6755:screens.c     **** 	{
6756:screens.c     **** 		// Clear display area covering factor names, values & units
6757:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
6758:screens.c     **** 
6759:screens.c     **** 		// Factor names & units	
6760:screens.c     **** 		display_f1_text( "Knife Pressure",       TSMAX, 24, 21, FIXED );
6761:screens.c     **** 		display_f1_text( "V", TSMAX, 146, 21, FIXED );
6762:screens.c     **** 
6763:screens.c     **** 		display_f1_text( "Knife Pres. Warn",   TSMAX, 24, 31, FIXED );
6764:screens.c     **** 		display_f1_text( "V", TSMAX, 146, 31, FIXED );
6765:screens.c     **** 
6766:screens.c     **** 		display_f1_text( "Diverter Delay",   TSMAX, 24, 41, FIXED );
6767:screens.c     **** 		display_f1_text( "s", TSMAX, 146, 41, FIXED );
6768:screens.c     **** 
6769:screens.c     **** 		update_disp = 0;
6770:screens.c     **** 
6771:screens.c     **** 		update_values = 1;    // Display factor values   
6772:screens.c     **** 		update_selection = 1; // Display tabs & selection pointer
6773:screens.c     **** 
6774:screens.c     **** 	} // End of update_disp
6775:screens.c     **** 
6776:screens.c     **** 	if( update_values )
6777:screens.c     **** 	{
6778:screens.c     **** 		// Factor values
6779:screens.c     **** 		display_number( (float)pFac.pf.GW302_KnifePressure,
6780:screens.c     **** 				(float)PF_GW302_KnifePressure[PF_MIN], (float)PF_GW302_KnifePressure[PF_MAX],
6781:screens.c     **** 				1.0, DP2, 143, 21, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
6782:screens.c     **** 		display_number( (float)pFac.pf.GW302_KnifePresWarn,
6783:screens.c     **** 				(float)PF_GW302_KnifePresWarn[PF_MIN], (float)PF_GW302_KnifePresWarn[PF_MAX],
6784:screens.c     **** 				1.0, DP2, 143, 31, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
6785:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiverterDelay,
6786:screens.c     **** 				(float)PF_GW302_DiverterDelay[PF_MIN], (float)PF_GW302_DiverterDelay[PF_MAX],
6787:screens.c     **** 				1.0, DP1, 143, 41, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
6788:screens.c     **** 
6789:screens.c     **** 		update_values = 0;
6790:screens.c     **** 
6791:screens.c     **** 	} // End of update_values
6792:screens.c     **** 
6793:screens.c     **** 	if( update_selection )
6794:screens.c     **** 	{
6795:screens.c     **** 		// Tabs 
6796:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs    
6797:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
6798:screens.c     **** 		{	    
6799:screens.c     **** 		case 0:
6800:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6801:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6802:screens.c     **** 			write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
6803:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6804:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6805:screens.c     **** 			break;
6806:screens.c     **** 
6807:screens.c     **** 		case 1:
6808:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6809:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6810:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
6811:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6812:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6813:screens.c     **** 			break;
6814:screens.c     **** 
6815:screens.c     **** 		case 2:
6816:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
6817:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
6818:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
6819:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
6820:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
6821:screens.c     **** 			break;
6822:screens.c     **** 		}
6823:screens.c     **** 
6824:screens.c     **** 		// Selection pointer
6825:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
6826:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
6827:screens.c     **** 
6828:screens.c     **** 		update_selection = 0;
6829:screens.c     **** 
6830:screens.c     **** 	} // End of update_selection
6831:screens.c     **** 
6832:screens.c     **** }
6833:screens.c     **** // -----------------------------------------------------------
6834:screens.c     **** 
6835:screens.c     **** 
6836:screens.c     **** // -----------------------------------------------------------
6837:screens.c     **** // Function Name       : screen147
6838:screens.c     **** // Description         : Technician Menu - Reset Defaults
6839:screens.c     **** // -----------------------------------------------------------
6840:screens.c     **** void screen147( unsigned int lkey )
6841:screens.c     **** {
6842:screens.c     **** 	static unsigned char ResetFactors; 
6843:screens.c     **** 
6844:screens.c     **** 	if( !startup )
6845:screens.c     **** 	{
6846:screens.c     **** 		startup = 1;
6847:screens.c     **** 
6848:screens.c     **** 		draw_frame( adm );
6849:screens.c     **** 
6850:screens.c     **** 		display_f1_text( ptText[37], TSMAX, 80, 8, FIXED | CENTER | UNDERLINED ); // "Reset Defaults"
6851:screens.c     **** 
6852:screens.c     **** 		display_f1_text( ptText[38], TSMAX, 32, 37, FIXED ); // "Press \001 to Reset"
6853:screens.c     **** 
6854:screens.c     **** 		write_bitmap( adm, TAB,      0, 107, OR );
6855:screens.c     **** 		write_bitmap( adm, TAB,     31, 107, OR );
6856:screens.c     **** 		write_bitmap( adm, TABNAV_, 62, 102, OR ); // NAVIGATION: blank
6857:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
6858:screens.c     **** 
6859:screens.c     **** 		leaf = 1;
6860:screens.c     **** 	}
6861:screens.c     **** 
6862:screens.c     **** #ifdef SHOW_TIME
6863:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
6864:screens.c     **** #endif
6865:screens.c     **** 
6866:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
6867:screens.c     **** 	{
6868:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
6869:screens.c     **** 		if( lkey == SW_OR )
6870:screens.c     **** 		{
6871:screens.c     **** 			escape = 1;
6872:screens.c     **** 			ResetFactors = 0;
6873:screens.c     **** 		}
6874:screens.c     **** 		else if( lkey == SW_IR ) // if enter key is pressed
6875:screens.c     **** 		{
6876:screens.c     **** 			if( !ResetFactors )
6877:screens.c     **** 			{
6878:screens.c     **** 				SetDefaultFactors();
6879:screens.c     **** 				SetDefaultTotals();
6880:screens.c     **** 				ResetFactors = 1;
6881:screens.c     **** 
6882:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
6883:screens.c     **** 				SavecalDelayWithinMenus = 0;
6884:screens.c     **** 			}
6885:screens.c     **** 		}
6886:screens.c     **** 	}
6887:screens.c     **** 
6888:screens.c     **** 	if( ResetFactors )
6889:screens.c     **** 	{
6890:screens.c     **** 		draw_box( adm, 24, 37, 150, 47, CLEAR );
6891:screens.c     **** 		// ptText[39] "Factors Reset to Defaults" replaced by 2 strings
6892:screens.c     **** 		display_f1_text( "Factors Reset", TSMAX, 44, 37, FIXED );
6893:screens.c     **** 		display_f1_text( "to Defaults",   TSMAX, 44, 47, FIXED );
6894:screens.c     **** 	}
6895:screens.c     **** 
6896:screens.c     **** 	draw_box( adm, 99, 107, 128, 126, CLEAR );
6897:screens.c     **** 	write_bitmap( adm, ResetFactors? TAB:TABENT, 99, 107, OR );
6898:screens.c     **** }
6899:screens.c     **** // -----------------------------------------------------------
6900:screens.c     **** 
6901:screens.c     **** 
6902:screens.c     **** // -----------------------------------------------------------
6903:screens.c     **** // Function Name       : screen148
6904:screens.c     **** // Description         : Technician Menu - Formation 2
6905:screens.c     **** // -----------------------------------------------------------
6906:screens.c     **** void screen148( unsigned int lkey )
6907:screens.c     **** {
6908:screens.c     **** 	char update_disp;
6909:screens.c     **** 	char update_selection;
6910:screens.c     **** 	char update_values;
6911:screens.c     **** 
6912:screens.c     **** 	if( !startup )
6913:screens.c     **** 	{
6914:screens.c     **** 		startup = 1;
6915:screens.c     **** 
6916:screens.c     **** 		draw_frame( adm );
6917:screens.c     **** 
6918:screens.c     **** 		display_f1_text( "Formation 2", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
6919:screens.c     **** 
6920:screens.c     **** 		selection = 0;
6921:screens.c     **** 		update_disp = 1;
6922:screens.c     **** 	}
6923:screens.c     **** 
6924:screens.c     **** #ifdef SHOW_TIME
6925:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
6926:screens.c     **** #endif
6927:screens.c     **** 
6928:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
6929:screens.c     **** 	{
6930:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
6931:screens.c     **** 
6932:screens.c     **** 		if( lkey == SW_OL ) // -
6933:screens.c     **** 		{
6934:screens.c     **** 			switch( selection )
6935:screens.c     **** 			{
6936:screens.c     **** 			case 0:
6937:screens.c     **** 				pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] -= PF_GW302_FormationDensity[PF_STEP]
6938:screens.c     **** 				if( pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] < PF_GW302_FormationDensity[PF_MI
6939:screens.c     **** 					pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_FormationDensity[PF_MIN];
6940:screens.c     **** 				break;
6941:screens.c     **** 
6942:screens.c     **** 			case 1:
6943:screens.c     **** 				if( pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_FormationDiameter[PF_
6944:screens.c     **** 					pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_FormationDiameter[PF_ST
6945:screens.c     **** 				break;
6946:screens.c     **** 
6947:screens.c     **** 			case 2:
6948:screens.c     **** 				pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] -= PF_GW302_Formation2Density[PF_STE
6949:screens.c     **** 				if( pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] < PF_GW302_Formation2Density[PF_
6950:screens.c     **** 					pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] = PF_GW302_Formation2Density[PF_MIN
6951:screens.c     **** 				break;
6952:screens.c     **** 
6953:screens.c     **** 			case 3:
6954:screens.c     **** 				if( pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] > PF_GW302_Formation2Diameter[P
6955:screens.c     **** 					pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_Formation2Diameter[PF_
6956:screens.c     **** 				break;
6957:screens.c     **** 			}
6958:screens.c     **** 			SavecalDelayWithinMenus = 1;
6959:screens.c     **** 			valuechanged = 1;
6960:screens.c     **** 			update_values = 1;
6961:screens.c     **** 		}
6962:screens.c     **** 		else if( lkey == SW_IL ) // +
6963:screens.c     **** 		{
6964:screens.c     **** 			switch( selection )
6965:screens.c     **** 			{
6966:screens.c     **** 			case 0:
6967:screens.c     **** 				pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] += PF_GW302_FormationDensity[PF_STEP]
6968:screens.c     **** 				if( pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] > PF_GW302_FormationDensity[PF_MA
6969:screens.c     **** 					pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_FormationDensity[PF_MAX];
6970:screens.c     **** 				break;
6971:screens.c     **** 
6972:screens.c     **** 			case 1:
6973:screens.c     **** 				pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] += PF_GW302_FormationDiameter[PF_STE
6974:screens.c     **** 				if( pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_FormationDiameter[PF_
6975:screens.c     **** 					pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_FormationDiameter[PF_MAX
6976:screens.c     **** 				break;
6977:screens.c     **** 
6978:screens.c     **** 			case 2:
6979:screens.c     **** 				pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] += PF_GW302_Formation2Density[PF_STE
6980:screens.c     **** 				if( pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] > PF_GW302_Formation2Density[PF_
6981:screens.c     **** 					pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] = PF_GW302_Formation2Density[PF_MAX
6982:screens.c     **** 				break;
6983:screens.c     **** 
6984:screens.c     **** 			case 3:
6985:screens.c     **** 				pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] += PF_GW302_Formation2Diameter[PF_S
6986:screens.c     **** 				if( pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] > PF_GW302_Formation2Diameter[P
6987:screens.c     **** 					pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] = PF_GW302_Formation2Diameter[PF_M
6988:screens.c     **** 				break;
6989:screens.c     **** 			}
6990:screens.c     **** 			SavecalDelayWithinMenus = 1;
6991:screens.c     **** 			valuechanged = 1;
6992:screens.c     **** 			update_values = 1;
6993:screens.c     **** 		}
6994:screens.c     **** 		else if( lkey == SW_CU ) // ^
6995:screens.c     **** 		{
6996:screens.c     **** 			if( selection )
6997:screens.c     **** 			{
6998:screens.c     **** 				selection--;
6999:screens.c     **** 				update_selection = 1;
7000:screens.c     **** 			}
7001:screens.c     **** 		}
7002:screens.c     **** 		else if( lkey == SW_CD ) // V
7003:screens.c     **** 		{
7004:screens.c     **** 			if( selection < 3 )
7005:screens.c     **** 			{
7006:screens.c     **** 				selection++;
7007:screens.c     **** 				update_selection = 1;
7008:screens.c     **** 			}
7009:screens.c     **** 		}
7010:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
7011:screens.c     **** 		{
7012:screens.c     **** 			escape = 1;
7013:screens.c     **** 		}
7014:screens.c     **** 		else if( lkey == SW_IR ) // BLANK
7015:screens.c     **** 		{
7016:screens.c     **** 			// nothing
7017:screens.c     **** 		}
7018:screens.c     **** 	}
7019:screens.c     **** 	else if( !editing ) // Not editing and no keys being pressed
7020:screens.c     **** 	{
7021:screens.c     **** 		// Saving Programmable Factors on releasing the keys for greater than 300 ms
7022:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
7023:screens.c     **** 		{
7024:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
7025:screens.c     **** 			{
7026:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
7027:screens.c     **** 				SavecalDelayWithinMenus = 0;
7028:screens.c     **** 				savecal = 1;
7029:screens.c     **** 			}
7030:screens.c     **** 		}
7031:screens.c     **** 	}
7032:screens.c     **** 
7033:screens.c     **** 
7034:screens.c     **** 	if( update_disp )
7035:screens.c     **** 	{		
7036:screens.c     **** 		// Clear display area covering factor names, values & units
7037:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
7038:screens.c     **** 
7039:screens.c     **** 		// Factor names & units	
7040:screens.c     **** 		display_f1_text( "Formation Density", TSMAX, 24, 21, FIXED );
7041:screens.c     **** 
7042:screens.c     **** 		display_f1_text( "Formation Dia.", TSMAX, 24, 31, FIXED );
7043:screens.c     **** 		display_f1_text( "%", TSMAX, 149, 31, FIXED );
7044:screens.c     **** 
7045:screens.c     **** 		display_f1_text( "Formation2 Density", TSMAX, 24, 41, FIXED );
7046:screens.c     **** 
7047:screens.c     **** 		display_f1_text( "Formation2 Dia.", TSMAX, 24, 51, FIXED );
7048:screens.c     **** 		display_f1_text( "%", TSMAX, 149, 51, FIXED );
7049:screens.c     **** 
7050:screens.c     **** 		update_disp = 0;
7051:screens.c     **** 
7052:screens.c     **** 		update_values = 1;    // Display factor values   
7053:screens.c     **** 		update_selection = 1; // Display tabs & selection pointer
7054:screens.c     **** 
7055:screens.c     **** 	} // End of update_disp
7056:screens.c     **** 
7057:screens.c     **** 	if( update_values )
7058:screens.c     **** 	{
7059:screens.c     **** 		// Factor values
7060:screens.c     **** 		display_number( (float)pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile],
7061:screens.c     **** 				(float)PF_GW302_FormationDensity[PF_MIN], (float)PF_GW302_FormationDensity[PF_MAX],
7062:screens.c     **** 				1.0, DP0, 146, 21, DW2, RIGHT, &RDSfnt1, NULL, PNULL );
7063:screens.c     **** 		display_number( (float)pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile],
7064:screens.c     **** 				(float)PF_GW302_FormationDiameter[PF_MIN], (float)PF_GW302_FormationDiameter[PF_MAX],
7065:screens.c     **** 				1.0, DP0, 146, 31, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
7066:screens.c     **** 		display_number( (float)pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile],
7067:screens.c     **** 				(float)PF_GW302_Formation2Density[PF_MIN], (float)PF_GW302_Formation2Density[PF_MAX],
7068:screens.c     **** 				1.0, DP0, 146, 41, DW2, RIGHT, &RDSfnt1, NULL, PNULL );
7069:screens.c     **** 		display_number( (float)pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile],
7070:screens.c     **** 				(float)PF_GW302_Formation2Diameter[PF_MIN], (float)PF_GW302_Formation2Diameter[PF_MAX],
7071:screens.c     **** 				1.0, DP0, 146, 51, DW3, RIGHT, &RDSfnt1, NULL, PNULL );
7072:screens.c     **** 
7073:screens.c     **** 		update_values = 0;
7074:screens.c     **** 
7075:screens.c     **** 	} // End of update_values
7076:screens.c     **** 
7077:screens.c     **** 	if( update_selection )
7078:screens.c     **** 	{
7079:screens.c     **** 		// Tabs 
7080:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs    
7081:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
7082:screens.c     **** 		{
7083:screens.c     **** 		case 0:
7084:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
7085:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
7086:screens.c     **** 			write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
7087:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
7088:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
7089:screens.c     **** 			break;
7090:screens.c     **** 
7091:screens.c     **** 		case 1:
7092:screens.c     **** 		case 2:
7093:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
7094:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
7095:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
7096:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
7097:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
7098:screens.c     **** 			break;
7099:screens.c     **** 
7100:screens.c     **** 		case 3:
7101:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
7102:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
7103:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
7104:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
7105:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
7106:screens.c     **** 			break;
7107:screens.c     **** 		}
7108:screens.c     **** 
7109:screens.c     **** 		// Selection pointer
7110:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
7111:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
7112:screens.c     **** 
7113:screens.c     **** 		update_selection = 0;
7114:screens.c     **** 
7115:screens.c     **** 	} // End of update_selection
7116:screens.c     **** 
7117:screens.c     **** }
7118:screens.c     **** // -----------------------------------------------------------
7119:screens.c     **** 
7120:screens.c     **** 
7121:screens.c     **** // -----------------------------------------------------------
7122:screens.c     **** // Function Name       : screen150
7123:screens.c     **** // Description         : Diagnostics Digital Inputs
7124:screens.c     **** // -----------------------------------------------------------
7125:screens.c     **** void screen150 ( unsigned int lkey )
7126:screens.c     **** {
7127:screens.c     **** 	unsigned char c;
7128:screens.c     **** 
7129:screens.c     **** 	if( !startup )
7130:screens.c     **** 	{
7131:screens.c     **** 		startup = 1;
7132:screens.c     **** 
7133:screens.c     **** 		draw_frame( adm );
7134:screens.c     **** 
7135:screens.c     **** 		display_f1_text( ptText[30], TSMAX, 80, 12,  FIXED | CENTER | UNDERLINED  ); // "Digital Inputs"
7136:screens.c     **** 
7137:screens.c     **** 		// Tabs
7138:screens.c     **** 		write_bitmap( adm, TAB,        0, 107, OR );
7139:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
7140:screens.c     **** 		write_bitmap( adm, TABNAV_LR, 62, 102, OR ); // NAVIGATION: left right
7141:screens.c     **** #if 0 // 3rd tab drawn according to status of 'Chopping Knives Fitted' setting 
7142:screens.c     **** 		write_bitmap( adm, TAB,       99, 107, OR );
7143:screens.c     **** #endif
7144:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
7145:screens.c     **** 
7146:screens.c     **** 		ResetSequenceFactors(SEQ_ALL);
7147:screens.c     **** 		leaf = 1;
7148:screens.c     **** 	}
7149:screens.c     **** 
7150:screens.c     **** #ifdef SHOW_TIME
7151:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
7152:screens.c     **** #endif
7153:screens.c     **** 	if( lkey & (SW_NEW | SW_REP) )
7154:screens.c     **** 	{
7155:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
7156:screens.c     **** 		if( lkey == SW_CR )
7157:screens.c     **** 		{
7158:screens.c     **** 			window = screen152; // Ananlog inputs
7159:screens.c     **** 		}
7160:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) )
7161:screens.c     **** 		{
7162:screens.c     **** 			SavecalDelayWithinMenus = 1;
7163:screens.c     **** 			escape = 1;
7164:screens.c     **** 		}
7165:screens.c     **** 		else if( lkey == SW_IR ) // Toggling 'Chopping Knives Fitted' setting between enabled & disabled
7166:screens.c     **** 		{
7167:screens.c     **** 			if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED )
7168:screens.c     **** 			{
7169:screens.c     **** 				pFac.pf.GW302_ChoppingKnivesFitted = CKF_DISABLED;
7170:screens.c     **** 			}
7171:screens.c     **** 			else // if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_DISABLED ) 
7172:screens.c     **** 			{
7173:screens.c     **** 				pFac.pf.GW302_ChoppingKnivesFitted = CKF_ENABLED;
7174:screens.c     **** 			}
7175:screens.c     **** 		}
7176:screens.c     **** 	}
7177:screens.c     **** 
7178:screens.c     **** 
7179:screens.c     **** 	// 3rd tab drawn according to status of 'Chopping Knives Fitted' setting
7180:screens.c     **** 	draw_box( adm, 99, 107, 128, 126, CLEAR ); // Clear 3rd tab area
7181:screens.c     **** 	if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED )
7182:screens.c     **** 	{
7183:screens.c     **** 		write_bitmap( adm, TABKNFON, 99, 107, OR );
7184:screens.c     **** 	}
7185:screens.c     **** 	else // if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_DISABLED ) 
7186:screens.c     **** 	{
7187:screens.c     **** 		write_bitmap( adm, TABKNFOFF, 99, 107, OR );
7188:screens.c     **** 	}
7189:screens.c     **** 
7190:screens.c     **** 
7191:screens.c     **** 	draw_box( adm, 22, 36, 138, 70, CLEAR );
7192:screens.c     **** 	draw_box( adm, 18, 78, 137, 100, CLEAR );
7193:screens.c     **** 
7194:screens.c     **** 	display_f1_text( "1      2      3", TSMAX,  22, 38, FIXED );
7195:screens.c     **** 	display_f1_text( "4      5      6", TSMAX,  22, 60, FIXED );
7196:screens.c     **** 
7197:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP07) ? 1 : 0;
7198:screens.c     **** 	write_bitmap( adm, ip_status[c], 31, 36, OR );
7199:screens.c     **** 
7200:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP08) ? 1 : 0;
7201:screens.c     **** 	write_bitmap( adm, ip_status[c], 75, 36, OR );
7202:screens.c     **** 
7203:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP09) ? 1 : 0;
7204:screens.c     **** 	write_bitmap( adm, ip_status[c], 117, 36, OR );
7205:screens.c     **** 
7206:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP10) ? 1 : 0;
7207:screens.c     **** 	write_bitmap( adm, ip_status[c], 31, 58, OR );
7208:screens.c     **** 
7209:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP11) ? 1 : 0;
7210:screens.c     **** 	write_bitmap( adm, ip_status[c], 75, 58, OR );
7211:screens.c     **** 
7212:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP12) ? 1 : 0;
7213:screens.c     **** 	write_bitmap( adm, ip_status[c], 117, 58, OR );
7214:screens.c     **** 
7215:screens.c     **** }
7216:screens.c     **** // -----------------------------------------------------------
7217:screens.c     **** 
7218:screens.c     **** 
7219:screens.c     **** // -----------------------------------------------------------
7220:screens.c     **** // Function Name       : screen152
7221:screens.c     **** // Description         : Diagnostics Analogue Inputs
7222:screens.c     **** // -----------------------------------------------------------
7223:screens.c     **** void screen152 ( unsigned int lkey )
7224:screens.c     **** {
7225:screens.c     **** 	unsigned char tstring[32];
7226:screens.c     **** 
7227:screens.c     **** 	static unsigned char c;
7228:screens.c     **** 
7229:screens.c     **** 	if( !startup )
7230:screens.c     **** 	{
7231:screens.c     **** 		startup = 1;
7232:screens.c     **** 		draw_frame( adm );
7233:screens.c     **** 		display_f1_text( ptText[31], TSMAX, 80, 12,  FIXED | CENTER | UNDERLINED  ); // "Analogue Inputs"
7234:screens.c     **** 
7235:screens.c     **** 		write_bitmap( adm, TAB,        0, 107, OR );
7236:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
7237:screens.c     **** 		write_bitmap( adm, TABNAV_LR, 62, 102, OR ); // NAVIGATION: left right
7238:screens.c     **** 		write_bitmap( adm, TAB,       99, 107, OR );
7239:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
7240:screens.c     **** 
7241:screens.c     **** 		// set as voltage inputs
7242:screens.c     **** 		AT91C_BASE_PIOB->PIO_SODR = IE_IP01 | IE_IP02 | IE_IP03 | IE_IP04;
7243:screens.c     **** 		leaf = 1;
7244:screens.c     **** 	}
7245:screens.c     **** 
7246:screens.c     **** #ifdef SHOW_TIME
7247:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
7248:screens.c     **** #endif	
7249:screens.c     **** 	if( lkey & (SW_NEW | SW_REP) )
7250:screens.c     **** 	{
7251:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
7252:screens.c     **** 		if( lkey == SW_CL )
7253:screens.c     **** 		{
7254:screens.c     **** 			window = screen150;
7255:screens.c     **** 		}
7256:screens.c     **** 		else if( lkey == SW_CR )
7257:screens.c     **** 		{
7258:screens.c     **** 			window = screen151; /* Outputs */
7259:screens.c     **** 		}
7260:screens.c     **** 		else if( lkey == SW_OR )
7261:screens.c     **** 		{
7262:screens.c     **** 			escape = 1;
7263:screens.c     **** 		}
7264:screens.c     **** 	}
7265:screens.c     **** 
7266:screens.c     **** 	// Clear area above tabs
7267:screens.c     **** 	draw_box( adm, 1, 25, 158, 101, CLEAR );
7268:screens.c     **** 
7269:screens.c     **** 	// Analogue inputs
7270:screens.c     **** 	sprintf(tstring, ptText[32], 1);
7271:screens.c     **** 	display_f1_text( tstring, TSMAX, 16, 35,  FIXED  ); // AnIP%u
7272:screens.c     **** 
7273:screens.c     **** 	sprintf(tstring, ptText[32], 2);
7274:screens.c     **** 	display_f1_text( tstring, TSMAX, 90, 35,  FIXED  ); // AnIP%u
7275:screens.c     **** 
7276:screens.c     **** 	sprintf(tstring, ptText[32], 3);
7277:screens.c     **** 	display_f1_text( tstring, TSMAX, 16, 69,  FIXED  ); // AnIP%u
7278:screens.c     **** 
7279:screens.c     **** 	sprintf(tstring, ptText[32], 4);
7280:screens.c     **** 	display_f1_text( tstring, TSMAX, 90, 69,  FIXED  ); // AnIP%u
7281:screens.c     **** 
7282:screens.c     **** 	// AnIP1: Bale Diameter
7283:screens.c     **** 	sprintf( tstring, "%.2fV", BaleDiaVolts );
7284:screens.c     **** 	display_f1_text( tstring, TSMAX, 46, 47, FIXED );
7285:screens.c     **** 
7286:screens.c     **** 	if( BaleDiaVolts >= (POTDIV * 1.70) )
7287:screens.c     **** 	{
7288:screens.c     **** 		c = 0;
7289:screens.c     **** 	}
7290:screens.c     **** 	else if( BaleDiaVolts <= (POTDIV * 1.60) )
7291:screens.c     **** 	{
7292:screens.c     **** 		c = 1;
7293:screens.c     **** 	}
7294:screens.c     **** 	write_bitmap( adm, ip_status[c], 48+3, 33, OR );
7295:screens.c     **** 
7296:screens.c     **** 	// AnIP2: (Bale) Density Pressure
7297:screens.c     **** 	sprintf( tstring, "%.2fV", DensityPresVolts );
7298:screens.c     **** 	display_f1_text( tstring, TSMAX, 120, 47, FIXED );
7299:screens.c     **** 
7300:screens.c     **** 	if( DensityPresVolts >= (POTDIV * 1.70) )
7301:screens.c     **** 	{
7302:screens.c     **** 		c = 0;
7303:screens.c     **** 	}
7304:screens.c     **** 	else if( DensityPresVolts <= (POTDIV * 1.60) )
7305:screens.c     **** 	{
7306:screens.c     **** 		c = 1;
7307:screens.c     **** 	}
7308:screens.c     **** 	write_bitmap( adm, ip_status[c], 122+3, 33, OR );
7309:screens.c     **** 
7310:screens.c     **** 	// AnIP3: Bale Shape Indicator
7311:screens.c     **** 	sprintf( tstring, "%.2fV", BaleShapeVolts );
7312:screens.c     **** 	display_f1_text( tstring, TSMAX, 46, 81, FIXED );
7313:screens.c     **** 
7314:screens.c     **** 	if( BaleShapeVolts >= (POTDIV * 1.70) )
7315:screens.c     **** 	{
7316:screens.c     **** 		c = 0;
7317:screens.c     **** 	}
7318:screens.c     **** 	else if( BaleShapeVolts <= (POTDIV * 1.60) )
7319:screens.c     **** 	{
7320:screens.c     **** 		c = 1;
7321:screens.c     **** 	}
7322:screens.c     **** 	write_bitmap( adm, ip_status[c], 48+3, 67, OR );
7323:screens.c     **** 
7324:screens.c     **** 	// AnIP4: Knife Pressure
7325:screens.c     **** 	sprintf( tstring, "%.2fV", KnifePresVolts );
7326:screens.c     **** 	display_f1_text( tstring, TSMAX, 120, 81, FIXED );
7327:screens.c     **** 
7328:screens.c     **** 	if( KnifePresVolts >= (POTDIV * 1.70) )
7329:screens.c     **** 	{
7330:screens.c     **** 		c = 0;
7331:screens.c     **** 	}
7332:screens.c     **** 	else if( KnifePresVolts <= (POTDIV * 1.60) )
7333:screens.c     **** 	{
7334:screens.c     **** 		c = 1;
7335:screens.c     **** 	}
7336:screens.c     **** 	write_bitmap( adm, ip_status[c], 122+3, 67, OR );
7337:screens.c     **** }
7338:screens.c     **** // -----------------------------------------------------------
7339:screens.c     **** 
7340:screens.c     **** 
7341:screens.c     **** // -----------------------------------------------------------
7342:screens.c     **** // Function Name       : screen151
7343:screens.c     **** // Description         : Diagnostics Outputs
7344:screens.c     **** // -----------------------------------------------------------
7345:screens.c     **** void screen151 ( unsigned int lkey )
7346:screens.c     **** {
 1198              		.loc 1 7346 0
 1199              		.cfi_startproc
 1200              	.LVL74:
 1201 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1202              	.LCFI6:
 1203              		.cfi_def_cfa_offset 20
 1204              		.cfi_offset 4, -20
 1205              		.cfi_offset 5, -16
 1206              		.cfi_offset 6, -12
 1207              		.cfi_offset 7, -8
 1208              		.cfi_offset 14, -4
 1209 0002 89B0     		sub	sp, sp, #36
 1210              	.LCFI7:
 1211              		.cfi_def_cfa_offset 56
 1212 0004 041C     		mov	r4, r0
7347:screens.c     **** 	unsigned char c;
7348:screens.c     **** 	float tempf;
7349:screens.c     **** 
7350:screens.c     **** 	static unsigned char swtim;
7351:screens.c     **** 
7352:screens.c     **** 	if( !startup )
 1213              		.loc 1 7352 0
 1214 0006 D64B     		ldr	r3, .L122+16
 1215 0008 1B78     		ldrb	r3, [r3]
 1216 000a 002B     		cmp	r3, #0
 1217 000c 46D1     		bne	.L81
7353:screens.c     **** 	{
7354:screens.c     **** 		startup = 1;
 1218              		.loc 1 7354 0
 1219 000e 0127     		mov	r7, #1
 1220 0010 D34B     		ldr	r3, .L122+16
 1221 0012 1F70     		strb	r7, [r3]
7355:screens.c     **** 
7356:screens.c     **** 		draw_frame( adm );
 1222              		.loc 1 7356 0
 1223 0014 D34D     		ldr	r5, .L122+20
 1224 0016 281C     		mov	r0, r5
 1225              	.LVL75:
 1226 0018 FFF7FEFF 		bl	draw_frame
 1227              	.LVL76:
7357:screens.c     **** 
7358:screens.c     **** 		display_f1_text( ptText[33], TSMAX, 80, 12,  FIXED | CENTER | UNDERLINED  ); // "Outputs"
 1228              		.loc 1 7358 0
 1229 001c D24B     		ldr	r3, .L122+24
 1230 001e 1A68     		ldr	r2, [r3]
 1231 0020 8423     		mov	r3, #132
 1232 0022 D058     		ldr	r0, [r2, r3]
 1233 0024 0A23     		mov	r3, #10
 1234 0026 0093     		str	r3, [sp]
 1235 0028 1A21     		mov	r1, #26
 1236 002a 5022     		mov	r2, #80
 1237 002c 0C23     		mov	r3, #12
 1238 002e FFF7FEFF 		bl	display_f1_text
 1239              	.LVL77:
7359:screens.c     **** 		display_f1_text( "V", TSMAX, 149, 4,  FIXED );
 1240              		.loc 1 7359 0
 1241 0032 0023     		mov	r3, #0
 1242 0034 0093     		str	r3, [sp]
 1243 0036 CD48     		ldr	r0, .L122+28
 1244 0038 1A21     		mov	r1, #26
 1245 003a 9522     		mov	r2, #149
 1246 003c 0423     		mov	r3, #4
 1247 003e FFF7FEFF 		bl	display_f1_text
 1248              	.LVL78:
7360:screens.c     **** 		write_bitmap( adm, BATTSLIM, 108, 3, OR );
 1249              		.loc 1 7360 0
 1250 0042 0226     		mov	r6, #2
 1251 0044 0096     		str	r6, [sp]
 1252 0046 281C     		mov	r0, r5
 1253 0048 C949     		ldr	r1, .L122+32
 1254 004a 6C22     		mov	r2, #108
 1255 004c 0323     		mov	r3, #3
 1256 004e FFF7FEFF 		bl	write_bitmap
 1257              	.LVL79:
7361:screens.c     **** 
7362:screens.c     **** 		write_bitmap( adm, TABLEFT,    0, 107, OR ); // <
 1258              		.loc 1 7362 0
 1259 0052 0096     		str	r6, [sp]
 1260 0054 281C     		mov	r0, r5
 1261 0056 C749     		ldr	r1, .L122+36
 1262 0058 0022     		mov	r2, #0
 1263 005a 6B23     		mov	r3, #107
 1264 005c FFF7FEFF 		bl	write_bitmap
 1265              	.LVL80:
7363:screens.c     **** 		write_bitmap( adm, TABRIGHT,  31, 107, OR ); // >
 1266              		.loc 1 7363 0
 1267 0060 0096     		str	r6, [sp]
 1268 0062 281C     		mov	r0, r5
 1269 0064 C449     		ldr	r1, .L122+40
 1270 0066 1F22     		mov	r2, #31
 1271 0068 6B23     		mov	r3, #107
 1272 006a FFF7FEFF 		bl	write_bitmap
 1273              	.LVL81:
7364:screens.c     **** 		write_bitmap( adm, TABNAV_L,  62, 102, OR ); // NAVIGATION: left only
 1274              		.loc 1 7364 0
 1275 006e 0096     		str	r6, [sp]
 1276 0070 281C     		mov	r0, r5
 1277 0072 C249     		ldr	r1, .L122+44
 1278 0074 3E22     		mov	r2, #62
 1279 0076 6623     		mov	r3, #102
 1280 0078 FFF7FEFF 		bl	write_bitmap
 1281              	.LVL82:
7365:screens.c     **** 		write_bitmap( adm, TAB,       99, 107, OR );
 1282              		.loc 1 7365 0
 1283 007c 0096     		str	r6, [sp]
 1284 007e 281C     		mov	r0, r5
 1285 0080 BF49     		ldr	r1, .L122+48
 1286 0082 6322     		mov	r2, #99
 1287 0084 6B23     		mov	r3, #107
 1288 0086 FFF7FEFF 		bl	write_bitmap
 1289              	.LVL83:
7366:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
 1290              		.loc 1 7366 0
 1291 008a 0096     		str	r6, [sp]
 1292 008c 281C     		mov	r0, r5
 1293 008e BD49     		ldr	r1, .L122+52
 1294 0090 8222     		mov	r2, #130
 1295 0092 6B23     		mov	r3, #107
 1296 0094 FFF7FEFF 		bl	write_bitmap
 1297              	.LVL84:
7367:screens.c     **** 
7368:screens.c     **** 		leaf = 1;
 1298              		.loc 1 7368 0
 1299 0098 BB4B     		ldr	r3, .L122+56
 1300 009a 1F70     		strb	r7, [r3]
 1301              	.L81:
7369:screens.c     **** 	}
7370:screens.c     **** 
7371:screens.c     **** #ifdef SHOW_TIME
7372:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 1302              		.loc 1 7372 0
 1303 009c 0020     		mov	r0, #0
 1304 009e FFF7FEFF 		bl	ClockDisplay
 1305              	.LVL85:
7373:screens.c     **** #endif
7374:screens.c     **** 
7375:screens.c     **** #ifndef WINDOWS	  
7376:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT1;// clear all outputs
 1306              		.loc 1 7376 0
 1307 00a2 BA4B     		ldr	r3, .L122+60
 1308 00a4 8022     		mov	r2, #128
 1309 00a6 5203     		lsl	r2, r2, #13
 1310 00a8 1A63     		str	r2, [r3, #48]
7377:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT2;
 1311              		.loc 1 7377 0
 1312 00aa 8022     		mov	r2, #128
 1313 00ac 9203     		lsl	r2, r2, #14
 1314 00ae 1A63     		str	r2, [r3, #48]
7378:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT3;
 1315              		.loc 1 7378 0
 1316 00b0 8022     		mov	r2, #128
 1317 00b2 D203     		lsl	r2, r2, #15
 1318 00b4 1A63     		str	r2, [r3, #48]
7379:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT4;
 1319              		.loc 1 7379 0
 1320 00b6 8022     		mov	r2, #128
 1321 00b8 1204     		lsl	r2, r2, #16
 1322 00ba 1A63     		str	r2, [r3, #48]
7380:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT5;
 1323              		.loc 1 7380 0
 1324 00bc 8022     		mov	r2, #128
 1325 00be 5204     		lsl	r2, r2, #17
 1326 00c0 1A63     		str	r2, [r3, #48]
7381:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT6;
 1327              		.loc 1 7381 0
 1328 00c2 8022     		mov	r2, #128
 1329 00c4 9204     		lsl	r2, r2, #18
 1330 00c6 1A63     		str	r2, [r3, #48]
7382:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT7;
 1331              		.loc 1 7382 0
 1332 00c8 8022     		mov	r2, #128
 1333 00ca 9201     		lsl	r2, r2, #6
 1334 00cc 1A63     		str	r2, [r3, #48]
7383:screens.c     **** 	AT91C_BASE_PIOA->PIO_SODR = OUT8;
 1335              		.loc 1 7383 0
 1336 00ce 8022     		mov	r2, #128
 1337 00d0 1202     		lsl	r2, r2, #8
 1338 00d2 1A63     		str	r2, [r3, #48]
7384:screens.c     **** #else
7385:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT1;
7386:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT2;
7387:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT3;
7388:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT4;
7389:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT5;
7390:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT6;
7391:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT7;
7392:screens.c     **** 	AT91C_BASE_PIOA->PIO_ODSR &= ~OUT8;
7393:screens.c     **** #endif
7394:screens.c     **** 
7395:screens.c     **** 	if( (key & SW_IL) || (key & SW_OL) )
 1339              		.loc 1 7395 0
 1340 00d4 AE4B     		ldr	r3, .L122+64
 1341 00d6 1A68     		ldr	r2, [r3]
 1342 00d8 8123     		mov	r3, #129
 1343 00da 9B00     		lsl	r3, r3, #2
 1344 00dc 1A42     		tst	r2, r3
 1345 00de 3AD0     		beq	.L82
7396:screens.c     **** 	{
7397:screens.c     **** 		if( swtim < 20 )
 1346              		.loc 1 7397 0
 1347 00e0 AC4B     		ldr	r3, .L122+68
 1348 00e2 1B78     		ldrb	r3, [r3]
 1349 00e4 132B     		cmp	r3, #19
 1350 00e6 02D8     		bhi	.L83
7398:screens.c     **** 			swtim++;
 1351              		.loc 1 7398 0
 1352 00e8 0133     		add	r3, r3, #1
 1353 00ea AA4A     		ldr	r2, .L122+68
 1354 00ec 1370     		strb	r3, [r2]
 1355              	.L83:
7399:screens.c     **** 
7400:screens.c     **** 		if( swtim >= 10 )
 1356              		.loc 1 7400 0
 1357 00ee A94B     		ldr	r3, .L122+68
 1358 00f0 1B78     		ldrb	r3, [r3]
 1359 00f2 092B     		cmp	r3, #9
 1360 00f4 32D9     		bls	.L84
7401:screens.c     **** 		{
7402:screens.c     **** 			switch( selection )
 1361              		.loc 1 7402 0
 1362 00f6 A84B     		ldr	r3, .L122+72
 1363 00f8 1A78     		ldrb	r2, [r3]
 1364 00fa 072A     		cmp	r2, #7
 1365 00fc 2ED8     		bhi	.L84
 1366 00fe 9300     		lsl	r3, r2, #2
 1367 0100 A64A     		ldr	r2, .L122+76
 1368 0102 D358     		ldr	r3, [r2, r3]
 1369 0104 9F46     		mov	pc, r3
 1370              		.section	.rodata.screen151,"a",%progbits
 1371              		.align	2
 1372              	.L93:
 1373 0000 06010000 		.word	.L85
 1374 0004 10010000 		.word	.L86
 1375 0008 1A010000 		.word	.L87
 1376 000c 24010000 		.word	.L88
 1377 0010 2E010000 		.word	.L89
 1378 0014 38010000 		.word	.L90
 1379 0018 42010000 		.word	.L91
 1380 001c 4C010000 		.word	.L92
 1381              		.section	.text.screen151
 1382              	.L85:
7403:screens.c     **** 			{
7404:screens.c     **** 			case 0:
7405:screens.c     **** #ifndef WINDOWS
7406:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT1;
 1383              		.loc 1 7406 0
 1384 0106 8022     		mov	r2, #128
 1385 0108 5203     		lsl	r2, r2, #13
 1386 010a A04B     		ldr	r3, .L122+60
 1387 010c 5A63     		str	r2, [r3, #52]
7407:screens.c     **** #else
7408:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT1;
7409:screens.c     **** #endif
7410:screens.c     **** 				break;
 1388              		.loc 1 7410 0
 1389 010e 25E0     		b	.L84
 1390              	.L86:
7411:screens.c     **** 
7412:screens.c     **** 			case 1:
7413:screens.c     **** #ifndef WINDOWS
7414:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT2;
 1391              		.loc 1 7414 0
 1392 0110 8022     		mov	r2, #128
 1393 0112 9203     		lsl	r2, r2, #14
 1394 0114 9D4B     		ldr	r3, .L122+60
 1395 0116 5A63     		str	r2, [r3, #52]
7415:screens.c     **** #else
7416:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT2;
7417:screens.c     **** #endif
7418:screens.c     **** 				break;
 1396              		.loc 1 7418 0
 1397 0118 20E0     		b	.L84
 1398              	.L87:
7419:screens.c     **** 
7420:screens.c     **** 			case 2:
7421:screens.c     **** #ifndef WINDOWS
7422:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT3;
 1399              		.loc 1 7422 0
 1400 011a 8022     		mov	r2, #128
 1401 011c D203     		lsl	r2, r2, #15
 1402 011e 9B4B     		ldr	r3, .L122+60
 1403 0120 5A63     		str	r2, [r3, #52]
7423:screens.c     **** #else
7424:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT3;
7425:screens.c     **** #endif
7426:screens.c     **** 				break;
 1404              		.loc 1 7426 0
 1405 0122 1BE0     		b	.L84
 1406              	.L88:
7427:screens.c     **** 
7428:screens.c     **** 			case 3:
7429:screens.c     **** #ifndef WINDOWS
7430:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT4;
 1407              		.loc 1 7430 0
 1408 0124 8022     		mov	r2, #128
 1409 0126 1204     		lsl	r2, r2, #16
 1410 0128 984B     		ldr	r3, .L122+60
 1411 012a 5A63     		str	r2, [r3, #52]
7431:screens.c     **** #else
7432:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT4;
7433:screens.c     **** #endif
7434:screens.c     **** 				break;
 1412              		.loc 1 7434 0
 1413 012c 16E0     		b	.L84
 1414              	.L89:
7435:screens.c     **** 
7436:screens.c     **** 			case 4:
7437:screens.c     **** #ifndef WINDOWS
7438:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT5;
 1415              		.loc 1 7438 0
 1416 012e 8022     		mov	r2, #128
 1417 0130 5204     		lsl	r2, r2, #17
 1418 0132 964B     		ldr	r3, .L122+60
 1419 0134 5A63     		str	r2, [r3, #52]
7439:screens.c     **** #else
7440:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT5;
7441:screens.c     **** #endif
7442:screens.c     **** 				break;
 1420              		.loc 1 7442 0
 1421 0136 11E0     		b	.L84
 1422              	.L90:
7443:screens.c     **** 
7444:screens.c     **** 			case 5:
7445:screens.c     **** #ifndef WINDOWS
7446:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT6;
 1423              		.loc 1 7446 0
 1424 0138 8022     		mov	r2, #128
 1425 013a 9204     		lsl	r2, r2, #18
 1426 013c 934B     		ldr	r3, .L122+60
 1427 013e 5A63     		str	r2, [r3, #52]
7447:screens.c     **** #else
7448:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT6;
7449:screens.c     **** #endif
7450:screens.c     **** 				break;
 1428              		.loc 1 7450 0
 1429 0140 0CE0     		b	.L84
 1430              	.L91:
7451:screens.c     **** 
7452:screens.c     **** 			case 6:
7453:screens.c     **** #ifndef WINDOWS
7454:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT7;
 1431              		.loc 1 7454 0
 1432 0142 8022     		mov	r2, #128
 1433 0144 9201     		lsl	r2, r2, #6
 1434 0146 914B     		ldr	r3, .L122+60
 1435 0148 5A63     		str	r2, [r3, #52]
7455:screens.c     **** #else
7456:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT7;
7457:screens.c     **** #endif
7458:screens.c     **** 				break;
 1436              		.loc 1 7458 0
 1437 014a 07E0     		b	.L84
 1438              	.L92:
7459:screens.c     **** 
7460:screens.c     **** 			case 7:
7461:screens.c     **** #ifndef WINDOWS
7462:screens.c     **** 				AT91C_BASE_PIOA->PIO_CODR = OUT8;
 1439              		.loc 1 7462 0
 1440 014c 8022     		mov	r2, #128
 1441 014e 1202     		lsl	r2, r2, #8
 1442 0150 8E4B     		ldr	r3, .L122+60
 1443 0152 5A63     		str	r2, [r3, #52]
7463:screens.c     **** #else
7464:screens.c     **** 				AT91C_BASE_PIOA->PIO_ODSR |= OUT8;
7465:screens.c     **** #endif
7466:screens.c     **** 				break;
 1444              		.loc 1 7466 0
 1445 0154 02E0     		b	.L84
 1446              	.L82:
7467:screens.c     **** 			}
7468:screens.c     **** 		}
7469:screens.c     **** 	}
7470:screens.c     **** 	else
7471:screens.c     **** 	{
7472:screens.c     **** 		swtim = 0;
 1447              		.loc 1 7472 0
 1448 0156 0022     		mov	r2, #0
 1449 0158 8E4B     		ldr	r3, .L122+68
 1450 015a 1A70     		strb	r2, [r3]
 1451              	.L84:
7473:screens.c     **** 	}
7474:screens.c     **** 
7475:screens.c     **** 	if( lkey & (SW_NEW | SW_REP) )
 1452              		.loc 1 7475 0
 1453 015c A30F     		lsr	r3, r4, #30
 1454 015e 34D0     		beq	.L94
7476:screens.c     **** 	{
7477:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 1455              		.loc 1 7477 0
 1456 0160 A400     		lsl	r4, r4, #2
 1457              	.LVL86:
 1458 0162 A408     		lsr	r4, r4, #2
 1459              	.LVL87:
7478:screens.c     **** 
7479:screens.c     **** 		if( lkey == SW_CL )
 1460              		.loc 1 7479 0
 1461 0164 102C     		cmp	r4, #16
 1462 0166 07D1     		bne	.L95
7480:screens.c     **** 		{
7481:screens.c     **** 			window = screen152;
 1463              		.loc 1 7481 0
 1464 0168 8D4A     		ldr	r2, .L122+80
 1465 016a 8E4B     		ldr	r3, .L122+84
 1466 016c 1A60     		str	r2, [r3]
7482:screens.c     **** 			/* turn on OP6 - 12V supply on the machine */
7483:screens.c     **** 			AT91C_BASE_PIOA->PIO_CODR = OUT6; // Set Outputs - ON if clear
 1467              		.loc 1 7483 0
 1468 016e 8022     		mov	r2, #128
 1469 0170 9204     		lsl	r2, r2, #18
 1470 0172 864B     		ldr	r3, .L122+60
 1471 0174 5A63     		str	r2, [r3, #52]
 1472 0176 28E0     		b	.L94
 1473              	.L95:
7484:screens.c     **** 		}
7485:screens.c     **** 		else if( lkey == SW_OL )
 1474              		.loc 1 7485 0
 1475 0178 8023     		mov	r3, #128
 1476 017a 9B00     		lsl	r3, r3, #2
 1477 017c 9C42     		cmp	r4, r3
 1478 017e 0BD1     		bne	.L96
7486:screens.c     **** 		{
7487:screens.c     **** 			/*if( selection )
7488:screens.c     **** 			selection--;*/
7489:screens.c     **** 			if (swtim < 10)
 1479              		.loc 1 7489 0
 1480 0180 844B     		ldr	r3, .L122+68
 1481 0182 1B78     		ldrb	r3, [r3]
 1482 0184 092B     		cmp	r3, #9
 1483 0186 03D8     		bhi	.L97
7490:screens.c     **** 				lastoutput = 1;
 1484              		.loc 1 7490 0
 1485 0188 0122     		mov	r2, #1
 1486 018a 874B     		ldr	r3, .L122+88
 1487 018c 1A70     		strb	r2, [r3]
 1488 018e 1CE0     		b	.L94
 1489              	.L97:
7491:screens.c     **** 			else
7492:screens.c     **** 				lastoutput = 0;
 1490              		.loc 1 7492 0
 1491 0190 0022     		mov	r2, #0
 1492 0192 854B     		ldr	r3, .L122+88
 1493 0194 1A70     		strb	r2, [r3]
 1494 0196 18E0     		b	.L94
 1495              	.L96:
7493:screens.c     **** 		}
7494:screens.c     **** 		else if( lkey == SW_IL )
 1496              		.loc 1 7494 0
 1497 0198 042C     		cmp	r4, #4
 1498 019a 0BD1     		bne	.L98
7495:screens.c     **** 		{
7496:screens.c     **** 			if (swtim < 10)
 1499              		.loc 1 7496 0
 1500 019c 7D4B     		ldr	r3, .L122+68
 1501 019e 1B78     		ldrb	r3, [r3]
 1502 01a0 092B     		cmp	r3, #9
 1503 01a2 03D8     		bhi	.L99
7497:screens.c     **** 				nextoutput = 1;
 1504              		.loc 1 7497 0
 1505 01a4 0122     		mov	r2, #1
 1506 01a6 814B     		ldr	r3, .L122+92
 1507 01a8 1A70     		strb	r2, [r3]
 1508 01aa 0EE0     		b	.L94
 1509              	.L99:
7498:screens.c     **** 			else
7499:screens.c     **** 				nextoutput = 0;
 1510              		.loc 1 7499 0
 1511 01ac 0022     		mov	r2, #0
 1512 01ae 7F4B     		ldr	r3, .L122+92
 1513 01b0 1A70     		strb	r2, [r3]
 1514 01b2 0AE0     		b	.L94
 1515              	.L98:
7500:screens.c     **** 		}
7501:screens.c     **** 		else if( lkey == SW_OR )
 1516              		.loc 1 7501 0
 1517 01b4 8023     		mov	r3, #128
 1518 01b6 5B00     		lsl	r3, r3, #1
 1519 01b8 9C42     		cmp	r4, r3
 1520 01ba 06D1     		bne	.L94
7502:screens.c     **** 		{
7503:screens.c     **** 			escape = 1;
 1521              		.loc 1 7503 0
 1522 01bc 0122     		mov	r2, #1
 1523 01be 7C4B     		ldr	r3, .L122+96
 1524 01c0 1A70     		strb	r2, [r3]
7504:screens.c     **** 			/* turn on OP6 - 12V supply on the machine */
7505:screens.c     **** 			AT91C_BASE_PIOA->PIO_CODR = OUT6; // Set Outputs - ON if clear
 1525              		.loc 1 7505 0
 1526 01c2 8022     		mov	r2, #128
 1527 01c4 9204     		lsl	r2, r2, #18
 1528 01c6 714B     		ldr	r3, .L122+60
 1529 01c8 5A63     		str	r2, [r3, #52]
 1530              	.L94:
7506:screens.c     **** 		}
7507:screens.c     **** 	}
7508:screens.c     **** 
7509:screens.c     **** 	if( !key && nextoutput) 
 1531              		.loc 1 7509 0
 1532 01ca 714B     		ldr	r3, .L122+64
 1533 01cc 1B68     		ldr	r3, [r3]
 1534 01ce 002B     		cmp	r3, #0
 1535 01d0 19D1     		bne	.L100
 1536              		.loc 1 7509 0 is_stmt 0 discriminator 1
 1537 01d2 764B     		ldr	r3, .L122+92
 1538 01d4 1B78     		ldrb	r3, [r3]
 1539 01d6 002B     		cmp	r3, #0
 1540 01d8 00D1     		bne	.LCB1512
 1541 01da 41E1     		b	.L101	@long jump
 1542              	.LCB1512:
7510:screens.c     **** 	{
7511:screens.c     **** 		if( selection < 7 )
 1543              		.loc 1 7511 0 is_stmt 1
 1544 01dc 6E4B     		ldr	r3, .L122+72
 1545 01de 1B78     		ldrb	r3, [r3]
 1546 01e0 062B     		cmp	r3, #6
 1547 01e2 02D8     		bhi	.L102
7512:screens.c     **** 			selection++;
 1548              		.loc 1 7512 0
 1549 01e4 0133     		add	r3, r3, #1
 1550 01e6 6C4A     		ldr	r2, .L122+72
 1551 01e8 1370     		strb	r3, [r2]
 1552              	.L102:
7513:screens.c     **** 
7514:screens.c     **** 		nextoutput = 0;
 1553              		.loc 1 7514 0
 1554 01ea 0022     		mov	r2, #0
 1555 01ec 6F4B     		ldr	r3, .L122+92
 1556 01ee 1A70     		strb	r2, [r3]
 1557 01f0 36E1     		b	.L101
 1558              	.L112:
7515:screens.c     **** 	}
7516:screens.c     **** 
7517:screens.c     **** 	if( !key && lastoutput) 
7518:screens.c     **** 	{
7519:screens.c     **** 		if( selection )
 1559              		.loc 1 7519 0
 1560 01f2 694B     		ldr	r3, .L122+72
 1561 01f4 1B78     		ldrb	r3, [r3]
 1562 01f6 002B     		cmp	r3, #0
 1563 01f8 02D0     		beq	.L103
7520:screens.c     **** 			selection--;
 1564              		.loc 1 7520 0
 1565 01fa 013B     		sub	r3, r3, #1
 1566 01fc 664A     		ldr	r2, .L122+72
 1567 01fe 1370     		strb	r3, [r2]
 1568              	.L103:
7521:screens.c     **** 
7522:screens.c     **** 		lastoutput = 0;
 1569              		.loc 1 7522 0
 1570 0200 0022     		mov	r2, #0
 1571 0202 694B     		ldr	r3, .L122+88
 1572 0204 1A70     		strb	r2, [r3]
 1573              	.L100:
7523:screens.c     **** 	}
7524:screens.c     **** 
7525:screens.c     **** 	//template = (pRun.pr.status[0] << 0) | (pRun.pr.status[1] << 1) | (pRun.pr.status[2] << 2) |
7526:screens.c     **** 	//           (pRun.pr.status[3] << 3) | (pRun.pr.status[4] << 4) | (pRun.pr.status[5] << 5);
7527:screens.c     **** 
7528:screens.c     **** 	draw_box( adm, 22, 28, 130, 58, CLEAR );
 1574              		.loc 1 7528 0
 1575 0206 3A23     		mov	r3, #58
 1576 0208 0093     		str	r3, [sp]
 1577 020a 4023     		mov	r3, #64
 1578 020c 0193     		str	r3, [sp, #4]
 1579 020e 5548     		ldr	r0, .L122+20
 1580 0210 1621     		mov	r1, #22
 1581 0212 1C22     		mov	r2, #28
 1582 0214 8223     		mov	r3, #130
 1583 0216 FFF7FEFF 		bl	draw_box
 1584              	.LVL88:
7529:screens.c     **** 
7530:screens.c     **** 	display_f1_text( "1      2      3", TSMAX,  23, 30, FIXED );
 1585              		.loc 1 7530 0
 1586 021a 0024     		mov	r4, #0
 1587              	.LVL89:
 1588 021c 0094     		str	r4, [sp]
 1589 021e 6548     		ldr	r0, .L122+100
 1590 0220 1A21     		mov	r1, #26
 1591 0222 1722     		mov	r2, #23
 1592 0224 1E23     		mov	r3, #30
 1593 0226 FFF7FEFF 		bl	display_f1_text
 1594              	.LVL90:
7531:screens.c     **** 	display_f1_text( "4      5      6", TSMAX,  22, 50, FIXED );
 1595              		.loc 1 7531 0
 1596 022a 0094     		str	r4, [sp]
 1597 022c 6248     		ldr	r0, .L122+104
 1598 022e 1A21     		mov	r1, #26
 1599 0230 1622     		mov	r2, #22
 1600 0232 3223     		mov	r3, #50
 1601 0234 FFF7FEFF 		bl	display_f1_text
 1602              	.LVL91:
7532:screens.c     **** 	display_f1_text( "7      8       ", TSMAX,  22, 70, FIXED );
 1603              		.loc 1 7532 0
 1604 0238 0094     		str	r4, [sp]
 1605 023a 6048     		ldr	r0, .L122+108
 1606 023c 1A21     		mov	r1, #26
 1607 023e 1622     		mov	r2, #22
 1608 0240 4623     		mov	r3, #70
 1609 0242 FFF7FEFF 		bl	display_f1_text
 1610              	.LVL92:
7533:screens.c     **** 
7534:screens.c     **** 	tempf = ((float)AT91C_BASE_ADC0->ADC_CDR7 * ATODIPVOUTSCALE) + ATODIPVOUTDROP;
 1611              		.loc 1 7534 0
 1612 0246 5E4B     		ldr	r3, .L122+112
 1613 0248 D86C     		ldr	r0, [r3, #76]
 1614              	.LVL93:
 1615 024a FFF7FEFF 		bl	__aeabi_ui2f
 1616              	.LVL94:
 1617 024e FFF7FEFF 		bl	__aeabi_f2d
 1618              	.LVL95:
 1619 0252 404B     		ldr	r3, .L122+4
 1620 0254 3E4A     		ldr	r2, .L122
 1621 0256 FFF7FEFF 		bl	__aeabi_dmul
 1622              	.LVL96:
 1623 025a 3F4A     		ldr	r2, .L122+8
 1624 025c 3F4B     		ldr	r3, .L122+12
 1625 025e FFF7FEFF 		bl	__aeabi_dadd
 1626              	.LVL97:
 1627 0262 FFF7FEFF 		bl	__aeabi_d2f
 1628              	.LVL98:
7535:screens.c     **** 	display_number( tempf, 0.0, 0.0, 1.0, DP1, 147, 4, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
 1629              		.loc 1 7535 0
 1630 0266 0022     		mov	r2, #0
 1631 0268 0123     		mov	r3, #1
 1632 026a 0093     		str	r3, [sp]
 1633 026c 9323     		mov	r3, #147
 1634 026e 0193     		str	r3, [sp, #4]
 1635 0270 0423     		mov	r3, #4
 1636 0272 0293     		str	r3, [sp, #8]
 1637 0274 1823     		mov	r3, #24
 1638 0276 0393     		str	r3, [sp, #12]
 1639 0278 1023     		mov	r3, #16
 1640 027a 0493     		str	r3, [sp, #16]
 1641 027c 514B     		ldr	r3, .L122+116
 1642 027e 0593     		str	r3, [sp, #20]
 1643 0280 0694     		str	r4, [sp, #24]
 1644 0282 0794     		str	r4, [sp, #28]
 1645 0284 111C     		add	r1, r2, #0
 1646 0286 FE23     		mov	r3, #254
 1647 0288 9B05     		lsl	r3, r3, #22
 1648 028a FFF7FEFF 		bl	display_number
 1649              	.LVL99:
7536:screens.c     **** 
7537:screens.c     **** #ifndef WINDOWS 
7538:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT1) ? 0 : 1;
 1650              		.loc 1 7538 0
 1651 028e 3F4B     		ldr	r3, .L122+60
 1652 0290 9A6B     		ldr	r2, [r3, #56]
 1653              	.LVL100:
7539:screens.c     **** #else
7540:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT1) ? 1 : 0;
7541:screens.c     **** #endif
7542:screens.c     **** 	write_bitmap( adm, (selection==0)? op_status[c]: BUTTON03, 32, 28, OR );
 1654              		.loc 1 7542 0
 1655 0292 414B     		ldr	r3, .L122+72
 1656 0294 1B78     		ldrb	r3, [r3]
 1657 0296 002B     		cmp	r3, #0
 1658 0298 06D1     		bne	.L113
7538:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT1) ? 0 : 1;
 1659              		.loc 1 7538 0 discriminator 1
 1660 029a 130D     		lsr	r3, r2, #20
 1661 029c 0122     		mov	r2, #1
 1662              	.LVL101:
 1663 029e 9A43     		bic	r2, r3
 1664              		.loc 1 7542 0 discriminator 1
 1665 02a0 9200     		lsl	r2, r2, #2
 1666 02a2 494B     		ldr	r3, .L122+120
 1667 02a4 D158     		ldr	r1, [r2, r3]
 1668 02a6 00E0     		b	.L104
 1669              	.LVL102:
 1670              	.L113:
 1671              		.loc 1 7542 0 is_stmt 0
 1672 02a8 4849     		ldr	r1, .L122+124
 1673              	.LVL103:
 1674              	.L104:
 1675              		.loc 1 7542 0 discriminator 3
 1676 02aa 0223     		mov	r3, #2
 1677 02ac 0093     		str	r3, [sp]
 1678 02ae 2D48     		ldr	r0, .L122+20
 1679 02b0 2022     		mov	r2, #32
 1680 02b2 1C23     		mov	r3, #28
 1681 02b4 FFF7FEFF 		bl	write_bitmap
 1682              	.LVL104:
7543:screens.c     **** 
7544:screens.c     **** #ifndef WINDOWS 
7545:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT2) ? 0 : 1;
 1683              		.loc 1 7545 0 is_stmt 1 discriminator 3
 1684 02b8 344B     		ldr	r3, .L122+60
 1685 02ba 9A6B     		ldr	r2, [r3, #56]
 1686              	.LVL105:
7546:screens.c     **** #else
7547:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT2) ? 1 : 0;
7548:screens.c     **** #endif	
7549:screens.c     **** 	write_bitmap( adm, (selection==1)? op_status[c]: BUTTON03, 77, 28, OR );
 1687              		.loc 1 7549 0 discriminator 3
 1688 02bc 364B     		ldr	r3, .L122+72
 1689 02be 1B78     		ldrb	r3, [r3]
 1690 02c0 012B     		cmp	r3, #1
 1691 02c2 06D1     		bne	.L114
7545:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT2) ? 0 : 1;
 1692              		.loc 1 7545 0 discriminator 1
 1693 02c4 530D     		lsr	r3, r2, #21
 1694 02c6 0122     		mov	r2, #1
 1695              	.LVL106:
 1696 02c8 9A43     		bic	r2, r3
 1697              		.loc 1 7549 0 discriminator 1
 1698 02ca 9200     		lsl	r2, r2, #2
 1699 02cc 3E4B     		ldr	r3, .L122+120
 1700 02ce D158     		ldr	r1, [r2, r3]
 1701 02d0 00E0     		b	.L105
 1702              	.LVL107:
 1703              	.L114:
 1704              		.loc 1 7549 0 is_stmt 0
 1705 02d2 3E49     		ldr	r1, .L122+124
 1706              	.LVL108:
 1707              	.L105:
 1708              		.loc 1 7549 0 discriminator 3
 1709 02d4 0223     		mov	r3, #2
 1710 02d6 0093     		str	r3, [sp]
 1711 02d8 2248     		ldr	r0, .L122+20
 1712 02da 4D22     		mov	r2, #77
 1713 02dc 1C23     		mov	r3, #28
 1714 02de FFF7FEFF 		bl	write_bitmap
 1715              	.LVL109:
7550:screens.c     **** 
7551:screens.c     **** #ifndef WINDOWS 
7552:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT3) ? 0 : 1;
 1716              		.loc 1 7552 0 is_stmt 1 discriminator 3
 1717 02e2 2A4B     		ldr	r3, .L122+60
 1718 02e4 9A6B     		ldr	r2, [r3, #56]
 1719              	.LVL110:
7553:screens.c     **** #else
7554:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT3) ? 1 : 0;
7555:screens.c     **** #endif	
7556:screens.c     **** 	write_bitmap( adm, (selection==2)? op_status[c]: BUTTON03, 119, 28, OR );
 1720              		.loc 1 7556 0 discriminator 3
 1721 02e6 2C4B     		ldr	r3, .L122+72
 1722 02e8 1B78     		ldrb	r3, [r3]
 1723 02ea 022B     		cmp	r3, #2
 1724 02ec 06D1     		bne	.L115
7552:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT3) ? 0 : 1;
 1725              		.loc 1 7552 0 discriminator 1
 1726 02ee 930D     		lsr	r3, r2, #22
 1727 02f0 0122     		mov	r2, #1
 1728              	.LVL111:
 1729 02f2 9A43     		bic	r2, r3
 1730              		.loc 1 7556 0 discriminator 1
 1731 02f4 9200     		lsl	r2, r2, #2
 1732 02f6 344B     		ldr	r3, .L122+120
 1733 02f8 D158     		ldr	r1, [r2, r3]
 1734 02fa 00E0     		b	.L106
 1735              	.LVL112:
 1736              	.L115:
 1737              		.loc 1 7556 0 is_stmt 0
 1738 02fc 3349     		ldr	r1, .L122+124
 1739              	.LVL113:
 1740              	.L106:
 1741              		.loc 1 7556 0 discriminator 3
 1742 02fe 0223     		mov	r3, #2
 1743 0300 0093     		str	r3, [sp]
 1744 0302 1848     		ldr	r0, .L122+20
 1745 0304 7722     		mov	r2, #119
 1746 0306 1C23     		mov	r3, #28
 1747 0308 FFF7FEFF 		bl	write_bitmap
 1748              	.LVL114:
7557:screens.c     **** 
7558:screens.c     **** #ifndef WINDOWS 
7559:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT4) ? 0 : 1;
 1749              		.loc 1 7559 0 is_stmt 1 discriminator 3
 1750 030c 1F4B     		ldr	r3, .L122+60
 1751 030e 9A6B     		ldr	r2, [r3, #56]
 1752              	.LVL115:
7560:screens.c     **** #else
7561:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT4) ? 1 : 0;
7562:screens.c     **** #endif	
7563:screens.c     **** 	write_bitmap( adm, (selection==3)? op_status[c]: BUTTON03, 32, 48, OR );
 1753              		.loc 1 7563 0 discriminator 3
 1754 0310 214B     		ldr	r3, .L122+72
 1755 0312 1B78     		ldrb	r3, [r3]
 1756 0314 032B     		cmp	r3, #3
 1757 0316 06D1     		bne	.L116
7559:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT4) ? 0 : 1;
 1758              		.loc 1 7559 0 discriminator 1
 1759 0318 D30D     		lsr	r3, r2, #23
 1760 031a 0122     		mov	r2, #1
 1761              	.LVL116:
 1762 031c 9A43     		bic	r2, r3
 1763              		.loc 1 7563 0 discriminator 1
 1764 031e 9200     		lsl	r2, r2, #2
 1765 0320 294B     		ldr	r3, .L122+120
 1766 0322 D158     		ldr	r1, [r2, r3]
 1767 0324 00E0     		b	.L107
 1768              	.LVL117:
 1769              	.L116:
 1770              		.loc 1 7563 0 is_stmt 0
 1771 0326 2949     		ldr	r1, .L122+124
 1772              	.LVL118:
 1773              	.L107:
 1774              		.loc 1 7563 0 discriminator 3
 1775 0328 0223     		mov	r3, #2
 1776 032a 0093     		str	r3, [sp]
 1777 032c 0D48     		ldr	r0, .L122+20
 1778 032e 2022     		mov	r2, #32
 1779 0330 3023     		mov	r3, #48
 1780 0332 FFF7FEFF 		bl	write_bitmap
 1781              	.LVL119:
7564:screens.c     **** 
7565:screens.c     **** #ifndef WINDOWS 
7566:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT5) ? 0 : 1;
 1782              		.loc 1 7566 0 is_stmt 1 discriminator 3
 1783 0336 154B     		ldr	r3, .L122+60
 1784 0338 9A6B     		ldr	r2, [r3, #56]
 1785              	.LVL120:
7567:screens.c     **** #else
7568:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT5) ? 1 : 0;
7569:screens.c     **** #endif	
7570:screens.c     **** 	write_bitmap( adm, (selection==4)? op_status[c]: BUTTON03, 77, 48, OR );
 1786              		.loc 1 7570 0 discriminator 3
 1787 033a 174B     		ldr	r3, .L122+72
 1788 033c 1B78     		ldrb	r3, [r3]
 1789 033e 042B     		cmp	r3, #4
 1790 0340 46D1     		bne	.L117
7566:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT5) ? 0 : 1;
 1791              		.loc 1 7566 0 discriminator 1
 1792 0342 130E     		lsr	r3, r2, #24
 1793 0344 0122     		mov	r2, #1
 1794              	.LVL121:
 1795 0346 9A43     		bic	r2, r3
 1796              		.loc 1 7570 0 discriminator 1
 1797 0348 9200     		lsl	r2, r2, #2
 1798 034a 1F4B     		ldr	r3, .L122+120
 1799 034c D158     		ldr	r1, [r2, r3]
 1800 034e 40E0     		b	.L108
 1801              	.L123:
 1802              		.align	3
 1803              	.L122:
 1804 0350 2B12AF22 		.word	581898795
 1805 0354 F12AA23F 		.word	1067592433
 1806 0358 00000000 		.word	0
 1807 035c 0000F03F 		.word	1072693248
 1808 0360 00000000 		.word	startup
 1809 0364 00000000 		.word	adm
 1810 0368 00000000 		.word	ptText
 1811 036c 00000000 		.word	.LC64
 1812 0370 00000000 		.word	BATTSLIM
 1813 0374 00000000 		.word	TABLEFT
 1814 0378 00000000 		.word	TABRIGHT
 1815 037c 00000000 		.word	TABNAV_L
 1816 0380 00000000 		.word	TAB
 1817 0384 00000000 		.word	TABESC
 1818 0388 00000000 		.word	leaf
 1819 038c 00F4FFFF 		.word	-3072
 1820 0390 00000000 		.word	key
 1821 0394 00000000 		.word	.LANCHOR1
 1822 0398 00000000 		.word	selection
 1823 039c 00000000 		.word	.L93
 1824 03a0 00000000 		.word	screen152
 1825 03a4 00000000 		.word	window
 1826 03a8 00000000 		.word	lastoutput
 1827 03ac 00000000 		.word	nextoutput
 1828 03b0 00000000 		.word	escape
 1829 03b4 04000000 		.word	.LC82
 1830 03b8 14000000 		.word	.LC84
 1831 03bc 24000000 		.word	.LC86
 1832 03c0 0080FDFF 		.word	-163840
 1833 03c4 00000000 		.word	RDSfnt1
 1834 03c8 00000000 		.word	op_status
 1835 03cc 00000000 		.word	BUTTON03
 1836              	.LVL122:
 1837              	.L117:
 1838              		.loc 1 7570 0 is_stmt 0
 1839 03d0 2849     		ldr	r1, .L124
 1840              	.LVL123:
 1841              	.L108:
 1842              		.loc 1 7570 0 discriminator 3
 1843 03d2 0223     		mov	r3, #2
 1844 03d4 0093     		str	r3, [sp]
 1845 03d6 2848     		ldr	r0, .L124+4
 1846 03d8 4D22     		mov	r2, #77
 1847 03da 3023     		mov	r3, #48
 1848 03dc FFF7FEFF 		bl	write_bitmap
 1849              	.LVL124:
7571:screens.c     **** 
7572:screens.c     **** #ifndef WINDOWS 
7573:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT6) ? 0 : 1;
 1850              		.loc 1 7573 0 is_stmt 1 discriminator 3
 1851 03e0 264B     		ldr	r3, .L124+8
 1852 03e2 9A6B     		ldr	r2, [r3, #56]
 1853              	.LVL125:
7574:screens.c     **** #else
7575:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT6) ? 1 : 0;
7576:screens.c     **** #endif	
7577:screens.c     **** 	write_bitmap( adm, (selection==5)? op_status[c]: BUTTON03, 119, 48, OR );
 1854              		.loc 1 7577 0 discriminator 3
 1855 03e4 264B     		ldr	r3, .L124+12
 1856 03e6 1B78     		ldrb	r3, [r3]
 1857 03e8 052B     		cmp	r3, #5
 1858 03ea 06D1     		bne	.L118
7573:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT6) ? 0 : 1;
 1859              		.loc 1 7573 0 discriminator 1
 1860 03ec 530E     		lsr	r3, r2, #25
 1861 03ee 0122     		mov	r2, #1
 1862              	.LVL126:
 1863 03f0 9A43     		bic	r2, r3
 1864              		.loc 1 7577 0 discriminator 1
 1865 03f2 9200     		lsl	r2, r2, #2
 1866 03f4 234B     		ldr	r3, .L124+16
 1867 03f6 D158     		ldr	r1, [r2, r3]
 1868 03f8 00E0     		b	.L109
 1869              	.LVL127:
 1870              	.L118:
 1871              		.loc 1 7577 0 is_stmt 0
 1872 03fa 1E49     		ldr	r1, .L124
 1873              	.LVL128:
 1874              	.L109:
 1875              		.loc 1 7577 0 discriminator 3
 1876 03fc 0223     		mov	r3, #2
 1877 03fe 0093     		str	r3, [sp]
 1878 0400 1D48     		ldr	r0, .L124+4
 1879 0402 7722     		mov	r2, #119
 1880 0404 3023     		mov	r3, #48
 1881 0406 FFF7FEFF 		bl	write_bitmap
 1882              	.LVL129:
7578:screens.c     **** 
7579:screens.c     **** #ifndef WINDOWS
7580:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT7) ? 0 : 1;
 1883              		.loc 1 7580 0 is_stmt 1 discriminator 3
 1884 040a 1C4B     		ldr	r3, .L124+8
 1885 040c 9A6B     		ldr	r2, [r3, #56]
 1886              	.LVL130:
7581:screens.c     **** #else
7582:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT7) ? 1 : 0;
7583:screens.c     **** #endif
7584:screens.c     **** 	write_bitmap( adm, (selection==6)? op_status[c]: BUTTON03, 32, 68, OR );
 1887              		.loc 1 7584 0 discriminator 3
 1888 040e 1C4B     		ldr	r3, .L124+12
 1889 0410 1B78     		ldrb	r3, [r3]
 1890 0412 062B     		cmp	r3, #6
 1891 0414 06D1     		bne	.L119
7580:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT7) ? 0 : 1;
 1892              		.loc 1 7580 0 discriminator 1
 1893 0416 530B     		lsr	r3, r2, #13
 1894 0418 0122     		mov	r2, #1
 1895              	.LVL131:
 1896 041a 9A43     		bic	r2, r3
 1897              		.loc 1 7584 0 discriminator 1
 1898 041c 9200     		lsl	r2, r2, #2
 1899 041e 194B     		ldr	r3, .L124+16
 1900 0420 D158     		ldr	r1, [r2, r3]
 1901 0422 00E0     		b	.L110
 1902              	.LVL132:
 1903              	.L119:
 1904              		.loc 1 7584 0 is_stmt 0
 1905 0424 1349     		ldr	r1, .L124
 1906              	.LVL133:
 1907              	.L110:
 1908              		.loc 1 7584 0 discriminator 3
 1909 0426 0223     		mov	r3, #2
 1910 0428 0093     		str	r3, [sp]
 1911 042a 1348     		ldr	r0, .L124+4
 1912 042c 2022     		mov	r2, #32
 1913 042e 4423     		mov	r3, #68
 1914 0430 FFF7FEFF 		bl	write_bitmap
 1915              	.LVL134:
7585:screens.c     **** 
7586:screens.c     **** #ifndef WINDOWS
7587:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT8) ? 0 : 1;
 1916              		.loc 1 7587 0 is_stmt 1 discriminator 3
 1917 0434 114B     		ldr	r3, .L124+8
 1918 0436 9A6B     		ldr	r2, [r3, #56]
 1919              	.LVL135:
7588:screens.c     **** #else
7589:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT8) ? 1 : 0;
7590:screens.c     **** #endif
7591:screens.c     **** 	write_bitmap( adm, (selection==7)? op_status[c]: BUTTON03, 77, 68, OR );
 1920              		.loc 1 7591 0 discriminator 3
 1921 0438 114B     		ldr	r3, .L124+12
 1922 043a 1B78     		ldrb	r3, [r3]
 1923 043c 072B     		cmp	r3, #7
 1924 043e 06D1     		bne	.L120
7587:screens.c     **** 	c = (AT91C_BASE_PIOA->PIO_ODSR & OUT8) ? 0 : 1;
 1925              		.loc 1 7587 0 discriminator 1
 1926 0440 D30B     		lsr	r3, r2, #15
 1927 0442 0122     		mov	r2, #1
 1928              	.LVL136:
 1929 0444 9A43     		bic	r2, r3
 1930              		.loc 1 7591 0 discriminator 1
 1931 0446 9200     		lsl	r2, r2, #2
 1932 0448 0E4B     		ldr	r3, .L124+16
 1933 044a D158     		ldr	r1, [r2, r3]
 1934 044c 00E0     		b	.L111
 1935              	.LVL137:
 1936              	.L120:
 1937              		.loc 1 7591 0 is_stmt 0
 1938 044e 0949     		ldr	r1, .L124
 1939              	.LVL138:
 1940              	.L111:
 1941              		.loc 1 7591 0 discriminator 3
 1942 0450 0223     		mov	r3, #2
 1943 0452 0093     		str	r3, [sp]
 1944 0454 0848     		ldr	r0, .L124+4
 1945 0456 4D22     		mov	r2, #77
 1946 0458 4423     		mov	r3, #68
 1947 045a FFF7FEFF 		bl	write_bitmap
 1948              	.LVL139:
 1949 045e 05E0     		b	.L121
 1950              	.LVL140:
 1951              	.L101:
7517:screens.c     **** 	if( !key && lastoutput) 
 1952              		.loc 1 7517 0 is_stmt 1
 1953 0460 094B     		ldr	r3, .L124+20
 1954 0462 1B78     		ldrb	r3, [r3]
 1955 0464 002B     		cmp	r3, #0
 1956 0466 00D0     		beq	.LCB1905
 1957 0468 C3E6     		b	.L112	@long jump
 1958              	.LCB1905:
 1959 046a CCE6     		b	.L100
 1960              	.LVL141:
 1961              	.L121:
7592:screens.c     **** }
 1962              		.loc 1 7592 0
 1963 046c 09B0     		add	sp, sp, #36
 1964              		@ sp needed for prologue
 1965 046e F0BC     		pop	{r4, r5, r6, r7}
 1966 0470 01BC     		pop	{r0}
 1967 0472 0047     		bx	r0
 1968              	.L125:
 1969              		.align	2
 1970              	.L124:
 1971 0474 00000000 		.word	BUTTON03
 1972 0478 00000000 		.word	adm
 1973 047c 00F4FFFF 		.word	-3072
 1974 0480 00000000 		.word	selection
 1975 0484 00000000 		.word	op_status
 1976 0488 00000000 		.word	lastoutput
 1977              		.cfi_endproc
 1978              	.LFE400:
 1980 048c C046C046 		.section	.text.screen148,"ax",%progbits
 1981              		.align	2
 1982              		.global	screen148
 1983              		.code	16
 1984              		.thumb_func
 1986              	screen148:
 1987              	.LFB397:
6907:screens.c     **** {
 1988              		.loc 1 6907 0
 1989              		.cfi_startproc
 1990              	.LVL142:
 1991 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1992              	.LCFI8:
 1993              		.cfi_def_cfa_offset 20
 1994              		.cfi_offset 4, -20
 1995              		.cfi_offset 5, -16
 1996              		.cfi_offset 6, -12
 1997              		.cfi_offset 7, -8
 1998              		.cfi_offset 14, -4
 1999 0002 5F46     		mov	r7, fp
 2000 0004 5646     		mov	r6, sl
 2001 0006 4D46     		mov	r5, r9
 2002 0008 4446     		mov	r4, r8
 2003 000a F0B4     		push	{r4, r5, r6, r7}
 2004              	.LCFI9:
 2005              		.cfi_def_cfa_offset 36
 2006              		.cfi_offset 8, -36
 2007              		.cfi_offset 9, -32
 2008              		.cfi_offset 10, -28
 2009              		.cfi_offset 11, -24
 2010 000c 8BB0     		sub	sp, sp, #44
 2011              	.LCFI10:
 2012              		.cfi_def_cfa_offset 80
 2013 000e 041C     		mov	r4, r0
6912:screens.c     **** 	if( !startup )
 2014              		.loc 1 6912 0
 2015 0010 7C4B     		ldr	r3, .L153
 2016 0012 1B78     		ldrb	r3, [r3]
 2017 0014 002B     		cmp	r3, #0
 2018 0016 10D1     		bne	.L127
6914:screens.c     **** 		startup = 1;
 2019              		.loc 1 6914 0
 2020 0018 0122     		mov	r2, #1
 2021 001a 7A4B     		ldr	r3, .L153
 2022 001c 1A70     		strb	r2, [r3]
6916:screens.c     **** 		draw_frame( adm );
 2023              		.loc 1 6916 0
 2024 001e 7A48     		ldr	r0, .L153+4
 2025              	.LVL143:
 2026 0020 FFF7FEFF 		bl	draw_frame
 2027              	.LVL144:
6918:screens.c     **** 		display_f1_text( "Formation 2", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
 2028              		.loc 1 6918 0
 2029 0024 0A23     		mov	r3, #10
 2030 0026 0093     		str	r3, [sp]
 2031 0028 7848     		ldr	r0, .L153+8
 2032 002a 1A21     		mov	r1, #26
 2033 002c 5022     		mov	r2, #80
 2034 002e 0723     		mov	r3, #7
 2035 0030 FFF7FEFF 		bl	display_f1_text
 2036              	.LVL145:
6920:screens.c     **** 		selection = 0;
 2037              		.loc 1 6920 0
 2038 0034 0022     		mov	r2, #0
 2039 0036 764B     		ldr	r3, .L153+12
 2040 0038 1A70     		strb	r2, [r3]
 2041              	.LVL146:
 2042              	.L127:
6925:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 2043              		.loc 1 6925 0
 2044 003a 0020     		mov	r0, #0
 2045 003c FFF7FEFF 		bl	ClockDisplay
 2046              	.LVL147:
6928:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 2047              		.loc 1 6928 0
 2048 0040 744B     		ldr	r3, .L153+16
 2049 0042 1B78     		ldrb	r3, [r3]
 2050 0044 002B     		cmp	r3, #0
 2051 0046 00D0     		beq	.LCB1996
 2052 0048 0AE1     		b	.L128	@long jump
 2053              	.LCB1996:
6928:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 2054              		.loc 1 6928 0 is_stmt 0 discriminator 1
 2055 004a A30F     		lsr	r3, r4, #30
 2056 004c 00D1     		bne	.LCB2000
 2057 004e F3E0     		b	.L129	@long jump
 2058              	.LCB2000:
6930:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 2059              		.loc 1 6930 0 is_stmt 1
 2060 0050 A400     		lsl	r4, r4, #2
 2061              	.LVL148:
 2062 0052 A408     		lsr	r4, r4, #2
 2063              	.LVL149:
6932:screens.c     **** 		if( lkey == SW_OL ) // -
 2064              		.loc 1 6932 0
 2065 0054 8023     		mov	r3, #128
 2066 0056 9B00     		lsl	r3, r3, #2
 2067 0058 9C42     		cmp	r4, r3
 2068 005a 5BD1     		bne	.L130
6934:screens.c     **** 			switch( selection )
 2069              		.loc 1 6934 0
 2070 005c 6C4B     		ldr	r3, .L153+12
 2071 005e 1B78     		ldrb	r3, [r3]
 2072 0060 012B     		cmp	r3, #1
 2073 0062 18D0     		beq	.L133
 2074 0064 002B     		cmp	r3, #0
 2075 0066 04D0     		beq	.L132
 2076 0068 022B     		cmp	r3, #2
 2077 006a 28D0     		beq	.L134
 2078 006c 032B     		cmp	r3, #3
 2079 006e 4BD1     		bne	.L131
 2080 0070 37E0     		b	.L135
 2081              	.L132:
6937:screens.c     **** 				pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] -= PF_GW302_FormationDensity[PF_STEP]
 2082              		.loc 1 6937 0
 2083 0072 6949     		ldr	r1, .L153+20
 2084 0074 3A23     		mov	r3, #58
 2085 0076 C85C     		ldrb	r0, [r1, r3]
 2086 0078 0918     		add	r1, r1, r0
 2087 007a 0131     		add	r1, r1, #1
 2088 007c FF31     		add	r1, r1, #255
 2089 007e 674A     		ldr	r2, .L153+24
 2090 0080 0C79     		ldrb	r4, [r1, #4]
 2091              	.LVL150:
 2092 0082 1378     		ldrb	r3, [r2]
 2093 0084 E31A     		sub	r3, r4, r3
 2094 0086 1B06     		lsl	r3, r3, #24
 2095 0088 1B0E     		lsr	r3, r3, #24
 2096 008a 0B71     		strb	r3, [r1, #4]
6938:screens.c     **** 				if( pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] < PF_GW302_FormationDensity[PF_MI
 2097              		.loc 1 6938 0
 2098 008c 5278     		ldrb	r2, [r2, #1]
 2099 008e 9342     		cmp	r3, r2
 2100 0090 3AD2     		bcs	.L131
6939:screens.c     **** 					pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_FormationDensity[PF_MIN];
 2101              		.loc 1 6939 0
 2102 0092 0A71     		strb	r2, [r1, #4]
 2103 0094 38E0     		b	.L131
 2104              	.LVL151:
 2105              	.L133:
6943:screens.c     **** 				if( pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_FormationDiameter[PF_
 2106              		.loc 1 6943 0
 2107 0096 604B     		ldr	r3, .L153+20
 2108 0098 3A22     		mov	r2, #58
 2109 009a 9A5C     		ldrb	r2, [r3, r2]
 2110 009c 9B18     		add	r3, r3, r2
 2111 009e 0933     		add	r3, r3, #9
 2112 00a0 FF33     		add	r3, r3, #255
 2113 00a2 5B78     		ldrb	r3, [r3, #1]
 2114 00a4 5E49     		ldr	r1, .L153+28
 2115 00a6 4978     		ldrb	r1, [r1, #1]
 2116 00a8 9942     		cmp	r1, r3
 2117 00aa 2DD2     		bcs	.L131
6944:screens.c     **** 					pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_FormationDiameter[PF_ST
 2118              		.loc 1 6944 0
 2119 00ac 5A49     		ldr	r1, .L153+20
 2120 00ae 8A18     		add	r2, r1, r2
 2121 00b0 0932     		add	r2, r2, #9
 2122 00b2 FF32     		add	r2, r2, #255
 2123 00b4 5A49     		ldr	r1, .L153+28
 2124 00b6 0978     		ldrb	r1, [r1]
 2125 00b8 5B1A     		sub	r3, r3, r1
 2126 00ba 5370     		strb	r3, [r2, #1]
 2127 00bc 24E0     		b	.L131
 2128              	.L134:
6948:screens.c     **** 				pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] -= PF_GW302_Formation2Density[PF_STE
 2129              		.loc 1 6948 0
 2130 00be 5649     		ldr	r1, .L153+20
 2131 00c0 3A23     		mov	r3, #58
 2132 00c2 C85C     		ldrb	r0, [r1, r3]
 2133 00c4 0918     		add	r1, r1, r0
 2134 00c6 0931     		add	r1, r1, #9
 2135 00c8 FF31     		add	r1, r1, #255
 2136 00ca 564A     		ldr	r2, .L153+32
 2137 00cc 8C79     		ldrb	r4, [r1, #6]
 2138              	.LVL152:
 2139 00ce 1378     		ldrb	r3, [r2]
 2140 00d0 E31A     		sub	r3, r4, r3
 2141 00d2 1B06     		lsl	r3, r3, #24
 2142 00d4 1B0E     		lsr	r3, r3, #24
 2143 00d6 8B71     		strb	r3, [r1, #6]
6949:screens.c     **** 				if( pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] < PF_GW302_Formation2Density[PF_
 2144              		.loc 1 6949 0
 2145 00d8 5278     		ldrb	r2, [r2, #1]
 2146 00da 9342     		cmp	r3, r2
 2147 00dc 14D2     		bcs	.L131
6950:screens.c     **** 					pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] = PF_GW302_Formation2Density[PF_MIN
 2148              		.loc 1 6950 0
 2149 00de 8A71     		strb	r2, [r1, #6]
 2150 00e0 12E0     		b	.L131
 2151              	.LVL153:
 2152              	.L135:
6954:screens.c     **** 				if( pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] > PF_GW302_Formation2Diameter[P
 2153              		.loc 1 6954 0
 2154 00e2 4D4B     		ldr	r3, .L153+20
 2155 00e4 3A22     		mov	r2, #58
 2156 00e6 9A5C     		ldrb	r2, [r3, r2]
 2157 00e8 9B18     		add	r3, r3, r2
 2158 00ea 1133     		add	r3, r3, #17
 2159 00ec FF33     		add	r3, r3, #255
 2160 00ee DB78     		ldrb	r3, [r3, #3]
 2161 00f0 4D49     		ldr	r1, .L153+36
 2162 00f2 4978     		ldrb	r1, [r1, #1]
 2163 00f4 9942     		cmp	r1, r3
 2164 00f6 07D2     		bcs	.L131
6955:screens.c     **** 					pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_Formation2Diameter[PF_
 2165              		.loc 1 6955 0
 2166 00f8 4749     		ldr	r1, .L153+20
 2167 00fa 8A18     		add	r2, r1, r2
 2168 00fc 1132     		add	r2, r2, #17
 2169 00fe FF32     		add	r2, r2, #255
 2170 0100 4949     		ldr	r1, .L153+36
 2171 0102 0978     		ldrb	r1, [r1]
 2172 0104 5B1A     		sub	r3, r3, r1
 2173 0106 D370     		strb	r3, [r2, #3]
 2174              	.LVL154:
 2175              	.L131:
6958:screens.c     **** 			SavecalDelayWithinMenus = 1;
 2176              		.loc 1 6958 0
 2177 0108 0123     		mov	r3, #1
 2178 010a 484A     		ldr	r2, .L153+40
 2179 010c 1370     		strb	r3, [r2]
6959:screens.c     **** 			valuechanged = 1;
 2180              		.loc 1 6959 0
 2181 010e 484A     		ldr	r2, .L153+44
 2182 0110 1370     		strb	r3, [r2]
 2183              	.LVL155:
 2184 0112 A5E0     		b	.L128
 2185              	.LVL156:
 2186              	.L130:
6962:screens.c     **** 		else if( lkey == SW_IL ) // +
 2187              		.loc 1 6962 0
 2188 0114 042C     		cmp	r4, #4
 2189 0116 57D1     		bne	.L136
6964:screens.c     **** 			switch( selection )
 2190              		.loc 1 6964 0
 2191 0118 3D4B     		ldr	r3, .L153+12
 2192 011a 1B78     		ldrb	r3, [r3]
 2193 011c 012B     		cmp	r3, #1
 2194 011e 18D0     		beq	.L139
 2195 0120 002B     		cmp	r3, #0
 2196 0122 04D0     		beq	.L138
 2197 0124 022B     		cmp	r3, #2
 2198 0126 26D0     		beq	.L140
 2199 0128 032B     		cmp	r3, #3
 2200 012a 47D1     		bne	.L137
 2201 012c 35E0     		b	.L141
 2202              	.L138:
6967:screens.c     **** 				pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] += PF_GW302_FormationDensity[PF_STEP]
 2203              		.loc 1 6967 0
 2204 012e 3A49     		ldr	r1, .L153+20
 2205 0130 3A23     		mov	r3, #58
 2206 0132 C85C     		ldrb	r0, [r1, r3]
 2207 0134 0918     		add	r1, r1, r0
 2208 0136 0131     		add	r1, r1, #1
 2209 0138 FF31     		add	r1, r1, #255
 2210 013a 384A     		ldr	r2, .L153+24
 2211 013c 0C79     		ldrb	r4, [r1, #4]
 2212              	.LVL157:
 2213 013e 1378     		ldrb	r3, [r2]
 2214 0140 E318     		add	r3, r4, r3
 2215 0142 1B06     		lsl	r3, r3, #24
 2216 0144 1B0E     		lsr	r3, r3, #24
 2217 0146 0B71     		strb	r3, [r1, #4]
6968:screens.c     **** 				if( pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] > PF_GW302_FormationDensity[PF_MA
 2218              		.loc 1 6968 0
 2219 0148 9278     		ldrb	r2, [r2, #2]
 2220 014a 9342     		cmp	r3, r2
 2221 014c 36D9     		bls	.L137
6969:screens.c     **** 					pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_FormationDensity[PF_MAX];
 2222              		.loc 1 6969 0
 2223 014e 0A71     		strb	r2, [r1, #4]
 2224 0150 34E0     		b	.L137
 2225              	.LVL158:
 2226              	.L139:
6973:screens.c     **** 				pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] += PF_GW302_FormationDiameter[PF_STE
 2227              		.loc 1 6973 0
 2228 0152 3149     		ldr	r1, .L153+20
 2229 0154 3A23     		mov	r3, #58
 2230 0156 C85C     		ldrb	r0, [r1, r3]
 2231 0158 0918     		add	r1, r1, r0
 2232 015a 0931     		add	r1, r1, #9
 2233 015c FF31     		add	r1, r1, #255
 2234 015e 304A     		ldr	r2, .L153+28
 2235 0160 4C78     		ldrb	r4, [r1, #1]
 2236              	.LVL159:
 2237 0162 1378     		ldrb	r3, [r2]
 2238 0164 E318     		add	r3, r4, r3
 2239 0166 1B06     		lsl	r3, r3, #24
 2240 0168 1B0E     		lsr	r3, r3, #24
 2241 016a 4B70     		strb	r3, [r1, #1]
6974:screens.c     **** 				if( pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_FormationDiameter[PF_
 2242              		.loc 1 6974 0
 2243 016c 9278     		ldrb	r2, [r2, #2]
 2244 016e 9342     		cmp	r3, r2
 2245 0170 24D9     		bls	.L137
6975:screens.c     **** 					pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_FormationDiameter[PF_MAX
 2246              		.loc 1 6975 0
 2247 0172 4A70     		strb	r2, [r1, #1]
 2248 0174 22E0     		b	.L137
 2249              	.LVL160:
 2250              	.L140:
6979:screens.c     **** 				pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] += PF_GW302_Formation2Density[PF_STE
 2251              		.loc 1 6979 0
 2252 0176 2849     		ldr	r1, .L153+20
 2253 0178 3A23     		mov	r3, #58
 2254 017a C85C     		ldrb	r0, [r1, r3]
 2255 017c 0918     		add	r1, r1, r0
 2256 017e 0931     		add	r1, r1, #9
 2257 0180 FF31     		add	r1, r1, #255
 2258 0182 284A     		ldr	r2, .L153+32
 2259 0184 8C79     		ldrb	r4, [r1, #6]
 2260              	.LVL161:
 2261 0186 1378     		ldrb	r3, [r2]
 2262 0188 E318     		add	r3, r4, r3
 2263 018a 1B06     		lsl	r3, r3, #24
 2264 018c 1B0E     		lsr	r3, r3, #24
 2265 018e 8B71     		strb	r3, [r1, #6]
6980:screens.c     **** 				if( pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] > PF_GW302_Formation2Density[PF_
 2266              		.loc 1 6980 0
 2267 0190 9278     		ldrb	r2, [r2, #2]
 2268 0192 9342     		cmp	r3, r2
 2269 0194 12D9     		bls	.L137
6981:screens.c     **** 					pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile] = PF_GW302_Formation2Density[PF_MAX
 2270              		.loc 1 6981 0
 2271 0196 8A71     		strb	r2, [r1, #6]
 2272 0198 10E0     		b	.L137
 2273              	.LVL162:
 2274              	.L141:
6985:screens.c     **** 				pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] += PF_GW302_Formation2Diameter[PF_S
 2275              		.loc 1 6985 0
 2276 019a 1F49     		ldr	r1, .L153+20
 2277 019c 3A23     		mov	r3, #58
 2278 019e C85C     		ldrb	r0, [r1, r3]
 2279 01a0 0918     		add	r1, r1, r0
 2280 01a2 1131     		add	r1, r1, #17
 2281 01a4 FF31     		add	r1, r1, #255
 2282 01a6 204A     		ldr	r2, .L153+36
 2283 01a8 CC78     		ldrb	r4, [r1, #3]
 2284              	.LVL163:
 2285 01aa 1378     		ldrb	r3, [r2]
 2286 01ac E318     		add	r3, r4, r3
 2287 01ae 1B06     		lsl	r3, r3, #24
 2288 01b0 1B0E     		lsr	r3, r3, #24
 2289 01b2 CB70     		strb	r3, [r1, #3]
6986:screens.c     **** 				if( pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] > PF_GW302_Formation2Diameter[P
 2290              		.loc 1 6986 0
 2291 01b4 9278     		ldrb	r2, [r2, #2]
 2292 01b6 9342     		cmp	r3, r2
 2293 01b8 00D9     		bls	.L137
6987:screens.c     **** 					pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile] = PF_GW302_Formation2Diameter[PF_M
 2294              		.loc 1 6987 0
 2295 01ba CA70     		strb	r2, [r1, #3]
 2296              	.L137:
6990:screens.c     **** 			SavecalDelayWithinMenus = 1;
 2297              		.loc 1 6990 0
 2298 01bc 0123     		mov	r3, #1
 2299 01be 1B4A     		ldr	r2, .L153+40
 2300 01c0 1370     		strb	r3, [r2]
6991:screens.c     **** 			valuechanged = 1;
 2301              		.loc 1 6991 0
 2302 01c2 1B4A     		ldr	r2, .L153+44
 2303 01c4 1370     		strb	r3, [r2]
 2304              	.LVL164:
 2305 01c6 4BE0     		b	.L128
 2306              	.LVL165:
 2307              	.L136:
6994:screens.c     **** 		else if( lkey == SW_CU ) // ^
 2308              		.loc 1 6994 0
 2309 01c8 202C     		cmp	r4, #32
 2310 01ca 07D1     		bne	.L142
6996:screens.c     **** 			if( selection )
 2311              		.loc 1 6996 0
 2312 01cc 104B     		ldr	r3, .L153+12
 2313 01ce 1B78     		ldrb	r3, [r3]
 2314 01d0 002B     		cmp	r3, #0
 2315 01d2 45D0     		beq	.L128
6998:screens.c     **** 				selection--;
 2316              		.loc 1 6998 0
 2317 01d4 013B     		sub	r3, r3, #1
 2318 01d6 0E4A     		ldr	r2, .L153+12
 2319 01d8 1370     		strb	r3, [r2]
 2320              	.LVL166:
 2321 01da 41E0     		b	.L128
 2322              	.LVL167:
 2323              	.L142:
7002:screens.c     **** 		else if( lkey == SW_CD ) // V
 2324              		.loc 1 7002 0
 2325 01dc 402C     		cmp	r4, #64
 2326 01de 07D1     		bne	.L143
7004:screens.c     **** 			if( selection < 3 )
 2327              		.loc 1 7004 0
 2328 01e0 0B4B     		ldr	r3, .L153+12
 2329 01e2 1B78     		ldrb	r3, [r3]
 2330 01e4 022B     		cmp	r3, #2
 2331 01e6 3BD8     		bhi	.L128
7006:screens.c     **** 				selection++;
 2332              		.loc 1 7006 0
 2333 01e8 0133     		add	r3, r3, #1
 2334 01ea 094A     		ldr	r2, .L153+12
 2335 01ec 1370     		strb	r3, [r2]
 2336              	.LVL168:
 2337 01ee 37E0     		b	.L128
 2338              	.LVL169:
 2339              	.L143:
7010:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
 2340              		.loc 1 7010 0
 2341 01f0 102C     		cmp	r4, #16
 2342 01f2 03D0     		beq	.L151
 2343 01f4 013C     		sub	r4, r4, #1
 2344              	.LVL170:
 2345 01f6 FF3C     		sub	r4, r4, #255
 2346              	.LVL171:
 2347 01f8 002C     		cmp	r4, #0
 2348 01fa 31D1     		bne	.L128
 2349              	.LVL172:
 2350              	.L151:
7012:screens.c     **** 			escape = 1;
 2351              		.loc 1 7012 0
 2352 01fc 0122     		mov	r2, #1
 2353 01fe 0D4B     		ldr	r3, .L153+48
 2354 0200 1A70     		strb	r2, [r3]
 2355 0202 2DE0     		b	.L128
 2356              	.L154:
 2357              		.align	2
 2358              	.L153:
 2359 0204 00000000 		.word	startup
 2360 0208 00000000 		.word	adm
 2361 020c 34000000 		.word	.LC92
 2362 0210 00000000 		.word	selection
 2363 0214 00000000 		.word	editing
 2364 0218 00000000 		.word	pFac
 2365 021c 00000000 		.word	PF_GW302_FormationDensity
 2366 0220 00000000 		.word	PF_GW302_FormationDiameter
 2367 0224 00000000 		.word	PF_GW302_Formation2Density
 2368 0228 00000000 		.word	PF_GW302_Formation2Diameter
 2369 022c 00000000 		.word	SavecalDelayWithinMenus
 2370 0230 00000000 		.word	valuechanged
 2371 0234 00000000 		.word	escape
 2372              	.LVL173:
 2373              	.L129:
7022:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 2374              		.loc 1 7022 0
 2375 0238 C44B     		ldr	r3, .L155
 2376 023a 1B78     		ldrb	r3, [r3]
 2377 023c 002B     		cmp	r3, #0
 2378 023e 03D1     		bne	.L145
7022:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 2379              		.loc 1 7022 0 is_stmt 0 discriminator 1
 2380 0240 C34B     		ldr	r3, .L155+4
 2381 0242 1B78     		ldrb	r3, [r3]
 2382 0244 002B     		cmp	r3, #0
 2383 0246 0BD0     		beq	.L128
 2384              	.L145:
7024:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 2385              		.loc 1 7024 0 is_stmt 1
 2386 0248 C24B     		ldr	r3, .L155+8
 2387 024a 1B78     		ldrb	r3, [r3]
 2388 024c 032B     		cmp	r3, #3
 2389 024e 07D9     		bls	.L128
7026:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 2390              		.loc 1 7026 0
 2391 0250 0023     		mov	r3, #0
 2392 0252 BE4A     		ldr	r2, .L155
 2393 0254 1370     		strb	r3, [r2]
7027:screens.c     **** 				SavecalDelayWithinMenus = 0;
 2394              		.loc 1 7027 0
 2395 0256 BE4A     		ldr	r2, .L155+4
 2396 0258 1370     		strb	r3, [r2]
7028:screens.c     **** 				savecal = 1;
 2397              		.loc 1 7028 0
 2398 025a 0122     		mov	r2, #1
 2399 025c BE4B     		ldr	r3, .L155+12
 2400 025e 1A70     		strb	r2, [r3]
 2401              	.LVL174:
 2402              	.L128:
7037:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
 2403              		.loc 1 7037 0
 2404 0260 6423     		mov	r3, #100
 2405 0262 0093     		str	r3, [sp]
 2406 0264 4022     		mov	r2, #64
 2407 0266 0192     		str	r2, [sp, #4]
 2408 0268 BC48     		ldr	r0, .L155+16
 2409 026a 1521     		mov	r1, #21
 2410 026c 1522     		mov	r2, #21
 2411 026e 9C23     		mov	r3, #156
 2412 0270 FFF7FEFF 		bl	draw_box
 2413              	.LVL175:
7040:screens.c     **** 		display_f1_text( "Formation Density", TSMAX, 24, 21, FIXED );
 2414              		.loc 1 7040 0
 2415 0274 0024     		mov	r4, #0
 2416 0276 0094     		str	r4, [sp]
 2417 0278 B948     		ldr	r0, .L155+20
 2418 027a 1A21     		mov	r1, #26
 2419 027c 1822     		mov	r2, #24
 2420 027e 1523     		mov	r3, #21
 2421 0280 FFF7FEFF 		bl	display_f1_text
 2422              	.LVL176:
7042:screens.c     **** 		display_f1_text( "Formation Dia.", TSMAX, 24, 31, FIXED );
 2423              		.loc 1 7042 0
 2424 0284 0094     		str	r4, [sp]
 2425 0286 B748     		ldr	r0, .L155+24
 2426 0288 1A21     		mov	r1, #26
 2427 028a 1822     		mov	r2, #24
 2428 028c 1F23     		mov	r3, #31
 2429 028e FFF7FEFF 		bl	display_f1_text
 2430              	.LVL177:
7043:screens.c     **** 		display_f1_text( "%", TSMAX, 149, 31, FIXED );
 2431              		.loc 1 7043 0
 2432 0292 B54D     		ldr	r5, .L155+28
 2433 0294 0094     		str	r4, [sp]
 2434 0296 281C     		mov	r0, r5
 2435 0298 1A21     		mov	r1, #26
 2436 029a 9522     		mov	r2, #149
 2437 029c 1F23     		mov	r3, #31
 2438 029e FFF7FEFF 		bl	display_f1_text
 2439              	.LVL178:
7045:screens.c     **** 		display_f1_text( "Formation2 Density", TSMAX, 24, 41, FIXED );
 2440              		.loc 1 7045 0
 2441 02a2 0094     		str	r4, [sp]
 2442 02a4 B148     		ldr	r0, .L155+32
 2443 02a6 1A21     		mov	r1, #26
 2444 02a8 1822     		mov	r2, #24
 2445 02aa 2923     		mov	r3, #41
 2446 02ac FFF7FEFF 		bl	display_f1_text
 2447              	.LVL179:
7047:screens.c     **** 		display_f1_text( "Formation2 Dia.", TSMAX, 24, 51, FIXED );
 2448              		.loc 1 7047 0
 2449 02b0 0094     		str	r4, [sp]
 2450 02b2 AF48     		ldr	r0, .L155+36
 2451 02b4 1A21     		mov	r1, #26
 2452 02b6 1822     		mov	r2, #24
 2453 02b8 3323     		mov	r3, #51
 2454 02ba FFF7FEFF 		bl	display_f1_text
 2455              	.LVL180:
7048:screens.c     **** 		display_f1_text( "%", TSMAX, 149, 51, FIXED );
 2456              		.loc 1 7048 0
 2457 02be 0094     		str	r4, [sp]
 2458 02c0 281C     		mov	r0, r5
 2459 02c2 1A21     		mov	r1, #26
 2460 02c4 9522     		mov	r2, #149
 2461 02c6 3323     		mov	r3, #51
 2462 02c8 FFF7FEFF 		bl	display_f1_text
 2463              	.LVL181:
7060:screens.c     **** 		display_number( (float)pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile],
 2464              		.loc 1 7060 0
 2465 02cc A94D     		ldr	r5, .L155+40
 2466 02ce 3A23     		mov	r3, #58
 2467 02d0 9846     		mov	r8, r3
 2468 02d2 EB5C     		ldrb	r3, [r5, r3]
 2469 02d4 EB18     		add	r3, r5, r3
 2470 02d6 0133     		add	r3, r3, #1
 2471 02d8 FF33     		add	r3, r3, #255
 2472 02da 1879     		ldrb	r0, [r3, #4]
 2473 02dc FFF7FEFF 		bl	__aeabi_ui2f
 2474              	.LVL182:
 2475 02e0 8246     		mov	sl, r0
7061:screens.c     **** 				(float)PF_GW302_FormationDensity[PF_MIN], (float)PF_GW302_FormationDensity[PF_MAX],
 2476              		.loc 1 7061 0
 2477 02e2 A54E     		ldr	r6, .L155+44
7060:screens.c     **** 		display_number( (float)pFac.pf.GW302_FormationDensity[pFac.pf.GW302_BaleProfile],
 2478              		.loc 1 7060 0
 2479 02e4 7078     		ldrb	r0, [r6, #1]
 2480 02e6 FFF7FEFF 		bl	__aeabi_ui2f
 2481              	.LVL183:
 2482 02ea 8146     		mov	r9, r0
 2483 02ec B078     		ldrb	r0, [r6, #2]
 2484 02ee FFF7FEFF 		bl	__aeabi_ui2f
 2485              	.LVL184:
 2486 02f2 021C     		add	r2, r0, #0
 2487 02f4 FE26     		mov	r6, #254
 2488 02f6 B605     		lsl	r6, r6, #22
 2489 02f8 0094     		str	r4, [sp]
 2490 02fa 9227     		mov	r7, #146
 2491 02fc 0197     		str	r7, [sp, #4]
 2492 02fe 1523     		mov	r3, #21
 2493 0300 0293     		str	r3, [sp, #8]
 2494 0302 0C23     		mov	r3, #12
 2495 0304 0393     		str	r3, [sp, #12]
 2496 0306 1023     		mov	r3, #16
 2497 0308 0493     		str	r3, [sp, #16]
 2498 030a 9C4B     		ldr	r3, .L155+48
 2499 030c 9B46     		mov	fp, r3
 2500 030e 0593     		str	r3, [sp, #20]
 2501 0310 0694     		str	r4, [sp, #24]
 2502 0312 0794     		str	r4, [sp, #28]
 2503 0314 5046     		mov	r0, sl
 2504 0316 4946     		mov	r1, r9
 2505 0318 331C     		add	r3, r6, #0
 2506 031a FFF7FEFF 		bl	display_number
 2507              	.LVL185:
7063:screens.c     **** 		display_number( (float)pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile],
 2508              		.loc 1 7063 0
 2509 031e 4246     		mov	r2, r8
 2510 0320 AB5C     		ldrb	r3, [r5, r2]
 2511 0322 EB18     		add	r3, r5, r3
 2512 0324 0933     		add	r3, r3, #9
 2513 0326 FF33     		add	r3, r3, #255
 2514 0328 5878     		ldrb	r0, [r3, #1]
 2515 032a FFF7FEFF 		bl	__aeabi_ui2f
 2516              	.LVL186:
 2517 032e 0990     		str	r0, [sp, #36]
7064:screens.c     **** 				(float)PF_GW302_FormationDiameter[PF_MIN], (float)PF_GW302_FormationDiameter[PF_MAX],
 2518              		.loc 1 7064 0
 2519 0330 934B     		ldr	r3, .L155+52
 2520 0332 9946     		mov	r9, r3
7063:screens.c     **** 		display_number( (float)pFac.pf.GW302_FormationDiameter[pFac.pf.GW302_BaleProfile],
 2521              		.loc 1 7063 0
 2522 0334 5878     		ldrb	r0, [r3, #1]
 2523 0336 FFF7FEFF 		bl	__aeabi_ui2f
 2524              	.LVL187:
 2525 033a 8246     		mov	sl, r0
 2526 033c 4B46     		mov	r3, r9
 2527 033e 9878     		ldrb	r0, [r3, #2]
 2528 0340 FFF7FEFF 		bl	__aeabi_ui2f
 2529              	.LVL188:
 2530 0344 021C     		add	r2, r0, #0
 2531 0346 0094     		str	r4, [sp]
 2532 0348 0197     		str	r7, [sp, #4]
 2533 034a 1F23     		mov	r3, #31
 2534 034c 0293     		str	r3, [sp, #8]
 2535 034e 1223     		mov	r3, #18
 2536 0350 0393     		str	r3, [sp, #12]
 2537 0352 1023     		mov	r3, #16
 2538 0354 0493     		str	r3, [sp, #16]
 2539 0356 5B46     		mov	r3, fp
 2540 0358 0593     		str	r3, [sp, #20]
 2541 035a 0694     		str	r4, [sp, #24]
 2542 035c 0794     		str	r4, [sp, #28]
 2543 035e 0998     		ldr	r0, [sp, #36]
 2544 0360 5146     		mov	r1, sl
 2545 0362 331C     		add	r3, r6, #0
 2546 0364 FFF7FEFF 		bl	display_number
 2547              	.LVL189:
7066:screens.c     **** 		display_number( (float)pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile],
 2548              		.loc 1 7066 0
 2549 0368 4246     		mov	r2, r8
 2550 036a AB5C     		ldrb	r3, [r5, r2]
 2551 036c EB18     		add	r3, r5, r3
 2552 036e 0933     		add	r3, r3, #9
 2553 0370 FF33     		add	r3, r3, #255
 2554 0372 9879     		ldrb	r0, [r3, #6]
 2555 0374 FFF7FEFF 		bl	__aeabi_ui2f
 2556              	.LVL190:
 2557 0378 0990     		str	r0, [sp, #36]
7067:screens.c     **** 				(float)PF_GW302_Formation2Density[PF_MIN], (float)PF_GW302_Formation2Density[PF_MAX],
 2558              		.loc 1 7067 0
 2559 037a 824B     		ldr	r3, .L155+56
 2560 037c 9946     		mov	r9, r3
7066:screens.c     **** 		display_number( (float)pFac.pf.GW302_Formation2Density[pFac.pf.GW302_BaleProfile],
 2561              		.loc 1 7066 0
 2562 037e 5878     		ldrb	r0, [r3, #1]
 2563 0380 FFF7FEFF 		bl	__aeabi_ui2f
 2564              	.LVL191:
 2565 0384 8246     		mov	sl, r0
 2566 0386 4B46     		mov	r3, r9
 2567 0388 9878     		ldrb	r0, [r3, #2]
 2568 038a FFF7FEFF 		bl	__aeabi_ui2f
 2569              	.LVL192:
 2570 038e 021C     		add	r2, r0, #0
 2571 0390 0094     		str	r4, [sp]
 2572 0392 0197     		str	r7, [sp, #4]
 2573 0394 2923     		mov	r3, #41
 2574 0396 0293     		str	r3, [sp, #8]
 2575 0398 0C23     		mov	r3, #12
 2576 039a 0393     		str	r3, [sp, #12]
 2577 039c 1023     		mov	r3, #16
 2578 039e 0493     		str	r3, [sp, #16]
 2579 03a0 5B46     		mov	r3, fp
 2580 03a2 0593     		str	r3, [sp, #20]
 2581 03a4 0694     		str	r4, [sp, #24]
 2582 03a6 0794     		str	r4, [sp, #28]
 2583 03a8 0998     		ldr	r0, [sp, #36]
 2584 03aa 5146     		mov	r1, sl
 2585 03ac 331C     		add	r3, r6, #0
 2586 03ae FFF7FEFF 		bl	display_number
 2587              	.LVL193:
7069:screens.c     **** 		display_number( (float)pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile],
 2588              		.loc 1 7069 0
 2589 03b2 4246     		mov	r2, r8
 2590 03b4 AB5C     		ldrb	r3, [r5, r2]
 2591 03b6 ED18     		add	r5, r5, r3
 2592 03b8 1135     		add	r5, r5, #17
 2593 03ba FF35     		add	r5, r5, #255
 2594 03bc E878     		ldrb	r0, [r5, #3]
 2595 03be FFF7FEFF 		bl	__aeabi_ui2f
 2596              	.LVL194:
 2597 03c2 8146     		mov	r9, r0
7070:screens.c     **** 				(float)PF_GW302_Formation2Diameter[PF_MIN], (float)PF_GW302_Formation2Diameter[PF_MAX],
 2598              		.loc 1 7070 0
 2599 03c4 704D     		ldr	r5, .L155+60
7069:screens.c     **** 		display_number( (float)pFac.pf.GW302_Formation2Diameter[pFac.pf.GW302_BaleProfile],
 2600              		.loc 1 7069 0
 2601 03c6 6878     		ldrb	r0, [r5, #1]
 2602 03c8 FFF7FEFF 		bl	__aeabi_ui2f
 2603              	.LVL195:
 2604 03cc 8046     		mov	r8, r0
 2605 03ce A878     		ldrb	r0, [r5, #2]
 2606 03d0 FFF7FEFF 		bl	__aeabi_ui2f
 2607              	.LVL196:
 2608 03d4 021C     		add	r2, r0, #0
 2609 03d6 0094     		str	r4, [sp]
 2610 03d8 0197     		str	r7, [sp, #4]
 2611 03da 3323     		mov	r3, #51
 2612 03dc 0293     		str	r3, [sp, #8]
 2613 03de 1223     		mov	r3, #18
 2614 03e0 0393     		str	r3, [sp, #12]
 2615 03e2 1023     		mov	r3, #16
 2616 03e4 0493     		str	r3, [sp, #16]
 2617 03e6 5B46     		mov	r3, fp
 2618 03e8 0593     		str	r3, [sp, #20]
 2619 03ea 0694     		str	r4, [sp, #24]
 2620 03ec 0794     		str	r4, [sp, #28]
 2621 03ee 4846     		mov	r0, r9
 2622 03f0 4146     		mov	r1, r8
 2623 03f2 331C     		add	r3, r6, #0
 2624 03f4 FFF7FEFF 		bl	display_number
 2625              	.LVL197:
7080:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs    
 2626              		.loc 1 7080 0
 2627 03f8 7E23     		mov	r3, #126
 2628 03fa 0093     		str	r3, [sp]
 2629 03fc 4022     		mov	r2, #64
 2630 03fe 0192     		str	r2, [sp, #4]
 2631 0400 5648     		ldr	r0, .L155+16
 2632 0402 0121     		mov	r1, #1
 2633 0404 6622     		mov	r2, #102
 2634 0406 9E23     		mov	r3, #158
 2635 0408 FFF7FEFF 		bl	draw_box
 2636              	.LVL198:
7081:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
 2637              		.loc 1 7081 0
 2638 040c 5F4B     		ldr	r3, .L155+64
 2639 040e 1B78     		ldrb	r3, [r3]
 2640 0410 022B     		cmp	r3, #2
 2641 0412 02D8     		bhi	.L150
 2642 0414 002B     		cmp	r3, #0
 2643 0416 29D1     		bne	.L148
 2644 0418 02E0     		b	.L152
 2645              	.L150:
 2646 041a 032B     		cmp	r3, #3
 2647 041c 71D1     		bne	.L146
 2648 041e 4BE0     		b	.L149
 2649              	.L152:
7084:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 2650              		.loc 1 7084 0
 2651 0420 4E4C     		ldr	r4, .L155+16
 2652 0422 0225     		mov	r5, #2
 2653 0424 0095     		str	r5, [sp]
 2654 0426 201C     		mov	r0, r4
 2655 0428 5949     		ldr	r1, .L155+68
 2656 042a 0022     		mov	r2, #0
 2657 042c 6B23     		mov	r3, #107
 2658 042e FFF7FEFF 		bl	write_bitmap
 2659              	.LVL199:
7085:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 2660              		.loc 1 7085 0
 2661 0432 0095     		str	r5, [sp]
 2662 0434 201C     		mov	r0, r4
 2663 0436 5749     		ldr	r1, .L155+72
 2664 0438 1F22     		mov	r2, #31
 2665 043a 6B23     		mov	r3, #107
 2666 043c FFF7FEFF 		bl	write_bitmap
 2667              	.LVL200:
7086:screens.c     **** 			write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 2668              		.loc 1 7086 0
 2669 0440 0095     		str	r5, [sp]
 2670 0442 201C     		mov	r0, r4
 2671 0444 5449     		ldr	r1, .L155+76
 2672 0446 3E22     		mov	r2, #62
 2673 0448 6623     		mov	r3, #102
 2674 044a FFF7FEFF 		bl	write_bitmap
 2675              	.LVL201:
7087:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 2676              		.loc 1 7087 0
 2677 044e 0095     		str	r5, [sp]
 2678 0450 201C     		mov	r0, r4
 2679 0452 5249     		ldr	r1, .L155+80
 2680 0454 6322     		mov	r2, #99
 2681 0456 6B23     		mov	r3, #107
 2682 0458 FFF7FEFF 		bl	write_bitmap
 2683              	.LVL202:
7088:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 2684              		.loc 1 7088 0
 2685 045c 0095     		str	r5, [sp]
 2686 045e 201C     		mov	r0, r4
 2687 0460 4F49     		ldr	r1, .L155+84
 2688 0462 8222     		mov	r2, #130
 2689 0464 6B23     		mov	r3, #107
 2690 0466 FFF7FEFF 		bl	write_bitmap
 2691              	.LVL203:
7089:screens.c     **** 			break;
 2692              		.loc 1 7089 0
 2693 046a 4AE0     		b	.L146
 2694              	.L148:
7093:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 2695              		.loc 1 7093 0
 2696 046c 3B4C     		ldr	r4, .L155+16
 2697 046e 0225     		mov	r5, #2
 2698 0470 0095     		str	r5, [sp]
 2699 0472 201C     		mov	r0, r4
 2700 0474 4649     		ldr	r1, .L155+68
 2701 0476 0022     		mov	r2, #0
 2702 0478 6B23     		mov	r3, #107
 2703 047a FFF7FEFF 		bl	write_bitmap
 2704              	.LVL204:
7094:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 2705              		.loc 1 7094 0
 2706 047e 0095     		str	r5, [sp]
 2707 0480 201C     		mov	r0, r4
 2708 0482 4449     		ldr	r1, .L155+72
 2709 0484 1F22     		mov	r2, #31
 2710 0486 6B23     		mov	r3, #107
 2711 0488 FFF7FEFF 		bl	write_bitmap
 2712              	.LVL205:
7095:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 2713              		.loc 1 7095 0
 2714 048c 0095     		str	r5, [sp]
 2715 048e 201C     		mov	r0, r4
 2716 0490 4449     		ldr	r1, .L155+88
 2717 0492 3E22     		mov	r2, #62
 2718 0494 6623     		mov	r3, #102
 2719 0496 FFF7FEFF 		bl	write_bitmap
 2720              	.LVL206:
7096:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 2721              		.loc 1 7096 0
 2722 049a 0095     		str	r5, [sp]
 2723 049c 201C     		mov	r0, r4
 2724 049e 3F49     		ldr	r1, .L155+80
 2725 04a0 6322     		mov	r2, #99
 2726 04a2 6B23     		mov	r3, #107
 2727 04a4 FFF7FEFF 		bl	write_bitmap
 2728              	.LVL207:
7097:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 2729              		.loc 1 7097 0
 2730 04a8 0095     		str	r5, [sp]
 2731 04aa 201C     		mov	r0, r4
 2732 04ac 3C49     		ldr	r1, .L155+84
 2733 04ae 8222     		mov	r2, #130
 2734 04b0 6B23     		mov	r3, #107
 2735 04b2 FFF7FEFF 		bl	write_bitmap
 2736              	.LVL208:
7098:screens.c     **** 			break;
 2737              		.loc 1 7098 0
 2738 04b6 24E0     		b	.L146
 2739              	.L149:
7101:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 2740              		.loc 1 7101 0
 2741 04b8 284C     		ldr	r4, .L155+16
 2742 04ba 0225     		mov	r5, #2
 2743 04bc 0095     		str	r5, [sp]
 2744 04be 201C     		mov	r0, r4
 2745 04c0 3349     		ldr	r1, .L155+68
 2746 04c2 0022     		mov	r2, #0
 2747 04c4 6B23     		mov	r3, #107
 2748 04c6 FFF7FEFF 		bl	write_bitmap
 2749              	.LVL209:
7102:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 2750              		.loc 1 7102 0
 2751 04ca 0095     		str	r5, [sp]
 2752 04cc 201C     		mov	r0, r4
 2753 04ce 3149     		ldr	r1, .L155+72
 2754 04d0 1F22     		mov	r2, #31
 2755 04d2 6B23     		mov	r3, #107
 2756 04d4 FFF7FEFF 		bl	write_bitmap
 2757              	.LVL210:
7103:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 2758              		.loc 1 7103 0
 2759 04d8 0095     		str	r5, [sp]
 2760 04da 201C     		mov	r0, r4
 2761 04dc 3249     		ldr	r1, .L155+92
 2762 04de 3E22     		mov	r2, #62
 2763 04e0 6623     		mov	r3, #102
 2764 04e2 FFF7FEFF 		bl	write_bitmap
 2765              	.LVL211:
7104:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 2766              		.loc 1 7104 0
 2767 04e6 0095     		str	r5, [sp]
 2768 04e8 201C     		mov	r0, r4
 2769 04ea 2C49     		ldr	r1, .L155+80
 2770 04ec 6322     		mov	r2, #99
 2771 04ee 6B23     		mov	r3, #107
 2772 04f0 FFF7FEFF 		bl	write_bitmap
 2773              	.LVL212:
7105:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 2774              		.loc 1 7105 0
 2775 04f4 0095     		str	r5, [sp]
 2776 04f6 201C     		mov	r0, r4
 2777 04f8 2949     		ldr	r1, .L155+84
 2778 04fa 8222     		mov	r2, #130
 2779 04fc 6B23     		mov	r3, #107
 2780 04fe FFF7FEFF 		bl	write_bitmap
 2781              	.LVL213:
 2782              	.L146:
7110:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
 2783              		.loc 1 7110 0
 2784 0502 164C     		ldr	r4, .L155+16
 2785 0504 6423     		mov	r3, #100
 2786 0506 0093     		str	r3, [sp]
 2787 0508 4023     		mov	r3, #64
 2788 050a 0193     		str	r3, [sp, #4]
 2789 050c 201C     		mov	r0, r4
 2790 050e 1021     		mov	r1, #16
 2791 0510 1522     		mov	r2, #21
 2792 0512 1423     		mov	r3, #20
 2793 0514 FFF7FEFF 		bl	draw_box
 2794              	.LVL214:
7111:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
 2795              		.loc 1 7111 0
 2796 0518 1C4B     		ldr	r3, .L155+64
 2797 051a 1B78     		ldrb	r3, [r3]
 2798 051c 9A00     		lsl	r2, r3, #2
 2799 051e D318     		add	r3, r2, r3
 2800 0520 5B06     		lsl	r3, r3, #25
 2801 0522 A822     		mov	r2, #168
 2802 0524 5205     		lsl	r2, r2, #21
 2803 0526 9B18     		add	r3, r3, r2
 2804 0528 1B0E     		lsr	r3, r3, #24
 2805 052a 0222     		mov	r2, #2
 2806 052c 0092     		str	r2, [sp]
 2807 052e 201C     		mov	r0, r4
 2808 0530 1E49     		ldr	r1, .L155+96
 2809 0532 1022     		mov	r2, #16
 2810 0534 FFF7FEFF 		bl	write_bitmap
 2811              	.LVL215:
7117:screens.c     **** }
 2812              		.loc 1 7117 0
 2813 0538 0BB0     		add	sp, sp, #44
 2814              		@ sp needed for prologue
 2815 053a 3CBC     		pop	{r2, r3, r4, r5}
 2816 053c 9046     		mov	r8, r2
 2817 053e 9946     		mov	r9, r3
 2818 0540 A246     		mov	sl, r4
 2819 0542 AB46     		mov	fp, r5
 2820 0544 F0BC     		pop	{r4, r5, r6, r7}
 2821 0546 01BC     		pop	{r0}
 2822 0548 0047     		bx	r0
 2823              	.L156:
 2824 054a C046     		.align	2
 2825              	.L155:
 2826 054c 00000000 		.word	SavecalDelayOnMainDisplay
 2827 0550 00000000 		.word	SavecalDelayWithinMenus
 2828 0554 00000000 		.word	swrel
 2829 0558 00000000 		.word	savecal
 2830 055c 00000000 		.word	adm
 2831 0560 40000000 		.word	.LC107
 2832 0564 54000000 		.word	.LC109
 2833 0568 64000000 		.word	.LC111
 2834 056c 68000000 		.word	.LC113
 2835 0570 7C000000 		.word	.LC115
 2836 0574 00000000 		.word	pFac
 2837 0578 00000000 		.word	PF_GW302_FormationDensity
 2838 057c 00000000 		.word	RDSfnt1
 2839 0580 00000000 		.word	PF_GW302_FormationDiameter
 2840 0584 00000000 		.word	PF_GW302_Formation2Density
 2841 0588 00000000 		.word	PF_GW302_Formation2Diameter
 2842 058c 00000000 		.word	selection
 2843 0590 00000000 		.word	TABMINUS
 2844 0594 00000000 		.word	TABPLUS
 2845 0598 00000000 		.word	TABNAV_DL
 2846 059c 00000000 		.word	TAB
 2847 05a0 00000000 		.word	TABESC
 2848 05a4 00000000 		.word	TABNAV_UDL
 2849 05a8 00000000 		.word	TABNAV_UL
 2850 05ac 00000000 		.word	F1_POINT
 2851              		.cfi_endproc
 2852              	.LFE397:
 2854              		.global	__aeabi_fsub
 2855              		.global	__aeabi_fcmplt
 2856              		.global	__aeabi_fadd
 2857              		.global	__aeabi_fcmpgt
 2858              		.section	.text.screen146,"ax",%progbits
 2859              		.align	2
 2860              		.global	screen146
 2861              		.code	16
 2862              		.thumb_func
 2864              	screen146:
 2865              	.LFB395:
6637:screens.c     **** {
 2866              		.loc 1 6637 0
 2867              		.cfi_startproc
 2868              	.LVL216:
 2869 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2870              	.LCFI11:
 2871              		.cfi_def_cfa_offset 20
 2872              		.cfi_offset 4, -20
 2873              		.cfi_offset 5, -16
 2874              		.cfi_offset 6, -12
 2875              		.cfi_offset 7, -8
 2876              		.cfi_offset 14, -4
 2877 0002 5F46     		mov	r7, fp
 2878 0004 5646     		mov	r6, sl
 2879 0006 4D46     		mov	r5, r9
 2880 0008 4446     		mov	r4, r8
 2881 000a F0B4     		push	{r4, r5, r6, r7}
 2882              	.LCFI12:
 2883              		.cfi_def_cfa_offset 36
 2884              		.cfi_offset 8, -36
 2885              		.cfi_offset 9, -32
 2886              		.cfi_offset 10, -28
 2887              		.cfi_offset 11, -24
 2888 000c 89B0     		sub	sp, sp, #36
 2889              	.LCFI13:
 2890              		.cfi_def_cfa_offset 72
 2891 000e 041C     		mov	r4, r0
6642:screens.c     **** 	if( !startup )
 2892              		.loc 1 6642 0
 2893 0010 CA4B     		ldr	r3, .L192
 2894 0012 1B78     		ldrb	r3, [r3]
 2895 0014 002B     		cmp	r3, #0
 2896 0016 10D1     		bne	.L158
6644:screens.c     **** 		startup = 1;
 2897              		.loc 1 6644 0
 2898 0018 0122     		mov	r2, #1
 2899 001a C84B     		ldr	r3, .L192
 2900 001c 1A70     		strb	r2, [r3]
6646:screens.c     **** 		draw_frame( adm );
 2901              		.loc 1 6646 0
 2902 001e C848     		ldr	r0, .L192+4
 2903              	.LVL217:
 2904 0020 FFF7FEFF 		bl	draw_frame
 2905              	.LVL218:
6648:screens.c     **** 		display_f1_text( "Knives Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
 2906              		.loc 1 6648 0
 2907 0024 0A23     		mov	r3, #10
 2908 0026 0093     		str	r3, [sp]
 2909 0028 C648     		ldr	r0, .L192+8
 2910 002a 1A21     		mov	r1, #26
 2911 002c 5022     		mov	r2, #80
 2912 002e 0723     		mov	r3, #7
 2913 0030 FFF7FEFF 		bl	display_f1_text
 2914              	.LVL219:
6650:screens.c     **** 		selection = 0;
 2915              		.loc 1 6650 0
 2916 0034 0022     		mov	r2, #0
 2917 0036 C44B     		ldr	r3, .L192+12
 2918 0038 1A70     		strb	r2, [r3]
 2919              	.LVL220:
 2920              	.L158:
6655:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 2921              		.loc 1 6655 0
 2922 003a 0020     		mov	r0, #0
 2923 003c FFF7FEFF 		bl	ClockDisplay
 2924              	.LVL221:
6658:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 2925              		.loc 1 6658 0
 2926 0040 C24B     		ldr	r3, .L192+16
 2927 0042 1B78     		ldrb	r3, [r3]
 2928 0044 002B     		cmp	r3, #0
 2929 0046 00D0     		beq	.LCB2859
 2930 0048 BEE0     		b	.L159	@long jump
 2931              	.LCB2859:
6658:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 2932              		.loc 1 6658 0 is_stmt 0 discriminator 1
 2933 004a A30F     		lsr	r3, r4, #30
 2934 004c 00D1     		bne	.LCB2863
 2935 004e A7E0     		b	.L160	@long jump
 2936              	.LCB2863:
6660:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 2937              		.loc 1 6660 0 is_stmt 1
 2938 0050 A400     		lsl	r4, r4, #2
 2939              	.LVL222:
 2940 0052 A408     		lsr	r4, r4, #2
 2941              	.LVL223:
6662:screens.c     **** 		if( lkey == SW_OL ) // -
 2942              		.loc 1 6662 0
 2943 0054 8023     		mov	r3, #128
 2944 0056 9B00     		lsl	r3, r3, #2
 2945 0058 9C42     		cmp	r4, r3
 2946 005a 40D1     		bne	.L161
6664:screens.c     **** 			switch( selection )
 2947              		.loc 1 6664 0
 2948 005c BA4B     		ldr	r3, .L192+12
 2949 005e 1B78     		ldrb	r3, [r3]
 2950 0060 012B     		cmp	r3, #1
 2951 0062 15D0     		beq	.L164
 2952 0064 002B     		cmp	r3, #0
 2953 0066 02D0     		beq	.L163
 2954 0068 022B     		cmp	r3, #2
 2955 006a 32D1     		bne	.L162
 2956 006c 21E0     		b	.L165
 2957              	.L163:
6667:screens.c     **** 				pFac.pf.GW302_KnifePressure -= PF_GW302_KnifePressure[PF_STEP];
 2958              		.loc 1 6667 0
 2959 006e B84E     		ldr	r6, .L192+20
 2960 0070 F825     		mov	r5, #248
 2961 0072 B84C     		ldr	r4, .L192+24
 2962              	.LVL224:
 2963 0074 7059     		ldr	r0, [r6, r5]
 2964 0076 2168     		ldr	r1, [r4]
 2965 0078 FFF7FEFF 		bl	__aeabi_fsub
 2966              	.LVL225:
 2967 007c 7051     		str	r0, [r6, r5]
6668:screens.c     **** 				if( pFac.pf.GW302_KnifePressure < PF_GW302_KnifePressure[PF_MIN] )
 2968              		.loc 1 6668 0
 2969 007e 6468     		ldr	r4, [r4, #4]
 2970 0080 211C     		add	r1, r4, #0
 2971 0082 FFF7FEFF 		bl	__aeabi_fcmplt
 2972              	.LVL226:
 2973 0086 0028     		cmp	r0, #0
 2974 0088 23D0     		beq	.L162
6669:screens.c     **** 					pFac.pf.GW302_KnifePressure = PF_GW302_KnifePressure[PF_MIN]; // Limiting to minimum value
 2975              		.loc 1 6669 0
 2976 008a F823     		mov	r3, #248
 2977 008c F450     		str	r4, [r6, r3]
 2978 008e 20E0     		b	.L162
 2979              	.LVL227:
 2980              	.L164:
6673:screens.c     **** 				pFac.pf.GW302_KnifePresWarn -= PF_GW302_KnifePresWarn[PF_STEP];
 2981              		.loc 1 6673 0
 2982 0090 AF4E     		ldr	r6, .L192+20
 2983 0092 FC25     		mov	r5, #252
 2984 0094 B04C     		ldr	r4, .L192+28
 2985              	.LVL228:
 2986 0096 7059     		ldr	r0, [r6, r5]
 2987 0098 2168     		ldr	r1, [r4]
 2988 009a FFF7FEFF 		bl	__aeabi_fsub
 2989              	.LVL229:
 2990 009e 7051     		str	r0, [r6, r5]
6674:screens.c     **** 				if( pFac.pf.GW302_KnifePresWarn < PF_GW302_KnifePresWarn[PF_MIN] )
 2991              		.loc 1 6674 0
 2992 00a0 6468     		ldr	r4, [r4, #4]
 2993 00a2 211C     		add	r1, r4, #0
 2994 00a4 FFF7FEFF 		bl	__aeabi_fcmplt
 2995              	.LVL230:
 2996 00a8 0028     		cmp	r0, #0
 2997 00aa 12D0     		beq	.L162
6675:screens.c     **** 					pFac.pf.GW302_KnifePresWarn = PF_GW302_KnifePresWarn[PF_MIN]; // Limiting to minimum value
 2998              		.loc 1 6675 0
 2999 00ac FC23     		mov	r3, #252
 3000 00ae F450     		str	r4, [r6, r3]
 3001 00b0 0FE0     		b	.L162
 3002              	.LVL231:
 3003              	.L165:
6679:screens.c     **** 				pFac.pf.GW302_DiverterDelay -= PF_GW302_DiverterDelay[PF_STEP];
 3004              		.loc 1 6679 0
 3005 00b2 A74E     		ldr	r6, .L192+20
 3006 00b4 8025     		mov	r5, #128
 3007 00b6 6D00     		lsl	r5, r5, #1
 3008 00b8 A84C     		ldr	r4, .L192+32
 3009              	.LVL232:
 3010 00ba 7059     		ldr	r0, [r6, r5]
 3011 00bc 2168     		ldr	r1, [r4]
 3012 00be FFF7FEFF 		bl	__aeabi_fsub
 3013              	.LVL233:
 3014 00c2 7051     		str	r0, [r6, r5]
6680:screens.c     **** 				if( pFac.pf.GW302_DiverterDelay < PF_GW302_DiverterDelay[PF_MIN] )
 3015              		.loc 1 6680 0
 3016 00c4 6468     		ldr	r4, [r4, #4]
 3017 00c6 211C     		add	r1, r4, #0
 3018 00c8 FFF7FEFF 		bl	__aeabi_fcmplt
 3019              	.LVL234:
 3020 00cc 0028     		cmp	r0, #0
 3021 00ce 00D0     		beq	.L162
6681:screens.c     **** 					pFac.pf.GW302_DiverterDelay = PF_GW302_DiverterDelay[PF_MIN]; // Limiting to minimum value
 3022              		.loc 1 6681 0
 3023 00d0 7451     		str	r4, [r6, r5]
 3024              	.L162:
6684:screens.c     **** 			SavecalDelayWithinMenus = 1;
 3025              		.loc 1 6684 0
 3026 00d2 0123     		mov	r3, #1
 3027 00d4 A24A     		ldr	r2, .L192+36
 3028 00d6 1370     		strb	r3, [r2]
6685:screens.c     **** 			valuechanged = 1;
 3029              		.loc 1 6685 0
 3030 00d8 A24A     		ldr	r2, .L192+40
 3031 00da 1370     		strb	r3, [r2]
 3032              	.LVL235:
 3033 00dc 74E0     		b	.L159
 3034              	.LVL236:
 3035              	.L161:
6688:screens.c     **** 		else if( lkey == SW_IL ) // +
 3036              		.loc 1 6688 0
 3037 00de 042C     		cmp	r4, #4
 3038 00e0 40D1     		bne	.L169
6690:screens.c     **** 			switch( selection )
 3039              		.loc 1 6690 0
 3040 00e2 994B     		ldr	r3, .L192+12
 3041 00e4 1B78     		ldrb	r3, [r3]
 3042 00e6 012B     		cmp	r3, #1
 3043 00e8 15D0     		beq	.L172
 3044 00ea 002B     		cmp	r3, #0
 3045 00ec 02D0     		beq	.L171
 3046 00ee 022B     		cmp	r3, #2
 3047 00f0 32D1     		bne	.L170
 3048 00f2 21E0     		b	.L173
 3049              	.L171:
6693:screens.c     **** 				pFac.pf.GW302_KnifePressure += PF_GW302_KnifePressure[PF_STEP];
 3050              		.loc 1 6693 0
 3051 00f4 964E     		ldr	r6, .L192+20
 3052 00f6 F825     		mov	r5, #248
 3053 00f8 964C     		ldr	r4, .L192+24
 3054              	.LVL237:
 3055 00fa 7059     		ldr	r0, [r6, r5]
 3056 00fc 2168     		ldr	r1, [r4]
 3057 00fe FFF7FEFF 		bl	__aeabi_fadd
 3058              	.LVL238:
 3059 0102 7051     		str	r0, [r6, r5]
6694:screens.c     **** 				if( pFac.pf.GW302_KnifePressure > PF_GW302_KnifePressure[PF_MAX] )
 3060              		.loc 1 6694 0
 3061 0104 A468     		ldr	r4, [r4, #8]
 3062 0106 211C     		add	r1, r4, #0
 3063 0108 FFF7FEFF 		bl	__aeabi_fcmpgt
 3064              	.LVL239:
 3065 010c 0028     		cmp	r0, #0
 3066 010e 23D0     		beq	.L170
6695:screens.c     **** 					pFac.pf.GW302_KnifePressure = PF_GW302_KnifePressure[PF_MAX]; // Limiting to maximum value
 3067              		.loc 1 6695 0
 3068 0110 F823     		mov	r3, #248
 3069 0112 F450     		str	r4, [r6, r3]
 3070 0114 20E0     		b	.L170
 3071              	.LVL240:
 3072              	.L172:
6699:screens.c     **** 				pFac.pf.GW302_KnifePresWarn += PF_GW302_KnifePresWarn[PF_STEP];
 3073              		.loc 1 6699 0
 3074 0116 8E4E     		ldr	r6, .L192+20
 3075 0118 FC25     		mov	r5, #252
 3076 011a 8F4C     		ldr	r4, .L192+28
 3077              	.LVL241:
 3078 011c 7059     		ldr	r0, [r6, r5]
 3079 011e 2168     		ldr	r1, [r4]
 3080 0120 FFF7FEFF 		bl	__aeabi_fadd
 3081              	.LVL242:
 3082 0124 7051     		str	r0, [r6, r5]
6700:screens.c     **** 				if( pFac.pf.GW302_KnifePresWarn > PF_GW302_KnifePresWarn[PF_MAX] )
 3083              		.loc 1 6700 0
 3084 0126 A468     		ldr	r4, [r4, #8]
 3085 0128 211C     		add	r1, r4, #0
 3086 012a FFF7FEFF 		bl	__aeabi_fcmpgt
 3087              	.LVL243:
 3088 012e 0028     		cmp	r0, #0
 3089 0130 12D0     		beq	.L170
6701:screens.c     **** 					pFac.pf.GW302_KnifePresWarn = PF_GW302_KnifePresWarn[PF_MAX]; // Limiting to maximum value
 3090              		.loc 1 6701 0
 3091 0132 FC23     		mov	r3, #252
 3092 0134 F450     		str	r4, [r6, r3]
 3093 0136 0FE0     		b	.L170
 3094              	.LVL244:
 3095              	.L173:
6705:screens.c     **** 				pFac.pf.GW302_DiverterDelay += PF_GW302_DiverterDelay[PF_STEP];
 3096              		.loc 1 6705 0
 3097 0138 854E     		ldr	r6, .L192+20
 3098 013a 8025     		mov	r5, #128
 3099 013c 6D00     		lsl	r5, r5, #1
 3100 013e 874C     		ldr	r4, .L192+32
 3101              	.LVL245:
 3102 0140 7059     		ldr	r0, [r6, r5]
 3103 0142 2168     		ldr	r1, [r4]
 3104 0144 FFF7FEFF 		bl	__aeabi_fadd
 3105              	.LVL246:
 3106 0148 7051     		str	r0, [r6, r5]
6706:screens.c     **** 				if( pFac.pf.GW302_DiverterDelay > PF_GW302_DiverterDelay[PF_MAX] )
 3107              		.loc 1 6706 0
 3108 014a A468     		ldr	r4, [r4, #8]
 3109 014c 211C     		add	r1, r4, #0
 3110 014e FFF7FEFF 		bl	__aeabi_fcmpgt
 3111              	.LVL247:
 3112 0152 0028     		cmp	r0, #0
 3113 0154 00D0     		beq	.L170
6707:screens.c     **** 					pFac.pf.GW302_DiverterDelay = PF_GW302_DiverterDelay[PF_MAX]; // Limiting to maximum value
 3114              		.loc 1 6707 0
 3115 0156 7451     		str	r4, [r6, r5]
 3116              	.L170:
6710:screens.c     **** 			SavecalDelayWithinMenus = 1;
 3117              		.loc 1 6710 0
 3118 0158 0123     		mov	r3, #1
 3119 015a 814A     		ldr	r2, .L192+36
 3120 015c 1370     		strb	r3, [r2]
6711:screens.c     **** 			valuechanged = 1;
 3121              		.loc 1 6711 0
 3122 015e 814A     		ldr	r2, .L192+40
 3123 0160 1370     		strb	r3, [r2]
 3124              	.LVL248:
 3125 0162 31E0     		b	.L159
 3126              	.LVL249:
 3127              	.L169:
6714:screens.c     **** 		else if( lkey == SW_CU ) // ^
 3128              		.loc 1 6714 0
 3129 0164 202C     		cmp	r4, #32
 3130 0166 07D1     		bne	.L177
6716:screens.c     **** 			if( selection )
 3131              		.loc 1 6716 0
 3132 0168 774B     		ldr	r3, .L192+12
 3133 016a 1B78     		ldrb	r3, [r3]
 3134 016c 002B     		cmp	r3, #0
 3135 016e 2BD0     		beq	.L159
6718:screens.c     **** 				selection--;
 3136              		.loc 1 6718 0
 3137 0170 013B     		sub	r3, r3, #1
 3138 0172 754A     		ldr	r2, .L192+12
 3139 0174 1370     		strb	r3, [r2]
 3140              	.LVL250:
 3141 0176 27E0     		b	.L159
 3142              	.LVL251:
 3143              	.L177:
6722:screens.c     **** 		else if( lkey == SW_CD ) // V
 3144              		.loc 1 6722 0
 3145 0178 402C     		cmp	r4, #64
 3146 017a 07D1     		bne	.L178
6724:screens.c     **** 			if( selection < 2 )
 3147              		.loc 1 6724 0
 3148 017c 724B     		ldr	r3, .L192+12
 3149 017e 1B78     		ldrb	r3, [r3]
 3150 0180 012B     		cmp	r3, #1
 3151 0182 21D8     		bhi	.L159
6726:screens.c     **** 				selection++;
 3152              		.loc 1 6726 0
 3153 0184 0133     		add	r3, r3, #1
 3154 0186 704A     		ldr	r2, .L192+12
 3155 0188 1370     		strb	r3, [r2]
 3156              	.LVL252:
 3157 018a 1DE0     		b	.L159
 3158              	.LVL253:
 3159              	.L178:
6730:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
 3160              		.loc 1 6730 0
 3161 018c 102C     		cmp	r4, #16
 3162 018e 03D0     		beq	.L191
 3163 0190 013C     		sub	r4, r4, #1
 3164              	.LVL254:
 3165 0192 FF3C     		sub	r4, r4, #255
 3166              	.LVL255:
 3167 0194 002C     		cmp	r4, #0
 3168 0196 17D1     		bne	.L159
 3169              	.LVL256:
 3170              	.L191:
6732:screens.c     **** 			escape = 1;
 3171              		.loc 1 6732 0
 3172 0198 0122     		mov	r2, #1
 3173 019a 734B     		ldr	r3, .L192+44
 3174 019c 1A70     		strb	r2, [r3]
 3175 019e 13E0     		b	.L159
 3176              	.LVL257:
 3177              	.L160:
6742:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 3178              		.loc 1 6742 0
 3179 01a0 724B     		ldr	r3, .L192+48
 3180 01a2 1B78     		ldrb	r3, [r3]
 3181 01a4 002B     		cmp	r3, #0
 3182 01a6 03D1     		bne	.L180
6742:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 3183              		.loc 1 6742 0 is_stmt 0 discriminator 1
 3184 01a8 6D4B     		ldr	r3, .L192+36
 3185 01aa 1B78     		ldrb	r3, [r3]
 3186 01ac 002B     		cmp	r3, #0
 3187 01ae 0BD0     		beq	.L159
 3188              	.L180:
6744:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 3189              		.loc 1 6744 0 is_stmt 1
 3190 01b0 6F4B     		ldr	r3, .L192+52
 3191 01b2 1B78     		ldrb	r3, [r3]
 3192 01b4 032B     		cmp	r3, #3
 3193 01b6 07D9     		bls	.L159
6746:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 3194              		.loc 1 6746 0
 3195 01b8 0023     		mov	r3, #0
 3196 01ba 6C4A     		ldr	r2, .L192+48
 3197 01bc 1370     		strb	r3, [r2]
6747:screens.c     **** 				SavecalDelayWithinMenus = 0;
 3198              		.loc 1 6747 0
 3199 01be 684A     		ldr	r2, .L192+36
 3200 01c0 1370     		strb	r3, [r2]
6748:screens.c     **** 				savecal = 1;
 3201              		.loc 1 6748 0
 3202 01c2 0122     		mov	r2, #1
 3203 01c4 6B4B     		ldr	r3, .L192+56
 3204 01c6 1A70     		strb	r2, [r3]
 3205              	.LVL258:
 3206              	.L159:
6757:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
 3207              		.loc 1 6757 0
 3208 01c8 5D4A     		ldr	r2, .L192+4
 3209 01ca 9246     		mov	sl, r2
 3210 01cc 6423     		mov	r3, #100
 3211 01ce 0093     		str	r3, [sp]
 3212 01d0 4023     		mov	r3, #64
 3213 01d2 0193     		str	r3, [sp, #4]
 3214 01d4 101C     		mov	r0, r2
 3215 01d6 1521     		mov	r1, #21
 3216 01d8 1522     		mov	r2, #21
 3217 01da 9C23     		mov	r3, #156
 3218 01dc FFF7FEFF 		bl	draw_box
 3219              	.LVL259:
6760:screens.c     **** 		display_f1_text( "Knife Pressure",       TSMAX, 24, 21, FIXED );
 3220              		.loc 1 6760 0
 3221 01e0 0024     		mov	r4, #0
 3222 01e2 0094     		str	r4, [sp]
 3223 01e4 6448     		ldr	r0, .L192+60
 3224 01e6 1A21     		mov	r1, #26
 3225 01e8 1822     		mov	r2, #24
 3226 01ea 1523     		mov	r3, #21
 3227 01ec FFF7FEFF 		bl	display_f1_text
 3228              	.LVL260:
6761:screens.c     **** 		display_f1_text( "V", TSMAX, 146, 21, FIXED );
 3229              		.loc 1 6761 0
 3230 01f0 624D     		ldr	r5, .L192+64
 3231 01f2 0094     		str	r4, [sp]
 3232 01f4 281C     		mov	r0, r5
 3233 01f6 1A21     		mov	r1, #26
 3234 01f8 9222     		mov	r2, #146
 3235 01fa 1523     		mov	r3, #21
 3236 01fc FFF7FEFF 		bl	display_f1_text
 3237              	.LVL261:
6763:screens.c     **** 		display_f1_text( "Knife Pres. Warn",   TSMAX, 24, 31, FIXED );
 3238              		.loc 1 6763 0
 3239 0200 0094     		str	r4, [sp]
 3240 0202 5F48     		ldr	r0, .L192+68
 3241 0204 1A21     		mov	r1, #26
 3242 0206 1822     		mov	r2, #24
 3243 0208 1F23     		mov	r3, #31
 3244 020a FFF7FEFF 		bl	display_f1_text
 3245              	.LVL262:
6764:screens.c     **** 		display_f1_text( "V", TSMAX, 146, 31, FIXED );
 3246              		.loc 1 6764 0
 3247 020e 0094     		str	r4, [sp]
 3248 0210 281C     		mov	r0, r5
 3249 0212 1A21     		mov	r1, #26
 3250 0214 9222     		mov	r2, #146
 3251 0216 1F23     		mov	r3, #31
 3252 0218 FFF7FEFF 		bl	display_f1_text
 3253              	.LVL263:
6766:screens.c     **** 		display_f1_text( "Diverter Delay",   TSMAX, 24, 41, FIXED );
 3254              		.loc 1 6766 0
 3255 021c 0094     		str	r4, [sp]
 3256 021e 5948     		ldr	r0, .L192+72
 3257 0220 1A21     		mov	r1, #26
 3258 0222 1822     		mov	r2, #24
 3259 0224 2923     		mov	r3, #41
 3260 0226 FFF7FEFF 		bl	display_f1_text
 3261              	.LVL264:
6767:screens.c     **** 		display_f1_text( "s", TSMAX, 146, 41, FIXED );
 3262              		.loc 1 6767 0
 3263 022a 0094     		str	r4, [sp]
 3264 022c 5648     		ldr	r0, .L192+76
 3265 022e 1A21     		mov	r1, #26
 3266 0230 9222     		mov	r2, #146
 3267 0232 2923     		mov	r3, #41
 3268 0234 FFF7FEFF 		bl	display_f1_text
 3269              	.LVL265:
6779:screens.c     **** 		display_number( (float)pFac.pf.GW302_KnifePressure,
 3270              		.loc 1 6779 0
 3271 0238 454A     		ldr	r2, .L192+20
 3272 023a 9146     		mov	r9, r2
 3273 023c F823     		mov	r3, #248
 3274 023e D058     		ldr	r0, [r2, r3]
 3275 0240 444B     		ldr	r3, .L192+24
 3276 0242 5968     		ldr	r1, [r3, #4]
 3277 0244 9A68     		ldr	r2, [r3, #8]
 3278 0246 FE25     		mov	r5, #254
 3279 0248 AD05     		lsl	r5, r5, #22
 3280 024a 0223     		mov	r3, #2
 3281 024c 9B46     		mov	fp, r3
 3282 024e 0093     		str	r3, [sp]
 3283 0250 8F23     		mov	r3, #143
 3284 0252 9846     		mov	r8, r3
 3285 0254 0193     		str	r3, [sp, #4]
 3286 0256 1523     		mov	r3, #21
 3287 0258 0293     		str	r3, [sp, #8]
 3288 025a 1823     		mov	r3, #24
 3289 025c 0393     		str	r3, [sp, #12]
 3290 025e 1027     		mov	r7, #16
 3291 0260 0497     		str	r7, [sp, #16]
 3292 0262 4A4E     		ldr	r6, .L192+80
 3293 0264 0596     		str	r6, [sp, #20]
 3294 0266 0694     		str	r4, [sp, #24]
 3295 0268 0794     		str	r4, [sp, #28]
 3296 026a 2B1C     		add	r3, r5, #0
 3297 026c FFF7FEFF 		bl	display_number
 3298              	.LVL266:
6782:screens.c     **** 		display_number( (float)pFac.pf.GW302_KnifePresWarn,
 3299              		.loc 1 6782 0
 3300 0270 FC23     		mov	r3, #252
 3301 0272 4A46     		mov	r2, r9
 3302 0274 D058     		ldr	r0, [r2, r3]
 3303 0276 384B     		ldr	r3, .L192+28
 3304 0278 5968     		ldr	r1, [r3, #4]
 3305 027a 9A68     		ldr	r2, [r3, #8]
 3306 027c 5B46     		mov	r3, fp
 3307 027e 0093     		str	r3, [sp]
 3308 0280 4346     		mov	r3, r8
 3309 0282 0193     		str	r3, [sp, #4]
 3310 0284 1F23     		mov	r3, #31
 3311 0286 0293     		str	r3, [sp, #8]
 3312 0288 1823     		mov	r3, #24
 3313 028a 0393     		str	r3, [sp, #12]
 3314 028c 0497     		str	r7, [sp, #16]
 3315 028e 0596     		str	r6, [sp, #20]
 3316 0290 0694     		str	r4, [sp, #24]
 3317 0292 0794     		str	r4, [sp, #28]
 3318 0294 2B1C     		add	r3, r5, #0
 3319 0296 FFF7FEFF 		bl	display_number
 3320              	.LVL267:
6785:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiverterDelay,
 3321              		.loc 1 6785 0
 3322 029a 8023     		mov	r3, #128
 3323 029c 5B00     		lsl	r3, r3, #1
 3324 029e 4A46     		mov	r2, r9
 3325 02a0 D058     		ldr	r0, [r2, r3]
 3326 02a2 2E4B     		ldr	r3, .L192+32
 3327 02a4 5968     		ldr	r1, [r3, #4]
 3328 02a6 9A68     		ldr	r2, [r3, #8]
 3329 02a8 0123     		mov	r3, #1
 3330 02aa 0093     		str	r3, [sp]
 3331 02ac 4346     		mov	r3, r8
 3332 02ae 0193     		str	r3, [sp, #4]
 3333 02b0 2923     		mov	r3, #41
 3334 02b2 0293     		str	r3, [sp, #8]
 3335 02b4 1223     		mov	r3, #18
 3336 02b6 0393     		str	r3, [sp, #12]
 3337 02b8 0497     		str	r7, [sp, #16]
 3338 02ba 0596     		str	r6, [sp, #20]
 3339 02bc 0694     		str	r4, [sp, #24]
 3340 02be 0794     		str	r4, [sp, #28]
 3341 02c0 2B1C     		add	r3, r5, #0
 3342 02c2 FFF7FEFF 		bl	display_number
 3343              	.LVL268:
6796:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs    
 3344              		.loc 1 6796 0
 3345 02c6 7E23     		mov	r3, #126
 3346 02c8 0093     		str	r3, [sp]
 3347 02ca 4022     		mov	r2, #64
 3348 02cc 0192     		str	r2, [sp, #4]
 3349 02ce 5046     		mov	r0, sl
 3350 02d0 0121     		mov	r1, #1
 3351 02d2 6622     		mov	r2, #102
 3352 02d4 9E23     		mov	r3, #158
 3353 02d6 FFF7FEFF 		bl	draw_box
 3354              	.LVL269:
6797:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
 3355              		.loc 1 6797 0
 3356 02da 1B4B     		ldr	r3, .L192+12
 3357 02dc 1B78     		ldrb	r3, [r3]
 3358 02de 012B     		cmp	r3, #1
 3359 02e0 60D0     		beq	.L183
 3360 02e2 002B     		cmp	r3, #0
 3361 02e4 03D0     		beq	.L182
 3362 02e6 022B     		cmp	r3, #2
 3363 02e8 00D0     		beq	.LCB3297
 3364 02ea A6E0     		b	.L181	@long jump
 3365              	.LCB3297:
 3366 02ec 80E0     		b	.L184
 3367              	.L182:
6800:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 3368              		.loc 1 6800 0
 3369 02ee 144C     		ldr	r4, .L192+4
 3370 02f0 0225     		mov	r5, #2
 3371 02f2 0095     		str	r5, [sp]
 3372 02f4 201C     		mov	r0, r4
 3373 02f6 2649     		ldr	r1, .L192+84
 3374 02f8 0022     		mov	r2, #0
 3375 02fa 6B23     		mov	r3, #107
 3376 02fc FFF7FEFF 		bl	write_bitmap
 3377              	.LVL270:
6801:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 3378              		.loc 1 6801 0
 3379 0300 0095     		str	r5, [sp]
 3380 0302 201C     		mov	r0, r4
 3381 0304 2349     		ldr	r1, .L192+88
 3382 0306 1F22     		mov	r2, #31
 3383 0308 6B23     		mov	r3, #107
 3384 030a FFF7FEFF 		bl	write_bitmap
 3385              	.LVL271:
6802:screens.c     **** 			write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 3386              		.loc 1 6802 0
 3387 030e 0095     		str	r5, [sp]
 3388 0310 201C     		mov	r0, r4
 3389 0312 2149     		ldr	r1, .L192+92
 3390 0314 3E22     		mov	r2, #62
 3391 0316 6623     		mov	r3, #102
 3392 0318 FFF7FEFF 		bl	write_bitmap
 3393              	.LVL272:
6803:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 3394              		.loc 1 6803 0
 3395 031c 0095     		str	r5, [sp]
 3396 031e 201C     		mov	r0, r4
 3397 0320 1E49     		ldr	r1, .L192+96
 3398 0322 6322     		mov	r2, #99
 3399 0324 6B23     		mov	r3, #107
 3400 0326 FFF7FEFF 		bl	write_bitmap
 3401              	.LVL273:
6804:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 3402              		.loc 1 6804 0
 3403 032a 0095     		str	r5, [sp]
 3404 032c 201C     		mov	r0, r4
 3405 032e 1C49     		ldr	r1, .L192+100
 3406 0330 8222     		mov	r2, #130
 3407 0332 6B23     		mov	r3, #107
 3408 0334 FFF7FEFF 		bl	write_bitmap
 3409              	.LVL274:
6805:screens.c     **** 			break;
 3410              		.loc 1 6805 0
 3411 0338 7FE0     		b	.L181
 3412              	.L193:
 3413 033a C046     		.align	2
 3414              	.L192:
 3415 033c 00000000 		.word	startup
 3416 0340 00000000 		.word	adm
 3417 0344 8C000000 		.word	.LC128
 3418 0348 00000000 		.word	selection
 3419 034c 00000000 		.word	editing
 3420 0350 00000000 		.word	pFac
 3421 0354 00000000 		.word	PF_GW302_KnifePressure
 3422 0358 00000000 		.word	PF_GW302_KnifePresWarn
 3423 035c 00000000 		.word	PF_GW302_DiverterDelay
 3424 0360 00000000 		.word	SavecalDelayWithinMenus
 3425 0364 00000000 		.word	valuechanged
 3426 0368 00000000 		.word	escape
 3427 036c 00000000 		.word	SavecalDelayOnMainDisplay
 3428 0370 00000000 		.word	swrel
 3429 0374 00000000 		.word	savecal
 3430 0378 9C000000 		.word	.LC142
 3431 037c 00000000 		.word	.LC64
 3432 0380 AC000000 		.word	.LC145
 3433 0384 C0000000 		.word	.LC147
 3434 0388 D0000000 		.word	.LC149
 3435 038c 00000000 		.word	RDSfnt1
 3436 0390 00000000 		.word	TABMINUS
 3437 0394 00000000 		.word	TABPLUS
 3438 0398 00000000 		.word	TABNAV_DL
 3439 039c 00000000 		.word	TAB
 3440 03a0 00000000 		.word	TABESC
 3441              	.L183:
6808:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 3442              		.loc 1 6808 0
 3443 03a4 374C     		ldr	r4, .L194
 3444 03a6 0225     		mov	r5, #2
 3445 03a8 0095     		str	r5, [sp]
 3446 03aa 201C     		mov	r0, r4
 3447 03ac 3649     		ldr	r1, .L194+4
 3448 03ae 0022     		mov	r2, #0
 3449 03b0 6B23     		mov	r3, #107
 3450 03b2 FFF7FEFF 		bl	write_bitmap
 3451              	.LVL275:
6809:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 3452              		.loc 1 6809 0
 3453 03b6 0095     		str	r5, [sp]
 3454 03b8 201C     		mov	r0, r4
 3455 03ba 3449     		ldr	r1, .L194+8
 3456 03bc 1F22     		mov	r2, #31
 3457 03be 6B23     		mov	r3, #107
 3458 03c0 FFF7FEFF 		bl	write_bitmap
 3459              	.LVL276:
6810:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 3460              		.loc 1 6810 0
 3461 03c4 0095     		str	r5, [sp]
 3462 03c6 201C     		mov	r0, r4
 3463 03c8 3149     		ldr	r1, .L194+12
 3464 03ca 3E22     		mov	r2, #62
 3465 03cc 6623     		mov	r3, #102
 3466 03ce FFF7FEFF 		bl	write_bitmap
 3467              	.LVL277:
6811:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 3468              		.loc 1 6811 0
 3469 03d2 0095     		str	r5, [sp]
 3470 03d4 201C     		mov	r0, r4
 3471 03d6 2F49     		ldr	r1, .L194+16
 3472 03d8 6322     		mov	r2, #99
 3473 03da 6B23     		mov	r3, #107
 3474 03dc FFF7FEFF 		bl	write_bitmap
 3475              	.LVL278:
6812:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 3476              		.loc 1 6812 0
 3477 03e0 0095     		str	r5, [sp]
 3478 03e2 201C     		mov	r0, r4
 3479 03e4 2C49     		ldr	r1, .L194+20
 3480 03e6 8222     		mov	r2, #130
 3481 03e8 6B23     		mov	r3, #107
 3482 03ea FFF7FEFF 		bl	write_bitmap
 3483              	.LVL279:
6813:screens.c     **** 			break;
 3484              		.loc 1 6813 0
 3485 03ee 24E0     		b	.L181
 3486              	.L184:
6816:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 3487              		.loc 1 6816 0
 3488 03f0 244C     		ldr	r4, .L194
 3489 03f2 0225     		mov	r5, #2
 3490 03f4 0095     		str	r5, [sp]
 3491 03f6 201C     		mov	r0, r4
 3492 03f8 2349     		ldr	r1, .L194+4
 3493 03fa 0022     		mov	r2, #0
 3494 03fc 6B23     		mov	r3, #107
 3495 03fe FFF7FEFF 		bl	write_bitmap
 3496              	.LVL280:
6817:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 3497              		.loc 1 6817 0
 3498 0402 0095     		str	r5, [sp]
 3499 0404 201C     		mov	r0, r4
 3500 0406 2149     		ldr	r1, .L194+8
 3501 0408 1F22     		mov	r2, #31
 3502 040a 6B23     		mov	r3, #107
 3503 040c FFF7FEFF 		bl	write_bitmap
 3504              	.LVL281:
6818:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 3505              		.loc 1 6818 0
 3506 0410 0095     		str	r5, [sp]
 3507 0412 201C     		mov	r0, r4
 3508 0414 2149     		ldr	r1, .L194+24
 3509 0416 3E22     		mov	r2, #62
 3510 0418 6623     		mov	r3, #102
 3511 041a FFF7FEFF 		bl	write_bitmap
 3512              	.LVL282:
6819:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 3513              		.loc 1 6819 0
 3514 041e 0095     		str	r5, [sp]
 3515 0420 201C     		mov	r0, r4
 3516 0422 1C49     		ldr	r1, .L194+16
 3517 0424 6322     		mov	r2, #99
 3518 0426 6B23     		mov	r3, #107
 3519 0428 FFF7FEFF 		bl	write_bitmap
 3520              	.LVL283:
6820:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 3521              		.loc 1 6820 0
 3522 042c 0095     		str	r5, [sp]
 3523 042e 201C     		mov	r0, r4
 3524 0430 1949     		ldr	r1, .L194+20
 3525 0432 8222     		mov	r2, #130
 3526 0434 6B23     		mov	r3, #107
 3527 0436 FFF7FEFF 		bl	write_bitmap
 3528              	.LVL284:
 3529              	.L181:
6825:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
 3530              		.loc 1 6825 0
 3531 043a 124C     		ldr	r4, .L194
 3532 043c 6423     		mov	r3, #100
 3533 043e 0093     		str	r3, [sp]
 3534 0440 4023     		mov	r3, #64
 3535 0442 0193     		str	r3, [sp, #4]
 3536 0444 201C     		mov	r0, r4
 3537 0446 1021     		mov	r1, #16
 3538 0448 1522     		mov	r2, #21
 3539 044a 1423     		mov	r3, #20
 3540 044c FFF7FEFF 		bl	draw_box
 3541              	.LVL285:
6826:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
 3542              		.loc 1 6826 0
 3543 0450 134B     		ldr	r3, .L194+28
 3544 0452 1B78     		ldrb	r3, [r3]
 3545 0454 9A00     		lsl	r2, r3, #2
 3546 0456 D318     		add	r3, r2, r3
 3547 0458 5B06     		lsl	r3, r3, #25
 3548 045a A822     		mov	r2, #168
 3549 045c 5205     		lsl	r2, r2, #21
 3550 045e 9B18     		add	r3, r3, r2
 3551 0460 1B0E     		lsr	r3, r3, #24
 3552 0462 0222     		mov	r2, #2
 3553 0464 0092     		str	r2, [sp]
 3554 0466 201C     		mov	r0, r4
 3555 0468 0E49     		ldr	r1, .L194+32
 3556 046a 1022     		mov	r2, #16
 3557 046c FFF7FEFF 		bl	write_bitmap
 3558              	.LVL286:
6832:screens.c     **** }
 3559              		.loc 1 6832 0
 3560 0470 09B0     		add	sp, sp, #36
 3561              		@ sp needed for prologue
 3562 0472 3CBC     		pop	{r2, r3, r4, r5}
 3563 0474 9046     		mov	r8, r2
 3564 0476 9946     		mov	r9, r3
 3565 0478 A246     		mov	sl, r4
 3566 047a AB46     		mov	fp, r5
 3567 047c F0BC     		pop	{r4, r5, r6, r7}
 3568 047e 01BC     		pop	{r0}
 3569 0480 0047     		bx	r0
 3570              	.L195:
 3571 0482 C046     		.align	2
 3572              	.L194:
 3573 0484 00000000 		.word	adm
 3574 0488 00000000 		.word	TABMINUS
 3575 048c 00000000 		.word	TABPLUS
 3576 0490 00000000 		.word	TABNAV_UDL
 3577 0494 00000000 		.word	TAB
 3578 0498 00000000 		.word	TABESC
 3579 049c 00000000 		.word	TABNAV_UL
 3580 04a0 00000000 		.word	selection
 3581 04a4 00000000 		.word	F1_POINT
 3582              		.cfi_endproc
 3583              	.LFE395:
 3585              		.section	.text.screen145,"ax",%progbits
 3586              		.align	2
 3587              		.global	screen145
 3588              		.code	16
 3589              		.thumb_func
 3591              	screen145:
 3592              	.LFB394:
6218:screens.c     **** {
 3593              		.loc 1 6218 0
 3594              		.cfi_startproc
 3595              	.LVL287:
 3596 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3597              	.LCFI14:
 3598              		.cfi_def_cfa_offset 20
 3599              		.cfi_offset 4, -20
 3600              		.cfi_offset 5, -16
 3601              		.cfi_offset 6, -12
 3602              		.cfi_offset 7, -8
 3603              		.cfi_offset 14, -4
 3604 0002 5F46     		mov	r7, fp
 3605 0004 5646     		mov	r6, sl
 3606 0006 4D46     		mov	r5, r9
 3607 0008 4446     		mov	r4, r8
 3608 000a F0B4     		push	{r4, r5, r6, r7}
 3609              	.LCFI15:
 3610              		.cfi_def_cfa_offset 36
 3611              		.cfi_offset 8, -36
 3612              		.cfi_offset 9, -32
 3613              		.cfi_offset 10, -28
 3614              		.cfi_offset 11, -24
 3615 000c 89B0     		sub	sp, sp, #36
 3616              	.LCFI16:
 3617              		.cfi_def_cfa_offset 72
 3618 000e 041C     		mov	r4, r0
6225:screens.c     **** 	if( !startup )
 3619              		.loc 1 6225 0
 3620 0010 D54B     		ldr	r3, .L307
 3621 0012 1B78     		ldrb	r3, [r3]
 3622 0014 002B     		cmp	r3, #0
 3623 0016 12D1     		bne	.L197
6227:screens.c     **** 		startup = 1;
 3624              		.loc 1 6227 0
 3625 0018 0122     		mov	r2, #1
 3626 001a D34B     		ldr	r3, .L307
 3627 001c 1A70     		strb	r2, [r3]
6229:screens.c     **** 		draw_frame( adm );
 3628              		.loc 1 6229 0
 3629 001e D348     		ldr	r0, .L307+4
 3630              	.LVL288:
 3631 0020 FFF7FEFF 		bl	draw_frame
 3632              	.LVL289:
6231:screens.c     **** 		display_f1_text( "Density Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
 3633              		.loc 1 6231 0
 3634 0024 0A23     		mov	r3, #10
 3635 0026 0093     		str	r3, [sp]
 3636 0028 D148     		ldr	r0, .L307+8
 3637 002a 1A21     		mov	r1, #26
 3638 002c 5022     		mov	r2, #80
 3639 002e 0723     		mov	r3, #7
 3640 0030 FFF7FEFF 		bl	display_f1_text
 3641              	.LVL290:
6233:screens.c     **** 		page = 0;
 3642              		.loc 1 6233 0
 3643 0034 0023     		mov	r3, #0
 3644 0036 CF4A     		ldr	r2, .L307+12
 3645 0038 1370     		strb	r3, [r2]
6234:screens.c     **** 		selection = 0;
 3646              		.loc 1 6234 0
 3647 003a CF4A     		ldr	r2, .L307+16
 3648 003c 1370     		strb	r3, [r2]
 3649              	.LVL291:
 3650              	.L197:
6239:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 3651              		.loc 1 6239 0
 3652 003e 0020     		mov	r0, #0
 3653 0040 FFF7FEFF 		bl	ClockDisplay
 3654              	.LVL292:
6242:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 3655              		.loc 1 6242 0
 3656 0044 CD4B     		ldr	r3, .L307+20
 3657 0046 1B78     		ldrb	r3, [r3]
 3658 0048 002B     		cmp	r3, #0
 3659 004a 00D0     		beq	.LCB3575
 3660 004c 15E2     		b	.L198	@long jump
 3661              	.LCB3575:
6242:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 3662              		.loc 1 6242 0 is_stmt 0 discriminator 1
 3663 004e A30F     		lsr	r3, r4, #30
 3664 0050 00D1     		bne	.LCB3579
 3665 0052 FEE1     		b	.L199	@long jump
 3666              	.LCB3579:
6244:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 3667              		.loc 1 6244 0 is_stmt 1
 3668 0054 A400     		lsl	r4, r4, #2
 3669              	.LVL293:
 3670 0056 A408     		lsr	r4, r4, #2
 3671              	.LVL294:
6246:screens.c     **** 		if( lkey == SW_OL ) // -
 3672              		.loc 1 6246 0
 3673 0058 8023     		mov	r3, #128
 3674 005a 9B00     		lsl	r3, r3, #2
 3675 005c 9C42     		cmp	r4, r3
 3676 005e 00D0     		beq	.LCB3587
 3677 0060 C9E0     		b	.L200	@long jump
 3678              	.LCB3587:
6248:screens.c     **** 			if( page == 0 )
 3679              		.loc 1 6248 0
 3680 0062 C44B     		ldr	r3, .L307+12
 3681 0064 1B78     		ldrb	r3, [r3]
 3682 0066 002B     		cmp	r3, #0
 3683 0068 71D1     		bne	.L201
6250:screens.c     **** 				switch( selection )
 3684              		.loc 1 6250 0
 3685 006a C34B     		ldr	r3, .L307+16
 3686 006c 1A78     		ldrb	r2, [r3]
 3687 006e 052A     		cmp	r2, #5
 3688 0070 00D9     		bls	.LCB3595
 3689 0072 BAE0     		b	.L202	@long jump
 3690              	.LCB3595:
 3691 0074 9300     		lsl	r3, r2, #2
 3692 0076 C24A     		ldr	r2, .L307+24
 3693 0078 D358     		ldr	r3, [r2, r3]
 3694 007a 9F46     		mov	pc, r3
 3695              		.section	.rodata.screen145,"a",%progbits
 3696              		.align	2
 3697              	.L209:
 3698 0000 7C000000 		.word	.L203
 3699 0004 A0000000 		.word	.L204
 3700 0008 C4000000 		.word	.L205
 3701 000c E8000000 		.word	.L206
 3702 0010 0A010000 		.word	.L207
 3703 0014 2C010000 		.word	.L208
 3704              		.section	.text.screen145
 3705              	.L203:
6253:screens.c     **** 					pFac.pf.GW302_Density1 -= PF_GW302_Density1[PF_STEP];
 3706              		.loc 1 6253 0
 3707 007c C14E     		ldr	r6, .L307+28
 3708 007e D025     		mov	r5, #208
 3709 0080 C14C     		ldr	r4, .L307+32
 3710              	.LVL295:
 3711 0082 7059     		ldr	r0, [r6, r5]
 3712 0084 2168     		ldr	r1, [r4]
 3713 0086 FFF7FEFF 		bl	__aeabi_fsub
 3714              	.LVL296:
 3715 008a 7051     		str	r0, [r6, r5]
6254:screens.c     **** 					if( pFac.pf.GW302_Density1 < PF_GW302_Density1[PF_MIN] )
 3716              		.loc 1 6254 0
 3717 008c 6468     		ldr	r4, [r4, #4]
 3718 008e 211C     		add	r1, r4, #0
 3719 0090 FFF7FEFF 		bl	__aeabi_fcmplt
 3720              	.LVL297:
 3721 0094 0028     		cmp	r0, #0
 3722 0096 00D1     		bne	.LCB3621
 3723 0098 A7E0     		b	.L202	@long jump
 3724              	.LCB3621:
6255:screens.c     **** 						pFac.pf.GW302_Density1 = PF_GW302_Density1[PF_MIN]; // Limiting to minimum value
 3725              		.loc 1 6255 0
 3726 009a D023     		mov	r3, #208
 3727 009c F450     		str	r4, [r6, r3]
 3728 009e A4E0     		b	.L202
 3729              	.LVL298:
 3730              	.L204:
6259:screens.c     **** 					pFac.pf.GW302_Density2 -= PF_GW302_Density2[PF_STEP];
 3731              		.loc 1 6259 0
 3732 00a0 B84E     		ldr	r6, .L307+28
 3733 00a2 D425     		mov	r5, #212
 3734 00a4 B94C     		ldr	r4, .L307+36
 3735              	.LVL299:
 3736 00a6 7059     		ldr	r0, [r6, r5]
 3737 00a8 2168     		ldr	r1, [r4]
 3738 00aa FFF7FEFF 		bl	__aeabi_fsub
 3739              	.LVL300:
 3740 00ae 7051     		str	r0, [r6, r5]
6260:screens.c     **** 					if( pFac.pf.GW302_Density2 < PF_GW302_Density2[PF_MIN] )
 3741              		.loc 1 6260 0
 3742 00b0 6468     		ldr	r4, [r4, #4]
 3743 00b2 211C     		add	r1, r4, #0
 3744 00b4 FFF7FEFF 		bl	__aeabi_fcmplt
 3745              	.LVL301:
 3746 00b8 0028     		cmp	r0, #0
 3747 00ba 00D1     		bne	.LCB3643
 3748 00bc 95E0     		b	.L202	@long jump
 3749              	.LCB3643:
6261:screens.c     **** 						pFac.pf.GW302_Density2 = PF_GW302_Density2[PF_MIN]; // Limiting to minimum value
 3750              		.loc 1 6261 0
 3751 00be D423     		mov	r3, #212
 3752 00c0 F450     		str	r4, [r6, r3]
 3753 00c2 92E0     		b	.L202
 3754              	.LVL302:
 3755              	.L205:
6265:screens.c     **** 					pFac.pf.GW302_Density3 -= PF_GW302_Density3[PF_STEP];
 3756              		.loc 1 6265 0
 3757 00c4 AF4E     		ldr	r6, .L307+28
 3758 00c6 D825     		mov	r5, #216
 3759 00c8 B14C     		ldr	r4, .L307+40
 3760              	.LVL303:
 3761 00ca 7059     		ldr	r0, [r6, r5]
 3762 00cc 2168     		ldr	r1, [r4]
 3763 00ce FFF7FEFF 		bl	__aeabi_fsub
 3764              	.LVL304:
 3765 00d2 7051     		str	r0, [r6, r5]
6266:screens.c     **** 					if( pFac.pf.GW302_Density3 < PF_GW302_Density3[PF_MIN] )
 3766              		.loc 1 6266 0
 3767 00d4 6468     		ldr	r4, [r4, #4]
 3768 00d6 211C     		add	r1, r4, #0
 3769 00d8 FFF7FEFF 		bl	__aeabi_fcmplt
 3770              	.LVL305:
 3771 00dc 0028     		cmp	r0, #0
 3772 00de 00D1     		bne	.LCB3665
 3773 00e0 83E0     		b	.L202	@long jump
 3774              	.LCB3665:
6267:screens.c     **** 						pFac.pf.GW302_Density3 = PF_GW302_Density3[PF_MIN]; // Limiting to minimum value
 3775              		.loc 1 6267 0
 3776 00e2 D823     		mov	r3, #216
 3777 00e4 F450     		str	r4, [r6, r3]
 3778 00e6 80E0     		b	.L202
 3779              	.LVL306:
 3780              	.L206:
6271:screens.c     **** 					pFac.pf.GW302_Density4 -= PF_GW302_Density4[PF_STEP];
 3781              		.loc 1 6271 0
 3782 00e8 A64E     		ldr	r6, .L307+28
 3783 00ea DC25     		mov	r5, #220
 3784 00ec A94C     		ldr	r4, .L307+44
 3785              	.LVL307:
 3786 00ee 7059     		ldr	r0, [r6, r5]
 3787 00f0 2168     		ldr	r1, [r4]
 3788 00f2 FFF7FEFF 		bl	__aeabi_fsub
 3789              	.LVL308:
 3790 00f6 7051     		str	r0, [r6, r5]
6272:screens.c     **** 					if( pFac.pf.GW302_Density4 < PF_GW302_Density4[PF_MIN] )
 3791              		.loc 1 6272 0
 3792 00f8 6468     		ldr	r4, [r4, #4]
 3793 00fa 211C     		add	r1, r4, #0
 3794 00fc FFF7FEFF 		bl	__aeabi_fcmplt
 3795              	.LVL309:
 3796 0100 0028     		cmp	r0, #0
 3797 0102 72D0     		beq	.L202
6273:screens.c     **** 						pFac.pf.GW302_Density4 = PF_GW302_Density4[PF_MIN]; // Limiting to minimum value
 3798              		.loc 1 6273 0
 3799 0104 DC23     		mov	r3, #220
 3800 0106 F450     		str	r4, [r6, r3]
 3801 0108 6FE0     		b	.L202
 3802              	.LVL310:
 3803              	.L207:
6277:screens.c     **** 					pFac.pf.GW302_Density5 -= PF_GW302_Density5[PF_STEP];
 3804              		.loc 1 6277 0
 3805 010a 9E4E     		ldr	r6, .L307+28
 3806 010c E025     		mov	r5, #224
 3807 010e A24C     		ldr	r4, .L307+48
 3808              	.LVL311:
 3809 0110 7059     		ldr	r0, [r6, r5]
 3810 0112 2168     		ldr	r1, [r4]
 3811 0114 FFF7FEFF 		bl	__aeabi_fsub
 3812              	.LVL312:
 3813 0118 7051     		str	r0, [r6, r5]
6278:screens.c     **** 					if( pFac.pf.GW302_Density5 < PF_GW302_Density5[PF_MIN] )
 3814              		.loc 1 6278 0
 3815 011a 6468     		ldr	r4, [r4, #4]
 3816 011c 211C     		add	r1, r4, #0
 3817 011e FFF7FEFF 		bl	__aeabi_fcmplt
 3818              	.LVL313:
 3819 0122 0028     		cmp	r0, #0
 3820 0124 61D0     		beq	.L202
6279:screens.c     **** 						pFac.pf.GW302_Density5 = PF_GW302_Density5[PF_MIN]; // Limiting to minimum value
 3821              		.loc 1 6279 0
 3822 0126 E023     		mov	r3, #224
 3823 0128 F450     		str	r4, [r6, r3]
 3824 012a 5EE0     		b	.L202
 3825              	.LVL314:
 3826              	.L208:
6283:screens.c     **** 					pFac.pf.GW302_Density6 -= PF_GW302_Density6[PF_STEP];
 3827              		.loc 1 6283 0
 3828 012c 954E     		ldr	r6, .L307+28
 3829 012e E425     		mov	r5, #228
 3830 0130 9A4C     		ldr	r4, .L307+52
 3831              	.LVL315:
 3832 0132 7059     		ldr	r0, [r6, r5]
 3833 0134 2168     		ldr	r1, [r4]
 3834 0136 FFF7FEFF 		bl	__aeabi_fsub
 3835              	.LVL316:
 3836 013a 7051     		str	r0, [r6, r5]
6284:screens.c     **** 					if( pFac.pf.GW302_Density6 < PF_GW302_Density6[PF_MIN] )
 3837              		.loc 1 6284 0
 3838 013c 6468     		ldr	r4, [r4, #4]
 3839 013e 211C     		add	r1, r4, #0
 3840 0140 FFF7FEFF 		bl	__aeabi_fcmplt
 3841              	.LVL317:
 3842 0144 0028     		cmp	r0, #0
 3843 0146 50D0     		beq	.L202
6285:screens.c     **** 						pFac.pf.GW302_Density6 = PF_GW302_Density6[PF_MIN]; // Limiting to minimum value
 3844              		.loc 1 6285 0
 3845 0148 E423     		mov	r3, #228
 3846 014a F450     		str	r4, [r6, r3]
 3847 014c 4DE0     		b	.L202
 3848              	.LVL318:
 3849              	.L201:
6291:screens.c     **** 				switch( selection )
 3850              		.loc 1 6291 0
 3851 014e 8A4B     		ldr	r3, .L307+16
 3852 0150 1B78     		ldrb	r3, [r3]
 3853 0152 012B     		cmp	r3, #1
 3854 0154 17D0     		beq	.L217
 3855 0156 002B     		cmp	r3, #0
 3856 0158 04D0     		beq	.L216
 3857 015a 022B     		cmp	r3, #2
 3858 015c 24D0     		beq	.L218
 3859 015e 032B     		cmp	r3, #3
 3860 0160 43D1     		bne	.L202
 3861 0162 32E0     		b	.L219
 3862              	.L216:
6294:screens.c     **** 					pFac.pf.GW302_Density7 -= PF_GW302_Density7[PF_STEP];
 3863              		.loc 1 6294 0
 3864 0164 874E     		ldr	r6, .L307+28
 3865 0166 E825     		mov	r5, #232
 3866 0168 8D4C     		ldr	r4, .L307+56
 3867              	.LVL319:
 3868 016a 7059     		ldr	r0, [r6, r5]
 3869 016c 2168     		ldr	r1, [r4]
 3870 016e FFF7FEFF 		bl	__aeabi_fsub
 3871              	.LVL320:
 3872 0172 7051     		str	r0, [r6, r5]
6295:screens.c     **** 					if( pFac.pf.GW302_Density7 < PF_GW302_Density7[PF_MIN] )
 3873              		.loc 1 6295 0
 3874 0174 6468     		ldr	r4, [r4, #4]
 3875 0176 211C     		add	r1, r4, #0
 3876 0178 FFF7FEFF 		bl	__aeabi_fcmplt
 3877              	.LVL321:
 3878 017c 0028     		cmp	r0, #0
 3879 017e 34D0     		beq	.L202
6296:screens.c     **** 						pFac.pf.GW302_Density7 = PF_GW302_Density7[PF_MIN]; // Limiting to minimum value
 3880              		.loc 1 6296 0
 3881 0180 E823     		mov	r3, #232
 3882 0182 F450     		str	r4, [r6, r3]
 3883 0184 31E0     		b	.L202
 3884              	.LVL322:
 3885              	.L217:
6300:screens.c     **** 					pFac.pf.GW302_Density8 -= PF_GW302_Density8[PF_STEP];
 3886              		.loc 1 6300 0
 3887 0186 7F4E     		ldr	r6, .L307+28
 3888 0188 EC25     		mov	r5, #236
 3889 018a 864C     		ldr	r4, .L307+60
 3890              	.LVL323:
 3891 018c 7059     		ldr	r0, [r6, r5]
 3892 018e 2168     		ldr	r1, [r4]
 3893 0190 FFF7FEFF 		bl	__aeabi_fsub
 3894              	.LVL324:
 3895 0194 7051     		str	r0, [r6, r5]
6301:screens.c     **** 					if( pFac.pf.GW302_Density8 < PF_GW302_Density8[PF_MIN] )
 3896              		.loc 1 6301 0
 3897 0196 6468     		ldr	r4, [r4, #4]
 3898 0198 211C     		add	r1, r4, #0
 3899 019a FFF7FEFF 		bl	__aeabi_fcmplt
 3900              	.LVL325:
 3901 019e 0028     		cmp	r0, #0
 3902 01a0 23D0     		beq	.L202
6302:screens.c     **** 						pFac.pf.GW302_Density8 = PF_GW302_Density8[PF_MIN]; // Limiting to minimum value
 3903              		.loc 1 6302 0
 3904 01a2 EC23     		mov	r3, #236
 3905 01a4 F450     		str	r4, [r6, r3]
 3906 01a6 20E0     		b	.L202
 3907              	.LVL326:
 3908              	.L218:
6306:screens.c     **** 					pFac.pf.GW302_Density9 -= PF_GW302_Density9[PF_STEP];
 3909              		.loc 1 6306 0
 3910 01a8 764E     		ldr	r6, .L307+28
 3911 01aa F025     		mov	r5, #240
 3912 01ac 7E4C     		ldr	r4, .L307+64
 3913              	.LVL327:
 3914 01ae 7059     		ldr	r0, [r6, r5]
 3915 01b0 2168     		ldr	r1, [r4]
 3916 01b2 FFF7FEFF 		bl	__aeabi_fsub
 3917              	.LVL328:
 3918 01b6 7051     		str	r0, [r6, r5]
6307:screens.c     **** 					if( pFac.pf.GW302_Density9 < PF_GW302_Density9[PF_MIN] )
 3919              		.loc 1 6307 0
 3920 01b8 6468     		ldr	r4, [r4, #4]
 3921 01ba 211C     		add	r1, r4, #0
 3922 01bc FFF7FEFF 		bl	__aeabi_fcmplt
 3923              	.LVL329:
 3924 01c0 0028     		cmp	r0, #0
 3925 01c2 12D0     		beq	.L202
6308:screens.c     **** 						pFac.pf.GW302_Density9 = PF_GW302_Density9[PF_MIN]; // Limiting to minimum value
 3926              		.loc 1 6308 0
 3927 01c4 F023     		mov	r3, #240
 3928 01c6 F450     		str	r4, [r6, r3]
 3929 01c8 0FE0     		b	.L202
 3930              	.LVL330:
 3931              	.L219:
6312:screens.c     **** 					pFac.pf.GW302_Density10 -= PF_GW302_Density10[PF_STEP];
 3932              		.loc 1 6312 0
 3933 01ca 6E4E     		ldr	r6, .L307+28
 3934 01cc F425     		mov	r5, #244
 3935 01ce 774C     		ldr	r4, .L307+68
 3936              	.LVL331:
 3937 01d0 7059     		ldr	r0, [r6, r5]
 3938 01d2 2168     		ldr	r1, [r4]
 3939 01d4 FFF7FEFF 		bl	__aeabi_fsub
 3940              	.LVL332:
 3941 01d8 7051     		str	r0, [r6, r5]
6313:screens.c     **** 					if( pFac.pf.GW302_Density10 < PF_GW302_Density10[PF_MIN] )
 3942              		.loc 1 6313 0
 3943 01da 6468     		ldr	r4, [r4, #4]
 3944 01dc 211C     		add	r1, r4, #0
 3945 01de FFF7FEFF 		bl	__aeabi_fcmplt
 3946              	.LVL333:
 3947 01e2 0028     		cmp	r0, #0
 3948 01e4 01D0     		beq	.L202
6314:screens.c     **** 						pFac.pf.GW302_Density10 = PF_GW302_Density10[PF_MIN]; // Limiting to minimum value
 3949              		.loc 1 6314 0
 3950 01e6 F423     		mov	r3, #244
 3951 01e8 F450     		str	r4, [r6, r3]
 3952              	.L202:
6318:screens.c     **** 			SavecalDelayWithinMenus = 1;
 3953              		.loc 1 6318 0
 3954 01ea 0123     		mov	r3, #1
 3955 01ec 704A     		ldr	r2, .L307+72
 3956 01ee 1370     		strb	r3, [r2]
6319:screens.c     **** 			valuechanged = 1;
 3957              		.loc 1 6319 0
 3958 01f0 704A     		ldr	r2, .L307+76
 3959 01f2 1370     		strb	r3, [r2]
 3960              	.LVL334:
 3961 01f4 41E1     		b	.L198
 3962              	.LVL335:
 3963              	.L200:
6322:screens.c     **** 		else if( lkey == SW_IL ) // +
 3964              		.loc 1 6322 0
 3965 01f6 042C     		cmp	r4, #4
 3966 01f8 00D0     		beq	.LCB3859
 3967 01fa F5E0     		b	.L224	@long jump
 3968              	.LCB3859:
6324:screens.c     **** 			if( page == 0 )
 3969              		.loc 1 6324 0
 3970 01fc 5D4B     		ldr	r3, .L307+12
 3971 01fe 1B78     		ldrb	r3, [r3]
 3972 0200 002B     		cmp	r3, #0
 3973 0202 73D1     		bne	.L225
6326:screens.c     **** 				switch( selection )
 3974              		.loc 1 6326 0
 3975 0204 5C4B     		ldr	r3, .L307+16
 3976 0206 1A78     		ldrb	r2, [r3]
 3977 0208 052A     		cmp	r2, #5
 3978 020a 00D9     		bls	.LCB3867
 3979 020c E6E0     		b	.L226	@long jump
 3980              	.LCB3867:
 3981 020e 9300     		lsl	r3, r2, #2
 3982 0210 694A     		ldr	r2, .L307+80
 3983 0212 D358     		ldr	r3, [r2, r3]
 3984 0214 9F46     		mov	pc, r3
 3985              		.section	.rodata.screen145
 3986              		.align	2
 3987              	.L233:
 3988 0018 16020000 		.word	.L227
 3989 001c 3A020000 		.word	.L228
 3990 0020 5E020000 		.word	.L229
 3991 0024 82020000 		.word	.L230
 3992 0028 A6020000 		.word	.L231
 3993 002c CA020000 		.word	.L232
 3994              		.section	.text.screen145
 3995              	.L227:
6329:screens.c     **** 					pFac.pf.GW302_Density1 += PF_GW302_Density1[PF_STEP];
 3996              		.loc 1 6329 0
 3997 0216 5B4E     		ldr	r6, .L307+28
 3998 0218 D025     		mov	r5, #208
 3999 021a 5B4C     		ldr	r4, .L307+32
 4000              	.LVL336:
 4001 021c 7059     		ldr	r0, [r6, r5]
 4002 021e 2168     		ldr	r1, [r4]
 4003 0220 FFF7FEFF 		bl	__aeabi_fadd
 4004              	.LVL337:
 4005 0224 7051     		str	r0, [r6, r5]
6330:screens.c     **** 					if( pFac.pf.GW302_Density1 > PF_GW302_Density1[PF_MAX] )
 4006              		.loc 1 6330 0
 4007 0226 A468     		ldr	r4, [r4, #8]
 4008 0228 211C     		add	r1, r4, #0
 4009 022a FFF7FEFF 		bl	__aeabi_fcmpgt
 4010              	.LVL338:
 4011 022e 0028     		cmp	r0, #0
 4012 0230 00D1     		bne	.LCB3893
 4013 0232 D3E0     		b	.L226	@long jump
 4014              	.LCB3893:
6331:screens.c     **** 						pFac.pf.GW302_Density1 = PF_GW302_Density1[PF_MAX]; // Limiting to maximum value
 4015              		.loc 1 6331 0
 4016 0234 D023     		mov	r3, #208
 4017 0236 F450     		str	r4, [r6, r3]
 4018 0238 D0E0     		b	.L226
 4019              	.LVL339:
 4020              	.L228:
6335:screens.c     **** 					pFac.pf.GW302_Density2 += PF_GW302_Density2[PF_STEP];
 4021              		.loc 1 6335 0
 4022 023a 524E     		ldr	r6, .L307+28
 4023 023c D425     		mov	r5, #212
 4024 023e 534C     		ldr	r4, .L307+36
 4025              	.LVL340:
 4026 0240 7059     		ldr	r0, [r6, r5]
 4027 0242 2168     		ldr	r1, [r4]
 4028 0244 FFF7FEFF 		bl	__aeabi_fadd
 4029              	.LVL341:
 4030 0248 7051     		str	r0, [r6, r5]
6336:screens.c     **** 					if( pFac.pf.GW302_Density2 > PF_GW302_Density2[PF_MAX] )
 4031              		.loc 1 6336 0
 4032 024a A468     		ldr	r4, [r4, #8]
 4033 024c 211C     		add	r1, r4, #0
 4034 024e FFF7FEFF 		bl	__aeabi_fcmpgt
 4035              	.LVL342:
 4036 0252 0028     		cmp	r0, #0
 4037 0254 00D1     		bne	.LCB3915
 4038 0256 C1E0     		b	.L226	@long jump
 4039              	.LCB3915:
6337:screens.c     **** 						pFac.pf.GW302_Density2 = PF_GW302_Density2[PF_MAX]; // Limiting to maximum value
 4040              		.loc 1 6337 0
 4041 0258 D423     		mov	r3, #212
 4042 025a F450     		str	r4, [r6, r3]
 4043 025c BEE0     		b	.L226
 4044              	.LVL343:
 4045              	.L229:
6341:screens.c     **** 					pFac.pf.GW302_Density3 += PF_GW302_Density3[PF_STEP];
 4046              		.loc 1 6341 0
 4047 025e 494E     		ldr	r6, .L307+28
 4048 0260 D825     		mov	r5, #216
 4049 0262 4B4C     		ldr	r4, .L307+40
 4050              	.LVL344:
 4051 0264 7059     		ldr	r0, [r6, r5]
 4052 0266 2168     		ldr	r1, [r4]
 4053 0268 FFF7FEFF 		bl	__aeabi_fadd
 4054              	.LVL345:
 4055 026c 7051     		str	r0, [r6, r5]
6342:screens.c     **** 					if( pFac.pf.GW302_Density3 > PF_GW302_Density3[PF_MAX] )
 4056              		.loc 1 6342 0
 4057 026e A468     		ldr	r4, [r4, #8]
 4058 0270 211C     		add	r1, r4, #0
 4059 0272 FFF7FEFF 		bl	__aeabi_fcmpgt
 4060              	.LVL346:
 4061 0276 0028     		cmp	r0, #0
 4062 0278 00D1     		bne	.LCB3937
 4063 027a AFE0     		b	.L226	@long jump
 4064              	.LCB3937:
6343:screens.c     **** 						pFac.pf.GW302_Density3 = PF_GW302_Density3[PF_MAX]; // Limiting to maximum value
 4065              		.loc 1 6343 0
 4066 027c D823     		mov	r3, #216
 4067 027e F450     		str	r4, [r6, r3]
 4068 0280 ACE0     		b	.L226
 4069              	.LVL347:
 4070              	.L230:
6347:screens.c     **** 					pFac.pf.GW302_Density4 += PF_GW302_Density4[PF_STEP];
 4071              		.loc 1 6347 0
 4072 0282 404E     		ldr	r6, .L307+28
 4073 0284 DC25     		mov	r5, #220
 4074 0286 434C     		ldr	r4, .L307+44
 4075              	.LVL348:
 4076 0288 7059     		ldr	r0, [r6, r5]
 4077 028a 2168     		ldr	r1, [r4]
 4078 028c FFF7FEFF 		bl	__aeabi_fadd
 4079              	.LVL349:
 4080 0290 7051     		str	r0, [r6, r5]
6348:screens.c     **** 					if( pFac.pf.GW302_Density4 > PF_GW302_Density4[PF_MAX] )
 4081              		.loc 1 6348 0
 4082 0292 A468     		ldr	r4, [r4, #8]
 4083 0294 211C     		add	r1, r4, #0
 4084 0296 FFF7FEFF 		bl	__aeabi_fcmpgt
 4085              	.LVL350:
 4086 029a 0028     		cmp	r0, #0
 4087 029c 00D1     		bne	.LCB3959
 4088 029e 9DE0     		b	.L226	@long jump
 4089              	.LCB3959:
6349:screens.c     **** 						pFac.pf.GW302_Density4 = PF_GW302_Density4[PF_MAX]; // Limiting to maximum value
 4090              		.loc 1 6349 0
 4091 02a0 DC23     		mov	r3, #220
 4092 02a2 F450     		str	r4, [r6, r3]
 4093 02a4 9AE0     		b	.L226
 4094              	.LVL351:
 4095              	.L231:
6353:screens.c     **** 					pFac.pf.GW302_Density5 += PF_GW302_Density5[PF_STEP];
 4096              		.loc 1 6353 0
 4097 02a6 374E     		ldr	r6, .L307+28
 4098 02a8 E025     		mov	r5, #224
 4099 02aa 3B4C     		ldr	r4, .L307+48
 4100              	.LVL352:
 4101 02ac 7059     		ldr	r0, [r6, r5]
 4102 02ae 2168     		ldr	r1, [r4]
 4103 02b0 FFF7FEFF 		bl	__aeabi_fadd
 4104              	.LVL353:
 4105 02b4 7051     		str	r0, [r6, r5]
6354:screens.c     **** 					if( pFac.pf.GW302_Density5 > PF_GW302_Density5[PF_MAX] )
 4106              		.loc 1 6354 0
 4107 02b6 A468     		ldr	r4, [r4, #8]
 4108 02b8 211C     		add	r1, r4, #0
 4109 02ba FFF7FEFF 		bl	__aeabi_fcmpgt
 4110              	.LVL354:
 4111 02be 0028     		cmp	r0, #0
 4112 02c0 00D1     		bne	.LCB3981
 4113 02c2 8BE0     		b	.L226	@long jump
 4114              	.LCB3981:
6355:screens.c     **** 						pFac.pf.GW302_Density5 = PF_GW302_Density5[PF_MAX]; // Limiting to maximum value
 4115              		.loc 1 6355 0
 4116 02c4 E023     		mov	r3, #224
 4117 02c6 F450     		str	r4, [r6, r3]
 4118 02c8 88E0     		b	.L226
 4119              	.LVL355:
 4120              	.L232:
6359:screens.c     **** 					pFac.pf.GW302_Density6 += PF_GW302_Density6[PF_STEP];
 4121              		.loc 1 6359 0
 4122 02ca 2E4E     		ldr	r6, .L307+28
 4123 02cc E425     		mov	r5, #228
 4124 02ce 334C     		ldr	r4, .L307+52
 4125              	.LVL356:
 4126 02d0 7059     		ldr	r0, [r6, r5]
 4127 02d2 2168     		ldr	r1, [r4]
 4128 02d4 FFF7FEFF 		bl	__aeabi_fadd
 4129              	.LVL357:
 4130 02d8 7051     		str	r0, [r6, r5]
6360:screens.c     **** 					if( pFac.pf.GW302_Density6 > PF_GW302_Density6[PF_MAX] )
 4131              		.loc 1 6360 0
 4132 02da A468     		ldr	r4, [r4, #8]
 4133 02dc 211C     		add	r1, r4, #0
 4134 02de FFF7FEFF 		bl	__aeabi_fcmpgt
 4135              	.LVL358:
 4136 02e2 0028     		cmp	r0, #0
 4137 02e4 7AD0     		beq	.L226
6361:screens.c     **** 						pFac.pf.GW302_Density6 = PF_GW302_Density6[PF_MAX]; // Limiting to maximum value
 4138              		.loc 1 6361 0
 4139 02e6 E423     		mov	r3, #228
 4140 02e8 F450     		str	r4, [r6, r3]
 4141 02ea 77E0     		b	.L226
 4142              	.LVL359:
 4143              	.L225:
6367:screens.c     **** 				switch( selection )
 4144              		.loc 1 6367 0
 4145 02ec 224B     		ldr	r3, .L307+16
 4146 02ee 1B78     		ldrb	r3, [r3]
 4147 02f0 012B     		cmp	r3, #1
 4148 02f2 17D0     		beq	.L241
 4149 02f4 002B     		cmp	r3, #0
 4150 02f6 04D0     		beq	.L240
 4151 02f8 022B     		cmp	r3, #2
 4152 02fa 24D0     		beq	.L242
 4153 02fc 032B     		cmp	r3, #3
 4154 02fe 6DD1     		bne	.L226
 4155 0300 5CE0     		b	.L243
 4156              	.L240:
6370:screens.c     **** 					pFac.pf.GW302_Density7 += PF_GW302_Density7[PF_STEP];
 4157              		.loc 1 6370 0
 4158 0302 204E     		ldr	r6, .L307+28
 4159 0304 E825     		mov	r5, #232
 4160 0306 264C     		ldr	r4, .L307+56
 4161              	.LVL360:
 4162 0308 7059     		ldr	r0, [r6, r5]
 4163 030a 2168     		ldr	r1, [r4]
 4164 030c FFF7FEFF 		bl	__aeabi_fadd
 4165              	.LVL361:
 4166 0310 7051     		str	r0, [r6, r5]
6371:screens.c     **** 					if( pFac.pf.GW302_Density7 > PF_GW302_Density7[PF_MAX] )
 4167              		.loc 1 6371 0
 4168 0312 A468     		ldr	r4, [r4, #8]
 4169 0314 211C     		add	r1, r4, #0
 4170 0316 FFF7FEFF 		bl	__aeabi_fcmpgt
 4171              	.LVL362:
 4172 031a 0028     		cmp	r0, #0
 4173 031c 5ED0     		beq	.L226
6372:screens.c     **** 						pFac.pf.GW302_Density7 = PF_GW302_Density7[PF_MAX]; // Limiting to maximum value
 4174              		.loc 1 6372 0
 4175 031e E823     		mov	r3, #232
 4176 0320 F450     		str	r4, [r6, r3]
 4177 0322 5BE0     		b	.L226
 4178              	.LVL363:
 4179              	.L241:
6376:screens.c     **** 					pFac.pf.GW302_Density8 += PF_GW302_Density8[PF_STEP];
 4180              		.loc 1 6376 0
 4181 0324 174E     		ldr	r6, .L307+28
 4182 0326 EC25     		mov	r5, #236
 4183 0328 1E4C     		ldr	r4, .L307+60
 4184              	.LVL364:
 4185 032a 7059     		ldr	r0, [r6, r5]
 4186 032c 2168     		ldr	r1, [r4]
 4187 032e FFF7FEFF 		bl	__aeabi_fadd
 4188              	.LVL365:
 4189 0332 7051     		str	r0, [r6, r5]
6377:screens.c     **** 					if( pFac.pf.GW302_Density8 > PF_GW302_Density8[PF_MAX] )
 4190              		.loc 1 6377 0
 4191 0334 A468     		ldr	r4, [r4, #8]
 4192 0336 211C     		add	r1, r4, #0
 4193 0338 FFF7FEFF 		bl	__aeabi_fcmpgt
 4194              	.LVL366:
 4195 033c 0028     		cmp	r0, #0
 4196 033e 4DD0     		beq	.L226
6378:screens.c     **** 						pFac.pf.GW302_Density8 = PF_GW302_Density8[PF_MAX]; // Limiting to maximum value
 4197              		.loc 1 6378 0
 4198 0340 EC23     		mov	r3, #236
 4199 0342 F450     		str	r4, [r6, r3]
 4200 0344 4AE0     		b	.L226
 4201              	.LVL367:
 4202              	.L242:
6382:screens.c     **** 					pFac.pf.GW302_Density9 += PF_GW302_Density9[PF_STEP];
 4203              		.loc 1 6382 0
 4204 0346 0F4E     		ldr	r6, .L307+28
 4205 0348 F025     		mov	r5, #240
 4206 034a 174C     		ldr	r4, .L307+64
 4207              	.LVL368:
 4208 034c 7059     		ldr	r0, [r6, r5]
 4209 034e 2168     		ldr	r1, [r4]
 4210 0350 FFF7FEFF 		bl	__aeabi_fadd
 4211              	.LVL369:
 4212 0354 7051     		str	r0, [r6, r5]
6383:screens.c     **** 					if( pFac.pf.GW302_Density9 > PF_GW302_Density9[PF_MAX] )
 4213              		.loc 1 6383 0
 4214 0356 A468     		ldr	r4, [r4, #8]
 4215 0358 211C     		add	r1, r4, #0
 4216 035a FFF7FEFF 		bl	__aeabi_fcmpgt
 4217              	.LVL370:
 4218 035e 0028     		cmp	r0, #0
 4219 0360 3CD0     		beq	.L226
6384:screens.c     **** 						pFac.pf.GW302_Density9 = PF_GW302_Density9[PF_MAX]; // Limiting to maximum value
 4220              		.loc 1 6384 0
 4221 0362 F023     		mov	r3, #240
 4222 0364 F450     		str	r4, [r6, r3]
 4223 0366 39E0     		b	.L226
 4224              	.L308:
 4225              		.align	2
 4226              	.L307:
 4227 0368 00000000 		.word	startup
 4228 036c 00000000 		.word	adm
 4229 0370 DC000000 		.word	.LC166
 4230 0374 00000000 		.word	.LANCHOR2
 4231 0378 00000000 		.word	selection
 4232 037c 00000000 		.word	editing
 4233 0380 00000000 		.word	.L209
 4234 0384 00000000 		.word	pFac
 4235 0388 00000000 		.word	PF_GW302_Density1
 4236 038c 00000000 		.word	PF_GW302_Density2
 4237 0390 00000000 		.word	PF_GW302_Density3
 4238 0394 00000000 		.word	PF_GW302_Density4
 4239 0398 00000000 		.word	PF_GW302_Density5
 4240 039c 00000000 		.word	PF_GW302_Density6
 4241 03a0 00000000 		.word	PF_GW302_Density7
 4242 03a4 00000000 		.word	PF_GW302_Density8
 4243 03a8 00000000 		.word	PF_GW302_Density9
 4244 03ac 00000000 		.word	PF_GW302_Density10
 4245 03b0 00000000 		.word	SavecalDelayWithinMenus
 4246 03b4 00000000 		.word	valuechanged
 4247 03b8 18000000 		.word	.L233
 4248              	.LVL371:
 4249              	.L243:
6388:screens.c     **** 					pFac.pf.GW302_Density10 += PF_GW302_Density10[PF_STEP];
 4250              		.loc 1 6388 0
 4251 03bc D04E     		ldr	r6, .L309
 4252 03be F425     		mov	r5, #244
 4253 03c0 D04C     		ldr	r4, .L309+4
 4254              	.LVL372:
 4255 03c2 7059     		ldr	r0, [r6, r5]
 4256 03c4 2168     		ldr	r1, [r4]
 4257 03c6 FFF7FEFF 		bl	__aeabi_fadd
 4258              	.LVL373:
 4259 03ca 7051     		str	r0, [r6, r5]
6389:screens.c     **** 					if( pFac.pf.GW302_Density10 > PF_GW302_Density10[PF_MAX] )
 4260              		.loc 1 6389 0
 4261 03cc A468     		ldr	r4, [r4, #8]
 4262 03ce 211C     		add	r1, r4, #0
 4263 03d0 FFF7FEFF 		bl	__aeabi_fcmpgt
 4264              	.LVL374:
 4265 03d4 0028     		cmp	r0, #0
 4266 03d6 01D0     		beq	.L226
6390:screens.c     **** 						pFac.pf.GW302_Density10 = PF_GW302_Density10[PF_MAX]; // Limiting to maximum value
 4267              		.loc 1 6390 0
 4268 03d8 F423     		mov	r3, #244
 4269 03da F450     		str	r4, [r6, r3]
 4270              	.L226:
6394:screens.c     **** 			SavecalDelayWithinMenus = 1;
 4271              		.loc 1 6394 0
 4272 03dc 0123     		mov	r3, #1
 4273 03de CA4A     		ldr	r2, .L309+8
 4274 03e0 1370     		strb	r3, [r2]
6395:screens.c     **** 			valuechanged = 1;
 4275              		.loc 1 6395 0
 4276 03e2 CA4A     		ldr	r2, .L309+12
 4277 03e4 1370     		strb	r3, [r2]
 4278              	.LVL375:
 4279 03e6 48E0     		b	.L198
 4280              	.LVL376:
 4281              	.L224:
6398:screens.c     **** 		else if( lkey == SW_CU ) // ^
 4282              		.loc 1 6398 0
 4283 03e8 202C     		cmp	r4, #32
 4284 03ea 07D1     		bne	.L248
6400:screens.c     **** 			if( selection )
 4285              		.loc 1 6400 0
 4286 03ec C84B     		ldr	r3, .L309+16
 4287 03ee 1B78     		ldrb	r3, [r3]
 4288 03f0 002B     		cmp	r3, #0
 4289 03f2 42D0     		beq	.L198
6402:screens.c     **** 				selection--;
 4290              		.loc 1 6402 0
 4291 03f4 013B     		sub	r3, r3, #1
 4292 03f6 C64A     		ldr	r2, .L309+16
 4293 03f8 1370     		strb	r3, [r2]
 4294              	.LVL377:
 4295 03fa 3EE0     		b	.L198
 4296              	.LVL378:
 4297              	.L248:
6406:screens.c     **** 		else if( lkey == SW_CD ) // V
 4298              		.loc 1 6406 0
 4299 03fc 402C     		cmp	r4, #64
 4300 03fe 13D1     		bne	.L249
6408:screens.c     **** 			if( page == 0 )
 4301              		.loc 1 6408 0
 4302 0400 C44B     		ldr	r3, .L309+20
 4303 0402 1B78     		ldrb	r3, [r3]
 4304 0404 002B     		cmp	r3, #0
 4305 0406 07D1     		bne	.L250
6410:screens.c     **** 				if( selection < 5 )
 4306              		.loc 1 6410 0
 4307 0408 C14B     		ldr	r3, .L309+16
 4308 040a 1B78     		ldrb	r3, [r3]
 4309 040c 042B     		cmp	r3, #4
 4310 040e 3AD8     		bhi	.L276
6412:screens.c     **** 					selection++;
 4311              		.loc 1 6412 0
 4312 0410 0133     		add	r3, r3, #1
 4313 0412 BF4A     		ldr	r2, .L309+16
 4314 0414 1370     		strb	r3, [r2]
 4315              	.LVL379:
 4316 0416 30E0     		b	.L198
 4317              	.LVL380:
 4318              	.L250:
6418:screens.c     **** 				if( selection < 3 )
 4319              		.loc 1 6418 0
 4320 0418 BD4B     		ldr	r3, .L309+16
 4321 041a 1B78     		ldrb	r3, [r3]
 4322 041c 022B     		cmp	r3, #2
 4323 041e 30D8     		bhi	.L252
6420:screens.c     **** 					selection++;
 4324              		.loc 1 6420 0
 4325 0420 0133     		add	r3, r3, #1
 4326 0422 BB4A     		ldr	r2, .L309+16
 4327 0424 1370     		strb	r3, [r2]
 4328              	.LVL381:
 4329 0426 28E0     		b	.L198
 4330              	.LVL382:
 4331              	.L249:
6425:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
 4332              		.loc 1 6425 0
 4333 0428 102C     		cmp	r4, #16
 4334 042a 03D0     		beq	.L304
 4335 042c 631E     		sub	r3, r4, #1
 4336 042e FF3B     		sub	r3, r3, #255
 4337 0430 002B     		cmp	r3, #0
 4338 0432 03D1     		bne	.L253
 4339              	.L304:
6427:screens.c     **** 			escape = 1;
 4340              		.loc 1 6427 0
 4341 0434 0122     		mov	r2, #1
 4342 0436 B84B     		ldr	r3, .L309+24
 4343 0438 1A70     		strb	r2, [r3]
 4344 043a 1EE0     		b	.L198
 4345              	.L253:
6429:screens.c     **** 		else if( lkey == SW_IR ) // PAGE
 4346              		.loc 1 6429 0
 4347 043c 082C     		cmp	r4, #8
 4348 043e 1CD1     		bne	.L198
6431:screens.c     **** 			page = page? 0:1;
 4349              		.loc 1 6431 0
 4350 0440 B44B     		ldr	r3, .L309+20
 4351 0442 1A78     		ldrb	r2, [r3]
 4352 0444 5142     		neg	r1, r2
 4353 0446 4A41     		adc	r2, r2, r1
 4354 0448 1A70     		strb	r2, [r3]
6433:screens.c     **** 			selection = 0;
 4355              		.loc 1 6433 0
 4356 044a 0022     		mov	r2, #0
 4357 044c B04B     		ldr	r3, .L309+16
 4358 044e 1A70     		strb	r2, [r3]
 4359 0450 13E0     		b	.L198
 4360              	.L199:
6440:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 4361              		.loc 1 6440 0
 4362 0452 B24B     		ldr	r3, .L309+28
 4363 0454 1B78     		ldrb	r3, [r3]
 4364 0456 002B     		cmp	r3, #0
 4365 0458 03D1     		bne	.L255
6440:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 4366              		.loc 1 6440 0 is_stmt 0 discriminator 1
 4367 045a AB4B     		ldr	r3, .L309+8
 4368 045c 1B78     		ldrb	r3, [r3]
 4369 045e 002B     		cmp	r3, #0
 4370 0460 0BD0     		beq	.L198
 4371              	.L255:
6442:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 4372              		.loc 1 6442 0 is_stmt 1
 4373 0462 AF4B     		ldr	r3, .L309+32
 4374 0464 1B78     		ldrb	r3, [r3]
 4375 0466 032B     		cmp	r3, #3
 4376 0468 07D9     		bls	.L198
6444:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 4377              		.loc 1 6444 0
 4378 046a 0023     		mov	r3, #0
 4379 046c AB4A     		ldr	r2, .L309+28
 4380 046e 1370     		strb	r3, [r2]
6445:screens.c     **** 				SavecalDelayWithinMenus = 0;
 4381              		.loc 1 6445 0
 4382 0470 A54A     		ldr	r2, .L309+8
 4383 0472 1370     		strb	r3, [r2]
6446:screens.c     **** 				savecal = 1;
 4384              		.loc 1 6446 0
 4385 0474 0122     		mov	r2, #1
 4386 0476 AB4B     		ldr	r3, .L309+36
 4387 0478 1A70     		strb	r2, [r3]
 4388              	.LVL383:
 4389              	.L198:
6455:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 4390              		.loc 1 6455 0
 4391 047a A64B     		ldr	r3, .L309+20
 4392 047c 1B78     		ldrb	r3, [r3]
 4393 047e 002B     		cmp	r3, #0
 4394 0480 03D0     		beq	.L277
 4395              	.LVL384:
 4396              	.L252:
6455:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 4397              		.loc 1 6455 0 is_stmt 0 discriminator 2
 4398 0482 A948     		ldr	r0, .L309+40
 4399 0484 02E0     		b	.L251
 4400              	.LVL385:
 4401              	.L276:
6455:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 4402              		.loc 1 6455 0
 4403 0486 A948     		ldr	r0, .L309+44
 4404 0488 00E0     		b	.L251
 4405              	.LVL386:
 4406              	.L277:
 4407 048a A848     		ldr	r0, .L309+44
 4408              	.LVL387:
 4409              	.L251:
6455:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 4410              		.loc 1 6455 0 discriminator 3
 4411 048c 0024     		mov	r4, #0
 4412 048e 0094     		str	r4, [sp]
 4413 0490 1A21     		mov	r1, #26
 4414 0492 8622     		mov	r2, #134
 4415 0494 0723     		mov	r3, #7
 4416 0496 FFF7FEFF 		bl	display_f1_text
 4417              	.LVL388:
6456:screens.c     **** 		display_f1_text( "/2", TSMAX, 140, 7, FIXED );
 4418              		.loc 1 6456 0 is_stmt 1 discriminator 3
 4419 049a 0094     		str	r4, [sp]
 4420 049c A448     		ldr	r0, .L309+48
 4421 049e 1A21     		mov	r1, #26
 4422 04a0 8C22     		mov	r2, #140
 4423 04a2 0723     		mov	r3, #7
 4424 04a4 FFF7FEFF 		bl	display_f1_text
 4425              	.LVL389:
6459:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
 4426              		.loc 1 6459 0 discriminator 3
 4427 04a8 6423     		mov	r3, #100
 4428 04aa 0093     		str	r3, [sp]
 4429 04ac 4023     		mov	r3, #64
 4430 04ae 0193     		str	r3, [sp, #4]
 4431 04b0 A048     		ldr	r0, .L309+52
 4432 04b2 1521     		mov	r1, #21
 4433 04b4 1522     		mov	r2, #21
 4434 04b6 9C23     		mov	r3, #156
 4435 04b8 FFF7FEFF 		bl	draw_box
 4436              	.LVL390:
6462:screens.c     **** 		if( page == 0 )
 4437              		.loc 1 6462 0 discriminator 3
 4438 04bc 954B     		ldr	r3, .L309+20
 4439 04be 1B78     		ldrb	r3, [r3]
 4440 04c0 002B     		cmp	r3, #0
 4441 04c2 55D1     		bne	.L256
6464:screens.c     **** 			display_f1_text( "Density 1", TSMAX, 24, 21, FIXED );
 4442              		.loc 1 6464 0
 4443 04c4 0094     		str	r4, [sp]
 4444 04c6 9C48     		ldr	r0, .L309+56
 4445 04c8 1A21     		mov	r1, #26
 4446 04ca 1822     		mov	r2, #24
 4447 04cc 1523     		mov	r3, #21
 4448 04ce FFF7FEFF 		bl	display_f1_text
 4449              	.LVL391:
6465:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 21, FIXED );
 4450              		.loc 1 6465 0
 4451 04d2 9A4D     		ldr	r5, .L309+60
 4452 04d4 0094     		str	r4, [sp]
 4453 04d6 281C     		mov	r0, r5
 4454 04d8 1A21     		mov	r1, #26
 4455 04da 9122     		mov	r2, #145
 4456 04dc 1523     		mov	r3, #21
 4457 04de FFF7FEFF 		bl	display_f1_text
 4458              	.LVL392:
6467:screens.c     **** 			display_f1_text( "Density 2", TSMAX, 24, 31, FIXED );
 4459              		.loc 1 6467 0
 4460 04e2 0094     		str	r4, [sp]
 4461 04e4 9648     		ldr	r0, .L309+64
 4462 04e6 1A21     		mov	r1, #26
 4463 04e8 1822     		mov	r2, #24
 4464 04ea 1F23     		mov	r3, #31
 4465 04ec FFF7FEFF 		bl	display_f1_text
 4466              	.LVL393:
6468:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
 4467              		.loc 1 6468 0
 4468 04f0 0094     		str	r4, [sp]
 4469 04f2 281C     		mov	r0, r5
 4470 04f4 1A21     		mov	r1, #26
 4471 04f6 9122     		mov	r2, #145
 4472 04f8 1F23     		mov	r3, #31
 4473 04fa FFF7FEFF 		bl	display_f1_text
 4474              	.LVL394:
6470:screens.c     **** 			display_f1_text( "Density 3", TSMAX, 24, 41, FIXED );
 4475              		.loc 1 6470 0
 4476 04fe 0094     		str	r4, [sp]
 4477 0500 9048     		ldr	r0, .L309+68
 4478 0502 1A21     		mov	r1, #26
 4479 0504 1822     		mov	r2, #24
 4480 0506 2923     		mov	r3, #41
 4481 0508 FFF7FEFF 		bl	display_f1_text
 4482              	.LVL395:
6471:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 41, FIXED );
 4483              		.loc 1 6471 0
 4484 050c 0094     		str	r4, [sp]
 4485 050e 281C     		mov	r0, r5
 4486 0510 1A21     		mov	r1, #26
 4487 0512 9122     		mov	r2, #145
 4488 0514 2923     		mov	r3, #41
 4489 0516 FFF7FEFF 		bl	display_f1_text
 4490              	.LVL396:
6473:screens.c     **** 			display_f1_text( "Density 4", TSMAX, 24, 51, FIXED );
 4491              		.loc 1 6473 0
 4492 051a 0094     		str	r4, [sp]
 4493 051c 8A48     		ldr	r0, .L309+72
 4494 051e 1A21     		mov	r1, #26
 4495 0520 1822     		mov	r2, #24
 4496 0522 3323     		mov	r3, #51
 4497 0524 FFF7FEFF 		bl	display_f1_text
 4498              	.LVL397:
6474:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 51, FIXED );
 4499              		.loc 1 6474 0
 4500 0528 0094     		str	r4, [sp]
 4501 052a 281C     		mov	r0, r5
 4502 052c 1A21     		mov	r1, #26
 4503 052e 9122     		mov	r2, #145
 4504 0530 3323     		mov	r3, #51
 4505 0532 FFF7FEFF 		bl	display_f1_text
 4506              	.LVL398:
6476:screens.c     **** 			display_f1_text( "Density 5", TSMAX, 24, 61, FIXED );
 4507              		.loc 1 6476 0
 4508 0536 0094     		str	r4, [sp]
 4509 0538 8448     		ldr	r0, .L309+76
 4510 053a 1A21     		mov	r1, #26
 4511 053c 1822     		mov	r2, #24
 4512 053e 3D23     		mov	r3, #61
 4513 0540 FFF7FEFF 		bl	display_f1_text
 4514              	.LVL399:
6477:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 61, FIXED );
 4515              		.loc 1 6477 0
 4516 0544 0094     		str	r4, [sp]
 4517 0546 281C     		mov	r0, r5
 4518 0548 1A21     		mov	r1, #26
 4519 054a 9122     		mov	r2, #145
 4520 054c 3D23     		mov	r3, #61
 4521 054e FFF7FEFF 		bl	display_f1_text
 4522              	.LVL400:
6479:screens.c     **** 			display_f1_text( "Density 6", TSMAX, 24, 71, FIXED );
 4523              		.loc 1 6479 0
 4524 0552 0094     		str	r4, [sp]
 4525 0554 7E48     		ldr	r0, .L309+80
 4526 0556 1A21     		mov	r1, #26
 4527 0558 1822     		mov	r2, #24
 4528 055a 4723     		mov	r3, #71
 4529 055c FFF7FEFF 		bl	display_f1_text
 4530              	.LVL401:
6480:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 71, FIXED );
 4531              		.loc 1 6480 0
 4532 0560 0094     		str	r4, [sp]
 4533 0562 281C     		mov	r0, r5
 4534 0564 1A21     		mov	r1, #26
 4535 0566 9122     		mov	r2, #145
 4536 0568 4723     		mov	r3, #71
 4537 056a FFF7FEFF 		bl	display_f1_text
 4538              	.LVL402:
 4539 056e 39E0     		b	.L257
 4540              	.L256:
6484:screens.c     **** 			display_f1_text( "Density 7", TSMAX, 24, 21, FIXED );
 4541              		.loc 1 6484 0
 4542 0570 0024     		mov	r4, #0
 4543 0572 0094     		str	r4, [sp]
 4544 0574 7748     		ldr	r0, .L309+84
 4545 0576 1A21     		mov	r1, #26
 4546 0578 1822     		mov	r2, #24
 4547 057a 1523     		mov	r3, #21
 4548 057c FFF7FEFF 		bl	display_f1_text
 4549              	.LVL403:
6485:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 21, FIXED );
 4550              		.loc 1 6485 0
 4551 0580 6E4D     		ldr	r5, .L309+60
 4552 0582 0094     		str	r4, [sp]
 4553 0584 281C     		mov	r0, r5
 4554 0586 1A21     		mov	r1, #26
 4555 0588 9122     		mov	r2, #145
 4556 058a 1523     		mov	r3, #21
 4557 058c FFF7FEFF 		bl	display_f1_text
 4558              	.LVL404:
6487:screens.c     **** 			display_f1_text( "Density 8", TSMAX, 24, 31, FIXED );
 4559              		.loc 1 6487 0
 4560 0590 0094     		str	r4, [sp]
 4561 0592 7148     		ldr	r0, .L309+88
 4562 0594 1A21     		mov	r1, #26
 4563 0596 1822     		mov	r2, #24
 4564 0598 1F23     		mov	r3, #31
 4565 059a FFF7FEFF 		bl	display_f1_text
 4566              	.LVL405:
6488:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
 4567              		.loc 1 6488 0
 4568 059e 0094     		str	r4, [sp]
 4569 05a0 281C     		mov	r0, r5
 4570 05a2 1A21     		mov	r1, #26
 4571 05a4 9122     		mov	r2, #145
 4572 05a6 1F23     		mov	r3, #31
 4573 05a8 FFF7FEFF 		bl	display_f1_text
 4574              	.LVL406:
6490:screens.c     **** 			display_f1_text( "Density 9", TSMAX, 24, 41, FIXED );
 4575              		.loc 1 6490 0
 4576 05ac 0094     		str	r4, [sp]
 4577 05ae 6B48     		ldr	r0, .L309+92
 4578 05b0 1A21     		mov	r1, #26
 4579 05b2 1822     		mov	r2, #24
 4580 05b4 2923     		mov	r3, #41
 4581 05b6 FFF7FEFF 		bl	display_f1_text
 4582              	.LVL407:
6491:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 41, FIXED );
 4583              		.loc 1 6491 0
 4584 05ba 0094     		str	r4, [sp]
 4585 05bc 281C     		mov	r0, r5
 4586 05be 1A21     		mov	r1, #26
 4587 05c0 9122     		mov	r2, #145
 4588 05c2 2923     		mov	r3, #41
 4589 05c4 FFF7FEFF 		bl	display_f1_text
 4590              	.LVL408:
6493:screens.c     **** 			display_f1_text( "Density 10", TSMAX, 24, 51, FIXED );
 4591              		.loc 1 6493 0
 4592 05c8 0094     		str	r4, [sp]
 4593 05ca 6548     		ldr	r0, .L309+96
 4594 05cc 1A21     		mov	r1, #26
 4595 05ce 1822     		mov	r2, #24
 4596 05d0 3323     		mov	r3, #51
 4597 05d2 FFF7FEFF 		bl	display_f1_text
 4598              	.LVL409:
6494:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 51, FIXED );
 4599              		.loc 1 6494 0
 4600 05d6 0094     		str	r4, [sp]
 4601 05d8 281C     		mov	r0, r5
 4602 05da 1A21     		mov	r1, #26
 4603 05dc 9122     		mov	r2, #145
 4604 05de 3323     		mov	r3, #51
 4605 05e0 FFF7FEFF 		bl	display_f1_text
 4606              	.LVL410:
 4607              	.L257:
6506:screens.c     **** 		if( page == 0 )
 4608              		.loc 1 6506 0
 4609 05e4 4B4B     		ldr	r3, .L309+20
 4610 05e6 1B78     		ldrb	r3, [r3]
 4611 05e8 002B     		cmp	r3, #0
 4612 05ea 00D0     		beq	.LCB4477
 4613 05ec C8E0     		b	.L258	@long jump
 4614              	.LCB4477:
6508:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density1,
 4615              		.loc 1 6508 0
 4616 05ee 444A     		ldr	r2, .L309
 4617 05f0 9346     		mov	fp, r2
 4618 05f2 D023     		mov	r3, #208
 4619 05f4 D058     		ldr	r0, [r2, r3]
 4620 05f6 5B4B     		ldr	r3, .L309+100
 4621 05f8 5968     		ldr	r1, [r3, #4]
 4622 05fa 9A68     		ldr	r2, [r3, #8]
 4623 05fc FE25     		mov	r5, #254
 4624 05fe AD05     		lsl	r5, r5, #22
 4625 0600 0223     		mov	r3, #2
 4626 0602 9A46     		mov	sl, r3
 4627 0604 0093     		str	r3, [sp]
 4628 0606 8E23     		mov	r3, #142
 4629 0608 9946     		mov	r9, r3
 4630 060a 0193     		str	r3, [sp, #4]
 4631 060c 1523     		mov	r3, #21
 4632 060e 0293     		str	r3, [sp, #8]
 4633 0610 1E23     		mov	r3, #30
 4634 0612 9846     		mov	r8, r3
 4635 0614 0393     		str	r3, [sp, #12]
 4636 0616 1027     		mov	r7, #16
 4637 0618 0497     		str	r7, [sp, #16]
 4638 061a 534E     		ldr	r6, .L309+104
 4639 061c 0596     		str	r6, [sp, #20]
 4640 061e 0024     		mov	r4, #0
 4641 0620 0694     		str	r4, [sp, #24]
 4642 0622 0794     		str	r4, [sp, #28]
 4643 0624 2B1C     		add	r3, r5, #0
 4644 0626 FFF7FEFF 		bl	display_number
 4645              	.LVL411:
6511:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density2,
 4646              		.loc 1 6511 0
 4647 062a D423     		mov	r3, #212
 4648 062c 5A46     		mov	r2, fp
 4649 062e D058     		ldr	r0, [r2, r3]
 4650 0630 4E4B     		ldr	r3, .L309+108
 4651 0632 5968     		ldr	r1, [r3, #4]
 4652 0634 9A68     		ldr	r2, [r3, #8]
 4653 0636 5346     		mov	r3, sl
 4654 0638 0093     		str	r3, [sp]
 4655 063a 4B46     		mov	r3, r9
 4656 063c 0193     		str	r3, [sp, #4]
 4657 063e 1F23     		mov	r3, #31
 4658 0640 0293     		str	r3, [sp, #8]
 4659 0642 4346     		mov	r3, r8
 4660 0644 0393     		str	r3, [sp, #12]
 4661 0646 0497     		str	r7, [sp, #16]
 4662 0648 0596     		str	r6, [sp, #20]
 4663 064a 0694     		str	r4, [sp, #24]
 4664 064c 0794     		str	r4, [sp, #28]
 4665 064e 2B1C     		add	r3, r5, #0
 4666 0650 FFF7FEFF 		bl	display_number
 4667              	.LVL412:
6514:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density3,
 4668              		.loc 1 6514 0
 4669 0654 D823     		mov	r3, #216
 4670 0656 5A46     		mov	r2, fp
 4671 0658 D058     		ldr	r0, [r2, r3]
 4672 065a 454B     		ldr	r3, .L309+112
 4673 065c 5968     		ldr	r1, [r3, #4]
 4674 065e 9A68     		ldr	r2, [r3, #8]
 4675 0660 5346     		mov	r3, sl
 4676 0662 0093     		str	r3, [sp]
 4677 0664 4B46     		mov	r3, r9
 4678 0666 0193     		str	r3, [sp, #4]
 4679 0668 2923     		mov	r3, #41
 4680 066a 0293     		str	r3, [sp, #8]
 4681 066c 4346     		mov	r3, r8
 4682 066e 0393     		str	r3, [sp, #12]
 4683 0670 0497     		str	r7, [sp, #16]
 4684 0672 0596     		str	r6, [sp, #20]
 4685 0674 0694     		str	r4, [sp, #24]
 4686 0676 0794     		str	r4, [sp, #28]
 4687 0678 2B1C     		add	r3, r5, #0
 4688 067a FFF7FEFF 		bl	display_number
 4689              	.LVL413:
6517:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density4,
 4690              		.loc 1 6517 0
 4691 067e DC23     		mov	r3, #220
 4692 0680 5A46     		mov	r2, fp
 4693 0682 D058     		ldr	r0, [r2, r3]
 4694 0684 3B4B     		ldr	r3, .L309+116
 4695 0686 5968     		ldr	r1, [r3, #4]
 4696 0688 9A68     		ldr	r2, [r3, #8]
 4697 068a 5346     		mov	r3, sl
 4698 068c 0093     		str	r3, [sp]
 4699 068e 4B46     		mov	r3, r9
 4700 0690 0193     		str	r3, [sp, #4]
 4701 0692 3323     		mov	r3, #51
 4702 0694 0293     		str	r3, [sp, #8]
 4703 0696 4346     		mov	r3, r8
 4704 0698 0393     		str	r3, [sp, #12]
 4705 069a 0497     		str	r7, [sp, #16]
 4706 069c 0596     		str	r6, [sp, #20]
 4707 069e 0694     		str	r4, [sp, #24]
 4708 06a0 0794     		str	r4, [sp, #28]
 4709 06a2 2B1C     		add	r3, r5, #0
 4710 06a4 FFF7FEFF 		bl	display_number
 4711              	.LVL414:
6520:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density5,
 4712              		.loc 1 6520 0
 4713 06a8 E023     		mov	r3, #224
 4714 06aa 5A46     		mov	r2, fp
 4715 06ac D058     		ldr	r0, [r2, r3]
 4716 06ae 324B     		ldr	r3, .L309+120
 4717 06b0 5968     		ldr	r1, [r3, #4]
 4718 06b2 9A68     		ldr	r2, [r3, #8]
 4719 06b4 5346     		mov	r3, sl
 4720 06b6 0093     		str	r3, [sp]
 4721 06b8 4B46     		mov	r3, r9
 4722 06ba 0193     		str	r3, [sp, #4]
 4723 06bc 3D23     		mov	r3, #61
 4724 06be 0293     		str	r3, [sp, #8]
 4725 06c0 4346     		mov	r3, r8
 4726 06c2 0393     		str	r3, [sp, #12]
 4727 06c4 0497     		str	r7, [sp, #16]
 4728 06c6 0596     		str	r6, [sp, #20]
 4729 06c8 0694     		str	r4, [sp, #24]
 4730 06ca 0794     		str	r4, [sp, #28]
 4731 06cc 2B1C     		add	r3, r5, #0
 4732 06ce FFF7FEFF 		bl	display_number
 4733              	.LVL415:
6523:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density6,
 4734              		.loc 1 6523 0
 4735 06d2 E423     		mov	r3, #228
 4736 06d4 5A46     		mov	r2, fp
 4737 06d6 D058     		ldr	r0, [r2, r3]
 4738 06d8 284B     		ldr	r3, .L309+124
 4739 06da 5968     		ldr	r1, [r3, #4]
 4740 06dc 9A68     		ldr	r2, [r3, #8]
 4741 06de 5346     		mov	r3, sl
 4742 06e0 0093     		str	r3, [sp]
 4743 06e2 4B46     		mov	r3, r9
 4744 06e4 0193     		str	r3, [sp, #4]
 4745 06e6 4723     		mov	r3, #71
 4746 06e8 0293     		str	r3, [sp, #8]
 4747 06ea 4346     		mov	r3, r8
 4748 06ec 0393     		str	r3, [sp, #12]
 4749 06ee 0497     		str	r7, [sp, #16]
 4750 06f0 0596     		str	r6, [sp, #20]
 4751 06f2 0694     		str	r4, [sp, #24]
 4752 06f4 0794     		str	r4, [sp, #28]
 4753 06f6 2B1C     		add	r3, r5, #0
 4754 06f8 FFF7FEFF 		bl	display_number
 4755              	.LVL416:
 4756 06fc 9DE0     		b	.L259
 4757              	.L310:
 4758 06fe C046     		.align	2
 4759              	.L309:
 4760 0700 00000000 		.word	pFac
 4761 0704 00000000 		.word	PF_GW302_Density10
 4762 0708 00000000 		.word	SavecalDelayWithinMenus
 4763 070c 00000000 		.word	valuechanged
 4764 0710 00000000 		.word	selection
 4765 0714 00000000 		.word	.LANCHOR2
 4766 0718 00000000 		.word	escape
 4767 071c 00000000 		.word	SavecalDelayOnMainDisplay
 4768 0720 00000000 		.word	swrel
 4769 0724 00000000 		.word	savecal
 4770 0728 D8000000 		.word	.LC162
 4771 072c D4000000 		.word	.LC160
 4772 0730 EC000000 		.word	.LC190
 4773 0734 00000000 		.word	adm
 4774 0738 F0000000 		.word	.LC192
 4775 073c 00000000 		.word	.LC64
 4776 0740 FC000000 		.word	.LC195
 4777 0744 08010000 		.word	.LC197
 4778 0748 14010000 		.word	.LC199
 4779 074c 20010000 		.word	.LC201
 4780 0750 2C010000 		.word	.LC203
 4781 0754 38010000 		.word	.LC205
 4782 0758 44010000 		.word	.LC207
 4783 075c 50010000 		.word	.LC209
 4784 0760 5C010000 		.word	.LC211
 4785 0764 00000000 		.word	PF_GW302_Density1
 4786 0768 00000000 		.word	RDSfnt1
 4787 076c 00000000 		.word	PF_GW302_Density2
 4788 0770 00000000 		.word	PF_GW302_Density3
 4789 0774 00000000 		.word	PF_GW302_Density4
 4790 0778 00000000 		.word	PF_GW302_Density5
 4791 077c 00000000 		.word	PF_GW302_Density6
 4792              	.L258:
6529:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density7,
 4793              		.loc 1 6529 0
 4794 0780 D74A     		ldr	r2, .L311
 4795 0782 9346     		mov	fp, r2
 4796 0784 E823     		mov	r3, #232
 4797 0786 D058     		ldr	r0, [r2, r3]
 4798 0788 D64B     		ldr	r3, .L311+4
 4799 078a 5968     		ldr	r1, [r3, #4]
 4800 078c 9A68     		ldr	r2, [r3, #8]
 4801 078e FE25     		mov	r5, #254
 4802 0790 AD05     		lsl	r5, r5, #22
 4803 0792 0223     		mov	r3, #2
 4804 0794 9A46     		mov	sl, r3
 4805 0796 0093     		str	r3, [sp]
 4806 0798 8E23     		mov	r3, #142
 4807 079a 9946     		mov	r9, r3
 4808 079c 0193     		str	r3, [sp, #4]
 4809 079e 1523     		mov	r3, #21
 4810 07a0 0293     		str	r3, [sp, #8]
 4811 07a2 1E23     		mov	r3, #30
 4812 07a4 9846     		mov	r8, r3
 4813 07a6 0393     		str	r3, [sp, #12]
 4814 07a8 1027     		mov	r7, #16
 4815 07aa 0497     		str	r7, [sp, #16]
 4816 07ac CE4E     		ldr	r6, .L311+8
 4817 07ae 0596     		str	r6, [sp, #20]
 4818 07b0 0024     		mov	r4, #0
 4819 07b2 0694     		str	r4, [sp, #24]
 4820 07b4 0794     		str	r4, [sp, #28]
 4821 07b6 2B1C     		add	r3, r5, #0
 4822 07b8 FFF7FEFF 		bl	display_number
 4823              	.LVL417:
6532:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density8,
 4824              		.loc 1 6532 0
 4825 07bc EC23     		mov	r3, #236
 4826 07be 5A46     		mov	r2, fp
 4827 07c0 D058     		ldr	r0, [r2, r3]
 4828 07c2 CA4B     		ldr	r3, .L311+12
 4829 07c4 5968     		ldr	r1, [r3, #4]
 4830 07c6 9A68     		ldr	r2, [r3, #8]
 4831 07c8 5346     		mov	r3, sl
 4832 07ca 0093     		str	r3, [sp]
 4833 07cc 4B46     		mov	r3, r9
 4834 07ce 0193     		str	r3, [sp, #4]
 4835 07d0 1F23     		mov	r3, #31
 4836 07d2 0293     		str	r3, [sp, #8]
 4837 07d4 4346     		mov	r3, r8
 4838 07d6 0393     		str	r3, [sp, #12]
 4839 07d8 0497     		str	r7, [sp, #16]
 4840 07da 0596     		str	r6, [sp, #20]
 4841 07dc 0694     		str	r4, [sp, #24]
 4842 07de 0794     		str	r4, [sp, #28]
 4843 07e0 2B1C     		add	r3, r5, #0
 4844 07e2 FFF7FEFF 		bl	display_number
 4845              	.LVL418:
6535:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density9,
 4846              		.loc 1 6535 0
 4847 07e6 F023     		mov	r3, #240
 4848 07e8 5A46     		mov	r2, fp
 4849 07ea D058     		ldr	r0, [r2, r3]
 4850 07ec C04B     		ldr	r3, .L311+16
 4851 07ee 5968     		ldr	r1, [r3, #4]
 4852 07f0 9A68     		ldr	r2, [r3, #8]
 4853 07f2 5346     		mov	r3, sl
 4854 07f4 0093     		str	r3, [sp]
 4855 07f6 4B46     		mov	r3, r9
 4856 07f8 0193     		str	r3, [sp, #4]
 4857 07fa 2923     		mov	r3, #41
 4858 07fc 0293     		str	r3, [sp, #8]
 4859 07fe 4346     		mov	r3, r8
 4860 0800 0393     		str	r3, [sp, #12]
 4861 0802 0497     		str	r7, [sp, #16]
 4862 0804 0596     		str	r6, [sp, #20]
 4863 0806 0694     		str	r4, [sp, #24]
 4864 0808 0794     		str	r4, [sp, #28]
 4865 080a 2B1C     		add	r3, r5, #0
 4866 080c FFF7FEFF 		bl	display_number
 4867              	.LVL419:
6538:screens.c     **** 			display_number( (float)pFac.pf.GW302_Density10,
 4868              		.loc 1 6538 0
 4869 0810 F423     		mov	r3, #244
 4870 0812 5A46     		mov	r2, fp
 4871 0814 D058     		ldr	r0, [r2, r3]
 4872 0816 B74B     		ldr	r3, .L311+20
 4873 0818 5968     		ldr	r1, [r3, #4]
 4874 081a 9A68     		ldr	r2, [r3, #8]
 4875 081c 5346     		mov	r3, sl
 4876 081e 0093     		str	r3, [sp]
 4877 0820 4B46     		mov	r3, r9
 4878 0822 0193     		str	r3, [sp, #4]
 4879 0824 3323     		mov	r3, #51
 4880 0826 0293     		str	r3, [sp, #8]
 4881 0828 4346     		mov	r3, r8
 4882 082a 0393     		str	r3, [sp, #12]
 4883 082c 0497     		str	r7, [sp, #16]
 4884 082e 0596     		str	r6, [sp, #20]
 4885 0830 0694     		str	r4, [sp, #24]
 4886 0832 0794     		str	r4, [sp, #28]
 4887 0834 2B1C     		add	r3, r5, #0
 4888 0836 FFF7FEFF 		bl	display_number
 4889              	.LVL420:
 4890              	.L259:
6549:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs 
 4891              		.loc 1 6549 0
 4892 083a 7E23     		mov	r3, #126
 4893 083c 0093     		str	r3, [sp]
 4894 083e 4023     		mov	r3, #64
 4895 0840 0193     		str	r3, [sp, #4]
 4896 0842 AD48     		ldr	r0, .L311+24
 4897 0844 0121     		mov	r1, #1
 4898 0846 6622     		mov	r2, #102
 4899 0848 9E23     		mov	r3, #158
 4900 084a FFF7FEFF 		bl	draw_box
 4901              	.LVL421:
6550:screens.c     **** 		if( page == 0 )
 4902              		.loc 1 6550 0
 4903 084e AB4B     		ldr	r3, .L311+28
 4904 0850 1B78     		ldrb	r3, [r3]
 4905 0852 002B     		cmp	r3, #0
 4906 0854 00D0     		beq	.LCB4763
 4907 0856 A9E0     		b	.L260	@long jump
 4908              	.LCB4763:
6553:screens.c     **** 			switch( selection ) 
 4909              		.loc 1 6553 0
 4910 0858 A94B     		ldr	r3, .L311+32
 4911 085a 1B78     		ldrb	r3, [r3]
 4912 085c 042B     		cmp	r3, #4
 4913 085e 02D8     		bhi	.L265
 4914 0860 002B     		cmp	r3, #0
 4915 0862 39D1     		bne	.L263
 4916 0864 03E0     		b	.L305
 4917              	.L265:
 4918 0866 052B     		cmp	r3, #5
 4919 0868 00D0     		beq	.LCB4781
 4920 086a 6DE1     		b	.L261	@long jump
 4921              	.LCB4781:
 4922 086c 69E0     		b	.L264
 4923              	.L305:
6556:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 4924              		.loc 1 6556 0
 4925 086e A24C     		ldr	r4, .L311+24
 4926 0870 0225     		mov	r5, #2
 4927 0872 0095     		str	r5, [sp]
 4928 0874 201C     		mov	r0, r4
 4929 0876 A349     		ldr	r1, .L311+36
 4930 0878 0022     		mov	r2, #0
 4931 087a 6B23     		mov	r3, #107
 4932 087c FFF7FEFF 		bl	write_bitmap
 4933              	.LVL422:
6557:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 4934              		.loc 1 6557 0
 4935 0880 0095     		str	r5, [sp]
 4936 0882 201C     		mov	r0, r4
 4937 0884 A049     		ldr	r1, .L311+40
 4938 0886 1F22     		mov	r2, #31
 4939 0888 6B23     		mov	r3, #107
 4940 088a FFF7FEFF 		bl	write_bitmap
 4941              	.LVL423:
6558:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 4942              		.loc 1 6558 0
 4943 088e 0095     		str	r5, [sp]
 4944 0890 201C     		mov	r0, r4
 4945 0892 9E49     		ldr	r1, .L311+44
 4946 0894 3E22     		mov	r2, #62
 4947 0896 6623     		mov	r3, #102
 4948 0898 FFF7FEFF 		bl	write_bitmap
 4949              	.LVL424:
6559:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 4950              		.loc 1 6559 0
 4951 089c 0095     		str	r5, [sp]
 4952 089e 201C     		mov	r0, r4
 4953 08a0 9B49     		ldr	r1, .L311+48
 4954 08a2 6322     		mov	r2, #99
 4955 08a4 6B23     		mov	r3, #107
 4956 08a6 FFF7FEFF 		bl	write_bitmap
 4957              	.LVL425:
6560:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 4958              		.loc 1 6560 0
 4959 08aa 944B     		ldr	r3, .L311+28
 4960 08ac 1B78     		ldrb	r3, [r3]
 4961 08ae 002B     		cmp	r3, #0
 4962 08b0 01D1     		bne	.L278
 4963 08b2 9848     		ldr	r0, .L311+52
 4964 08b4 00E0     		b	.L266
 4965              	.L278:
 4966 08b6 9848     		ldr	r0, .L311+56
 4967              	.L266:
6560:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 4968              		.loc 1 6560 0 is_stmt 0 discriminator 3
 4969 08b8 0023     		mov	r3, #0
 4970 08ba 0093     		str	r3, [sp]
 4971 08bc 1A21     		mov	r1, #26
 4972 08be 7622     		mov	r2, #118
 4973 08c0 7123     		mov	r3, #113
 4974 08c2 FFF7FEFF 		bl	display_f1_text
 4975              	.LVL426:
6561:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 4976              		.loc 1 6561 0 is_stmt 1 discriminator 3
 4977 08c6 0223     		mov	r3, #2
 4978 08c8 0093     		str	r3, [sp]
 4979 08ca 8B48     		ldr	r0, .L311+24
 4980 08cc 9349     		ldr	r1, .L311+60
 4981 08ce 8222     		mov	r2, #130
 4982 08d0 6B23     		mov	r3, #107
 4983 08d2 FFF7FEFF 		bl	write_bitmap
 4984              	.LVL427:
6562:screens.c     **** 				break;
 4985              		.loc 1 6562 0 discriminator 3
 4986 08d6 37E1     		b	.L261
 4987              	.L263:
6568:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 4988              		.loc 1 6568 0
 4989 08d8 874C     		ldr	r4, .L311+24
 4990 08da 0225     		mov	r5, #2
 4991 08dc 0095     		str	r5, [sp]
 4992 08de 201C     		mov	r0, r4
 4993 08e0 8849     		ldr	r1, .L311+36
 4994 08e2 0022     		mov	r2, #0
 4995 08e4 6B23     		mov	r3, #107
 4996 08e6 FFF7FEFF 		bl	write_bitmap
 4997              	.LVL428:
6569:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 4998              		.loc 1 6569 0
 4999 08ea 0095     		str	r5, [sp]
 5000 08ec 201C     		mov	r0, r4
 5001 08ee 8649     		ldr	r1, .L311+40
 5002 08f0 1F22     		mov	r2, #31
 5003 08f2 6B23     		mov	r3, #107
 5004 08f4 FFF7FEFF 		bl	write_bitmap
 5005              	.LVL429:
6570:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 5006              		.loc 1 6570 0
 5007 08f8 0095     		str	r5, [sp]
 5008 08fa 201C     		mov	r0, r4
 5009 08fc 8849     		ldr	r1, .L311+64
 5010 08fe 3E22     		mov	r2, #62
 5011 0900 6623     		mov	r3, #102
 5012 0902 FFF7FEFF 		bl	write_bitmap
 5013              	.LVL430:
6571:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 5014              		.loc 1 6571 0
 5015 0906 0095     		str	r5, [sp]
 5016 0908 201C     		mov	r0, r4
 5017 090a 8149     		ldr	r1, .L311+48
 5018 090c 6322     		mov	r2, #99
 5019 090e 6B23     		mov	r3, #107
 5020 0910 FFF7FEFF 		bl	write_bitmap
 5021              	.LVL431:
6572:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5022              		.loc 1 6572 0
 5023 0914 794B     		ldr	r3, .L311+28
 5024 0916 1B78     		ldrb	r3, [r3]
 5025 0918 002B     		cmp	r3, #0
 5026 091a 01D1     		bne	.L279
 5027 091c 7D48     		ldr	r0, .L311+52
 5028 091e 00E0     		b	.L267
 5029              	.L279:
 5030 0920 7D48     		ldr	r0, .L311+56
 5031              	.L267:
6572:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5032              		.loc 1 6572 0 is_stmt 0 discriminator 3
 5033 0922 0023     		mov	r3, #0
 5034 0924 0093     		str	r3, [sp]
 5035 0926 1A21     		mov	r1, #26
 5036 0928 7622     		mov	r2, #118
 5037 092a 7123     		mov	r3, #113
 5038 092c FFF7FEFF 		bl	display_f1_text
 5039              	.LVL432:
6573:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 5040              		.loc 1 6573 0 is_stmt 1 discriminator 3
 5041 0930 0223     		mov	r3, #2
 5042 0932 0093     		str	r3, [sp]
 5043 0934 7048     		ldr	r0, .L311+24
 5044 0936 7949     		ldr	r1, .L311+60
 5045 0938 8222     		mov	r2, #130
 5046 093a 6B23     		mov	r3, #107
 5047 093c FFF7FEFF 		bl	write_bitmap
 5048              	.LVL433:
6574:screens.c     **** 				break;
 5049              		.loc 1 6574 0 discriminator 3
 5050 0940 02E1     		b	.L261
 5051              	.L264:
6577:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 5052              		.loc 1 6577 0
 5053 0942 6D4C     		ldr	r4, .L311+24
 5054 0944 0225     		mov	r5, #2
 5055 0946 0095     		str	r5, [sp]
 5056 0948 201C     		mov	r0, r4
 5057 094a 6E49     		ldr	r1, .L311+36
 5058 094c 0022     		mov	r2, #0
 5059 094e 6B23     		mov	r3, #107
 5060 0950 FFF7FEFF 		bl	write_bitmap
 5061              	.LVL434:
6578:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 5062              		.loc 1 6578 0
 5063 0954 0095     		str	r5, [sp]
 5064 0956 201C     		mov	r0, r4
 5065 0958 6B49     		ldr	r1, .L311+40
 5066 095a 1F22     		mov	r2, #31
 5067 095c 6B23     		mov	r3, #107
 5068 095e FFF7FEFF 		bl	write_bitmap
 5069              	.LVL435:
6579:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 5070              		.loc 1 6579 0
 5071 0962 0095     		str	r5, [sp]
 5072 0964 201C     		mov	r0, r4
 5073 0966 6F49     		ldr	r1, .L311+68
 5074 0968 3E22     		mov	r2, #62
 5075 096a 6623     		mov	r3, #102
 5076 096c FFF7FEFF 		bl	write_bitmap
 5077              	.LVL436:
6580:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 5078              		.loc 1 6580 0
 5079 0970 0095     		str	r5, [sp]
 5080 0972 201C     		mov	r0, r4
 5081 0974 6649     		ldr	r1, .L311+48
 5082 0976 6322     		mov	r2, #99
 5083 0978 6B23     		mov	r3, #107
 5084 097a FFF7FEFF 		bl	write_bitmap
 5085              	.LVL437:
6581:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5086              		.loc 1 6581 0
 5087 097e 5F4B     		ldr	r3, .L311+28
 5088 0980 1B78     		ldrb	r3, [r3]
 5089 0982 002B     		cmp	r3, #0
 5090 0984 01D1     		bne	.L280
 5091 0986 6348     		ldr	r0, .L311+52
 5092 0988 00E0     		b	.L268
 5093              	.L280:
 5094 098a 6348     		ldr	r0, .L311+56
 5095              	.L268:
6581:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5096              		.loc 1 6581 0 is_stmt 0 discriminator 3
 5097 098c 0023     		mov	r3, #0
 5098 098e 0093     		str	r3, [sp]
 5099 0990 1A21     		mov	r1, #26
 5100 0992 7622     		mov	r2, #118
 5101 0994 7123     		mov	r3, #113
 5102 0996 FFF7FEFF 		bl	display_f1_text
 5103              	.LVL438:
6582:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 5104              		.loc 1 6582 0 is_stmt 1 discriminator 3
 5105 099a 0223     		mov	r3, #2
 5106 099c 0093     		str	r3, [sp]
 5107 099e 5648     		ldr	r0, .L311+24
 5108 09a0 5E49     		ldr	r1, .L311+60
 5109 09a2 8222     		mov	r2, #130
 5110 09a4 6B23     		mov	r3, #107
 5111 09a6 FFF7FEFF 		bl	write_bitmap
 5112              	.LVL439:
6583:screens.c     **** 				break;
 5113              		.loc 1 6583 0 discriminator 3
 5114 09aa CDE0     		b	.L261
 5115              	.L260:
6588:screens.c     **** 			switch( selection ) // Drawn according to position of selection pointer
 5116              		.loc 1 6588 0
 5117 09ac 544B     		ldr	r3, .L311+32
 5118 09ae 1B78     		ldrb	r3, [r3]
 5119 09b0 022B     		cmp	r3, #2
 5120 09b2 02D8     		bhi	.L272
 5121 09b4 002B     		cmp	r3, #0
 5122 09b6 39D1     		bne	.L270
 5123 09b8 03E0     		b	.L306
 5124              	.L272:
 5125 09ba 032B     		cmp	r3, #3
 5126 09bc 00D0     		beq	.LCB4986
 5127 09be C3E0     		b	.L261	@long jump
 5128              	.LCB4986:
 5129 09c0 69E0     		b	.L271
 5130              	.L306:
6591:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 5131              		.loc 1 6591 0
 5132 09c2 4D4C     		ldr	r4, .L311+24
 5133 09c4 0225     		mov	r5, #2
 5134 09c6 0095     		str	r5, [sp]
 5135 09c8 201C     		mov	r0, r4
 5136 09ca 4E49     		ldr	r1, .L311+36
 5137 09cc 0022     		mov	r2, #0
 5138 09ce 6B23     		mov	r3, #107
 5139 09d0 FFF7FEFF 		bl	write_bitmap
 5140              	.LVL440:
6592:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 5141              		.loc 1 6592 0
 5142 09d4 0095     		str	r5, [sp]
 5143 09d6 201C     		mov	r0, r4
 5144 09d8 4B49     		ldr	r1, .L311+40
 5145 09da 1F22     		mov	r2, #31
 5146 09dc 6B23     		mov	r3, #107
 5147 09de FFF7FEFF 		bl	write_bitmap
 5148              	.LVL441:
6593:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 5149              		.loc 1 6593 0
 5150 09e2 0095     		str	r5, [sp]
 5151 09e4 201C     		mov	r0, r4
 5152 09e6 4949     		ldr	r1, .L311+44
 5153 09e8 3E22     		mov	r2, #62
 5154 09ea 6623     		mov	r3, #102
 5155 09ec FFF7FEFF 		bl	write_bitmap
 5156              	.LVL442:
6594:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 5157              		.loc 1 6594 0
 5158 09f0 0095     		str	r5, [sp]
 5159 09f2 201C     		mov	r0, r4
 5160 09f4 4649     		ldr	r1, .L311+48
 5161 09f6 6322     		mov	r2, #99
 5162 09f8 6B23     		mov	r3, #107
 5163 09fa FFF7FEFF 		bl	write_bitmap
 5164              	.LVL443:
6595:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5165              		.loc 1 6595 0
 5166 09fe 3F4B     		ldr	r3, .L311+28
 5167 0a00 1B78     		ldrb	r3, [r3]
 5168 0a02 002B     		cmp	r3, #0
 5169 0a04 01D1     		bne	.L281
 5170 0a06 4348     		ldr	r0, .L311+52
 5171 0a08 00E0     		b	.L273
 5172              	.L281:
 5173 0a0a 4348     		ldr	r0, .L311+56
 5174              	.L273:
6595:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5175              		.loc 1 6595 0 is_stmt 0 discriminator 3
 5176 0a0c 0023     		mov	r3, #0
 5177 0a0e 0093     		str	r3, [sp]
 5178 0a10 1A21     		mov	r1, #26
 5179 0a12 7622     		mov	r2, #118
 5180 0a14 7123     		mov	r3, #113
 5181 0a16 FFF7FEFF 		bl	display_f1_text
 5182              	.LVL444:
6596:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 5183              		.loc 1 6596 0 is_stmt 1 discriminator 3
 5184 0a1a 0223     		mov	r3, #2
 5185 0a1c 0093     		str	r3, [sp]
 5186 0a1e 3648     		ldr	r0, .L311+24
 5187 0a20 3E49     		ldr	r1, .L311+60
 5188 0a22 8222     		mov	r2, #130
 5189 0a24 6B23     		mov	r3, #107
 5190 0a26 FFF7FEFF 		bl	write_bitmap
 5191              	.LVL445:
6597:screens.c     **** 				break;
 5192              		.loc 1 6597 0 discriminator 3
 5193 0a2a 8DE0     		b	.L261
 5194              	.L270:
6601:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 5195              		.loc 1 6601 0
 5196 0a2c 324C     		ldr	r4, .L311+24
 5197 0a2e 0225     		mov	r5, #2
 5198 0a30 0095     		str	r5, [sp]
 5199 0a32 201C     		mov	r0, r4
 5200 0a34 3349     		ldr	r1, .L311+36
 5201 0a36 0022     		mov	r2, #0
 5202 0a38 6B23     		mov	r3, #107
 5203 0a3a FFF7FEFF 		bl	write_bitmap
 5204              	.LVL446:
6602:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 5205              		.loc 1 6602 0
 5206 0a3e 0095     		str	r5, [sp]
 5207 0a40 201C     		mov	r0, r4
 5208 0a42 3149     		ldr	r1, .L311+40
 5209 0a44 1F22     		mov	r2, #31
 5210 0a46 6B23     		mov	r3, #107
 5211 0a48 FFF7FEFF 		bl	write_bitmap
 5212              	.LVL447:
6603:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 5213              		.loc 1 6603 0
 5214 0a4c 0095     		str	r5, [sp]
 5215 0a4e 201C     		mov	r0, r4
 5216 0a50 3349     		ldr	r1, .L311+64
 5217 0a52 3E22     		mov	r2, #62
 5218 0a54 6623     		mov	r3, #102
 5219 0a56 FFF7FEFF 		bl	write_bitmap
 5220              	.LVL448:
6604:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 5221              		.loc 1 6604 0
 5222 0a5a 0095     		str	r5, [sp]
 5223 0a5c 201C     		mov	r0, r4
 5224 0a5e 2C49     		ldr	r1, .L311+48
 5225 0a60 6322     		mov	r2, #99
 5226 0a62 6B23     		mov	r3, #107
 5227 0a64 FFF7FEFF 		bl	write_bitmap
 5228              	.LVL449:
6605:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5229              		.loc 1 6605 0
 5230 0a68 244B     		ldr	r3, .L311+28
 5231 0a6a 1B78     		ldrb	r3, [r3]
 5232 0a6c 002B     		cmp	r3, #0
 5233 0a6e 01D1     		bne	.L282
 5234 0a70 2848     		ldr	r0, .L311+52
 5235 0a72 00E0     		b	.L274
 5236              	.L282:
 5237 0a74 2848     		ldr	r0, .L311+56
 5238              	.L274:
6605:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5239              		.loc 1 6605 0 is_stmt 0 discriminator 3
 5240 0a76 0023     		mov	r3, #0
 5241 0a78 0093     		str	r3, [sp]
 5242 0a7a 1A21     		mov	r1, #26
 5243 0a7c 7622     		mov	r2, #118
 5244 0a7e 7123     		mov	r3, #113
 5245 0a80 FFF7FEFF 		bl	display_f1_text
 5246              	.LVL450:
6606:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 5247              		.loc 1 6606 0 is_stmt 1 discriminator 3
 5248 0a84 0223     		mov	r3, #2
 5249 0a86 0093     		str	r3, [sp]
 5250 0a88 1B48     		ldr	r0, .L311+24
 5251 0a8a 2449     		ldr	r1, .L311+60
 5252 0a8c 8222     		mov	r2, #130
 5253 0a8e 6B23     		mov	r3, #107
 5254 0a90 FFF7FEFF 		bl	write_bitmap
 5255              	.LVL451:
6607:screens.c     **** 				break;
 5256              		.loc 1 6607 0 discriminator 3
 5257 0a94 58E0     		b	.L261
 5258              	.L271:
6610:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 5259              		.loc 1 6610 0
 5260 0a96 184C     		ldr	r4, .L311+24
 5261 0a98 0225     		mov	r5, #2
 5262 0a9a 0095     		str	r5, [sp]
 5263 0a9c 201C     		mov	r0, r4
 5264 0a9e 1949     		ldr	r1, .L311+36
 5265 0aa0 0022     		mov	r2, #0
 5266 0aa2 6B23     		mov	r3, #107
 5267 0aa4 FFF7FEFF 		bl	write_bitmap
 5268              	.LVL452:
6611:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 5269              		.loc 1 6611 0
 5270 0aa8 0095     		str	r5, [sp]
 5271 0aaa 201C     		mov	r0, r4
 5272 0aac 1649     		ldr	r1, .L311+40
 5273 0aae 1F22     		mov	r2, #31
 5274 0ab0 6B23     		mov	r3, #107
 5275 0ab2 FFF7FEFF 		bl	write_bitmap
 5276              	.LVL453:
6612:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 5277              		.loc 1 6612 0
 5278 0ab6 0095     		str	r5, [sp]
 5279 0ab8 201C     		mov	r0, r4
 5280 0aba 1A49     		ldr	r1, .L311+68
 5281 0abc 3E22     		mov	r2, #62
 5282 0abe 6623     		mov	r3, #102
 5283 0ac0 FFF7FEFF 		bl	write_bitmap
 5284              	.LVL454:
6613:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 5285              		.loc 1 6613 0
 5286 0ac4 0095     		str	r5, [sp]
 5287 0ac6 201C     		mov	r0, r4
 5288 0ac8 1149     		ldr	r1, .L311+48
 5289 0aca 6322     		mov	r2, #99
 5290 0acc 6B23     		mov	r3, #107
 5291 0ace FFF7FEFF 		bl	write_bitmap
 5292              	.LVL455:
6614:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5293              		.loc 1 6614 0
 5294 0ad2 0A4B     		ldr	r3, .L311+28
 5295 0ad4 1B78     		ldrb	r3, [r3]
 5296 0ad6 002B     		cmp	r3, #0
 5297 0ad8 26D1     		bne	.L283
 5298 0ada 0E48     		ldr	r0, .L311+52
 5299 0adc 25E0     		b	.L275
 5300              	.L312:
 5301 0ade C046     		.align	2
 5302              	.L311:
 5303 0ae0 00000000 		.word	pFac
 5304 0ae4 00000000 		.word	PF_GW302_Density7
 5305 0ae8 00000000 		.word	RDSfnt1
 5306 0aec 00000000 		.word	PF_GW302_Density8
 5307 0af0 00000000 		.word	PF_GW302_Density9
 5308 0af4 00000000 		.word	PF_GW302_Density10
 5309 0af8 00000000 		.word	adm
 5310 0afc 00000000 		.word	.LANCHOR2
 5311 0b00 00000000 		.word	selection
 5312 0b04 00000000 		.word	TABMINUS
 5313 0b08 00000000 		.word	TABPLUS
 5314 0b0c 00000000 		.word	TABNAV_DL
 5315 0b10 00000000 		.word	TAB_PAGE
 5316 0b14 D8000000 		.word	.LC162
 5317 0b18 D4000000 		.word	.LC160
 5318 0b1c 00000000 		.word	TABESC
 5319 0b20 00000000 		.word	TABNAV_UDL
 5320 0b24 00000000 		.word	TABNAV_UL
 5321              	.L283:
 5322 0b28 1948     		ldr	r0, .L313
 5323              	.L275:
6614:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 5324              		.loc 1 6614 0 is_stmt 0 discriminator 3
 5325 0b2a 0023     		mov	r3, #0
 5326 0b2c 0093     		str	r3, [sp]
 5327 0b2e 1A21     		mov	r1, #26
 5328 0b30 7622     		mov	r2, #118
 5329 0b32 7123     		mov	r3, #113
 5330 0b34 FFF7FEFF 		bl	display_f1_text
 5331              	.LVL456:
6615:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 5332              		.loc 1 6615 0 is_stmt 1 discriminator 3
 5333 0b38 0223     		mov	r3, #2
 5334 0b3a 0093     		str	r3, [sp]
 5335 0b3c 1548     		ldr	r0, .L313+4
 5336 0b3e 1649     		ldr	r1, .L313+8
 5337 0b40 8222     		mov	r2, #130
 5338 0b42 6B23     		mov	r3, #107
 5339 0b44 FFF7FEFF 		bl	write_bitmap
 5340              	.LVL457:
 5341              	.L261:
6621:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
 5342              		.loc 1 6621 0
 5343 0b48 124C     		ldr	r4, .L313+4
 5344 0b4a 6423     		mov	r3, #100
 5345 0b4c 0093     		str	r3, [sp]
 5346 0b4e 4023     		mov	r3, #64
 5347 0b50 0193     		str	r3, [sp, #4]
 5348 0b52 201C     		mov	r0, r4
 5349 0b54 1021     		mov	r1, #16
 5350 0b56 1522     		mov	r2, #21
 5351 0b58 1423     		mov	r3, #20
 5352 0b5a FFF7FEFF 		bl	draw_box
 5353              	.LVL458:
6622:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
 5354              		.loc 1 6622 0
 5355 0b5e 0F4B     		ldr	r3, .L313+12
 5356 0b60 1B78     		ldrb	r3, [r3]
 5357 0b62 9A00     		lsl	r2, r3, #2
 5358 0b64 D318     		add	r3, r2, r3
 5359 0b66 5B06     		lsl	r3, r3, #25
 5360 0b68 A822     		mov	r2, #168
 5361 0b6a 5205     		lsl	r2, r2, #21
 5362 0b6c 9B18     		add	r3, r3, r2
 5363 0b6e 1B0E     		lsr	r3, r3, #24
 5364 0b70 0222     		mov	r2, #2
 5365 0b72 0092     		str	r2, [sp]
 5366 0b74 201C     		mov	r0, r4
 5367 0b76 0A49     		ldr	r1, .L313+16
 5368 0b78 1022     		mov	r2, #16
 5369 0b7a FFF7FEFF 		bl	write_bitmap
 5370              	.LVL459:
6628:screens.c     **** }
 5371              		.loc 1 6628 0
 5372 0b7e 09B0     		add	sp, sp, #36
 5373              		@ sp needed for prologue
 5374 0b80 3CBC     		pop	{r2, r3, r4, r5}
 5375 0b82 9046     		mov	r8, r2
 5376 0b84 9946     		mov	r9, r3
 5377 0b86 A246     		mov	sl, r4
 5378 0b88 AB46     		mov	fp, r5
 5379 0b8a F0BC     		pop	{r4, r5, r6, r7}
 5380 0b8c 01BC     		pop	{r0}
 5381 0b8e 0047     		bx	r0
 5382              	.L314:
 5383              		.align	2
 5384              	.L313:
 5385 0b90 D4000000 		.word	.LC160
 5386 0b94 00000000 		.word	adm
 5387 0b98 00000000 		.word	TABESC
 5388 0b9c 00000000 		.word	selection
 5389 0ba0 00000000 		.word	F1_POINT
 5390              		.cfi_endproc
 5391              	.LFE394:
 5393              		.section	.text.screen144,"ax",%progbits
 5394              		.align	2
 5395              		.global	screen144
 5396              		.code	16
 5397              		.thumb_func
 5399              	screen144:
 5400              	.LFB393:
5910:screens.c     **** {
 5401              		.loc 1 5910 0
 5402              		.cfi_startproc
 5403              	.LVL460:
 5404 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5405              	.LCFI17:
 5406              		.cfi_def_cfa_offset 20
 5407              		.cfi_offset 4, -20
 5408              		.cfi_offset 5, -16
 5409              		.cfi_offset 6, -12
 5410              		.cfi_offset 7, -8
 5411              		.cfi_offset 14, -4
 5412 0002 5F46     		mov	r7, fp
 5413 0004 5646     		mov	r6, sl
 5414 0006 4D46     		mov	r5, r9
 5415 0008 4446     		mov	r4, r8
 5416 000a F0B4     		push	{r4, r5, r6, r7}
 5417              	.LCFI18:
 5418              		.cfi_def_cfa_offset 36
 5419              		.cfi_offset 8, -36
 5420              		.cfi_offset 9, -32
 5421              		.cfi_offset 10, -28
 5422              		.cfi_offset 11, -24
 5423 000c 8BB0     		sub	sp, sp, #44
 5424              	.LCFI19:
 5425              		.cfi_def_cfa_offset 80
 5426 000e 041C     		mov	r4, r0
5915:screens.c     **** 	if( !startup )
 5427              		.loc 1 5915 0
 5428 0010 974B     		ldr	r3, .L357
 5429 0012 1B78     		ldrb	r3, [r3]
 5430 0014 002B     		cmp	r3, #0
 5431 0016 10D1     		bne	.L316
5917:screens.c     **** 		startup = 1;
 5432              		.loc 1 5917 0
 5433 0018 0122     		mov	r2, #1
 5434 001a 954B     		ldr	r3, .L357
 5435 001c 1A70     		strb	r2, [r3]
5919:screens.c     **** 		draw_frame( adm );
 5436              		.loc 1 5919 0
 5437 001e 9548     		ldr	r0, .L357+4
 5438              	.LVL461:
 5439 0020 FFF7FEFF 		bl	draw_frame
 5440              	.LVL462:
5921:screens.c     **** 		display_f1_text( "Diameter Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
 5441              		.loc 1 5921 0
 5442 0024 0A23     		mov	r3, #10
 5443 0026 0093     		str	r3, [sp]
 5444 0028 9348     		ldr	r0, .L357+8
 5445 002a 1A21     		mov	r1, #26
 5446 002c 5022     		mov	r2, #80
 5447 002e 0723     		mov	r3, #7
 5448 0030 FFF7FEFF 		bl	display_f1_text
 5449              	.LVL463:
5923:screens.c     **** 		selection = 0;
 5450              		.loc 1 5923 0
 5451 0034 0022     		mov	r2, #0
 5452 0036 914B     		ldr	r3, .L357+12
 5453 0038 1A70     		strb	r2, [r3]
 5454              	.LVL464:
 5455              	.L316:
5928:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 5456              		.loc 1 5928 0
 5457 003a 0020     		mov	r0, #0
 5458 003c FFF7FEFF 		bl	ClockDisplay
 5459              	.LVL465:
5931:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 5460              		.loc 1 5931 0
 5461 0040 8F4B     		ldr	r3, .L357+16
 5462 0042 1B78     		ldrb	r3, [r3]
 5463 0044 002B     		cmp	r3, #0
 5464 0046 00D0     		beq	.LCB5310
 5465 0048 4AE1     		b	.L317	@long jump
 5466              	.LCB5310:
5931:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 5467              		.loc 1 5931 0 is_stmt 0 discriminator 1
 5468 004a A30F     		lsr	r3, r4, #30
 5469 004c 00D1     		bne	.LCB5314
 5470 004e 33E1     		b	.L318	@long jump
 5471              	.LCB5314:
5933:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 5472              		.loc 1 5933 0 is_stmt 1
 5473 0050 A400     		lsl	r4, r4, #2
 5474              	.LVL466:
 5475 0052 A408     		lsr	r4, r4, #2
 5476              	.LVL467:
5935:screens.c     **** 		if( lkey == SW_OL ) // -
 5477              		.loc 1 5935 0
 5478 0054 8023     		mov	r3, #128
 5479 0056 9B00     		lsl	r3, r3, #2
 5480 0058 9C42     		cmp	r4, r3
 5481 005a 71D1     		bne	.L319
5937:screens.c     **** 			switch( selection )
 5482              		.loc 1 5937 0
 5483 005c 874B     		ldr	r3, .L357+12
 5484 005e 1A78     		ldrb	r2, [r3]
 5485 0060 062A     		cmp	r2, #6
 5486 0062 67D8     		bhi	.L320
 5487 0064 9300     		lsl	r3, r2, #2
 5488 0066 874A     		ldr	r2, .L357+20
 5489 0068 D358     		ldr	r3, [r2, r3]
 5490 006a 9F46     		mov	pc, r3
 5491              		.section	.rodata.screen144,"a",%progbits
 5492              		.align	2
 5493              	.L328:
 5494 0000 6C000000 		.word	.L321
 5495 0004 88000000 		.word	.L322
 5496 0008 A4000000 		.word	.L323
 5497 000c C6000000 		.word	.L324
 5498 0010 E2000000 		.word	.L325
 5499 0014 FE000000 		.word	.L326
 5500 0018 1A010000 		.word	.L327
 5501              		.section	.text.screen144
 5502              	.L321:
5940:screens.c     **** 				if( pFac.pf.GW302_DiameterMin > PF_GW302_DiameterMin[PF_MIN] ) // Limiting unsigned type to min
 5503              		.loc 1 5940 0
 5504 006c C423     		mov	r3, #196
 5505 006e 864A     		ldr	r2, .L357+24
 5506 0070 D35C     		ldrb	r3, [r2, r3]
 5507 0072 864A     		ldr	r2, .L357+28
 5508 0074 5278     		ldrb	r2, [r2, #1]
 5509 0076 9A42     		cmp	r2, r3
 5510 0078 5CD2     		bcs	.L320
5941:screens.c     **** 					pFac.pf.GW302_DiameterMin -= PF_GW302_DiameterMin[PF_STEP];
 5511              		.loc 1 5941 0
 5512 007a 844A     		ldr	r2, .L357+28
 5513 007c 1278     		ldrb	r2, [r2]
 5514 007e 9B1A     		sub	r3, r3, r2
 5515 0080 C422     		mov	r2, #196
 5516 0082 8149     		ldr	r1, .L357+24
 5517 0084 8B54     		strb	r3, [r1, r2]
 5518 0086 55E0     		b	.L320
 5519              	.L322:
5945:screens.c     **** 				if( pFac.pf.GW302_DiameterMax > PF_GW302_DiameterMax[PF_MIN] ) // Limiting unsigned type to min
 5520              		.loc 1 5945 0
 5521 0088 C523     		mov	r3, #197
 5522 008a 7F4A     		ldr	r2, .L357+24
 5523 008c D35C     		ldrb	r3, [r2, r3]
 5524 008e 804A     		ldr	r2, .L357+32
 5525 0090 5278     		ldrb	r2, [r2, #1]
 5526 0092 9A42     		cmp	r2, r3
 5527 0094 4ED2     		bcs	.L320
5946:screens.c     **** 					pFac.pf.GW302_DiameterMax -= PF_GW302_DiameterMax[PF_STEP];
 5528              		.loc 1 5946 0
 5529 0096 7E4A     		ldr	r2, .L357+32
 5530 0098 1278     		ldrb	r2, [r2]
 5531 009a 9B1A     		sub	r3, r3, r2
 5532 009c C522     		mov	r2, #197
 5533 009e 7A49     		ldr	r1, .L357+24
 5534 00a0 8B54     		strb	r3, [r1, r2]
 5535 00a2 47E0     		b	.L320
 5536              	.L323:
5950:screens.c     **** 				pFac.pf.GW302_DiaCorrection -= PF_GW302_DiaCorrection[PF_STEP];
 5537              		.loc 1 5950 0
 5538 00a4 784E     		ldr	r6, .L357+24
 5539 00a6 C825     		mov	r5, #200
 5540 00a8 7A4C     		ldr	r4, .L357+36
 5541              	.LVL468:
 5542 00aa 7059     		ldr	r0, [r6, r5]
 5543 00ac 2168     		ldr	r1, [r4]
 5544 00ae FFF7FEFF 		bl	__aeabi_fsub
 5545              	.LVL469:
 5546 00b2 7051     		str	r0, [r6, r5]
5951:screens.c     **** 				if( pFac.pf.GW302_DiaCorrection < PF_GW302_DiaCorrection[PF_MIN] )
 5547              		.loc 1 5951 0
 5548 00b4 6468     		ldr	r4, [r4, #4]
 5549 00b6 211C     		add	r1, r4, #0
 5550 00b8 FFF7FEFF 		bl	__aeabi_fcmplt
 5551              	.LVL470:
 5552 00bc 0028     		cmp	r0, #0
 5553 00be 39D0     		beq	.L320
5952:screens.c     **** 					pFac.pf.GW302_DiaCorrection = PF_GW302_DiaCorrection[PF_MIN]; // Limiting to minimum value
 5554              		.loc 1 5952 0
 5555 00c0 C823     		mov	r3, #200
 5556 00c2 F450     		str	r4, [r6, r3]
 5557 00c4 36E0     		b	.L320
 5558              	.LVL471:
 5559              	.L324:
5956:screens.c     **** 				if( pFac.pf.GW302_BaleDiaSmoothingFactor > PF_GW302_BaleDiaSmoothingFactor[PF_MIN] ) // Limitin
 5560              		.loc 1 5956 0
 5561 00c6 CC23     		mov	r3, #204
 5562 00c8 6F4A     		ldr	r2, .L357+24
 5563 00ca D35C     		ldrb	r3, [r2, r3]
 5564 00cc 724A     		ldr	r2, .L357+40
 5565 00ce 5278     		ldrb	r2, [r2, #1]
 5566 00d0 9A42     		cmp	r2, r3
 5567 00d2 2FD2     		bcs	.L320
5957:screens.c     **** 					pFac.pf.GW302_BaleDiaSmoothingFactor -= PF_GW302_BaleDiaSmoothingFactor[PF_STEP];
 5568              		.loc 1 5957 0
 5569 00d4 704A     		ldr	r2, .L357+40
 5570 00d6 1278     		ldrb	r2, [r2]
 5571 00d8 9B1A     		sub	r3, r3, r2
 5572 00da CC22     		mov	r2, #204
 5573 00dc 6A49     		ldr	r1, .L357+24
 5574 00de 8B54     		strb	r3, [r1, r2]
 5575 00e0 28E0     		b	.L320
 5576              	.L325:
5961:screens.c     **** 				if( pFac.pf.GW302_DensityPresSmoothingFactor > PF_GW302_DensityPresSmoothingFactor[PF_MIN] ) //
 5577              		.loc 1 5961 0
 5578 00e2 CD23     		mov	r3, #205
 5579 00e4 684A     		ldr	r2, .L357+24
 5580 00e6 D35C     		ldrb	r3, [r2, r3]
 5581 00e8 6C4A     		ldr	r2, .L357+44
 5582 00ea 5278     		ldrb	r2, [r2, #1]
 5583 00ec 9A42     		cmp	r2, r3
 5584 00ee 21D2     		bcs	.L320
5962:screens.c     **** 					pFac.pf.GW302_DensityPresSmoothingFactor -= PF_GW302_DensityPresSmoothingFactor[PF_STEP];
 5585              		.loc 1 5962 0
 5586 00f0 6A4A     		ldr	r2, .L357+44
 5587 00f2 1278     		ldrb	r2, [r2]
 5588 00f4 9B1A     		sub	r3, r3, r2
 5589 00f6 CD22     		mov	r2, #205
 5590 00f8 6349     		ldr	r1, .L357+24
 5591 00fa 8B54     		strb	r3, [r1, r2]
 5592 00fc 1AE0     		b	.L320
 5593              	.L326:
5966:screens.c     **** 				if( pFac.pf.GW302_BaleShapeSmoothingFactor >  PF_GW302_BaleShapeSmoothingFactor[PF_MIN] ) // Li
 5594              		.loc 1 5966 0
 5595 00fe CE23     		mov	r3, #206
 5596 0100 614A     		ldr	r2, .L357+24
 5597 0102 D35C     		ldrb	r3, [r2, r3]
 5598 0104 664A     		ldr	r2, .L357+48
 5599 0106 5278     		ldrb	r2, [r2, #1]
 5600 0108 9A42     		cmp	r2, r3
 5601 010a 13D2     		bcs	.L320
5967:screens.c     **** 					pFac.pf.GW302_BaleShapeSmoothingFactor -=  PF_GW302_BaleShapeSmoothingFactor[PF_STEP];
 5602              		.loc 1 5967 0
 5603 010c 644A     		ldr	r2, .L357+48
 5604 010e 1278     		ldrb	r2, [r2]
 5605 0110 9B1A     		sub	r3, r3, r2
 5606 0112 CE22     		mov	r2, #206
 5607 0114 5C49     		ldr	r1, .L357+24
 5608 0116 8B54     		strb	r3, [r1, r2]
 5609 0118 0CE0     		b	.L320
 5610              	.L327:
5971:screens.c     **** 				if( pFac.pf.GW302_KnifePresSmoothingFactor > PF_GW302_KnifePresSmoothingFactor[PF_MIN] ) // Lim
 5611              		.loc 1 5971 0
 5612 011a CF23     		mov	r3, #207
 5613 011c 5A4A     		ldr	r2, .L357+24
 5614 011e D35C     		ldrb	r3, [r2, r3]
 5615 0120 604A     		ldr	r2, .L357+52
 5616 0122 5278     		ldrb	r2, [r2, #1]
 5617 0124 9A42     		cmp	r2, r3
 5618 0126 05D2     		bcs	.L320
5972:screens.c     **** 					pFac.pf.GW302_KnifePresSmoothingFactor -= PF_GW302_KnifePresSmoothingFactor[PF_STEP];
 5619              		.loc 1 5972 0
 5620 0128 5E4A     		ldr	r2, .L357+52
 5621 012a 1278     		ldrb	r2, [r2]
 5622 012c 9B1A     		sub	r3, r3, r2
 5623 012e CF22     		mov	r2, #207
 5624 0130 5549     		ldr	r1, .L357+24
 5625 0132 8B54     		strb	r3, [r1, r2]
 5626              	.LVL472:
 5627              	.L320:
5975:screens.c     **** 			SavecalDelayWithinMenus = 1;
 5628              		.loc 1 5975 0
 5629 0134 0123     		mov	r3, #1
 5630 0136 5C4A     		ldr	r2, .L357+56
 5631 0138 1370     		strb	r3, [r2]
5976:screens.c     **** 			valuechanged = 1;
 5632              		.loc 1 5976 0
 5633 013a 5C4A     		ldr	r2, .L357+60
 5634 013c 1370     		strb	r3, [r2]
 5635              	.LVL473:
 5636 013e CFE0     		b	.L317
 5637              	.LVL474:
 5638              	.L319:
5979:screens.c     **** 		else if( lkey == SW_IL ) // +
 5639              		.loc 1 5979 0
 5640 0140 042C     		cmp	r4, #4
 5641 0142 77D1     		bne	.L330
5981:screens.c     **** 			switch( selection )
 5642              		.loc 1 5981 0
 5643 0144 4D4B     		ldr	r3, .L357+12
 5644 0146 1A78     		ldrb	r2, [r3]
 5645 0148 062A     		cmp	r2, #6
 5646 014a 6DD8     		bhi	.L331
 5647 014c 9300     		lsl	r3, r2, #2
 5648 014e 584A     		ldr	r2, .L357+64
 5649 0150 D358     		ldr	r3, [r2, r3]
 5650 0152 9F46     		mov	pc, r3
 5651              		.section	.rodata.screen144
 5652              		.align	2
 5653              	.L339:
 5654 001c 54010000 		.word	.L332
 5655 0020 72010000 		.word	.L333
 5656 0024 90010000 		.word	.L334
 5657 0028 B2010000 		.word	.L335
 5658 002c D0010000 		.word	.L336
 5659 0030 EE010000 		.word	.L337
 5660 0034 0C020000 		.word	.L338
 5661              		.section	.text.screen144
 5662              	.L332:
5984:screens.c     **** 				pFac.pf.GW302_DiameterMin += PF_GW302_DiameterMin[PF_STEP];
 5663              		.loc 1 5984 0
 5664 0154 4D4A     		ldr	r2, .L357+28
 5665 0156 4C48     		ldr	r0, .L357+24
 5666 0158 C421     		mov	r1, #196
 5667 015a 1478     		ldrb	r4, [r2]
 5668              	.LVL475:
 5669 015c 435C     		ldrb	r3, [r0, r1]
 5670 015e E318     		add	r3, r4, r3
 5671 0160 1B06     		lsl	r3, r3, #24
 5672 0162 1B0E     		lsr	r3, r3, #24
 5673 0164 4354     		strb	r3, [r0, r1]
5985:screens.c     **** 				if( pFac.pf.GW302_DiameterMin > PF_GW302_DiameterMin[PF_MAX] )
 5674              		.loc 1 5985 0
 5675 0166 9278     		ldrb	r2, [r2, #2]
 5676 0168 9342     		cmp	r3, r2
 5677 016a 5DD9     		bls	.L331
5986:screens.c     **** 					pFac.pf.GW302_DiameterMin = PF_GW302_DiameterMin[PF_MAX]; // Limiting to maximum value
 5678              		.loc 1 5986 0
 5679 016c C423     		mov	r3, #196
 5680 016e C254     		strb	r2, [r0, r3]
 5681 0170 5AE0     		b	.L331
 5682              	.LVL476:
 5683              	.L333:
5990:screens.c     **** 				pFac.pf.GW302_DiameterMax += PF_GW302_DiameterMax[PF_STEP];
 5684              		.loc 1 5990 0
 5685 0172 474A     		ldr	r2, .L357+32
 5686 0174 4448     		ldr	r0, .L357+24
 5687 0176 C521     		mov	r1, #197
 5688 0178 1478     		ldrb	r4, [r2]
 5689              	.LVL477:
 5690 017a 435C     		ldrb	r3, [r0, r1]
 5691 017c E318     		add	r3, r4, r3
 5692 017e 1B06     		lsl	r3, r3, #24
 5693 0180 1B0E     		lsr	r3, r3, #24
 5694 0182 4354     		strb	r3, [r0, r1]
5991:screens.c     **** 				if( pFac.pf.GW302_DiameterMax > PF_GW302_DiameterMax[PF_MAX] )
 5695              		.loc 1 5991 0
 5696 0184 9278     		ldrb	r2, [r2, #2]
 5697 0186 9342     		cmp	r3, r2
 5698 0188 4ED9     		bls	.L331
5992:screens.c     **** 					pFac.pf.GW302_DiameterMax = PF_GW302_DiameterMax[PF_MAX]; // Limiting to maximum value
 5699              		.loc 1 5992 0
 5700 018a C523     		mov	r3, #197
 5701 018c C254     		strb	r2, [r0, r3]
 5702 018e 4BE0     		b	.L331
 5703              	.LVL478:
 5704              	.L334:
5996:screens.c     **** 				pFac.pf.GW302_DiaCorrection += PF_GW302_DiaCorrection[PF_STEP];
 5705              		.loc 1 5996 0
 5706 0190 3D4E     		ldr	r6, .L357+24
 5707 0192 C825     		mov	r5, #200
 5708 0194 3F4C     		ldr	r4, .L357+36
 5709              	.LVL479:
 5710 0196 7059     		ldr	r0, [r6, r5]
 5711 0198 2168     		ldr	r1, [r4]
 5712 019a FFF7FEFF 		bl	__aeabi_fadd
 5713              	.LVL480:
 5714 019e 7051     		str	r0, [r6, r5]
5997:screens.c     **** 				if( pFac.pf.GW302_DiaCorrection > PF_GW302_DiaCorrection[PF_MAX] )
 5715              		.loc 1 5997 0
 5716 01a0 A468     		ldr	r4, [r4, #8]
 5717 01a2 211C     		add	r1, r4, #0
 5718 01a4 FFF7FEFF 		bl	__aeabi_fcmpgt
 5719              	.LVL481:
 5720 01a8 0028     		cmp	r0, #0
 5721 01aa 3DD0     		beq	.L331
5998:screens.c     **** 					pFac.pf.GW302_DiaCorrection = PF_GW302_DiaCorrection[PF_MAX]; // Limiting to maximum value
 5722              		.loc 1 5998 0
 5723 01ac C823     		mov	r3, #200
 5724 01ae F450     		str	r4, [r6, r3]
 5725 01b0 3AE0     		b	.L331
 5726              	.LVL482:
 5727              	.L335:
6002:screens.c     **** 				pFac.pf.GW302_BaleDiaSmoothingFactor += PF_GW302_BaleDiaSmoothingFactor[PF_STEP];
 5728              		.loc 1 6002 0
 5729 01b2 394A     		ldr	r2, .L357+40
 5730 01b4 3448     		ldr	r0, .L357+24
 5731 01b6 CC21     		mov	r1, #204
 5732 01b8 1478     		ldrb	r4, [r2]
 5733              	.LVL483:
 5734 01ba 435C     		ldrb	r3, [r0, r1]
 5735 01bc E318     		add	r3, r4, r3
 5736 01be 1B06     		lsl	r3, r3, #24
 5737 01c0 1B0E     		lsr	r3, r3, #24
 5738 01c2 4354     		strb	r3, [r0, r1]
6003:screens.c     **** 				if( pFac.pf.GW302_BaleDiaSmoothingFactor > PF_GW302_BaleDiaSmoothingFactor[PF_MAX] )
 5739              		.loc 1 6003 0
 5740 01c4 9278     		ldrb	r2, [r2, #2]
 5741 01c6 9342     		cmp	r3, r2
 5742 01c8 2ED9     		bls	.L331
6004:screens.c     **** 					pFac.pf.GW302_BaleDiaSmoothingFactor = PF_GW302_BaleDiaSmoothingFactor[PF_MAX]; // Limiting to
 5743              		.loc 1 6004 0
 5744 01ca CC23     		mov	r3, #204
 5745 01cc C254     		strb	r2, [r0, r3]
 5746 01ce 2BE0     		b	.L331
 5747              	.LVL484:
 5748              	.L336:
6008:screens.c     **** 				pFac.pf.GW302_DensityPresSmoothingFactor += PF_GW302_DensityPresSmoothingFactor[PF_STEP];
 5749              		.loc 1 6008 0
 5750 01d0 324A     		ldr	r2, .L357+44
 5751 01d2 2D48     		ldr	r0, .L357+24
 5752 01d4 CD21     		mov	r1, #205
 5753 01d6 1478     		ldrb	r4, [r2]
 5754              	.LVL485:
 5755 01d8 435C     		ldrb	r3, [r0, r1]
 5756 01da E318     		add	r3, r4, r3
 5757 01dc 1B06     		lsl	r3, r3, #24
 5758 01de 1B0E     		lsr	r3, r3, #24
 5759 01e0 4354     		strb	r3, [r0, r1]
6009:screens.c     **** 				if( pFac.pf.GW302_DensityPresSmoothingFactor > PF_GW302_DensityPresSmoothingFactor[PF_MAX] )
 5760              		.loc 1 6009 0
 5761 01e2 9278     		ldrb	r2, [r2, #2]
 5762 01e4 9342     		cmp	r3, r2
 5763 01e6 1FD9     		bls	.L331
6010:screens.c     **** 					pFac.pf.GW302_DensityPresSmoothingFactor = PF_GW302_DensityPresSmoothingFactor[PF_MAX]; // Lim
 5764              		.loc 1 6010 0
 5765 01e8 CD23     		mov	r3, #205
 5766 01ea C254     		strb	r2, [r0, r3]
 5767 01ec 1CE0     		b	.L331
 5768              	.LVL486:
 5769              	.L337:
6014:screens.c     **** 				pFac.pf.GW302_BaleShapeSmoothingFactor +=  PF_GW302_BaleShapeSmoothingFactor[PF_STEP];
 5770              		.loc 1 6014 0
 5771 01ee 2C4A     		ldr	r2, .L357+48
 5772 01f0 2548     		ldr	r0, .L357+24
 5773 01f2 CE21     		mov	r1, #206
 5774 01f4 1478     		ldrb	r4, [r2]
 5775              	.LVL487:
 5776 01f6 435C     		ldrb	r3, [r0, r1]
 5777 01f8 E318     		add	r3, r4, r3
 5778 01fa 1B06     		lsl	r3, r3, #24
 5779 01fc 1B0E     		lsr	r3, r3, #24
 5780 01fe 4354     		strb	r3, [r0, r1]
6015:screens.c     **** 				if( pFac.pf.GW302_BaleShapeSmoothingFactor >  PF_GW302_BaleShapeSmoothingFactor[PF_MAX] )
 5781              		.loc 1 6015 0
 5782 0200 9278     		ldrb	r2, [r2, #2]
 5783 0202 9342     		cmp	r3, r2
 5784 0204 10D9     		bls	.L331
6016:screens.c     **** 					pFac.pf.GW302_BaleShapeSmoothingFactor =  PF_GW302_BaleShapeSmoothingFactor[PF_MAX]; // Limiti
 5785              		.loc 1 6016 0
 5786 0206 CE23     		mov	r3, #206
 5787 0208 C254     		strb	r2, [r0, r3]
 5788 020a 0DE0     		b	.L331
 5789              	.LVL488:
 5790              	.L338:
6020:screens.c     **** 				pFac.pf.GW302_KnifePresSmoothingFactor += PF_GW302_KnifePresSmoothingFactor[PF_STEP];
 5791              		.loc 1 6020 0
 5792 020c 254A     		ldr	r2, .L357+52
 5793 020e 1E48     		ldr	r0, .L357+24
 5794 0210 CF21     		mov	r1, #207
 5795 0212 1478     		ldrb	r4, [r2]
 5796              	.LVL489:
 5797 0214 435C     		ldrb	r3, [r0, r1]
 5798 0216 E318     		add	r3, r4, r3
 5799 0218 1B06     		lsl	r3, r3, #24
 5800 021a 1B0E     		lsr	r3, r3, #24
 5801 021c 4354     		strb	r3, [r0, r1]
6021:screens.c     **** 				if( pFac.pf.GW302_KnifePresSmoothingFactor > PF_GW302_KnifePresSmoothingFactor[PF_MAX] )
 5802              		.loc 1 6021 0
 5803 021e 9278     		ldrb	r2, [r2, #2]
 5804 0220 9342     		cmp	r3, r2
 5805 0222 01D9     		bls	.L331
6022:screens.c     **** 					pFac.pf.GW302_KnifePresSmoothingFactor = PF_GW302_KnifePresSmoothingFactor[PF_MAX]; // Limitin
 5806              		.loc 1 6022 0
 5807 0224 CF23     		mov	r3, #207
 5808 0226 C254     		strb	r2, [r0, r3]
 5809              	.L331:
6025:screens.c     **** 			SavecalDelayWithinMenus = 1;
 5810              		.loc 1 6025 0
 5811 0228 0123     		mov	r3, #1
 5812 022a 1F4A     		ldr	r2, .L357+56
 5813 022c 1370     		strb	r3, [r2]
6026:screens.c     **** 			valuechanged = 1;
 5814              		.loc 1 6026 0
 5815 022e 1F4A     		ldr	r2, .L357+60
 5816 0230 1370     		strb	r3, [r2]
 5817              	.LVL490:
 5818 0232 55E0     		b	.L317
 5819              	.LVL491:
 5820              	.L330:
6029:screens.c     **** 		else if( lkey == SW_CU ) // ^
 5821              		.loc 1 6029 0
 5822 0234 202C     		cmp	r4, #32
 5823 0236 07D1     		bne	.L341
6031:screens.c     **** 			if( selection )
 5824              		.loc 1 6031 0
 5825 0238 104B     		ldr	r3, .L357+12
 5826 023a 1B78     		ldrb	r3, [r3]
 5827 023c 002B     		cmp	r3, #0
 5828 023e 4FD0     		beq	.L317
6033:screens.c     **** 				selection--;
 5829              		.loc 1 6033 0
 5830 0240 013B     		sub	r3, r3, #1
 5831 0242 0E4A     		ldr	r2, .L357+12
 5832 0244 1370     		strb	r3, [r2]
 5833              	.LVL492:
 5834 0246 4BE0     		b	.L317
 5835              	.LVL493:
 5836              	.L341:
6037:screens.c     **** 		else if( lkey == SW_CD ) // V
 5837              		.loc 1 6037 0
 5838 0248 402C     		cmp	r4, #64
 5839 024a 07D1     		bne	.L342
6039:screens.c     **** 			if( selection < 6 )
 5840              		.loc 1 6039 0
 5841 024c 0B4B     		ldr	r3, .L357+12
 5842 024e 1B78     		ldrb	r3, [r3]
 5843 0250 052B     		cmp	r3, #5
 5844 0252 45D8     		bhi	.L317
6041:screens.c     **** 				selection++;
 5845              		.loc 1 6041 0
 5846 0254 0133     		add	r3, r3, #1
 5847 0256 094A     		ldr	r2, .L357+12
 5848 0258 1370     		strb	r3, [r2]
 5849              	.LVL494:
 5850 025a 41E0     		b	.L317
 5851              	.LVL495:
 5852              	.L342:
6045:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
 5853              		.loc 1 6045 0
 5854 025c 102C     		cmp	r4, #16
 5855 025e 03D0     		beq	.L356
 5856 0260 013C     		sub	r4, r4, #1
 5857              	.LVL496:
 5858 0262 FF3C     		sub	r4, r4, #255
 5859              	.LVL497:
 5860 0264 002C     		cmp	r4, #0
 5861 0266 3BD1     		bne	.L317
 5862              	.LVL498:
 5863              	.L356:
6047:screens.c     **** 			escape = 1;
 5864              		.loc 1 6047 0
 5865 0268 0122     		mov	r2, #1
 5866 026a 124B     		ldr	r3, .L357+68
 5867 026c 1A70     		strb	r2, [r3]
 5868 026e 37E0     		b	.L317
 5869              	.L358:
 5870              		.align	2
 5871              	.L357:
 5872 0270 00000000 		.word	startup
 5873 0274 00000000 		.word	adm
 5874 0278 68010000 		.word	.LC224
 5875 027c 00000000 		.word	selection
 5876 0280 00000000 		.word	editing
 5877 0284 00000000 		.word	.L328
 5878 0288 00000000 		.word	pFac
 5879 028c 00000000 		.word	PF_GW302_DiameterMin
 5880 0290 00000000 		.word	PF_GW302_DiameterMax
 5881 0294 00000000 		.word	PF_GW302_DiaCorrection
 5882 0298 00000000 		.word	PF_GW302_BaleDiaSmoothingFactor
 5883 029c 00000000 		.word	PF_GW302_DensityPresSmoothingFactor
 5884 02a0 00000000 		.word	PF_GW302_BaleShapeSmoothingFactor
 5885 02a4 00000000 		.word	PF_GW302_KnifePresSmoothingFactor
 5886 02a8 00000000 		.word	SavecalDelayWithinMenus
 5887 02ac 00000000 		.word	valuechanged
 5888 02b0 1C000000 		.word	.L339
 5889 02b4 00000000 		.word	escape
 5890              	.LVL499:
 5891              	.L318:
6057:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 5892              		.loc 1 6057 0
 5893 02b8 F54B     		ldr	r3, .L359
 5894 02ba 1B78     		ldrb	r3, [r3]
 5895 02bc 002B     		cmp	r3, #0
 5896 02be 03D1     		bne	.L344
6057:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 5897              		.loc 1 6057 0 is_stmt 0 discriminator 1
 5898 02c0 F44B     		ldr	r3, .L359+4
 5899 02c2 1B78     		ldrb	r3, [r3]
 5900 02c4 002B     		cmp	r3, #0
 5901 02c6 0BD0     		beq	.L317
 5902              	.L344:
6059:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 5903              		.loc 1 6059 0 is_stmt 1
 5904 02c8 F34B     		ldr	r3, .L359+8
 5905 02ca 1B78     		ldrb	r3, [r3]
 5906 02cc 032B     		cmp	r3, #3
 5907 02ce 07D9     		bls	.L317
6061:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 5908              		.loc 1 6061 0
 5909 02d0 0023     		mov	r3, #0
 5910 02d2 EF4A     		ldr	r2, .L359
 5911 02d4 1370     		strb	r3, [r2]
6062:screens.c     **** 				SavecalDelayWithinMenus = 0;
 5912              		.loc 1 6062 0
 5913 02d6 EF4A     		ldr	r2, .L359+4
 5914 02d8 1370     		strb	r3, [r2]
6063:screens.c     **** 				savecal = 1;
 5915              		.loc 1 6063 0
 5916 02da 0122     		mov	r2, #1
 5917 02dc EF4B     		ldr	r3, .L359+12
 5918 02de 1A70     		strb	r2, [r3]
 5919              	.LVL500:
 5920              	.L317:
6072:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
 5921              		.loc 1 6072 0
 5922 02e0 EF4A     		ldr	r2, .L359+16
 5923 02e2 9346     		mov	fp, r2
 5924 02e4 6423     		mov	r3, #100
 5925 02e6 0093     		str	r3, [sp]
 5926 02e8 4023     		mov	r3, #64
 5927 02ea 0193     		str	r3, [sp, #4]
 5928 02ec 101C     		mov	r0, r2
 5929 02ee 1521     		mov	r1, #21
 5930 02f0 1522     		mov	r2, #21
 5931 02f2 9C23     		mov	r3, #156
 5932 02f4 FFF7FEFF 		bl	draw_box
 5933              	.LVL501:
6075:screens.c     **** 		display_f1_text( "Diameter Min", TSMAX, 24, 21, FIXED );
 5934              		.loc 1 6075 0
 5935 02f8 0024     		mov	r4, #0
 5936 02fa 0094     		str	r4, [sp]
 5937 02fc E948     		ldr	r0, .L359+20
 5938 02fe 1A21     		mov	r1, #26
 5939 0300 1822     		mov	r2, #24
 5940 0302 1523     		mov	r3, #21
 5941 0304 FFF7FEFF 		bl	display_f1_text
 5942              	.LVL502:
6076:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 21, FIXED );
 5943              		.loc 1 6076 0
 5944 0308 E74D     		ldr	r5, .L359+24
 5945 030a 0094     		str	r4, [sp]
 5946 030c 281C     		mov	r0, r5
 5947 030e 1A21     		mov	r1, #26
 5948 0310 9222     		mov	r2, #146
 5949 0312 1523     		mov	r3, #21
 5950 0314 FFF7FEFF 		bl	display_f1_text
 5951              	.LVL503:
6078:screens.c     **** 		display_f1_text( "Diameter Max", TSMAX, 24, 31, FIXED );
 5952              		.loc 1 6078 0
 5953 0318 0094     		str	r4, [sp]
 5954 031a E448     		ldr	r0, .L359+28
 5955 031c 1A21     		mov	r1, #26
 5956 031e 1822     		mov	r2, #24
 5957 0320 1F23     		mov	r3, #31
 5958 0322 FFF7FEFF 		bl	display_f1_text
 5959              	.LVL504:
6079:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 31, FIXED );
 5960              		.loc 1 6079 0
 5961 0326 0094     		str	r4, [sp]
 5962 0328 281C     		mov	r0, r5
 5963 032a 1A21     		mov	r1, #26
 5964 032c 9222     		mov	r2, #146
 5965 032e 1F23     		mov	r3, #31
 5966 0330 FFF7FEFF 		bl	display_f1_text
 5967              	.LVL505:
6081:screens.c     **** 		display_f1_text( "Dia. Correction", TSMAX, 24, 41, FIXED );
 5968              		.loc 1 6081 0
 5969 0334 0094     		str	r4, [sp]
 5970 0336 DE48     		ldr	r0, .L359+32
 5971 0338 1A21     		mov	r1, #26
 5972 033a 1822     		mov	r2, #24
 5973 033c 2923     		mov	r3, #41
 5974 033e FFF7FEFF 		bl	display_f1_text
 5975              	.LVL506:
6082:screens.c     **** 		display_f1_text( "V", TSMAX, 146, 41, FIXED );
 5976              		.loc 1 6082 0
 5977 0342 0094     		str	r4, [sp]
 5978 0344 DB48     		ldr	r0, .L359+36
 5979 0346 1A21     		mov	r1, #26
 5980 0348 9222     		mov	r2, #146
 5981 034a 2923     		mov	r3, #41
 5982 034c FFF7FEFF 		bl	display_f1_text
 5983              	.LVL507:
6085:screens.c     **** 		display_f1_text( "BaleDia  AnIP1 SF", TSMAX, 24, 51, FIXED );
 5984              		.loc 1 6085 0
 5985 0350 0094     		str	r4, [sp]
 5986 0352 D948     		ldr	r0, .L359+40
 5987 0354 1A21     		mov	r1, #26
 5988 0356 1822     		mov	r2, #24
 5989 0358 3323     		mov	r3, #51
 5990 035a FFF7FEFF 		bl	display_f1_text
 5991              	.LVL508:
6086:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 51, FIXED );	
 5992              		.loc 1 6086 0
 5993 035e 0094     		str	r4, [sp]
 5994 0360 281C     		mov	r0, r5
 5995 0362 1A21     		mov	r1, #26
 5996 0364 9222     		mov	r2, #146
 5997 0366 3323     		mov	r3, #51
 5998 0368 FFF7FEFF 		bl	display_f1_text
 5999              	.LVL509:
6089:screens.c     **** 		display_f1_text( "DensPres AnIP2 SF", TSMAX, 24, 61, FIXED );
 6000              		.loc 1 6089 0
 6001 036c 0094     		str	r4, [sp]
 6002 036e D348     		ldr	r0, .L359+44
 6003 0370 1A21     		mov	r1, #26
 6004 0372 1822     		mov	r2, #24
 6005 0374 3D23     		mov	r3, #61
 6006 0376 FFF7FEFF 		bl	display_f1_text
 6007              	.LVL510:
6090:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 61, FIXED );
 6008              		.loc 1 6090 0
 6009 037a 0094     		str	r4, [sp]
 6010 037c 281C     		mov	r0, r5
 6011 037e 1A21     		mov	r1, #26
 6012 0380 9222     		mov	r2, #146
 6013 0382 3D23     		mov	r3, #61
 6014 0384 FFF7FEFF 		bl	display_f1_text
 6015              	.LVL511:
6093:screens.c     **** 		display_f1_text( "BaleShapeAnIP3 SF", TSMAX, 24, 71, FIXED );
 6016              		.loc 1 6093 0
 6017 0388 0094     		str	r4, [sp]
 6018 038a CD48     		ldr	r0, .L359+48
 6019 038c 1A21     		mov	r1, #26
 6020 038e 1822     		mov	r2, #24
 6021 0390 4723     		mov	r3, #71
 6022 0392 FFF7FEFF 		bl	display_f1_text
 6023              	.LVL512:
6094:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 71, FIXED );
 6024              		.loc 1 6094 0
 6025 0396 0094     		str	r4, [sp]
 6026 0398 281C     		mov	r0, r5
 6027 039a 1A21     		mov	r1, #26
 6028 039c 9222     		mov	r2, #146
 6029 039e 4723     		mov	r3, #71
 6030 03a0 FFF7FEFF 		bl	display_f1_text
 6031              	.LVL513:
6097:screens.c     **** 		display_f1_text( "KnifePresAnIP4 SF", TSMAX, 24, 81, FIXED );
 6032              		.loc 1 6097 0
 6033 03a4 0094     		str	r4, [sp]
 6034 03a6 C748     		ldr	r0, .L359+52
 6035 03a8 1A21     		mov	r1, #26
 6036 03aa 1822     		mov	r2, #24
 6037 03ac 5123     		mov	r3, #81
 6038 03ae FFF7FEFF 		bl	display_f1_text
 6039              	.LVL514:
6098:screens.c     **** 		display_f1_text( "%", TSMAX, 146, 81, FIXED );
 6040              		.loc 1 6098 0
 6041 03b2 0094     		str	r4, [sp]
 6042 03b4 281C     		mov	r0, r5
 6043 03b6 1A21     		mov	r1, #26
 6044 03b8 9222     		mov	r2, #146
 6045 03ba 5123     		mov	r3, #81
 6046 03bc FFF7FEFF 		bl	display_f1_text
 6047              	.LVL515:
6100:screens.c     **** 		display_f1_text( "(1%=MaxSmoothingFactor)", TSMAX, 21, 91, FIXED );
 6048              		.loc 1 6100 0
 6049 03c0 0094     		str	r4, [sp]
 6050 03c2 C148     		ldr	r0, .L359+56
 6051 03c4 1A21     		mov	r1, #26
 6052 03c6 1522     		mov	r2, #21
 6053 03c8 5B23     		mov	r3, #91
 6054 03ca FFF7FEFF 		bl	display_f1_text
 6055              	.LVL516:
6113:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterMin,
 6056              		.loc 1 6113 0
 6057 03ce BF4A     		ldr	r2, .L359+60
 6058 03d0 9146     		mov	r9, r2
 6059 03d2 C423     		mov	r3, #196
 6060 03d4 D05C     		ldrb	r0, [r2, r3]
 6061 03d6 FFF7FEFF 		bl	__aeabi_ui2f
 6062              	.LVL517:
 6063 03da 0890     		str	r0, [sp, #32]
6114:screens.c     **** 				(float)PF_GW302_DiameterMin[PF_MIN], (float)PF_GW302_DiameterMin[PF_MAX],
 6064              		.loc 1 6114 0
 6065 03dc BC4D     		ldr	r5, .L359+64
6113:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterMin,
 6066              		.loc 1 6113 0
 6067 03de 6878     		ldrb	r0, [r5, #1]
 6068 03e0 FFF7FEFF 		bl	__aeabi_ui2f
 6069              	.LVL518:
 6070 03e4 0990     		str	r0, [sp, #36]
 6071 03e6 A878     		ldrb	r0, [r5, #2]
 6072 03e8 FFF7FEFF 		bl	__aeabi_ui2f
 6073              	.LVL519:
 6074 03ec 021C     		add	r2, r0, #0
 6075 03ee FE25     		mov	r5, #254
 6076 03f0 AD05     		lsl	r5, r5, #22
 6077 03f2 0094     		str	r4, [sp]
 6078 03f4 8F23     		mov	r3, #143
 6079 03f6 9846     		mov	r8, r3
 6080 03f8 0193     		str	r3, [sp, #4]
 6081 03fa 1523     		mov	r3, #21
 6082 03fc 0293     		str	r3, [sp, #8]
 6083 03fe 1223     		mov	r3, #18
 6084 0400 9A46     		mov	sl, r3
 6085 0402 0393     		str	r3, [sp, #12]
 6086 0404 1027     		mov	r7, #16
 6087 0406 0497     		str	r7, [sp, #16]
 6088 0408 B24E     		ldr	r6, .L359+68
 6089 040a 0596     		str	r6, [sp, #20]
 6090 040c 0694     		str	r4, [sp, #24]
 6091 040e 0794     		str	r4, [sp, #28]
 6092 0410 0898     		ldr	r0, [sp, #32]
 6093 0412 0999     		ldr	r1, [sp, #36]
 6094 0414 2B1C     		add	r3, r5, #0
 6095 0416 FFF7FEFF 		bl	display_number
 6096              	.LVL520:
6116:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterMax,
 6097              		.loc 1 6116 0
 6098 041a C523     		mov	r3, #197
 6099 041c 4A46     		mov	r2, r9
 6100 041e D05C     		ldrb	r0, [r2, r3]
 6101 0420 FFF7FEFF 		bl	__aeabi_ui2f
 6102              	.LVL521:
 6103 0424 0890     		str	r0, [sp, #32]
 6104 0426 AC4B     		ldr	r3, .L359+72
 6105 0428 5878     		ldrb	r0, [r3, #1]
 6106 042a FFF7FEFF 		bl	__aeabi_ui2f
 6107              	.LVL522:
 6108 042e 0990     		str	r0, [sp, #36]
 6109 0430 A94A     		ldr	r2, .L359+72
 6110 0432 9078     		ldrb	r0, [r2, #2]
 6111 0434 FFF7FEFF 		bl	__aeabi_ui2f
 6112              	.LVL523:
 6113 0438 021C     		add	r2, r0, #0
 6114 043a 0094     		str	r4, [sp]
 6115 043c 4346     		mov	r3, r8
 6116 043e 0193     		str	r3, [sp, #4]
 6117 0440 1F23     		mov	r3, #31
 6118 0442 0293     		str	r3, [sp, #8]
 6119 0444 5346     		mov	r3, sl
 6120 0446 0393     		str	r3, [sp, #12]
 6121 0448 0497     		str	r7, [sp, #16]
 6122 044a 0596     		str	r6, [sp, #20]
 6123 044c 0694     		str	r4, [sp, #24]
 6124 044e 0794     		str	r4, [sp, #28]
 6125 0450 0898     		ldr	r0, [sp, #32]
 6126 0452 0999     		ldr	r1, [sp, #36]
 6127 0454 2B1C     		add	r3, r5, #0
 6128 0456 FFF7FEFF 		bl	display_number
 6129              	.LVL524:
6119:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiaCorrection,
 6130              		.loc 1 6119 0
 6131 045a C823     		mov	r3, #200
 6132 045c 4A46     		mov	r2, r9
 6133 045e D058     		ldr	r0, [r2, r3]
 6134 0460 9E4B     		ldr	r3, .L359+76
 6135 0462 5968     		ldr	r1, [r3, #4]
 6136 0464 9A68     		ldr	r2, [r3, #8]
 6137 0466 0223     		mov	r3, #2
 6138 0468 0093     		str	r3, [sp]
 6139 046a 4346     		mov	r3, r8
 6140 046c 0193     		str	r3, [sp, #4]
 6141 046e 2923     		mov	r3, #41
 6142 0470 0293     		str	r3, [sp, #8]
 6143 0472 1823     		mov	r3, #24
 6144 0474 0393     		str	r3, [sp, #12]
 6145 0476 0497     		str	r7, [sp, #16]
 6146 0478 0596     		str	r6, [sp, #20]
 6147 047a 0694     		str	r4, [sp, #24]
 6148 047c 0794     		str	r4, [sp, #28]
 6149 047e 2B1C     		add	r3, r5, #0
 6150 0480 FFF7FEFF 		bl	display_number
 6151              	.LVL525:
6122:screens.c     **** 		display_number( (float)pFac.pf.GW302_BaleDiaSmoothingFactor,
 6152              		.loc 1 6122 0
 6153 0484 CC23     		mov	r3, #204
 6154 0486 4A46     		mov	r2, r9
 6155 0488 D05C     		ldrb	r0, [r2, r3]
 6156 048a FFF7FEFF 		bl	__aeabi_ui2f
 6157              	.LVL526:
 6158 048e 0890     		str	r0, [sp, #32]
 6159 0490 934B     		ldr	r3, .L359+80
 6160 0492 5878     		ldrb	r0, [r3, #1]
 6161 0494 FFF7FEFF 		bl	__aeabi_ui2f
 6162              	.LVL527:
 6163 0498 0990     		str	r0, [sp, #36]
 6164 049a 914A     		ldr	r2, .L359+80
 6165 049c 9078     		ldrb	r0, [r2, #2]
 6166 049e FFF7FEFF 		bl	__aeabi_ui2f
 6167              	.LVL528:
 6168 04a2 021C     		add	r2, r0, #0
 6169 04a4 0094     		str	r4, [sp]
 6170 04a6 4346     		mov	r3, r8
 6171 04a8 0193     		str	r3, [sp, #4]
 6172 04aa 3323     		mov	r3, #51
 6173 04ac 0293     		str	r3, [sp, #8]
 6174 04ae 5346     		mov	r3, sl
 6175 04b0 0393     		str	r3, [sp, #12]
 6176 04b2 0497     		str	r7, [sp, #16]
 6177 04b4 0596     		str	r6, [sp, #20]
 6178 04b6 0694     		str	r4, [sp, #24]
 6179 04b8 0794     		str	r4, [sp, #28]
 6180 04ba 0898     		ldr	r0, [sp, #32]
 6181 04bc 0999     		ldr	r1, [sp, #36]
 6182 04be 2B1C     		add	r3, r5, #0
 6183 04c0 FFF7FEFF 		bl	display_number
 6184              	.LVL529:
6125:screens.c     **** 		display_number( (float)pFac.pf.GW302_DensityPresSmoothingFactor,
 6185              		.loc 1 6125 0
 6186 04c4 CD23     		mov	r3, #205
 6187 04c6 4A46     		mov	r2, r9
 6188 04c8 D05C     		ldrb	r0, [r2, r3]
 6189 04ca FFF7FEFF 		bl	__aeabi_ui2f
 6190              	.LVL530:
 6191 04ce 0890     		str	r0, [sp, #32]
 6192 04d0 844B     		ldr	r3, .L359+84
 6193 04d2 5878     		ldrb	r0, [r3, #1]
 6194 04d4 FFF7FEFF 		bl	__aeabi_ui2f
 6195              	.LVL531:
 6196 04d8 0990     		str	r0, [sp, #36]
 6197 04da 824A     		ldr	r2, .L359+84
 6198 04dc 9078     		ldrb	r0, [r2, #2]
 6199 04de FFF7FEFF 		bl	__aeabi_ui2f
 6200              	.LVL532:
 6201 04e2 021C     		add	r2, r0, #0
 6202 04e4 0094     		str	r4, [sp]
 6203 04e6 4346     		mov	r3, r8
 6204 04e8 0193     		str	r3, [sp, #4]
 6205 04ea 3D23     		mov	r3, #61
 6206 04ec 0293     		str	r3, [sp, #8]
 6207 04ee 5346     		mov	r3, sl
 6208 04f0 0393     		str	r3, [sp, #12]
 6209 04f2 0497     		str	r7, [sp, #16]
 6210 04f4 0596     		str	r6, [sp, #20]
 6211 04f6 0694     		str	r4, [sp, #24]
 6212 04f8 0794     		str	r4, [sp, #28]
 6213 04fa 0898     		ldr	r0, [sp, #32]
 6214 04fc 0999     		ldr	r1, [sp, #36]
 6215 04fe 2B1C     		add	r3, r5, #0
 6216 0500 FFF7FEFF 		bl	display_number
 6217              	.LVL533:
6128:screens.c     **** 		display_number( (float)pFac.pf.GW302_BaleShapeSmoothingFactor,
 6218              		.loc 1 6128 0
 6219 0504 CE23     		mov	r3, #206
 6220 0506 4A46     		mov	r2, r9
 6221 0508 D05C     		ldrb	r0, [r2, r3]
 6222 050a FFF7FEFF 		bl	__aeabi_ui2f
 6223              	.LVL534:
 6224 050e 0890     		str	r0, [sp, #32]
 6225 0510 754B     		ldr	r3, .L359+88
 6226 0512 5878     		ldrb	r0, [r3, #1]
 6227 0514 FFF7FEFF 		bl	__aeabi_ui2f
 6228              	.LVL535:
 6229 0518 0990     		str	r0, [sp, #36]
 6230 051a 734A     		ldr	r2, .L359+88
 6231 051c 9078     		ldrb	r0, [r2, #2]
 6232 051e FFF7FEFF 		bl	__aeabi_ui2f
 6233              	.LVL536:
 6234 0522 021C     		add	r2, r0, #0
 6235 0524 0094     		str	r4, [sp]
 6236 0526 4346     		mov	r3, r8
 6237 0528 0193     		str	r3, [sp, #4]
 6238 052a 4723     		mov	r3, #71
 6239 052c 0293     		str	r3, [sp, #8]
 6240 052e 5346     		mov	r3, sl
 6241 0530 0393     		str	r3, [sp, #12]
 6242 0532 0497     		str	r7, [sp, #16]
 6243 0534 0596     		str	r6, [sp, #20]
 6244 0536 0694     		str	r4, [sp, #24]
 6245 0538 0794     		str	r4, [sp, #28]
 6246 053a 0898     		ldr	r0, [sp, #32]
 6247 053c 0999     		ldr	r1, [sp, #36]
 6248 053e 2B1C     		add	r3, r5, #0
 6249 0540 FFF7FEFF 		bl	display_number
 6250              	.LVL537:
6131:screens.c     **** 		display_number( (float)pFac.pf.GW302_KnifePresSmoothingFactor,
 6251              		.loc 1 6131 0
 6252 0544 CF23     		mov	r3, #207
 6253 0546 4A46     		mov	r2, r9
 6254 0548 D05C     		ldrb	r0, [r2, r3]
 6255 054a FFF7FEFF 		bl	__aeabi_ui2f
 6256              	.LVL538:
 6257 054e 0890     		str	r0, [sp, #32]
6132:screens.c     **** 				(float)PF_GW302_KnifePresSmoothingFactor[PF_MIN], (float)PF_GW302_KnifePresSmoothingFactor[PF_M
 6258              		.loc 1 6132 0
 6259 0550 664B     		ldr	r3, .L359+92
 6260 0552 9946     		mov	r9, r3
6131:screens.c     **** 		display_number( (float)pFac.pf.GW302_KnifePresSmoothingFactor,
 6261              		.loc 1 6131 0
 6262 0554 5878     		ldrb	r0, [r3, #1]
 6263 0556 FFF7FEFF 		bl	__aeabi_ui2f
 6264              	.LVL539:
 6265 055a 0990     		str	r0, [sp, #36]
 6266 055c 4B46     		mov	r3, r9
 6267 055e 9878     		ldrb	r0, [r3, #2]
 6268 0560 FFF7FEFF 		bl	__aeabi_ui2f
 6269              	.LVL540:
 6270 0564 021C     		add	r2, r0, #0
 6271 0566 0094     		str	r4, [sp]
 6272 0568 4346     		mov	r3, r8
 6273 056a 0193     		str	r3, [sp, #4]
 6274 056c 5123     		mov	r3, #81
 6275 056e 0293     		str	r3, [sp, #8]
 6276 0570 5346     		mov	r3, sl
 6277 0572 0393     		str	r3, [sp, #12]
 6278 0574 0497     		str	r7, [sp, #16]
 6279 0576 0596     		str	r6, [sp, #20]
 6280 0578 0694     		str	r4, [sp, #24]
 6281 057a 0794     		str	r4, [sp, #28]
 6282 057c 0898     		ldr	r0, [sp, #32]
 6283 057e 0999     		ldr	r1, [sp, #36]
 6284 0580 2B1C     		add	r3, r5, #0
 6285 0582 FFF7FEFF 		bl	display_number
 6286              	.LVL541:
6142:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs    
 6287              		.loc 1 6142 0
 6288 0586 7E23     		mov	r3, #126
 6289 0588 0093     		str	r3, [sp]
 6290 058a 4022     		mov	r2, #64
 6291 058c 0192     		str	r2, [sp, #4]
 6292 058e 5846     		mov	r0, fp
 6293 0590 0121     		mov	r1, #1
 6294 0592 6622     		mov	r2, #102
 6295 0594 9E23     		mov	r3, #158
 6296 0596 FFF7FEFF 		bl	draw_box
 6297              	.LVL542:
6143:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
 6298              		.loc 1 6143 0
 6299 059a 554B     		ldr	r3, .L359+96
 6300 059c 1A78     		ldrb	r2, [r3]
 6301 059e 062A     		cmp	r2, #6
 6302 05a0 00D9     		bls	.LCB6106
 6303 05a2 4CE1     		b	.L345	@long jump
 6304              	.LCB6106:
 6305 05a4 9300     		lsl	r3, r2, #2
 6306 05a6 534A     		ldr	r2, .L359+100
 6307 05a8 D358     		ldr	r3, [r2, r3]
 6308 05aa 9F46     		mov	pc, r3
 6309              		.section	.rodata.screen144
 6310              		.align	2
 6311              	.L353:
 6312 0038 AC050000 		.word	.L346
 6313 003c F8050000 		.word	.L347
 6314 0040 44060000 		.word	.L348
 6315 0044 10070000 		.word	.L349
 6316 0048 5C070000 		.word	.L350
 6317 004c A8070000 		.word	.L351
 6318 0050 F4070000 		.word	.L352
 6319              		.section	.text.screen144
 6320              	.L346:
6146:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 6321              		.loc 1 6146 0
 6322 05ac 3C4C     		ldr	r4, .L359+16
 6323 05ae 0225     		mov	r5, #2
 6324 05b0 0095     		str	r5, [sp]
 6325 05b2 201C     		mov	r0, r4
 6326 05b4 5049     		ldr	r1, .L359+104
 6327 05b6 0022     		mov	r2, #0
 6328 05b8 6B23     		mov	r3, #107
 6329 05ba FFF7FEFF 		bl	write_bitmap
 6330              	.LVL543:
6147:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 6331              		.loc 1 6147 0
 6332 05be 0095     		str	r5, [sp]
 6333 05c0 201C     		mov	r0, r4
 6334 05c2 4E49     		ldr	r1, .L359+108
 6335 05c4 1F22     		mov	r2, #31
 6336 05c6 6B23     		mov	r3, #107
 6337 05c8 FFF7FEFF 		bl	write_bitmap
 6338              	.LVL544:
6148:screens.c     **** 			write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 6339              		.loc 1 6148 0
 6340 05cc 0095     		str	r5, [sp]
 6341 05ce 201C     		mov	r0, r4
 6342 05d0 4B49     		ldr	r1, .L359+112
 6343 05d2 3E22     		mov	r2, #62
 6344 05d4 6623     		mov	r3, #102
 6345 05d6 FFF7FEFF 		bl	write_bitmap
 6346              	.LVL545:
6149:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 6347              		.loc 1 6149 0
 6348 05da 0095     		str	r5, [sp]
 6349 05dc 201C     		mov	r0, r4
 6350 05de 4949     		ldr	r1, .L359+116
 6351 05e0 6322     		mov	r2, #99
 6352 05e2 6B23     		mov	r3, #107
 6353 05e4 FFF7FEFF 		bl	write_bitmap
 6354              	.LVL546:
6150:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 6355              		.loc 1 6150 0
 6356 05e8 0095     		str	r5, [sp]
 6357 05ea 201C     		mov	r0, r4
 6358 05ec 4649     		ldr	r1, .L359+120
 6359 05ee 8222     		mov	r2, #130
 6360 05f0 6B23     		mov	r3, #107
 6361 05f2 FFF7FEFF 		bl	write_bitmap
 6362              	.LVL547:
6151:screens.c     **** 			break;
 6363              		.loc 1 6151 0
 6364 05f6 22E1     		b	.L345
 6365              	.L347:
6154:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 6366              		.loc 1 6154 0
 6367 05f8 294C     		ldr	r4, .L359+16
 6368 05fa 0225     		mov	r5, #2
 6369 05fc 0095     		str	r5, [sp]
 6370 05fe 201C     		mov	r0, r4
 6371 0600 3D49     		ldr	r1, .L359+104
 6372 0602 0022     		mov	r2, #0
 6373 0604 6B23     		mov	r3, #107
 6374 0606 FFF7FEFF 		bl	write_bitmap
 6375              	.LVL548:
6155:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 6376              		.loc 1 6155 0
 6377 060a 0095     		str	r5, [sp]
 6378 060c 201C     		mov	r0, r4
 6379 060e 3B49     		ldr	r1, .L359+108
 6380 0610 1F22     		mov	r2, #31
 6381 0612 6B23     		mov	r3, #107
 6382 0614 FFF7FEFF 		bl	write_bitmap
 6383              	.LVL549:
6156:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 6384              		.loc 1 6156 0
 6385 0618 0095     		str	r5, [sp]
 6386 061a 201C     		mov	r0, r4
 6387 061c 3B49     		ldr	r1, .L359+124
 6388 061e 3E22     		mov	r2, #62
 6389 0620 6623     		mov	r3, #102
 6390 0622 FFF7FEFF 		bl	write_bitmap
 6391              	.LVL550:
6157:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 6392              		.loc 1 6157 0
 6393 0626 0095     		str	r5, [sp]
 6394 0628 201C     		mov	r0, r4
 6395 062a 3649     		ldr	r1, .L359+116
 6396 062c 6322     		mov	r2, #99
 6397 062e 6B23     		mov	r3, #107
 6398 0630 FFF7FEFF 		bl	write_bitmap
 6399              	.LVL551:
6158:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 6400              		.loc 1 6158 0
 6401 0634 0095     		str	r5, [sp]
 6402 0636 201C     		mov	r0, r4
 6403 0638 3349     		ldr	r1, .L359+120
 6404 063a 8222     		mov	r2, #130
 6405 063c 6B23     		mov	r3, #107
 6406 063e FFF7FEFF 		bl	write_bitmap
 6407              	.LVL552:
6159:screens.c     **** 			break;
 6408              		.loc 1 6159 0
 6409 0642 FCE0     		b	.L345
 6410              	.L348:
6162:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 6411              		.loc 1 6162 0
 6412 0644 164C     		ldr	r4, .L359+16
 6413 0646 0225     		mov	r5, #2
 6414 0648 0095     		str	r5, [sp]
 6415 064a 201C     		mov	r0, r4
 6416 064c 2A49     		ldr	r1, .L359+104
 6417 064e 0022     		mov	r2, #0
 6418 0650 6B23     		mov	r3, #107
 6419 0652 FFF7FEFF 		bl	write_bitmap
 6420              	.LVL553:
6163:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 6421              		.loc 1 6163 0
 6422 0656 0095     		str	r5, [sp]
 6423 0658 201C     		mov	r0, r4
 6424 065a 2849     		ldr	r1, .L359+108
 6425 065c 1F22     		mov	r2, #31
 6426 065e 6B23     		mov	r3, #107
 6427 0660 FFF7FEFF 		bl	write_bitmap
 6428              	.LVL554:
6164:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 6429              		.loc 1 6164 0
 6430 0664 0095     		str	r5, [sp]
 6431 0666 201C     		mov	r0, r4
 6432 0668 2849     		ldr	r1, .L359+124
 6433 066a 3E22     		mov	r2, #62
 6434 066c 6623     		mov	r3, #102
 6435 066e FFF7FEFF 		bl	write_bitmap
 6436              	.LVL555:
6165:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 6437              		.loc 1 6165 0
 6438 0672 0095     		str	r5, [sp]
 6439 0674 201C     		mov	r0, r4
 6440 0676 2349     		ldr	r1, .L359+116
 6441 0678 6322     		mov	r2, #99
 6442 067a 6B23     		mov	r3, #107
 6443 067c FFF7FEFF 		bl	write_bitmap
 6444              	.LVL556:
6166:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 6445              		.loc 1 6166 0
 6446 0680 0095     		str	r5, [sp]
 6447 0682 201C     		mov	r0, r4
 6448 0684 2049     		ldr	r1, .L359+120
 6449 0686 8222     		mov	r2, #130
 6450 0688 6B23     		mov	r3, #107
 6451 068a FFF7FEFF 		bl	write_bitmap
 6452              	.LVL557:
6167:screens.c     **** 			break;
 6453              		.loc 1 6167 0
 6454 068e D6E0     		b	.L345
 6455              	.L360:
 6456              		.align	2
 6457              	.L359:
 6458 0690 00000000 		.word	SavecalDelayOnMainDisplay
 6459 0694 00000000 		.word	SavecalDelayWithinMenus
 6460 0698 00000000 		.word	swrel
 6461 069c 00000000 		.word	savecal
 6462 06a0 00000000 		.word	adm
 6463 06a4 78010000 		.word	.LC244
 6464 06a8 64000000 		.word	.LC111
 6465 06ac 88010000 		.word	.LC247
 6466 06b0 98010000 		.word	.LC249
 6467 06b4 00000000 		.word	.LC64
 6468 06b8 A8010000 		.word	.LC252
 6469 06bc BC010000 		.word	.LC254
 6470 06c0 D0010000 		.word	.LC256
 6471 06c4 E4010000 		.word	.LC258
 6472 06c8 F8010000 		.word	.LC260
 6473 06cc 00000000 		.word	pFac
 6474 06d0 00000000 		.word	PF_GW302_DiameterMin
 6475 06d4 00000000 		.word	RDSfnt1
 6476 06d8 00000000 		.word	PF_GW302_DiameterMax
 6477 06dc 00000000 		.word	PF_GW302_DiaCorrection
 6478 06e0 00000000 		.word	PF_GW302_BaleDiaSmoothingFactor
 6479 06e4 00000000 		.word	PF_GW302_DensityPresSmoothingFactor
 6480 06e8 00000000 		.word	PF_GW302_BaleShapeSmoothingFactor
 6481 06ec 00000000 		.word	PF_GW302_KnifePresSmoothingFactor
 6482 06f0 00000000 		.word	selection
 6483 06f4 38000000 		.word	.L353
 6484 06f8 00000000 		.word	TABMINUS
 6485 06fc 00000000 		.word	TABPLUS
 6486 0700 00000000 		.word	TABNAV_DL
 6487 0704 00000000 		.word	TAB
 6488 0708 00000000 		.word	TABESC
 6489 070c 00000000 		.word	TABNAV_UDL
 6490              	.L349:
6170:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 6491              		.loc 1 6170 0
 6492 0710 5D4C     		ldr	r4, .L361
 6493 0712 0225     		mov	r5, #2
 6494 0714 0095     		str	r5, [sp]
 6495 0716 201C     		mov	r0, r4
 6496 0718 5C49     		ldr	r1, .L361+4
 6497 071a 0022     		mov	r2, #0
 6498 071c 6B23     		mov	r3, #107
 6499 071e FFF7FEFF 		bl	write_bitmap
 6500              	.LVL558:
6171:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 6501              		.loc 1 6171 0
 6502 0722 0095     		str	r5, [sp]
 6503 0724 201C     		mov	r0, r4
 6504 0726 5A49     		ldr	r1, .L361+8
 6505 0728 1F22     		mov	r2, #31
 6506 072a 6B23     		mov	r3, #107
 6507 072c FFF7FEFF 		bl	write_bitmap
 6508              	.LVL559:
6172:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 6509              		.loc 1 6172 0
 6510 0730 0095     		str	r5, [sp]
 6511 0732 201C     		mov	r0, r4
 6512 0734 5749     		ldr	r1, .L361+12
 6513 0736 3E22     		mov	r2, #62
 6514 0738 6623     		mov	r3, #102
 6515 073a FFF7FEFF 		bl	write_bitmap
 6516              	.LVL560:
6173:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 6517              		.loc 1 6173 0
 6518 073e 0095     		str	r5, [sp]
 6519 0740 201C     		mov	r0, r4
 6520 0742 5549     		ldr	r1, .L361+16
 6521 0744 6322     		mov	r2, #99
 6522 0746 6B23     		mov	r3, #107
 6523 0748 FFF7FEFF 		bl	write_bitmap
 6524              	.LVL561:
6174:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 6525              		.loc 1 6174 0
 6526 074c 0095     		str	r5, [sp]
 6527 074e 201C     		mov	r0, r4
 6528 0750 5249     		ldr	r1, .L361+20
 6529 0752 8222     		mov	r2, #130
 6530 0754 6B23     		mov	r3, #107
 6531 0756 FFF7FEFF 		bl	write_bitmap
 6532              	.LVL562:
6175:screens.c     **** 			break;
 6533              		.loc 1 6175 0
 6534 075a 70E0     		b	.L345
 6535              	.L350:
6178:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 6536              		.loc 1 6178 0
 6537 075c 4A4C     		ldr	r4, .L361
 6538 075e 0225     		mov	r5, #2
 6539 0760 0095     		str	r5, [sp]
 6540 0762 201C     		mov	r0, r4
 6541 0764 4949     		ldr	r1, .L361+4
 6542 0766 0022     		mov	r2, #0
 6543 0768 6B23     		mov	r3, #107
 6544 076a FFF7FEFF 		bl	write_bitmap
 6545              	.LVL563:
6179:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 6546              		.loc 1 6179 0
 6547 076e 0095     		str	r5, [sp]
 6548 0770 201C     		mov	r0, r4
 6549 0772 4749     		ldr	r1, .L361+8
 6550 0774 1F22     		mov	r2, #31
 6551 0776 6B23     		mov	r3, #107
 6552 0778 FFF7FEFF 		bl	write_bitmap
 6553              	.LVL564:
6180:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 6554              		.loc 1 6180 0
 6555 077c 0095     		str	r5, [sp]
 6556 077e 201C     		mov	r0, r4
 6557 0780 4449     		ldr	r1, .L361+12
 6558 0782 3E22     		mov	r2, #62
 6559 0784 6623     		mov	r3, #102
 6560 0786 FFF7FEFF 		bl	write_bitmap
 6561              	.LVL565:
6181:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 6562              		.loc 1 6181 0
 6563 078a 0095     		str	r5, [sp]
 6564 078c 201C     		mov	r0, r4
 6565 078e 4249     		ldr	r1, .L361+16
 6566 0790 6322     		mov	r2, #99
 6567 0792 6B23     		mov	r3, #107
 6568 0794 FFF7FEFF 		bl	write_bitmap
 6569              	.LVL566:
6182:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 6570              		.loc 1 6182 0
 6571 0798 0095     		str	r5, [sp]
 6572 079a 201C     		mov	r0, r4
 6573 079c 3F49     		ldr	r1, .L361+20
 6574 079e 8222     		mov	r2, #130
 6575 07a0 6B23     		mov	r3, #107
 6576 07a2 FFF7FEFF 		bl	write_bitmap
 6577              	.LVL567:
6183:screens.c     **** 			break;
 6578              		.loc 1 6183 0
 6579 07a6 4AE0     		b	.L345
 6580              	.L351:
6186:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 6581              		.loc 1 6186 0
 6582 07a8 374C     		ldr	r4, .L361
 6583 07aa 0225     		mov	r5, #2
 6584 07ac 0095     		str	r5, [sp]
 6585 07ae 201C     		mov	r0, r4
 6586 07b0 3649     		ldr	r1, .L361+4
 6587 07b2 0022     		mov	r2, #0
 6588 07b4 6B23     		mov	r3, #107
 6589 07b6 FFF7FEFF 		bl	write_bitmap
 6590              	.LVL568:
6187:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 6591              		.loc 1 6187 0
 6592 07ba 0095     		str	r5, [sp]
 6593 07bc 201C     		mov	r0, r4
 6594 07be 3449     		ldr	r1, .L361+8
 6595 07c0 1F22     		mov	r2, #31
 6596 07c2 6B23     		mov	r3, #107
 6597 07c4 FFF7FEFF 		bl	write_bitmap
 6598              	.LVL569:
6188:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 6599              		.loc 1 6188 0
 6600 07c8 0095     		str	r5, [sp]
 6601 07ca 201C     		mov	r0, r4
 6602 07cc 3149     		ldr	r1, .L361+12
 6603 07ce 3E22     		mov	r2, #62
 6604 07d0 6623     		mov	r3, #102
 6605 07d2 FFF7FEFF 		bl	write_bitmap
 6606              	.LVL570:
6189:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 6607              		.loc 1 6189 0
 6608 07d6 0095     		str	r5, [sp]
 6609 07d8 201C     		mov	r0, r4
 6610 07da 2F49     		ldr	r1, .L361+16
 6611 07dc 6322     		mov	r2, #99
 6612 07de 6B23     		mov	r3, #107
 6613 07e0 FFF7FEFF 		bl	write_bitmap
 6614              	.LVL571:
6190:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 6615              		.loc 1 6190 0
 6616 07e4 0095     		str	r5, [sp]
 6617 07e6 201C     		mov	r0, r4
 6618 07e8 2C49     		ldr	r1, .L361+20
 6619 07ea 8222     		mov	r2, #130
 6620 07ec 6B23     		mov	r3, #107
 6621 07ee FFF7FEFF 		bl	write_bitmap
 6622              	.LVL572:
6191:screens.c     **** 			break;
 6623              		.loc 1 6191 0
 6624 07f2 24E0     		b	.L345
 6625              	.L352:
6194:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 6626              		.loc 1 6194 0
 6627 07f4 244C     		ldr	r4, .L361
 6628 07f6 0225     		mov	r5, #2
 6629 07f8 0095     		str	r5, [sp]
 6630 07fa 201C     		mov	r0, r4
 6631 07fc 2349     		ldr	r1, .L361+4
 6632 07fe 0022     		mov	r2, #0
 6633 0800 6B23     		mov	r3, #107
 6634 0802 FFF7FEFF 		bl	write_bitmap
 6635              	.LVL573:
6195:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 6636              		.loc 1 6195 0
 6637 0806 0095     		str	r5, [sp]
 6638 0808 201C     		mov	r0, r4
 6639 080a 2149     		ldr	r1, .L361+8
 6640 080c 1F22     		mov	r2, #31
 6641 080e 6B23     		mov	r3, #107
 6642 0810 FFF7FEFF 		bl	write_bitmap
 6643              	.LVL574:
6196:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 6644              		.loc 1 6196 0
 6645 0814 0095     		str	r5, [sp]
 6646 0816 201C     		mov	r0, r4
 6647 0818 2149     		ldr	r1, .L361+24
 6648 081a 3E22     		mov	r2, #62
 6649 081c 6623     		mov	r3, #102
 6650 081e FFF7FEFF 		bl	write_bitmap
 6651              	.LVL575:
6197:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 6652              		.loc 1 6197 0
 6653 0822 0095     		str	r5, [sp]
 6654 0824 201C     		mov	r0, r4
 6655 0826 1C49     		ldr	r1, .L361+16
 6656 0828 6322     		mov	r2, #99
 6657 082a 6B23     		mov	r3, #107
 6658 082c FFF7FEFF 		bl	write_bitmap
 6659              	.LVL576:
6198:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 6660              		.loc 1 6198 0
 6661 0830 0095     		str	r5, [sp]
 6662 0832 201C     		mov	r0, r4
 6663 0834 1949     		ldr	r1, .L361+20
 6664 0836 8222     		mov	r2, #130
 6665 0838 6B23     		mov	r3, #107
 6666 083a FFF7FEFF 		bl	write_bitmap
 6667              	.LVL577:
 6668              	.L345:
6203:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
 6669              		.loc 1 6203 0
 6670 083e 124C     		ldr	r4, .L361
 6671 0840 6423     		mov	r3, #100
 6672 0842 0093     		str	r3, [sp]
 6673 0844 4023     		mov	r3, #64
 6674 0846 0193     		str	r3, [sp, #4]
 6675 0848 201C     		mov	r0, r4
 6676 084a 1021     		mov	r1, #16
 6677 084c 1522     		mov	r2, #21
 6678 084e 1423     		mov	r3, #20
 6679 0850 FFF7FEFF 		bl	draw_box
 6680              	.LVL578:
6204:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
 6681              		.loc 1 6204 0
 6682 0854 134B     		ldr	r3, .L361+28
 6683 0856 1B78     		ldrb	r3, [r3]
 6684 0858 9A00     		lsl	r2, r3, #2
 6685 085a D318     		add	r3, r2, r3
 6686 085c 5B06     		lsl	r3, r3, #25
 6687 085e A822     		mov	r2, #168
 6688 0860 5205     		lsl	r2, r2, #21
 6689 0862 9B18     		add	r3, r3, r2
 6690 0864 1B0E     		lsr	r3, r3, #24
 6691 0866 0222     		mov	r2, #2
 6692 0868 0092     		str	r2, [sp]
 6693 086a 201C     		mov	r0, r4
 6694 086c 0E49     		ldr	r1, .L361+32
 6695 086e 1022     		mov	r2, #16
 6696 0870 FFF7FEFF 		bl	write_bitmap
 6697              	.LVL579:
6209:screens.c     **** }
 6698              		.loc 1 6209 0
 6699 0874 0BB0     		add	sp, sp, #44
 6700              		@ sp needed for prologue
 6701 0876 3CBC     		pop	{r2, r3, r4, r5}
 6702 0878 9046     		mov	r8, r2
 6703 087a 9946     		mov	r9, r3
 6704 087c A246     		mov	sl, r4
 6705 087e AB46     		mov	fp, r5
 6706 0880 F0BC     		pop	{r4, r5, r6, r7}
 6707 0882 01BC     		pop	{r0}
 6708 0884 0047     		bx	r0
 6709              	.L362:
 6710 0886 C046     		.align	2
 6711              	.L361:
 6712 0888 00000000 		.word	adm
 6713 088c 00000000 		.word	TABMINUS
 6714 0890 00000000 		.word	TABPLUS
 6715 0894 00000000 		.word	TABNAV_UDL
 6716 0898 00000000 		.word	TAB
 6717 089c 00000000 		.word	TABESC
 6718 08a0 00000000 		.word	TABNAV_UL
 6719 08a4 00000000 		.word	selection
 6720 08a8 00000000 		.word	F1_POINT
 6721              		.cfi_endproc
 6722              	.LFE393:
 6724              		.section	.text.screen143,"ax",%progbits
 6725              		.align	2
 6726              		.global	screen143
 6727              		.code	16
 6728              		.thumb_func
 6730              	screen143:
 6731              	.LFB392:
5462:screens.c     **** {
 6732              		.loc 1 5462 0
 6733              		.cfi_startproc
 6734              	.LVL580:
 6735 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6736              	.LCFI20:
 6737              		.cfi_def_cfa_offset 20
 6738              		.cfi_offset 4, -20
 6739              		.cfi_offset 5, -16
 6740              		.cfi_offset 6, -12
 6741              		.cfi_offset 7, -8
 6742              		.cfi_offset 14, -4
 6743 0002 5F46     		mov	r7, fp
 6744 0004 5646     		mov	r6, sl
 6745 0006 4D46     		mov	r5, r9
 6746 0008 4446     		mov	r4, r8
 6747 000a F0B4     		push	{r4, r5, r6, r7}
 6748              	.LCFI21:
 6749              		.cfi_def_cfa_offset 36
 6750              		.cfi_offset 8, -36
 6751              		.cfi_offset 9, -32
 6752              		.cfi_offset 10, -28
 6753              		.cfi_offset 11, -24
 6754 000c 8BB0     		sub	sp, sp, #44
 6755              	.LCFI22:
 6756              		.cfi_def_cfa_offset 80
 6757 000e 041C     		mov	r4, r0
5469:screens.c     **** 	if( !startup )
 6758              		.loc 1 5469 0
 6759 0010 D24B     		ldr	r3, .L465
 6760 0012 1B78     		ldrb	r3, [r3]
 6761 0014 002B     		cmp	r3, #0
 6762 0016 12D1     		bne	.L364
5471:screens.c     **** 		startup = 1;
 6763              		.loc 1 5471 0
 6764 0018 0122     		mov	r2, #1
 6765 001a D04B     		ldr	r3, .L465
 6766 001c 1A70     		strb	r2, [r3]
5473:screens.c     **** 		draw_frame( adm );
 6767              		.loc 1 5473 0
 6768 001e D048     		ldr	r0, .L465+4
 6769              	.LVL581:
 6770 0020 FFF7FEFF 		bl	draw_frame
 6771              	.LVL582:
5475:screens.c     **** 		display_f1_text( "Netting Setup", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
 6772              		.loc 1 5475 0
 6773 0024 0A23     		mov	r3, #10
 6774 0026 0093     		str	r3, [sp]
 6775 0028 CE48     		ldr	r0, .L465+8
 6776 002a 1A21     		mov	r1, #26
 6777 002c 5022     		mov	r2, #80
 6778 002e 0723     		mov	r3, #7
 6779 0030 FFF7FEFF 		bl	display_f1_text
 6780              	.LVL583:
5477:screens.c     **** 		page = 0;
 6781              		.loc 1 5477 0
 6782 0034 0023     		mov	r3, #0
 6783 0036 CC4A     		ldr	r2, .L465+12
 6784 0038 1370     		strb	r3, [r2]
5478:screens.c     **** 		selection = 0;
 6785              		.loc 1 5478 0
 6786 003a CC4A     		ldr	r2, .L465+16
 6787 003c 1370     		strb	r3, [r2]
 6788              	.LVL584:
 6789              	.L364:
5483:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 6790              		.loc 1 5483 0
 6791 003e 0020     		mov	r0, #0
 6792 0040 FFF7FEFF 		bl	ClockDisplay
 6793              	.LVL585:
5486:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 6794              		.loc 1 5486 0
 6795 0044 CA4B     		ldr	r3, .L465+20
 6796 0046 1B78     		ldrb	r3, [r3]
 6797 0048 002B     		cmp	r3, #0
 6798 004a 00D0     		beq	.LCB6561
 6799 004c 2BE2     		b	.L365	@long jump
 6800              	.LCB6561:
5486:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 6801              		.loc 1 5486 0 is_stmt 0 discriminator 1
 6802 004e A30F     		lsr	r3, r4, #30
 6803 0050 00D1     		bne	.LCB6565
 6804 0052 14E2     		b	.L366	@long jump
 6805              	.LCB6565:
5488:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 6806              		.loc 1 5488 0 is_stmt 1
 6807 0054 A400     		lsl	r4, r4, #2
 6808              	.LVL586:
 6809 0056 A408     		lsr	r4, r4, #2
 6810              	.LVL587:
5490:screens.c     **** 		if( lkey == SW_OL ) // -
 6811              		.loc 1 5490 0
 6812 0058 8023     		mov	r3, #128
 6813 005a 9B00     		lsl	r3, r3, #2
 6814 005c 9C42     		cmp	r4, r3
 6815 005e 00D0     		beq	.LCB6573
 6816 0060 D2E0     		b	.L367	@long jump
 6817              	.LCB6573:
5492:screens.c     **** 			if( page == 0 )
 6818              		.loc 1 5492 0
 6819 0062 C14B     		ldr	r3, .L465+12
 6820 0064 1B78     		ldrb	r3, [r3]
 6821 0066 002B     		cmp	r3, #0
 6822 0068 00D0     		beq	.LCB6577
 6823 006a 91E0     		b	.L368	@long jump
 6824              	.LCB6577:
5494:screens.c     **** 				switch( selection )
 6825              		.loc 1 5494 0
 6826 006c BF4B     		ldr	r3, .L465+16
 6827 006e 1A78     		ldrb	r2, [r3]
 6828 0070 072A     		cmp	r2, #7
 6829 0072 00D9     		bls	.LCB6581
 6830 0074 C2E0     		b	.L369	@long jump
 6831              	.LCB6581:
 6832 0076 9300     		lsl	r3, r2, #2
 6833 0078 BE4A     		ldr	r2, .L465+24
 6834 007a D358     		ldr	r3, [r2, r3]
 6835 007c 9F46     		mov	pc, r3
 6836              		.section	.rodata.screen143,"a",%progbits
 6837              		.align	2
 6838              	.L378:
 6839 0000 7E000000 		.word	.L370
 6840 0004 A2000000 		.word	.L371
 6841 0008 C0000000 		.word	.L372
 6842 000c E4000000 		.word	.L373
 6843 0010 06010000 		.word	.L374
 6844 0014 28010000 		.word	.L375
 6845 0018 4A010000 		.word	.L376
 6846 001c 6C010000 		.word	.L377
 6847              		.section	.text.screen143
 6848              	.L370:
5497:screens.c     **** 					pFac.pf.GW302_NetOn -= PF_GW302_NetOn[PF_STEP];
 6849              		.loc 1 5497 0
 6850 007e BE4E     		ldr	r6, .L465+28
 6851 0080 A425     		mov	r5, #164
 6852 0082 BE4C     		ldr	r4, .L465+32
 6853              	.LVL588:
 6854 0084 7059     		ldr	r0, [r6, r5]
 6855 0086 2168     		ldr	r1, [r4]
 6856 0088 FFF7FEFF 		bl	__aeabi_fsub
 6857              	.LVL589:
 6858 008c 7051     		str	r0, [r6, r5]
5498:screens.c     **** 					if( pFac.pf.GW302_NetOn < PF_GW302_NetOn[PF_MIN] )
 6859              		.loc 1 5498 0
 6860 008e 6468     		ldr	r4, [r4, #4]
 6861 0090 211C     		add	r1, r4, #0
 6862 0092 FFF7FEFF 		bl	__aeabi_fcmplt
 6863              	.LVL590:
 6864 0096 0028     		cmp	r0, #0
 6865 0098 00D1     		bne	.LCB6607
 6866 009a AFE0     		b	.L369	@long jump
 6867              	.LCB6607:
5499:screens.c     **** 						pFac.pf.GW302_NetOn = PF_GW302_NetOn[PF_MIN]; // Limiting to minimum value
 6868              		.loc 1 5499 0
 6869 009c A423     		mov	r3, #164
 6870 009e F450     		str	r4, [r6, r3]
 6871 00a0 ACE0     		b	.L369
 6872              	.LVL591:
 6873              	.L371:
5503:screens.c     **** 					if( pFac.pf.GW302_NetCutPulse > PF_GW302_NetCutPulse[PF_MIN] ) // Limiting unsigned type to mi
 6874              		.loc 1 5503 0
 6875 00a2 A823     		mov	r3, #168
 6876 00a4 B44A     		ldr	r2, .L465+28
 6877 00a6 D35C     		ldrb	r3, [r2, r3]
 6878 00a8 B54A     		ldr	r2, .L465+36
 6879 00aa 5278     		ldrb	r2, [r2, #1]
 6880 00ac 9A42     		cmp	r2, r3
 6881 00ae 00D3     		bcc	.LCB6621
 6882 00b0 A4E0     		b	.L369	@long jump
 6883              	.LCB6621:
5504:screens.c     **** 						pFac.pf.GW302_NetCutPulse -= PF_GW302_NetCutPulse[PF_STEP];
 6884              		.loc 1 5504 0
 6885 00b2 B34A     		ldr	r2, .L465+36
 6886 00b4 1278     		ldrb	r2, [r2]
 6887 00b6 9B1A     		sub	r3, r3, r2
 6888 00b8 A822     		mov	r2, #168
 6889 00ba AF49     		ldr	r1, .L465+28
 6890 00bc 8B54     		strb	r3, [r1, r2]
 6891 00be 9DE0     		b	.L369
 6892              	.L372:
5508:screens.c     **** 					pFac.pf.GW302_NetCutTime -= PF_GW302_NetCutTime[PF_STEP];
 6893              		.loc 1 5508 0
 6894 00c0 AD4E     		ldr	r6, .L465+28
 6895 00c2 AC25     		mov	r5, #172
 6896 00c4 AF4C     		ldr	r4, .L465+40
 6897              	.LVL592:
 6898 00c6 7059     		ldr	r0, [r6, r5]
 6899 00c8 2168     		ldr	r1, [r4]
 6900 00ca FFF7FEFF 		bl	__aeabi_fsub
 6901              	.LVL593:
 6902 00ce 7051     		str	r0, [r6, r5]
5509:screens.c     **** 					if( pFac.pf.GW302_NetCutTime < PF_GW302_NetCutTime[PF_MIN] )
 6903              		.loc 1 5509 0
 6904 00d0 6468     		ldr	r4, [r4, #4]
 6905 00d2 211C     		add	r1, r4, #0
 6906 00d4 FFF7FEFF 		bl	__aeabi_fcmplt
 6907              	.LVL594:
 6908 00d8 0028     		cmp	r0, #0
 6909 00da 00D1     		bne	.LCB6646
 6910 00dc 8EE0     		b	.L369	@long jump
 6911              	.LCB6646:
5510:screens.c     **** 						pFac.pf.GW302_NetCutTime = PF_GW302_NetCutTime[PF_MIN]; // Limiting to minimum value
 6912              		.loc 1 5510 0
 6913 00de AC23     		mov	r3, #172
 6914 00e0 F450     		str	r4, [r6, r3]
 6915 00e2 8BE0     		b	.L369
 6916              	.LVL595:
 6917              	.L373:
5514:screens.c     **** 					pFac.pf.GW302_MinDiaPulsPerLay -= PF_GW302_MinDiaPulsPerLay[PF_STEP];
 6918              		.loc 1 5514 0
 6919 00e4 A44E     		ldr	r6, .L465+28
 6920 00e6 B025     		mov	r5, #176
 6921 00e8 A74C     		ldr	r4, .L465+44
 6922              	.LVL596:
 6923 00ea 7059     		ldr	r0, [r6, r5]
 6924 00ec 2168     		ldr	r1, [r4]
 6925 00ee FFF7FEFF 		bl	__aeabi_fsub
 6926              	.LVL597:
 6927 00f2 7051     		str	r0, [r6, r5]
5515:screens.c     **** 					if( pFac.pf.GW302_MinDiaPulsPerLay < PF_GW302_MinDiaPulsPerLay[PF_MIN] )
 6928              		.loc 1 5515 0
 6929 00f4 6468     		ldr	r4, [r4, #4]
 6930 00f6 211C     		add	r1, r4, #0
 6931 00f8 FFF7FEFF 		bl	__aeabi_fcmplt
 6932              	.LVL598:
 6933 00fc 0028     		cmp	r0, #0
 6934 00fe 7DD0     		beq	.L369
5516:screens.c     **** 						pFac.pf.GW302_MinDiaPulsPerLay = PF_GW302_MinDiaPulsPerLay[PF_MIN]; // Limiting to minimum va
 6935              		.loc 1 5516 0
 6936 0100 B023     		mov	r3, #176
 6937 0102 F450     		str	r4, [r6, r3]
 6938 0104 7AE0     		b	.L369
 6939              	.LVL599:
 6940              	.L374:
5520:screens.c     **** 					pFac.pf.GW302_MaxDiaPulsPerLay -= PF_GW302_MaxDiaPulsPerLay[PF_STEP];
 6941              		.loc 1 5520 0
 6942 0106 9C4E     		ldr	r6, .L465+28
 6943 0108 B425     		mov	r5, #180
 6944 010a A04C     		ldr	r4, .L465+48
 6945              	.LVL600:
 6946 010c 7059     		ldr	r0, [r6, r5]
 6947 010e 2168     		ldr	r1, [r4]
 6948 0110 FFF7FEFF 		bl	__aeabi_fsub
 6949              	.LVL601:
 6950 0114 7051     		str	r0, [r6, r5]
5521:screens.c     **** 					if( pFac.pf.GW302_MaxDiaPulsPerLay < PF_GW302_MaxDiaPulsPerLay[PF_MIN] )
 6951              		.loc 1 5521 0
 6952 0116 6468     		ldr	r4, [r4, #4]
 6953 0118 211C     		add	r1, r4, #0
 6954 011a FFF7FEFF 		bl	__aeabi_fcmplt
 6955              	.LVL602:
 6956 011e 0028     		cmp	r0, #0
 6957 0120 6CD0     		beq	.L369
5522:screens.c     **** 						pFac.pf.GW302_MaxDiaPulsPerLay = PF_GW302_MaxDiaPulsPerLay[PF_MIN]; // Limiting to minimum va
 6958              		.loc 1 5522 0
 6959 0122 B423     		mov	r3, #180
 6960 0124 F450     		str	r4, [r6, r3]
 6961 0126 69E0     		b	.L369
 6962              	.LVL603:
 6963              	.L375:
5526:screens.c     **** 					pFac.pf.GW302_NetFactor -= PF_GW302_NetFactor[PF_STEP];
 6964              		.loc 1 5526 0
 6965 0128 934E     		ldr	r6, .L465+28
 6966 012a B825     		mov	r5, #184
 6967 012c 984C     		ldr	r4, .L465+52
 6968              	.LVL604:
 6969 012e 7059     		ldr	r0, [r6, r5]
 6970 0130 2168     		ldr	r1, [r4]
 6971 0132 FFF7FEFF 		bl	__aeabi_fsub
 6972              	.LVL605:
 6973 0136 7051     		str	r0, [r6, r5]
5527:screens.c     **** 					if( pFac.pf.GW302_NetFactor < PF_GW302_NetFactor[PF_MIN] )
 6974              		.loc 1 5527 0
 6975 0138 6468     		ldr	r4, [r4, #4]
 6976 013a 211C     		add	r1, r4, #0
 6977 013c FFF7FEFF 		bl	__aeabi_fcmplt
 6978              	.LVL606:
 6979 0140 0028     		cmp	r0, #0
 6980 0142 5BD0     		beq	.L369
5528:screens.c     **** 						pFac.pf.GW302_NetFactor = PF_GW302_NetFactor[PF_MIN]; // Limiting to minimum value
 6981              		.loc 1 5528 0
 6982 0144 B823     		mov	r3, #184
 6983 0146 F450     		str	r4, [r6, r3]
 6984 0148 58E0     		b	.L369
 6985              	.LVL607:
 6986              	.L376:
5532:screens.c     **** 					pFac.pf.GW302_NoNetPulse -= PF_GW302_NoNetPulse[PF_STEP];
 6987              		.loc 1 5532 0
 6988 014a 8B4E     		ldr	r6, .L465+28
 6989 014c BC25     		mov	r5, #188
 6990 014e 914C     		ldr	r4, .L465+56
 6991              	.LVL608:
 6992 0150 7059     		ldr	r0, [r6, r5]
 6993 0152 2168     		ldr	r1, [r4]
 6994 0154 FFF7FEFF 		bl	__aeabi_fsub
 6995              	.LVL609:
 6996 0158 7051     		str	r0, [r6, r5]
5533:screens.c     **** 					if( pFac.pf.GW302_NoNetPulse < PF_GW302_NoNetPulse[PF_MIN] )
 6997              		.loc 1 5533 0
 6998 015a 6468     		ldr	r4, [r4, #4]
 6999 015c 211C     		add	r1, r4, #0
 7000 015e FFF7FEFF 		bl	__aeabi_fcmplt
 7001              	.LVL610:
 7002 0162 0028     		cmp	r0, #0
 7003 0164 4AD0     		beq	.L369
5534:screens.c     **** 						pFac.pf.GW302_NoNetPulse = PF_GW302_NoNetPulse[PF_MIN]; // Limiting to minimum value
 7004              		.loc 1 5534 0
 7005 0166 BC23     		mov	r3, #188
 7006 0168 F450     		str	r4, [r6, r3]
 7007 016a 47E0     		b	.L369
 7008              	.LVL611:
 7009              	.L377:
5538:screens.c     **** 					if(pFac.pf.GW302_NetTwineOption == TO_NET)
 7010              		.loc 1 5538 0
 7011 016c 7C23     		mov	r3, #124
 7012 016e 824A     		ldr	r2, .L465+28
 7013 0170 D35C     		ldrb	r3, [r2, r3]
 7014 0172 002B     		cmp	r3, #0
 7015 0174 42D1     		bne	.L369
5540:screens.c     **** 						if( pFac.pf.GW302_PreNetPulse > PF_GW302_PreNetPulse[PF_MIN] ) // Limiting unsigned type to m
 7016              		.loc 1 5540 0
 7017 0176 C023     		mov	r3, #192
 7018 0178 D35C     		ldrb	r3, [r2, r3]
 7019 017a 874A     		ldr	r2, .L465+60
 7020 017c 5278     		ldrb	r2, [r2, #1]
 7021 017e 9A42     		cmp	r2, r3
 7022 0180 3CD2     		bcs	.L369
5541:screens.c     **** 							pFac.pf.GW302_PreNetPulse -= PF_GW302_PreNetPulse[PF_STEP];
 7023              		.loc 1 5541 0
 7024 0182 854A     		ldr	r2, .L465+60
 7025 0184 1278     		ldrb	r2, [r2]
 7026 0186 9B1A     		sub	r3, r3, r2
 7027 0188 C022     		mov	r2, #192
 7028 018a 7B49     		ldr	r1, .L465+28
 7029 018c 8B54     		strb	r3, [r1, r2]
 7030 018e 35E0     		b	.L369
 7031              	.L368:
5549:screens.c     **** 				switch( selection )
 7032              		.loc 1 5549 0
 7033 0190 764B     		ldr	r3, .L465+16
 7034 0192 1B78     		ldrb	r3, [r3]
 7035 0194 012B     		cmp	r3, #1
 7036 0196 12D0     		beq	.L386
 7037 0198 002B     		cmp	r3, #0
 7038 019a 02D0     		beq	.L385
 7039 019c 022B     		cmp	r3, #2
 7040 019e 2DD1     		bne	.L369
 7041 01a0 1BE0     		b	.L387
 7042              	.L385:
5552:screens.c     **** 					if( pFac.pf.GW302_NetSystem == NS_BEAK )
 7043              		.loc 1 5552 0
 7044 01a2 C123     		mov	r3, #193
 7045 01a4 744A     		ldr	r2, .L465+28
 7046 01a6 D35C     		ldrb	r3, [r2, r3]
 7047 01a8 002B     		cmp	r3, #0
 7048 01aa 03D1     		bne	.L388
5553:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_ROLLER;
 7049              		.loc 1 5553 0
 7050 01ac 0121     		mov	r1, #1
 7051 01ae C123     		mov	r3, #193
 7052 01b0 D154     		strb	r1, [r2, r3]
 7053 01b2 23E0     		b	.L369
 7054              	.L388:
5555:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_BEAK;
 7055              		.loc 1 5555 0
 7056 01b4 0021     		mov	r1, #0
 7057 01b6 C123     		mov	r3, #193
 7058 01b8 6F4A     		ldr	r2, .L465+28
 7059 01ba D154     		strb	r1, [r2, r3]
 7060 01bc 1EE0     		b	.L369
 7061              	.L386:
5559:screens.c     **** 					if( pFac.pf.GW302_BeakEngage > PF_GW302_BeakEngage[PF_MIN] ) // Limiting unsigned type to mini
 7062              		.loc 1 5559 0
 7063 01be C223     		mov	r3, #194
 7064 01c0 6D4A     		ldr	r2, .L465+28
 7065 01c2 D35C     		ldrb	r3, [r2, r3]
 7066 01c4 754A     		ldr	r2, .L465+64
 7067 01c6 5278     		ldrb	r2, [r2, #1]
 7068 01c8 9A42     		cmp	r2, r3
 7069 01ca 17D2     		bcs	.L369
5560:screens.c     **** 						pFac.pf.GW302_BeakEngage -= PF_GW302_BeakEngage[PF_STEP];
 7070              		.loc 1 5560 0
 7071 01cc 734A     		ldr	r2, .L465+64
 7072 01ce 1278     		ldrb	r2, [r2]
 7073 01d0 9B1A     		sub	r3, r3, r2
 7074 01d2 C222     		mov	r2, #194
 7075 01d4 6849     		ldr	r1, .L465+28
 7076 01d6 8B54     		strb	r3, [r1, r2]
 7077 01d8 10E0     		b	.L369
 7078              	.L387:
5564:screens.c     **** 					if( pFac.pf.GW302_TwineOption == TO_OFF )
 7079              		.loc 1 5564 0
 7080 01da C323     		mov	r3, #195
 7081 01dc 664A     		ldr	r2, .L465+28
 7082 01de D35C     		ldrb	r3, [r2, r3]
 7083 01e0 002B     		cmp	r3, #0
 7084 01e2 03D1     		bne	.L389
5565:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_ON;
 7085              		.loc 1 5565 0
 7086 01e4 0121     		mov	r1, #1
 7087 01e6 C323     		mov	r3, #195
 7088 01e8 D154     		strb	r1, [r2, r3]
 7089 01ea 03E0     		b	.L390
 7090              	.L389:
5567:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_OFF;
 7091              		.loc 1 5567 0
 7092 01ec 0021     		mov	r1, #0
 7093 01ee C323     		mov	r3, #195
 7094 01f0 614A     		ldr	r2, .L465+28
 7095 01f2 D154     		strb	r1, [r2, r3]
 7096              	.L390:
5569:screens.c     **** 					pFac.pf.GW302_NetTwineOption = TO_NET; /* 'Net/Twine' option reset to Net on turning 'Twine Op
 7097              		.loc 1 5569 0
 7098 01f4 0021     		mov	r1, #0
 7099 01f6 7C23     		mov	r3, #124
 7100 01f8 5F4A     		ldr	r2, .L465+28
 7101 01fa D154     		strb	r1, [r2, r3]
 7102              	.LVL612:
 7103              	.L369:
5574:screens.c     **** 			SavecalDelayWithinMenus = 1;
 7104              		.loc 1 5574 0
 7105 01fc 0123     		mov	r3, #1
 7106 01fe 684A     		ldr	r2, .L465+68
 7107 0200 1370     		strb	r3, [r2]
5575:screens.c     **** 			valuechanged = 1;
 7108              		.loc 1 5575 0
 7109 0202 684A     		ldr	r2, .L465+72
 7110 0204 1370     		strb	r3, [r2]
 7111              	.LVL613:
 7112 0206 4EE1     		b	.L365
 7113              	.LVL614:
 7114              	.L367:
5578:screens.c     **** 		else if( lkey == SW_IL ) // +
 7115              		.loc 1 5578 0
 7116 0208 042C     		cmp	r4, #4
 7117 020a 00D0     		beq	.LCB6856
 7118 020c 02E1     		b	.L391	@long jump
 7119              	.LCB6856:
5580:screens.c     **** 			if( page == 0 )
 7120              		.loc 1 5580 0
 7121 020e 564B     		ldr	r3, .L465+12
 7122 0210 1B78     		ldrb	r3, [r3]
 7123 0212 002B     		cmp	r3, #0
 7124 0214 00D0     		beq	.LCB6860
 7125 0216 97E0     		b	.L392	@long jump
 7126              	.LCB6860:
5582:screens.c     **** 				switch( selection )
 7127              		.loc 1 5582 0
 7128 0218 544B     		ldr	r3, .L465+16
 7129 021a 1A78     		ldrb	r2, [r3]
 7130 021c 072A     		cmp	r2, #7
 7131 021e 00D9     		bls	.LCB6864
 7132 0220 F2E0     		b	.L393	@long jump
 7133              	.LCB6864:
 7134 0222 9300     		lsl	r3, r2, #2
 7135 0224 604A     		ldr	r2, .L465+76
 7136 0226 D358     		ldr	r3, [r2, r3]
 7137 0228 9F46     		mov	pc, r3
 7138              		.section	.rodata.screen143
 7139              		.align	2
 7140              	.L402:
 7141 0020 2A020000 		.word	.L394
 7142 0024 4E020000 		.word	.L395
 7143 0028 6E020000 		.word	.L396
 7144 002c 92020000 		.word	.L397
 7145 0030 B6020000 		.word	.L398
 7146 0034 DA020000 		.word	.L399
 7147 0038 FE020000 		.word	.L400
 7148 003c 20030000 		.word	.L401
 7149              		.section	.text.screen143
 7150              	.L394:
5585:screens.c     **** 					pFac.pf.GW302_NetOn += PF_GW302_NetOn[PF_STEP];
 7151              		.loc 1 5585 0
 7152 022a 534E     		ldr	r6, .L465+28
 7153 022c A425     		mov	r5, #164
 7154 022e 534C     		ldr	r4, .L465+32
 7155              	.LVL615:
 7156 0230 7059     		ldr	r0, [r6, r5]
 7157 0232 2168     		ldr	r1, [r4]
 7158 0234 FFF7FEFF 		bl	__aeabi_fadd
 7159              	.LVL616:
 7160 0238 7051     		str	r0, [r6, r5]
5586:screens.c     **** 					if( pFac.pf.GW302_NetOn > PF_GW302_NetOn[PF_MAX] )
 7161              		.loc 1 5586 0
 7162 023a A468     		ldr	r4, [r4, #8]
 7163 023c 211C     		add	r1, r4, #0
 7164 023e FFF7FEFF 		bl	__aeabi_fcmpgt
 7165              	.LVL617:
 7166 0242 0028     		cmp	r0, #0
 7167 0244 00D1     		bne	.LCB6890
 7168 0246 DFE0     		b	.L393	@long jump
 7169              	.LCB6890:
5587:screens.c     **** 						pFac.pf.GW302_NetOn = PF_GW302_NetOn[PF_MAX]; // Limiting to maximum value
 7170              		.loc 1 5587 0
 7171 0248 A423     		mov	r3, #164
 7172 024a F450     		str	r4, [r6, r3]
 7173 024c DCE0     		b	.L393
 7174              	.LVL618:
 7175              	.L395:
5591:screens.c     **** 					pFac.pf.GW302_NetCutPulse += PF_GW302_NetCutPulse[PF_STEP];
 7176              		.loc 1 5591 0
 7177 024e 4C4A     		ldr	r2, .L465+36
 7178 0250 4948     		ldr	r0, .L465+28
 7179 0252 A821     		mov	r1, #168
 7180 0254 1478     		ldrb	r4, [r2]
 7181              	.LVL619:
 7182 0256 435C     		ldrb	r3, [r0, r1]
 7183 0258 E318     		add	r3, r4, r3
 7184 025a 1B06     		lsl	r3, r3, #24
 7185 025c 1B0E     		lsr	r3, r3, #24
 7186 025e 4354     		strb	r3, [r0, r1]
5592:screens.c     **** 					if( pFac.pf.GW302_NetCutPulse > PF_GW302_NetCutPulse[PF_MAX] )
 7187              		.loc 1 5592 0
 7188 0260 9278     		ldrb	r2, [r2, #2]
 7189 0262 9342     		cmp	r3, r2
 7190 0264 00D8     		bhi	.LCB6910
 7191 0266 CFE0     		b	.L393	@long jump
 7192              	.LCB6910:
5593:screens.c     **** 						pFac.pf.GW302_NetCutPulse = PF_GW302_NetCutPulse[PF_MAX]; // Limiting to maximum value
 7193              		.loc 1 5593 0
 7194 0268 A823     		mov	r3, #168
 7195 026a C254     		strb	r2, [r0, r3]
 7196 026c CCE0     		b	.L393
 7197              	.LVL620:
 7198              	.L396:
5597:screens.c     **** 					pFac.pf.GW302_NetCutTime += PF_GW302_NetCutTime[PF_STEP];
 7199              		.loc 1 5597 0
 7200 026e 424E     		ldr	r6, .L465+28
 7201 0270 AC25     		mov	r5, #172
 7202 0272 444C     		ldr	r4, .L465+40
 7203              	.LVL621:
 7204 0274 7059     		ldr	r0, [r6, r5]
 7205 0276 2168     		ldr	r1, [r4]
 7206 0278 FFF7FEFF 		bl	__aeabi_fadd
 7207              	.LVL622:
 7208 027c 7051     		str	r0, [r6, r5]
5598:screens.c     **** 					if( pFac.pf.GW302_NetCutTime > PF_GW302_NetCutTime[PF_MAX] )
 7209              		.loc 1 5598 0
 7210 027e A468     		ldr	r4, [r4, #8]
 7211 0280 211C     		add	r1, r4, #0
 7212 0282 FFF7FEFF 		bl	__aeabi_fcmpgt
 7213              	.LVL623:
 7214 0286 0028     		cmp	r0, #0
 7215 0288 00D1     		bne	.LCB6932
 7216 028a BDE0     		b	.L393	@long jump
 7217              	.LCB6932:
5599:screens.c     **** 						pFac.pf.GW302_NetCutTime = PF_GW302_NetCutTime[PF_MAX]; // Limiting to maximum value
 7218              		.loc 1 5599 0
 7219 028c AC23     		mov	r3, #172
 7220 028e F450     		str	r4, [r6, r3]
 7221 0290 BAE0     		b	.L393
 7222              	.LVL624:
 7223              	.L397:
5603:screens.c     **** 					pFac.pf.GW302_MinDiaPulsPerLay += PF_GW302_MinDiaPulsPerLay[PF_STEP];
 7224              		.loc 1 5603 0
 7225 0292 394E     		ldr	r6, .L465+28
 7226 0294 B025     		mov	r5, #176
 7227 0296 3C4C     		ldr	r4, .L465+44
 7228              	.LVL625:
 7229 0298 7059     		ldr	r0, [r6, r5]
 7230 029a 2168     		ldr	r1, [r4]
 7231 029c FFF7FEFF 		bl	__aeabi_fadd
 7232              	.LVL626:
 7233 02a0 7051     		str	r0, [r6, r5]
5604:screens.c     **** 					if( pFac.pf.GW302_MinDiaPulsPerLay > PF_GW302_MinDiaPulsPerLay[PF_MAX] )
 7234              		.loc 1 5604 0
 7235 02a2 A468     		ldr	r4, [r4, #8]
 7236 02a4 211C     		add	r1, r4, #0
 7237 02a6 FFF7FEFF 		bl	__aeabi_fcmpgt
 7238              	.LVL627:
 7239 02aa 0028     		cmp	r0, #0
 7240 02ac 00D1     		bne	.LCB6954
 7241 02ae ABE0     		b	.L393	@long jump
 7242              	.LCB6954:
5605:screens.c     **** 						pFac.pf.GW302_MinDiaPulsPerLay = PF_GW302_MinDiaPulsPerLay[PF_MAX]; // Limiting to maximum va
 7243              		.loc 1 5605 0
 7244 02b0 B023     		mov	r3, #176
 7245 02b2 F450     		str	r4, [r6, r3]
 7246 02b4 A8E0     		b	.L393
 7247              	.LVL628:
 7248              	.L398:
5609:screens.c     **** 					pFac.pf.GW302_MaxDiaPulsPerLay += PF_GW302_MaxDiaPulsPerLay[PF_STEP];
 7249              		.loc 1 5609 0
 7250 02b6 304E     		ldr	r6, .L465+28
 7251 02b8 B425     		mov	r5, #180
 7252 02ba 344C     		ldr	r4, .L465+48
 7253              	.LVL629:
 7254 02bc 7059     		ldr	r0, [r6, r5]
 7255 02be 2168     		ldr	r1, [r4]
 7256 02c0 FFF7FEFF 		bl	__aeabi_fadd
 7257              	.LVL630:
 7258 02c4 7051     		str	r0, [r6, r5]
5610:screens.c     **** 					if( pFac.pf.GW302_MaxDiaPulsPerLay > PF_GW302_MaxDiaPulsPerLay[PF_MAX] )
 7259              		.loc 1 5610 0
 7260 02c6 A468     		ldr	r4, [r4, #8]
 7261 02c8 211C     		add	r1, r4, #0
 7262 02ca FFF7FEFF 		bl	__aeabi_fcmpgt
 7263              	.LVL631:
 7264 02ce 0028     		cmp	r0, #0
 7265 02d0 00D1     		bne	.LCB6976
 7266 02d2 99E0     		b	.L393	@long jump
 7267              	.LCB6976:
5611:screens.c     **** 						pFac.pf.GW302_MaxDiaPulsPerLay = PF_GW302_MaxDiaPulsPerLay[PF_MAX]; // Limiting to maximum va
 7268              		.loc 1 5611 0
 7269 02d4 B423     		mov	r3, #180
 7270 02d6 F450     		str	r4, [r6, r3]
 7271 02d8 96E0     		b	.L393
 7272              	.LVL632:
 7273              	.L399:
5615:screens.c     **** 					pFac.pf.GW302_NetFactor += PF_GW302_NetFactor[PF_STEP];
 7274              		.loc 1 5615 0
 7275 02da 274E     		ldr	r6, .L465+28
 7276 02dc B825     		mov	r5, #184
 7277 02de 2C4C     		ldr	r4, .L465+52
 7278              	.LVL633:
 7279 02e0 7059     		ldr	r0, [r6, r5]
 7280 02e2 2168     		ldr	r1, [r4]
 7281 02e4 FFF7FEFF 		bl	__aeabi_fadd
 7282              	.LVL634:
 7283 02e8 7051     		str	r0, [r6, r5]
5616:screens.c     **** 					if( pFac.pf.GW302_NetFactor > PF_GW302_NetFactor[PF_MAX] )
 7284              		.loc 1 5616 0
 7285 02ea A468     		ldr	r4, [r4, #8]
 7286 02ec 211C     		add	r1, r4, #0
 7287 02ee FFF7FEFF 		bl	__aeabi_fcmpgt
 7288              	.LVL635:
 7289 02f2 0028     		cmp	r0, #0
 7290 02f4 00D1     		bne	.LCB6998
 7291 02f6 87E0     		b	.L393	@long jump
 7292              	.LCB6998:
5617:screens.c     **** 						pFac.pf.GW302_NetFactor = PF_GW302_NetFactor[PF_MAX]; // Limiting to maximum value
 7293              		.loc 1 5617 0
 7294 02f8 B823     		mov	r3, #184
 7295 02fa F450     		str	r4, [r6, r3]
 7296 02fc 84E0     		b	.L393
 7297              	.LVL636:
 7298              	.L400:
5621:screens.c     **** 					pFac.pf.GW302_NoNetPulse += PF_GW302_NoNetPulse[PF_STEP];
 7299              		.loc 1 5621 0
 7300 02fe 1E4E     		ldr	r6, .L465+28
 7301 0300 BC25     		mov	r5, #188
 7302 0302 244C     		ldr	r4, .L465+56
 7303              	.LVL637:
 7304 0304 7059     		ldr	r0, [r6, r5]
 7305 0306 2168     		ldr	r1, [r4]
 7306 0308 FFF7FEFF 		bl	__aeabi_fadd
 7307              	.LVL638:
 7308 030c 7051     		str	r0, [r6, r5]
5622:screens.c     **** 					if( pFac.pf.GW302_NoNetPulse > PF_GW302_NoNetPulse[PF_MAX] )
 7309              		.loc 1 5622 0
 7310 030e A468     		ldr	r4, [r4, #8]
 7311 0310 211C     		add	r1, r4, #0
 7312 0312 FFF7FEFF 		bl	__aeabi_fcmpgt
 7313              	.LVL639:
 7314 0316 0028     		cmp	r0, #0
 7315 0318 76D0     		beq	.L393
5623:screens.c     **** 						pFac.pf.GW302_NoNetPulse = PF_GW302_NoNetPulse[PF_MAX]; // Limiting to maximum value
 7316              		.loc 1 5623 0
 7317 031a BC23     		mov	r3, #188
 7318 031c F450     		str	r4, [r6, r3]
 7319 031e 73E0     		b	.L393
 7320              	.LVL640:
 7321              	.L401:
5627:screens.c     **** 					if(pFac.pf.GW302_NetTwineOption == TO_NET)
 7322              		.loc 1 5627 0
 7323 0320 7C23     		mov	r3, #124
 7324 0322 154A     		ldr	r2, .L465+28
 7325 0324 D35C     		ldrb	r3, [r2, r3]
 7326 0326 002B     		cmp	r3, #0
 7327 0328 6ED1     		bne	.L393
5629:screens.c     **** 						pFac.pf.GW302_PreNetPulse += PF_GW302_PreNetPulse[PF_STEP];
 7328              		.loc 1 5629 0
 7329 032a 1B4B     		ldr	r3, .L465+60
 7330 032c 101C     		mov	r0, r2
 7331 032e C021     		mov	r1, #192
 7332 0330 1C78     		ldrb	r4, [r3]
 7333              	.LVL641:
 7334 0332 525C     		ldrb	r2, [r2, r1]
 7335 0334 A218     		add	r2, r4, r2
 7336 0336 1206     		lsl	r2, r2, #24
 7337 0338 120E     		lsr	r2, r2, #24
 7338 033a 4254     		strb	r2, [r0, r1]
5630:screens.c     **** 						if( pFac.pf.GW302_PreNetPulse > PF_GW302_PreNetPulse[PF_MAX] )
 7339              		.loc 1 5630 0
 7340 033c 9B78     		ldrb	r3, [r3, #2]
 7341 033e 9A42     		cmp	r2, r3
 7342 0340 62D9     		bls	.L393
5631:screens.c     **** 							pFac.pf.GW302_PreNetPulse = PF_GW302_PreNetPulse[PF_MAX]; // Limiting to maximum value
 7343              		.loc 1 5631 0
 7344 0342 0A1C     		mov	r2, r1
 7345 0344 8354     		strb	r3, [r0, r2]
 7346 0346 5FE0     		b	.L393
 7347              	.LVL642:
 7348              	.L392:
5638:screens.c     **** 				switch( selection )
 7349              		.loc 1 5638 0
 7350 0348 084B     		ldr	r3, .L465+16
 7351 034a 1B78     		ldrb	r3, [r3]
 7352 034c 012B     		cmp	r3, #1
 7353 034e 3BD0     		beq	.L410
 7354 0350 002B     		cmp	r3, #0
 7355 0352 2BD0     		beq	.L409
 7356 0354 022B     		cmp	r3, #2
 7357 0356 57D1     		bne	.L393
 7358 0358 45E0     		b	.L411
 7359              	.L466:
 7360 035a C046     		.align	2
 7361              	.L465:
 7362 035c 00000000 		.word	startup
 7363 0360 00000000 		.word	adm
 7364 0364 10020000 		.word	.LC276
 7365 0368 00000000 		.word	.LANCHOR3
 7366 036c 00000000 		.word	selection
 7367 0370 00000000 		.word	editing
 7368 0374 00000000 		.word	.L378
 7369 0378 00000000 		.word	pFac
 7370 037c 00000000 		.word	PF_GW302_NetOn
 7371 0380 00000000 		.word	PF_GW302_NetCutPulse
 7372 0384 00000000 		.word	PF_GW302_NetCutTime
 7373 0388 00000000 		.word	PF_GW302_MinDiaPulsPerLay
 7374 038c 00000000 		.word	PF_GW302_MaxDiaPulsPerLay
 7375 0390 00000000 		.word	PF_GW302_NetFactor
 7376 0394 00000000 		.word	PF_GW302_NoNetPulse
 7377 0398 00000000 		.word	PF_GW302_PreNetPulse
 7378 039c 00000000 		.word	PF_GW302_BeakEngage
 7379 03a0 00000000 		.word	SavecalDelayWithinMenus
 7380 03a4 00000000 		.word	valuechanged
 7381 03a8 20000000 		.word	.L402
 7382              	.L409:
5641:screens.c     **** 					if( pFac.pf.GW302_NetSystem == NS_BEAK )
 7383              		.loc 1 5641 0
 7384 03ac C123     		mov	r3, #193
 7385 03ae 784A     		ldr	r2, .L467
 7386 03b0 D35C     		ldrb	r3, [r2, r3]
 7387 03b2 002B     		cmp	r3, #0
 7388 03b4 03D1     		bne	.L412
5642:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_ROLLER;
 7389              		.loc 1 5642 0
 7390 03b6 0121     		mov	r1, #1
 7391 03b8 C123     		mov	r3, #193
 7392 03ba D154     		strb	r1, [r2, r3]
 7393 03bc 24E0     		b	.L393
 7394              	.L412:
5644:screens.c     **** 						pFac.pf.GW302_NetSystem = NS_BEAK;
 7395              		.loc 1 5644 0
 7396 03be 0021     		mov	r1, #0
 7397 03c0 C123     		mov	r3, #193
 7398 03c2 734A     		ldr	r2, .L467
 7399 03c4 D154     		strb	r1, [r2, r3]
 7400 03c6 1FE0     		b	.L393
 7401              	.L410:
5648:screens.c     **** 					pFac.pf.GW302_BeakEngage += PF_GW302_BeakEngage[PF_STEP];
 7402              		.loc 1 5648 0
 7403 03c8 724A     		ldr	r2, .L467+4
 7404 03ca 7148     		ldr	r0, .L467
 7405 03cc C221     		mov	r1, #194
 7406 03ce 1478     		ldrb	r4, [r2]
 7407              	.LVL643:
 7408 03d0 435C     		ldrb	r3, [r0, r1]
 7409 03d2 E318     		add	r3, r4, r3
 7410 03d4 1B06     		lsl	r3, r3, #24
 7411 03d6 1B0E     		lsr	r3, r3, #24
 7412 03d8 4354     		strb	r3, [r0, r1]
5649:screens.c     **** 					if( pFac.pf.GW302_BeakEngage > PF_GW302_BeakEngage[PF_MAX] )
 7413              		.loc 1 5649 0
 7414 03da 9278     		ldrb	r2, [r2, #2]
 7415 03dc 9342     		cmp	r3, r2
 7416 03de 13D9     		bls	.L393
5650:screens.c     **** 						pFac.pf.GW302_BeakEngage = PF_GW302_BeakEngage[PF_MAX]; // Limiting to maximum value
 7417              		.loc 1 5650 0
 7418 03e0 C223     		mov	r3, #194
 7419 03e2 C254     		strb	r2, [r0, r3]
 7420 03e4 10E0     		b	.L393
 7421              	.LVL644:
 7422              	.L411:
5654:screens.c     **** 					if( pFac.pf.GW302_TwineOption == TO_OFF )
 7423              		.loc 1 5654 0
 7424 03e6 C323     		mov	r3, #195
 7425 03e8 694A     		ldr	r2, .L467
 7426 03ea D35C     		ldrb	r3, [r2, r3]
 7427 03ec 002B     		cmp	r3, #0
 7428 03ee 03D1     		bne	.L413
5655:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_ON;
 7429              		.loc 1 5655 0
 7430 03f0 0121     		mov	r1, #1
 7431 03f2 C323     		mov	r3, #195
 7432 03f4 D154     		strb	r1, [r2, r3]
 7433 03f6 03E0     		b	.L414
 7434              	.L413:
5657:screens.c     **** 						pFac.pf.GW302_TwineOption = TO_OFF;
 7435              		.loc 1 5657 0
 7436 03f8 0021     		mov	r1, #0
 7437 03fa C323     		mov	r3, #195
 7438 03fc 644A     		ldr	r2, .L467
 7439 03fe D154     		strb	r1, [r2, r3]
 7440              	.L414:
5659:screens.c     **** 					pFac.pf.GW302_NetTwineOption = TO_NET; /* 'Net/Twine' option reset to Net on turning 'Twine Op
 7441              		.loc 1 5659 0
 7442 0400 0021     		mov	r1, #0
 7443 0402 7C23     		mov	r3, #124
 7444 0404 624A     		ldr	r2, .L467
 7445 0406 D154     		strb	r1, [r2, r3]
 7446              	.LVL645:
 7447              	.L393:
5664:screens.c     **** 			SavecalDelayWithinMenus = 1;
 7448              		.loc 1 5664 0
 7449 0408 0123     		mov	r3, #1
 7450 040a 634A     		ldr	r2, .L467+8
 7451 040c 1370     		strb	r3, [r2]
5665:screens.c     **** 			valuechanged = 1;
 7452              		.loc 1 5665 0
 7453 040e 634A     		ldr	r2, .L467+12
 7454 0410 1370     		strb	r3, [r2]
 7455              	.LVL646:
 7456 0412 48E0     		b	.L365
 7457              	.LVL647:
 7458              	.L391:
5668:screens.c     **** 		else if( lkey == SW_CU ) // ^
 7459              		.loc 1 5668 0
 7460 0414 202C     		cmp	r4, #32
 7461 0416 07D1     		bne	.L415
5670:screens.c     **** 			if( selection )
 7462              		.loc 1 5670 0
 7463 0418 614B     		ldr	r3, .L467+16
 7464 041a 1B78     		ldrb	r3, [r3]
 7465 041c 002B     		cmp	r3, #0
 7466 041e 42D0     		beq	.L365
5672:screens.c     **** 				selection--;
 7467              		.loc 1 5672 0
 7468 0420 013B     		sub	r3, r3, #1
 7469 0422 5F4A     		ldr	r2, .L467+16
 7470 0424 1370     		strb	r3, [r2]
 7471              	.LVL648:
 7472 0426 3EE0     		b	.L365
 7473              	.LVL649:
 7474              	.L415:
5676:screens.c     **** 		else if( lkey == SW_CD ) // V
 7475              		.loc 1 5676 0
 7476 0428 402C     		cmp	r4, #64
 7477 042a 13D1     		bne	.L416
5678:screens.c     **** 			if( page == 0 )
 7478              		.loc 1 5678 0
 7479 042c 5D4B     		ldr	r3, .L467+20
 7480 042e 1B78     		ldrb	r3, [r3]
 7481 0430 002B     		cmp	r3, #0
 7482 0432 07D1     		bne	.L417
5680:screens.c     **** 				if( selection < 7 )
 7483              		.loc 1 5680 0
 7484 0434 5A4B     		ldr	r3, .L467+16
 7485 0436 1B78     		ldrb	r3, [r3]
 7486 0438 062B     		cmp	r3, #6
 7487 043a 3AD8     		bhi	.L444
5682:screens.c     **** 					selection++;
 7488              		.loc 1 5682 0
 7489 043c 0133     		add	r3, r3, #1
 7490 043e 584A     		ldr	r2, .L467+16
 7491 0440 1370     		strb	r3, [r2]
 7492              	.LVL650:
 7493 0442 30E0     		b	.L365
 7494              	.LVL651:
 7495              	.L417:
5688:screens.c     **** 				if( selection < 2 )
 7496              		.loc 1 5688 0
 7497 0444 564B     		ldr	r3, .L467+16
 7498 0446 1B78     		ldrb	r3, [r3]
 7499 0448 012B     		cmp	r3, #1
 7500 044a 30D8     		bhi	.L419
5690:screens.c     **** 					selection++;
 7501              		.loc 1 5690 0
 7502 044c 0133     		add	r3, r3, #1
 7503 044e 544A     		ldr	r2, .L467+16
 7504 0450 1370     		strb	r3, [r2]
 7505              	.LVL652:
 7506 0452 28E0     		b	.L365
 7507              	.LVL653:
 7508              	.L416:
5695:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
 7509              		.loc 1 5695 0
 7510 0454 102C     		cmp	r4, #16
 7511 0456 03D0     		beq	.L463
 7512 0458 631E     		sub	r3, r4, #1
 7513 045a FF3B     		sub	r3, r3, #255
 7514 045c 002B     		cmp	r3, #0
 7515 045e 03D1     		bne	.L420
 7516              	.L463:
5697:screens.c     **** 			escape = 1;
 7517              		.loc 1 5697 0
 7518 0460 0122     		mov	r2, #1
 7519 0462 514B     		ldr	r3, .L467+24
 7520 0464 1A70     		strb	r2, [r3]
 7521 0466 1EE0     		b	.L365
 7522              	.L420:
5699:screens.c     **** 		else if( lkey == SW_IR ) // PAGE
 7523              		.loc 1 5699 0
 7524 0468 082C     		cmp	r4, #8
 7525 046a 1CD1     		bne	.L365
5701:screens.c     **** 			page = page? 0:1;
 7526              		.loc 1 5701 0
 7527 046c 4D4B     		ldr	r3, .L467+20
 7528 046e 1A78     		ldrb	r2, [r3]
 7529 0470 5142     		neg	r1, r2
 7530 0472 4A41     		adc	r2, r2, r1
 7531 0474 1A70     		strb	r2, [r3]
5703:screens.c     **** 			selection = 0;
 7532              		.loc 1 5703 0
 7533 0476 0022     		mov	r2, #0
 7534 0478 494B     		ldr	r3, .L467+16
 7535 047a 1A70     		strb	r2, [r3]
 7536 047c 13E0     		b	.L365
 7537              	.L366:
5710:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 7538              		.loc 1 5710 0
 7539 047e 4B4B     		ldr	r3, .L467+28
 7540 0480 1B78     		ldrb	r3, [r3]
 7541 0482 002B     		cmp	r3, #0
 7542 0484 03D1     		bne	.L422
5710:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 7543              		.loc 1 5710 0 is_stmt 0 discriminator 1
 7544 0486 444B     		ldr	r3, .L467+8
 7545 0488 1B78     		ldrb	r3, [r3]
 7546 048a 002B     		cmp	r3, #0
 7547 048c 0BD0     		beq	.L365
 7548              	.L422:
5712:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 7549              		.loc 1 5712 0 is_stmt 1
 7550 048e 484B     		ldr	r3, .L467+32
 7551 0490 1B78     		ldrb	r3, [r3]
 7552 0492 032B     		cmp	r3, #3
 7553 0494 07D9     		bls	.L365
5714:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 7554              		.loc 1 5714 0
 7555 0496 0023     		mov	r3, #0
 7556 0498 444A     		ldr	r2, .L467+28
 7557 049a 1370     		strb	r3, [r2]
5715:screens.c     **** 				SavecalDelayWithinMenus = 0;
 7558              		.loc 1 5715 0
 7559 049c 3E4A     		ldr	r2, .L467+8
 7560 049e 1370     		strb	r3, [r2]
5716:screens.c     **** 				savecal = 1;
 7561              		.loc 1 5716 0
 7562 04a0 0122     		mov	r2, #1
 7563 04a2 444B     		ldr	r3, .L467+36
 7564 04a4 1A70     		strb	r2, [r3]
 7565              	.LVL654:
 7566              	.L365:
5725:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 7567              		.loc 1 5725 0
 7568 04a6 3F4B     		ldr	r3, .L467+20
 7569 04a8 1B78     		ldrb	r3, [r3]
 7570 04aa 002B     		cmp	r3, #0
 7571 04ac 03D0     		beq	.L445
 7572              	.LVL655:
 7573              	.L419:
5725:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 7574              		.loc 1 5725 0 is_stmt 0 discriminator 2
 7575 04ae 4248     		ldr	r0, .L467+40
 7576 04b0 02E0     		b	.L418
 7577              	.LVL656:
 7578              	.L444:
5725:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 7579              		.loc 1 5725 0
 7580 04b2 4248     		ldr	r0, .L467+44
 7581 04b4 00E0     		b	.L418
 7582              	.LVL657:
 7583              	.L445:
 7584 04b6 4148     		ldr	r0, .L467+44
 7585              	.LVL658:
 7586              	.L418:
5725:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 7587              		.loc 1 5725 0 discriminator 3
 7588 04b8 0024     		mov	r4, #0
 7589 04ba 0094     		str	r4, [sp]
 7590 04bc 1A21     		mov	r1, #26
 7591 04be 8622     		mov	r2, #134
 7592 04c0 0723     		mov	r3, #7
 7593 04c2 FFF7FEFF 		bl	display_f1_text
 7594              	.LVL659:
5726:screens.c     **** 		display_f1_text( "/2", TSMAX, 140, 7, FIXED );
 7595              		.loc 1 5726 0 is_stmt 1 discriminator 3
 7596 04c6 0094     		str	r4, [sp]
 7597 04c8 3D48     		ldr	r0, .L467+48
 7598 04ca 1A21     		mov	r1, #26
 7599 04cc 8C22     		mov	r2, #140
 7600 04ce 0723     		mov	r3, #7
 7601 04d0 FFF7FEFF 		bl	display_f1_text
 7602              	.LVL660:
5729:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
 7603              		.loc 1 5729 0 discriminator 3
 7604 04d4 6423     		mov	r3, #100
 7605 04d6 0093     		str	r3, [sp]
 7606 04d8 4023     		mov	r3, #64
 7607 04da 0193     		str	r3, [sp, #4]
 7608 04dc 3948     		ldr	r0, .L467+52
 7609 04de 1521     		mov	r1, #21
 7610 04e0 1522     		mov	r2, #21
 7611 04e2 9C23     		mov	r3, #156
 7612 04e4 FFF7FEFF 		bl	draw_box
 7613              	.LVL661:
5732:screens.c     **** 		if( page == 0 )
 7614              		.loc 1 5732 0 discriminator 3
 7615 04e8 2E4B     		ldr	r3, .L467+20
 7616 04ea 1B78     		ldrb	r3, [r3]
 7617 04ec 002B     		cmp	r3, #0
 7618 04ee 00D0     		beq	.LCB7338
 7619 04f0 7CE0     		b	.L423	@long jump
 7620              	.LCB7338:
5734:screens.c     **** 			display_f1_text( "Net On", TSMAX, 24, 21, FIXED );
 7621              		.loc 1 5734 0
 7622 04f2 0094     		str	r4, [sp]
 7623 04f4 3448     		ldr	r0, .L467+56
 7624 04f6 1A21     		mov	r1, #26
 7625 04f8 1822     		mov	r2, #24
 7626 04fa 1523     		mov	r3, #21
 7627 04fc FFF7FEFF 		bl	display_f1_text
 7628              	.LVL662:
5735:screens.c     **** 			display_f1_text( "s", TSMAX, 146, 21, FIXED );
 7629              		.loc 1 5735 0
 7630 0500 324D     		ldr	r5, .L467+60
 7631 0502 0094     		str	r4, [sp]
 7632 0504 281C     		mov	r0, r5
 7633 0506 1A21     		mov	r1, #26
 7634 0508 9222     		mov	r2, #146
 7635 050a 1523     		mov	r3, #21
 7636 050c FFF7FEFF 		bl	display_f1_text
 7637              	.LVL663:
5737:screens.c     **** 			display_f1_text( "Net Cut Pulse", TSMAX, 24, 31, FIXED );
 7638              		.loc 1 5737 0
 7639 0510 0094     		str	r4, [sp]
 7640 0512 2F48     		ldr	r0, .L467+64
 7641 0514 1A21     		mov	r1, #26
 7642 0516 1822     		mov	r2, #24
 7643 0518 1F23     		mov	r3, #31
 7644 051a FFF7FEFF 		bl	display_f1_text
 7645              	.LVL664:
5739:screens.c     **** 			display_f1_text( "Net Cut Time", TSMAX, 24, 41, FIXED );
 7646              		.loc 1 5739 0
 7647 051e 0094     		str	r4, [sp]
 7648 0520 2C48     		ldr	r0, .L467+68
 7649 0522 1A21     		mov	r1, #26
 7650 0524 1822     		mov	r2, #24
 7651 0526 2923     		mov	r3, #41
 7652 0528 FFF7FEFF 		bl	display_f1_text
 7653              	.LVL665:
5740:screens.c     **** 			display_f1_text( "s", TSMAX, 146, 41, FIXED );	
 7654              		.loc 1 5740 0
 7655 052c 0094     		str	r4, [sp]
 7656 052e 281C     		mov	r0, r5
 7657 0530 1A21     		mov	r1, #26
 7658 0532 9222     		mov	r2, #146
 7659 0534 2923     		mov	r3, #41
 7660 0536 FFF7FEFF 		bl	display_f1_text
 7661              	.LVL666:
5742:screens.c     **** 			display_f1_text( "MinDia puls/lay", TSMAX, 24, 51, FIXED );	
 7662              		.loc 1 5742 0
 7663 053a 0094     		str	r4, [sp]
 7664 053c 2648     		ldr	r0, .L467+72
 7665 053e 1A21     		mov	r1, #26
 7666 0540 1822     		mov	r2, #24
 7667 0542 3323     		mov	r3, #51
 7668 0544 FFF7FEFF 		bl	display_f1_text
 7669              	.LVL667:
5744:screens.c     **** 			display_f1_text( "MaxDia puls/lay", TSMAX, 24, 61, FIXED );
 7670              		.loc 1 5744 0
 7671 0548 0094     		str	r4, [sp]
 7672 054a 2448     		ldr	r0, .L467+76
 7673 054c 1A21     		mov	r1, #26
 7674 054e 1822     		mov	r2, #24
 7675 0550 3D23     		mov	r3, #61
 7676 0552 FFF7FEFF 		bl	display_f1_text
 7677              	.LVL668:
5746:screens.c     **** 			display_f1_text( "Net Factor", TSMAX, 24, 71, FIXED );
 7678              		.loc 1 5746 0
 7679 0556 0094     		str	r4, [sp]
 7680 0558 2148     		ldr	r0, .L467+80
 7681 055a 1A21     		mov	r1, #26
 7682 055c 1822     		mov	r2, #24
 7683 055e 4723     		mov	r3, #71
 7684 0560 FFF7FEFF 		bl	display_f1_text
 7685              	.LVL669:
5748:screens.c     **** 			display_f1_text( "No Net Pulse", TSMAX, 24, 81, FIXED );
 7686              		.loc 1 5748 0
 7687 0564 0094     		str	r4, [sp]
 7688 0566 1F48     		ldr	r0, .L467+84
 7689 0568 1A21     		mov	r1, #26
 7690 056a 1822     		mov	r2, #24
 7691 056c 5123     		mov	r3, #81
 7692 056e FFF7FEFF 		bl	display_f1_text
 7693              	.LVL670:
5749:screens.c     **** 			display_f1_text( "s", TSMAX, 146, 81, FIXED );
 7694              		.loc 1 5749 0
 7695 0572 0094     		str	r4, [sp]
 7696 0574 281C     		mov	r0, r5
 7697 0576 1A21     		mov	r1, #26
 7698 0578 9222     		mov	r2, #146
 7699 057a 5123     		mov	r3, #81
 7700 057c FFF7FEFF 		bl	display_f1_text
 7701              	.LVL671:
5751:screens.c     **** 			display_f1_text( "Pre Net Pulse", TSMAX, 24, 91, FIXED );
 7702              		.loc 1 5751 0
 7703 0580 0094     		str	r4, [sp]
 7704 0582 1948     		ldr	r0, .L467+88
 7705 0584 1A21     		mov	r1, #26
 7706 0586 1822     		mov	r2, #24
 7707 0588 5B23     		mov	r3, #91
 7708 058a FFF7FEFF 		bl	display_f1_text
 7709              	.LVL672:
 7710 058e 43E0     		b	.L424
 7711              	.L468:
 7712              		.align	2
 7713              	.L467:
 7714 0590 00000000 		.word	pFac
 7715 0594 00000000 		.word	PF_GW302_BeakEngage
 7716 0598 00000000 		.word	SavecalDelayWithinMenus
 7717 059c 00000000 		.word	valuechanged
 7718 05a0 00000000 		.word	selection
 7719 05a4 00000000 		.word	.LANCHOR3
 7720 05a8 00000000 		.word	escape
 7721 05ac 00000000 		.word	SavecalDelayOnMainDisplay
 7722 05b0 00000000 		.word	swrel
 7723 05b4 00000000 		.word	savecal
 7724 05b8 D8000000 		.word	.LC162
 7725 05bc D4000000 		.word	.LC160
 7726 05c0 EC000000 		.word	.LC190
 7727 05c4 00000000 		.word	adm
 7728 05c8 20020000 		.word	.LC300
 7729 05cc D0000000 		.word	.LC149
 7730 05d0 28020000 		.word	.LC303
 7731 05d4 38020000 		.word	.LC305
 7732 05d8 48020000 		.word	.LC307
 7733 05dc 58020000 		.word	.LC309
 7734 05e0 68020000 		.word	.LC311
 7735 05e4 74020000 		.word	.LC313
 7736 05e8 84020000 		.word	.LC315
 7737              	.L423:
5755:screens.c     **** 			display_f1_text( "Net System", TSMAX, 24, 21, FIXED );
 7738              		.loc 1 5755 0
 7739 05ec 0024     		mov	r4, #0
 7740 05ee 0094     		str	r4, [sp]
 7741 05f0 E048     		ldr	r0, .L469
 7742 05f2 1A21     		mov	r1, #26
 7743 05f4 1822     		mov	r2, #24
 7744 05f6 1523     		mov	r3, #21
 7745 05f8 FFF7FEFF 		bl	display_f1_text
 7746              	.LVL673:
5757:screens.c     **** 			display_f1_text( "Beak Engage", TSMAX, 24, 31, FIXED );	
 7747              		.loc 1 5757 0
 7748 05fc 0094     		str	r4, [sp]
 7749 05fe DE48     		ldr	r0, .L469+4
 7750 0600 1A21     		mov	r1, #26
 7751 0602 1822     		mov	r2, #24
 7752 0604 1F23     		mov	r3, #31
 7753 0606 FFF7FEFF 		bl	display_f1_text
 7754              	.LVL674:
5759:screens.c     **** 			display_f1_text( "Twine Option", TSMAX, 24, 41, FIXED );
 7755              		.loc 1 5759 0
 7756 060a 0094     		str	r4, [sp]
 7757 060c DB48     		ldr	r0, .L469+8
 7758 060e 1A21     		mov	r1, #26
 7759 0610 1822     		mov	r2, #24
 7760 0612 2923     		mov	r3, #41
 7761 0614 FFF7FEFF 		bl	display_f1_text
 7762              	.LVL675:
 7763              	.L424:
5771:screens.c     **** 		if( page == 0 )
 7764              		.loc 1 5771 0
 7765 0618 D94B     		ldr	r3, .L469+12
 7766 061a 1B78     		ldrb	r3, [r3]
 7767 061c 002B     		cmp	r3, #0
 7768 061e 00D0     		beq	.LCB7479
 7769 0620 D7E0     		b	.L425	@long jump
 7770              	.LCB7479:
5773:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetOn,
 7771              		.loc 1 5773 0
 7772 0622 D84D     		ldr	r5, .L469+16
 7773 0624 A423     		mov	r3, #164
 7774 0626 E858     		ldr	r0, [r5, r3]
 7775 0628 D74B     		ldr	r3, .L469+20
 7776 062a 5968     		ldr	r1, [r3, #4]
 7777 062c 9A68     		ldr	r2, [r3, #8]
 7778 062e FE26     		mov	r6, #254
 7779 0630 B605     		lsl	r6, r6, #22
 7780 0632 0123     		mov	r3, #1
 7781 0634 9A46     		mov	sl, r3
 7782 0636 0093     		str	r3, [sp]
 7783 0638 8F23     		mov	r3, #143
 7784 063a 9946     		mov	r9, r3
 7785 063c 0193     		str	r3, [sp, #4]
 7786 063e 1523     		mov	r3, #21
 7787 0640 0293     		str	r3, [sp, #8]
 7788 0642 1223     		mov	r3, #18
 7789 0644 9B46     		mov	fp, r3
 7790 0646 0393     		str	r3, [sp, #12]
 7791 0648 1023     		mov	r3, #16
 7792 064a 9846     		mov	r8, r3
 7793 064c 0493     		str	r3, [sp, #16]
 7794 064e CF4F     		ldr	r7, .L469+24
 7795 0650 0597     		str	r7, [sp, #20]
 7796 0652 0024     		mov	r4, #0
 7797 0654 0694     		str	r4, [sp, #24]
 7798 0656 0794     		str	r4, [sp, #28]
 7799 0658 331C     		add	r3, r6, #0
 7800 065a FFF7FEFF 		bl	display_number
 7801              	.LVL676:
5776:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetCutPulse,
 7802              		.loc 1 5776 0
 7803 065e A823     		mov	r3, #168
 7804 0660 E85C     		ldrb	r0, [r5, r3]
 7805 0662 FFF7FEFF 		bl	__aeabi_ui2f
 7806              	.LVL677:
 7807 0666 0890     		str	r0, [sp, #32]
 7808 0668 C94A     		ldr	r2, .L469+28
 7809 066a 5078     		ldrb	r0, [r2, #1]
 7810 066c FFF7FEFF 		bl	__aeabi_ui2f
 7811              	.LVL678:
 7812 0670 0990     		str	r0, [sp, #36]
 7813 0672 C74B     		ldr	r3, .L469+28
 7814 0674 9878     		ldrb	r0, [r3, #2]
 7815 0676 FFF7FEFF 		bl	__aeabi_ui2f
 7816              	.LVL679:
 7817 067a 021C     		add	r2, r0, #0
 7818 067c 0094     		str	r4, [sp]
 7819 067e 4B46     		mov	r3, r9
 7820 0680 0193     		str	r3, [sp, #4]
 7821 0682 1F23     		mov	r3, #31
 7822 0684 0293     		str	r3, [sp, #8]
 7823 0686 0C23     		mov	r3, #12
 7824 0688 0393     		str	r3, [sp, #12]
 7825 068a 4346     		mov	r3, r8
 7826 068c 0493     		str	r3, [sp, #16]
 7827 068e 0597     		str	r7, [sp, #20]
 7828 0690 0694     		str	r4, [sp, #24]
 7829 0692 0794     		str	r4, [sp, #28]
 7830 0694 0898     		ldr	r0, [sp, #32]
 7831 0696 0999     		ldr	r1, [sp, #36]
 7832 0698 331C     		add	r3, r6, #0
 7833 069a FFF7FEFF 		bl	display_number
 7834              	.LVL680:
5779:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetCutTime,
 7835              		.loc 1 5779 0
 7836 069e AC23     		mov	r3, #172
 7837 06a0 E858     		ldr	r0, [r5, r3]
 7838 06a2 BC4B     		ldr	r3, .L469+32
 7839 06a4 5968     		ldr	r1, [r3, #4]
 7840 06a6 9A68     		ldr	r2, [r3, #8]
 7841 06a8 5346     		mov	r3, sl
 7842 06aa 0093     		str	r3, [sp]
 7843 06ac 4B46     		mov	r3, r9
 7844 06ae 0193     		str	r3, [sp, #4]
 7845 06b0 2923     		mov	r3, #41
 7846 06b2 0293     		str	r3, [sp, #8]
 7847 06b4 5B46     		mov	r3, fp
 7848 06b6 0393     		str	r3, [sp, #12]
 7849 06b8 4346     		mov	r3, r8
 7850 06ba 0493     		str	r3, [sp, #16]
 7851 06bc 0597     		str	r7, [sp, #20]
 7852 06be 0694     		str	r4, [sp, #24]
 7853 06c0 0794     		str	r4, [sp, #28]
 7854 06c2 331C     		add	r3, r6, #0
 7855 06c4 FFF7FEFF 		bl	display_number
 7856              	.LVL681:
5782:screens.c     **** 			display_number( (float)pFac.pf.GW302_MinDiaPulsPerLay,
 7857              		.loc 1 5782 0
 7858 06c8 B023     		mov	r3, #176
 7859 06ca E858     		ldr	r0, [r5, r3]
 7860 06cc B24B     		ldr	r3, .L469+36
 7861 06ce 5968     		ldr	r1, [r3, #4]
 7862 06d0 9A68     		ldr	r2, [r3, #8]
 7863 06d2 5346     		mov	r3, sl
 7864 06d4 0093     		str	r3, [sp]
 7865 06d6 4B46     		mov	r3, r9
 7866 06d8 0193     		str	r3, [sp, #4]
 7867 06da 3323     		mov	r3, #51
 7868 06dc 0293     		str	r3, [sp, #8]
 7869 06de 1E23     		mov	r3, #30
 7870 06e0 0393     		str	r3, [sp, #12]
 7871 06e2 4346     		mov	r3, r8
 7872 06e4 0493     		str	r3, [sp, #16]
 7873 06e6 0597     		str	r7, [sp, #20]
 7874 06e8 0694     		str	r4, [sp, #24]
 7875 06ea 0794     		str	r4, [sp, #28]
 7876 06ec 331C     		add	r3, r6, #0
 7877 06ee FFF7FEFF 		bl	display_number
 7878              	.LVL682:
5785:screens.c     **** 			display_number( (float)pFac.pf.GW302_MaxDiaPulsPerLay,
 7879              		.loc 1 5785 0
 7880 06f2 B423     		mov	r3, #180
 7881 06f4 E858     		ldr	r0, [r5, r3]
 7882 06f6 A94B     		ldr	r3, .L469+40
 7883 06f8 5968     		ldr	r1, [r3, #4]
 7884 06fa 9A68     		ldr	r2, [r3, #8]
 7885 06fc 5346     		mov	r3, sl
 7886 06fe 0093     		str	r3, [sp]
 7887 0700 4B46     		mov	r3, r9
 7888 0702 0193     		str	r3, [sp, #4]
 7889 0704 3D23     		mov	r3, #61
 7890 0706 0293     		str	r3, [sp, #8]
 7891 0708 1E23     		mov	r3, #30
 7892 070a 0393     		str	r3, [sp, #12]
 7893 070c 4346     		mov	r3, r8
 7894 070e 0493     		str	r3, [sp, #16]
 7895 0710 0597     		str	r7, [sp, #20]
 7896 0712 0694     		str	r4, [sp, #24]
 7897 0714 0794     		str	r4, [sp, #28]
 7898 0716 331C     		add	r3, r6, #0
 7899 0718 FFF7FEFF 		bl	display_number
 7900              	.LVL683:
5788:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetFactor,
 7901              		.loc 1 5788 0
 7902 071c B823     		mov	r3, #184
 7903 071e E858     		ldr	r0, [r5, r3]
 7904 0720 9F4B     		ldr	r3, .L469+44
 7905 0722 5968     		ldr	r1, [r3, #4]
 7906 0724 9A68     		ldr	r2, [r3, #8]
 7907 0726 5346     		mov	r3, sl
 7908 0728 0093     		str	r3, [sp]
 7909 072a 4B46     		mov	r3, r9
 7910 072c 0193     		str	r3, [sp, #4]
 7911 072e 4723     		mov	r3, #71
 7912 0730 0293     		str	r3, [sp, #8]
 7913 0732 5B46     		mov	r3, fp
 7914 0734 0393     		str	r3, [sp, #12]
 7915 0736 4346     		mov	r3, r8
 7916 0738 0493     		str	r3, [sp, #16]
 7917 073a 0597     		str	r7, [sp, #20]
 7918 073c 0694     		str	r4, [sp, #24]
 7919 073e 0794     		str	r4, [sp, #28]
 7920 0740 331C     		add	r3, r6, #0
 7921 0742 FFF7FEFF 		bl	display_number
 7922              	.LVL684:
5791:screens.c     **** 			display_number( (float)pFac.pf.GW302_NoNetPulse,
 7923              		.loc 1 5791 0
 7924 0746 BC23     		mov	r3, #188
 7925 0748 E858     		ldr	r0, [r5, r3]
 7926 074a 964B     		ldr	r3, .L469+48
 7927 074c 5968     		ldr	r1, [r3, #4]
 7928 074e 9A68     		ldr	r2, [r3, #8]
 7929 0750 5346     		mov	r3, sl
 7930 0752 0093     		str	r3, [sp]
 7931 0754 4B46     		mov	r3, r9
 7932 0756 0193     		str	r3, [sp, #4]
 7933 0758 5123     		mov	r3, #81
 7934 075a 0293     		str	r3, [sp, #8]
 7935 075c 5B46     		mov	r3, fp
 7936 075e 0393     		str	r3, [sp, #12]
 7937 0760 4346     		mov	r3, r8
 7938 0762 0493     		str	r3, [sp, #16]
 7939 0764 0597     		str	r7, [sp, #20]
 7940 0766 0694     		str	r4, [sp, #24]
 7941 0768 0794     		str	r4, [sp, #28]
 7942 076a 331C     		add	r3, r6, #0
 7943 076c FFF7FEFF 		bl	display_number
 7944              	.LVL685:
5795:screens.c     **** 			if(pFac.pf.GW302_NetTwineOption == TO_NET)
 7945              		.loc 1 5795 0
 7946 0770 7C23     		mov	r3, #124
 7947 0772 EB5C     		ldrb	r3, [r5, r3]
 7948 0774 002B     		cmp	r3, #0
 7949 0776 23D1     		bne	.L426
5797:screens.c     **** 				display_number( (float)pFac.pf.GW302_PreNetPulse,
 7950              		.loc 1 5797 0
 7951 0778 C023     		mov	r3, #192
 7952 077a 824A     		ldr	r2, .L469+16
 7953 077c D05C     		ldrb	r0, [r2, r3]
 7954 077e FFF7FEFF 		bl	__aeabi_ui2f
 7955              	.LVL686:
 7956 0782 061C     		add	r6, r0, #0
5798:screens.c     **** 					(float)PF_GW302_PreNetPulse[PF_MIN], (float)PF_GW302_PreNetPulse[PF_MAX],
 7957              		.loc 1 5798 0
 7958 0784 884C     		ldr	r4, .L469+52
5797:screens.c     **** 				display_number( (float)pFac.pf.GW302_PreNetPulse,
 7959              		.loc 1 5797 0
 7960 0786 6078     		ldrb	r0, [r4, #1]
 7961 0788 FFF7FEFF 		bl	__aeabi_ui2f
 7962              	.LVL687:
 7963 078c 051C     		add	r5, r0, #0
 7964 078e A078     		ldrb	r0, [r4, #2]
 7965 0790 FFF7FEFF 		bl	__aeabi_ui2f
 7966              	.LVL688:
 7967 0794 021C     		add	r2, r0, #0
 7968 0796 0023     		mov	r3, #0
 7969 0798 0093     		str	r3, [sp]
 7970 079a 8F21     		mov	r1, #143
 7971 079c 0191     		str	r1, [sp, #4]
 7972 079e 5B21     		mov	r1, #91
 7973 07a0 0291     		str	r1, [sp, #8]
 7974 07a2 0C21     		mov	r1, #12
 7975 07a4 0391     		str	r1, [sp, #12]
 7976 07a6 1021     		mov	r1, #16
 7977 07a8 0491     		str	r1, [sp, #16]
 7978 07aa 7849     		ldr	r1, .L469+24
 7979 07ac 0591     		str	r1, [sp, #20]
 7980 07ae 0693     		str	r3, [sp, #24]
 7981 07b0 0793     		str	r3, [sp, #28]
 7982 07b2 301C     		add	r0, r6, #0
 7983 07b4 291C     		add	r1, r5, #0
 7984 07b6 FE23     		mov	r3, #254
 7985 07b8 9B05     		lsl	r3, r3, #22
 7986 07ba FFF7FEFF 		bl	display_number
 7987              	.LVL689:
 7988 07be 54E0     		b	.L427
 7989              	.L426:
5803:screens.c     **** 				display_f1_text( "0", TSMAX, 143, 91, FIXED );
 7990              		.loc 1 5803 0
 7991 07c0 0023     		mov	r3, #0
 7992 07c2 0093     		str	r3, [sp]
 7993 07c4 7948     		ldr	r0, .L469+56
 7994 07c6 1A21     		mov	r1, #26
 7995 07c8 8F22     		mov	r2, #143
 7996 07ca 5B23     		mov	r3, #91
 7997 07cc FFF7FEFF 		bl	display_f1_text
 7998              	.LVL690:
 7999 07d0 4BE0     		b	.L427
 8000              	.L425:
5809:screens.c     **** 			if( pFac.pf.GW302_NetSystem == NS_BEAK )
 8001              		.loc 1 5809 0
 8002 07d2 C123     		mov	r3, #193
 8003 07d4 6B4A     		ldr	r2, .L469+16
 8004 07d6 D35C     		ldrb	r3, [r2, r3]
 8005 07d8 002B     		cmp	r3, #0
 8006 07da 07D1     		bne	.L428
5810:screens.c     **** 				display_f1_text( "Beak  ", TSMAX, 119, 21, FIXED );
 8007              		.loc 1 5810 0
 8008 07dc 0093     		str	r3, [sp]
 8009 07de 7448     		ldr	r0, .L469+60
 8010 07e0 1A21     		mov	r1, #26
 8011 07e2 7722     		mov	r2, #119
 8012 07e4 1523     		mov	r3, #21
 8013 07e6 FFF7FEFF 		bl	display_f1_text
 8014              	.LVL691:
 8015 07ea 07E0     		b	.L429
 8016              	.L428:
5812:screens.c     **** 					display_f1_text( "Roller", TSMAX, 119, 21, FIXED );
 8017              		.loc 1 5812 0
 8018 07ec 0023     		mov	r3, #0
 8019 07ee 0093     		str	r3, [sp]
 8020 07f0 7048     		ldr	r0, .L469+64
 8021 07f2 1A21     		mov	r1, #26
 8022 07f4 7722     		mov	r2, #119
 8023 07f6 1523     		mov	r3, #21
 8024 07f8 FFF7FEFF 		bl	display_f1_text
 8025              	.LVL692:
 8026              	.L429:
5814:screens.c     **** 			display_number( (float)pFac.pf.GW302_BeakEngage,
 8027              		.loc 1 5814 0
 8028 07fc 614C     		ldr	r4, .L469+16
 8029 07fe C223     		mov	r3, #194
 8030 0800 E05C     		ldrb	r0, [r4, r3]
 8031 0802 FFF7FEFF 		bl	__aeabi_ui2f
 8032              	.LVL693:
 8033 0806 071C     		add	r7, r0, #0
5815:screens.c     **** 					(float)PF_GW302_BeakEngage[PF_MIN], (float)PF_GW302_BeakEngage[PF_MAX],
 8034              		.loc 1 5815 0
 8035 0808 6B4D     		ldr	r5, .L469+68
5814:screens.c     **** 			display_number( (float)pFac.pf.GW302_BeakEngage,
 8036              		.loc 1 5814 0
 8037 080a 6878     		ldrb	r0, [r5, #1]
 8038 080c FFF7FEFF 		bl	__aeabi_ui2f
 8039              	.LVL694:
 8040 0810 061C     		add	r6, r0, #0
 8041 0812 A878     		ldrb	r0, [r5, #2]
 8042 0814 FFF7FEFF 		bl	__aeabi_ui2f
 8043              	.LVL695:
 8044 0818 021C     		add	r2, r0, #0
 8045 081a 0023     		mov	r3, #0
 8046 081c 0093     		str	r3, [sp]
 8047 081e 8F21     		mov	r1, #143
 8048 0820 0191     		str	r1, [sp, #4]
 8049 0822 1F21     		mov	r1, #31
 8050 0824 0291     		str	r1, [sp, #8]
 8051 0826 0C21     		mov	r1, #12
 8052 0828 0391     		str	r1, [sp, #12]
 8053 082a 1021     		mov	r1, #16
 8054 082c 0491     		str	r1, [sp, #16]
 8055 082e 5749     		ldr	r1, .L469+24
 8056 0830 0591     		str	r1, [sp, #20]
 8057 0832 0693     		str	r3, [sp, #24]
 8058 0834 0793     		str	r3, [sp, #28]
 8059 0836 381C     		add	r0, r7, #0
 8060 0838 311C     		add	r1, r6, #0
 8061 083a FE23     		mov	r3, #254
 8062 083c 9B05     		lsl	r3, r3, #22
 8063 083e FFF7FEFF 		bl	display_number
 8064              	.LVL696:
5818:screens.c     **** 			if( pFac.pf.GW302_TwineOption == TO_OFF )
 8065              		.loc 1 5818 0
 8066 0842 C323     		mov	r3, #195
 8067 0844 E35C     		ldrb	r3, [r4, r3]
 8068 0846 002B     		cmp	r3, #0
 8069 0848 07D1     		bne	.L430
5819:screens.c     **** 				display_f1_text( "OFF", TSMAX, 128, 41, FIXED );
 8070              		.loc 1 5819 0
 8071 084a 0093     		str	r3, [sp]
 8072 084c 5B48     		ldr	r0, .L469+72
 8073 084e 1A21     		mov	r1, #26
 8074 0850 8022     		mov	r2, #128
 8075 0852 2923     		mov	r3, #41
 8076 0854 FFF7FEFF 		bl	display_f1_text
 8077              	.LVL697:
 8078 0858 07E0     		b	.L427
 8079              	.L430:
5821:screens.c     **** 					display_f1_text( "ON", TSMAX, 133, 41, FIXED );
 8080              		.loc 1 5821 0
 8081 085a 0023     		mov	r3, #0
 8082 085c 0093     		str	r3, [sp]
 8083 085e 5848     		ldr	r0, .L469+76
 8084 0860 1A21     		mov	r1, #26
 8085 0862 8522     		mov	r2, #133
 8086 0864 2923     		mov	r3, #41
 8087 0866 FFF7FEFF 		bl	display_f1_text
 8088              	.LVL698:
 8089              	.L427:
5830:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs
 8090              		.loc 1 5830 0
 8091 086a 7E23     		mov	r3, #126
 8092 086c 0093     		str	r3, [sp]
 8093 086e 4023     		mov	r3, #64
 8094 0870 0193     		str	r3, [sp, #4]
 8095 0872 5448     		ldr	r0, .L469+80
 8096 0874 0121     		mov	r1, #1
 8097 0876 6622     		mov	r2, #102
 8098 0878 9E23     		mov	r3, #158
 8099 087a FFF7FEFF 		bl	draw_box
 8100              	.LVL699:
5831:screens.c     **** 		if( page == 0 )
 8101              		.loc 1 5831 0
 8102 087e 404B     		ldr	r3, .L469+12
 8103 0880 1B78     		ldrb	r3, [r3]
 8104 0882 002B     		cmp	r3, #0
 8105 0884 00D0     		beq	.LCB7804
 8106 0886 E6E0     		b	.L431	@long jump
 8107              	.LCB7804:
5833:screens.c     **** 			switch( selection ) // Drawn according to position of selection pointer
 8108              		.loc 1 5833 0
 8109 0888 4F4B     		ldr	r3, .L469+84
 8110 088a 1B78     		ldrb	r3, [r3]
 8111 088c 062B     		cmp	r3, #6
 8112 088e 02D8     		bhi	.L436
 8113 0890 002B     		cmp	r3, #0
 8114 0892 39D1     		bne	.L434
 8115 0894 03E0     		b	.L464
 8116              	.L436:
 8117 0896 072B     		cmp	r3, #7
 8118 0898 00D0     		beq	.LCB7822
 8119 089a 4CE1     		b	.L432	@long jump
 8120              	.LCB7822:
 8121 089c A6E0     		b	.L435
 8122              	.L464:
5836:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 8123              		.loc 1 5836 0
 8124 089e 494C     		ldr	r4, .L469+80
 8125 08a0 0225     		mov	r5, #2
 8126 08a2 0095     		str	r5, [sp]
 8127 08a4 201C     		mov	r0, r4
 8128 08a6 4949     		ldr	r1, .L469+88
 8129 08a8 0022     		mov	r2, #0
 8130 08aa 6B23     		mov	r3, #107
 8131 08ac FFF7FEFF 		bl	write_bitmap
 8132              	.LVL700:
5837:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 8133              		.loc 1 5837 0
 8134 08b0 0095     		str	r5, [sp]
 8135 08b2 201C     		mov	r0, r4
 8136 08b4 4649     		ldr	r1, .L469+92
 8137 08b6 1F22     		mov	r2, #31
 8138 08b8 6B23     		mov	r3, #107
 8139 08ba FFF7FEFF 		bl	write_bitmap
 8140              	.LVL701:
5838:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 8141              		.loc 1 5838 0
 8142 08be 0095     		str	r5, [sp]
 8143 08c0 201C     		mov	r0, r4
 8144 08c2 4449     		ldr	r1, .L469+96
 8145 08c4 3E22     		mov	r2, #62
 8146 08c6 6623     		mov	r3, #102
 8147 08c8 FFF7FEFF 		bl	write_bitmap
 8148              	.LVL702:
5839:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 8149              		.loc 1 5839 0
 8150 08cc 0095     		str	r5, [sp]
 8151 08ce 201C     		mov	r0, r4
 8152 08d0 4149     		ldr	r1, .L469+100
 8153 08d2 6322     		mov	r2, #99
 8154 08d4 6B23     		mov	r3, #107
 8155 08d6 FFF7FEFF 		bl	write_bitmap
 8156              	.LVL703:
5840:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8157              		.loc 1 5840 0
 8158 08da 294B     		ldr	r3, .L469+12
 8159 08dc 1B78     		ldrb	r3, [r3]
 8160 08de 002B     		cmp	r3, #0
 8161 08e0 01D1     		bne	.L446
 8162 08e2 3E48     		ldr	r0, .L469+104
 8163 08e4 00E0     		b	.L437
 8164              	.L446:
 8165 08e6 3E48     		ldr	r0, .L469+108
 8166              	.L437:
5840:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8167              		.loc 1 5840 0 is_stmt 0 discriminator 3
 8168 08e8 0023     		mov	r3, #0
 8169 08ea 0093     		str	r3, [sp]
 8170 08ec 1A21     		mov	r1, #26
 8171 08ee 7622     		mov	r2, #118
 8172 08f0 7123     		mov	r3, #113
 8173 08f2 FFF7FEFF 		bl	display_f1_text
 8174              	.LVL704:
5841:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 8175              		.loc 1 5841 0 is_stmt 1 discriminator 3
 8176 08f6 0223     		mov	r3, #2
 8177 08f8 0093     		str	r3, [sp]
 8178 08fa 3248     		ldr	r0, .L469+80
 8179 08fc 3949     		ldr	r1, .L469+112
 8180 08fe 8222     		mov	r2, #130
 8181 0900 6B23     		mov	r3, #107
 8182 0902 FFF7FEFF 		bl	write_bitmap
 8183              	.LVL705:
5842:screens.c     **** 				break;
 8184              		.loc 1 5842 0 discriminator 3
 8185 0906 16E1     		b	.L432
 8186              	.L434:
5850:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 8187              		.loc 1 5850 0
 8188 0908 2E4C     		ldr	r4, .L469+80
 8189 090a 0225     		mov	r5, #2
 8190 090c 0095     		str	r5, [sp]
 8191 090e 201C     		mov	r0, r4
 8192 0910 2E49     		ldr	r1, .L469+88
 8193 0912 0022     		mov	r2, #0
 8194 0914 6B23     		mov	r3, #107
 8195 0916 FFF7FEFF 		bl	write_bitmap
 8196              	.LVL706:
5851:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 8197              		.loc 1 5851 0
 8198 091a 0095     		str	r5, [sp]
 8199 091c 201C     		mov	r0, r4
 8200 091e 2C49     		ldr	r1, .L469+92
 8201 0920 1F22     		mov	r2, #31
 8202 0922 6B23     		mov	r3, #107
 8203 0924 FFF7FEFF 		bl	write_bitmap
 8204              	.LVL707:
5852:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 8205              		.loc 1 5852 0
 8206 0928 0095     		str	r5, [sp]
 8207 092a 201C     		mov	r0, r4
 8208 092c 2E49     		ldr	r1, .L469+116
 8209 092e 3E22     		mov	r2, #62
 8210 0930 6623     		mov	r3, #102
 8211 0932 FFF7FEFF 		bl	write_bitmap
 8212              	.LVL708:
5853:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 8213              		.loc 1 5853 0
 8214 0936 0095     		str	r5, [sp]
 8215 0938 201C     		mov	r0, r4
 8216 093a 2749     		ldr	r1, .L469+100
 8217 093c 6322     		mov	r2, #99
 8218 093e 6B23     		mov	r3, #107
 8219 0940 FFF7FEFF 		bl	write_bitmap
 8220              	.LVL709:
5854:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8221              		.loc 1 5854 0
 8222 0944 0E4B     		ldr	r3, .L469+12
 8223 0946 1B78     		ldrb	r3, [r3]
 8224 0948 002B     		cmp	r3, #0
 8225 094a 01D1     		bne	.L447
 8226 094c 2348     		ldr	r0, .L469+104
 8227 094e 00E0     		b	.L438
 8228              	.L447:
 8229 0950 2348     		ldr	r0, .L469+108
 8230              	.L438:
5854:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8231              		.loc 1 5854 0 is_stmt 0 discriminator 3
 8232 0952 0023     		mov	r3, #0
 8233 0954 0093     		str	r3, [sp]
 8234 0956 1A21     		mov	r1, #26
 8235 0958 7622     		mov	r2, #118
 8236 095a 7123     		mov	r3, #113
 8237 095c FFF7FEFF 		bl	display_f1_text
 8238              	.LVL710:
5855:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 8239              		.loc 1 5855 0 is_stmt 1 discriminator 3
 8240 0960 0223     		mov	r3, #2
 8241 0962 0093     		str	r3, [sp]
 8242 0964 1748     		ldr	r0, .L469+80
 8243 0966 1F49     		ldr	r1, .L469+112
 8244 0968 8222     		mov	r2, #130
 8245 096a 6B23     		mov	r3, #107
 8246 096c FFF7FEFF 		bl	write_bitmap
 8247              	.LVL711:
5856:screens.c     **** 				break;
 8248              		.loc 1 5856 0 discriminator 3
 8249 0970 E1E0     		b	.L432
 8250              	.L470:
 8251 0972 C046     		.align	2
 8252              	.L469:
 8253 0974 94020000 		.word	.LC317
 8254 0978 A0020000 		.word	.LC319
 8255 097c AC020000 		.word	.LC321
 8256 0980 00000000 		.word	.LANCHOR3
 8257 0984 00000000 		.word	pFac
 8258 0988 00000000 		.word	PF_GW302_NetOn
 8259 098c 00000000 		.word	RDSfnt1
 8260 0990 00000000 		.word	PF_GW302_NetCutPulse
 8261 0994 00000000 		.word	PF_GW302_NetCutTime
 8262 0998 00000000 		.word	PF_GW302_MinDiaPulsPerLay
 8263 099c 00000000 		.word	PF_GW302_MaxDiaPulsPerLay
 8264 09a0 00000000 		.word	PF_GW302_NetFactor
 8265 09a4 00000000 		.word	PF_GW302_NoNetPulse
 8266 09a8 00000000 		.word	PF_GW302_PreNetPulse
 8267 09ac BC020000 		.word	.LC324
 8268 09b0 C0020000 		.word	.LC326
 8269 09b4 C8020000 		.word	.LC328
 8270 09b8 00000000 		.word	PF_GW302_BeakEngage
 8271 09bc D0020000 		.word	.LC330
 8272 09c0 D4020000 		.word	.LC332
 8273 09c4 00000000 		.word	adm
 8274 09c8 00000000 		.word	selection
 8275 09cc 00000000 		.word	TABMINUS
 8276 09d0 00000000 		.word	TABPLUS
 8277 09d4 00000000 		.word	TABNAV_DL
 8278 09d8 00000000 		.word	TAB_PAGE
 8279 09dc D8000000 		.word	.LC162
 8280 09e0 D4000000 		.word	.LC160
 8281 09e4 00000000 		.word	TABESC
 8282 09e8 00000000 		.word	TABNAV_UDL
 8283              	.L435:
5859:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 8284              		.loc 1 5859 0
 8285 09ec 644C     		ldr	r4, .L471
 8286 09ee 0225     		mov	r5, #2
 8287 09f0 0095     		str	r5, [sp]
 8288 09f2 201C     		mov	r0, r4
 8289 09f4 6349     		ldr	r1, .L471+4
 8290 09f6 0022     		mov	r2, #0
 8291 09f8 6B23     		mov	r3, #107
 8292 09fa FFF7FEFF 		bl	write_bitmap
 8293              	.LVL712:
5860:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 8294              		.loc 1 5860 0
 8295 09fe 0095     		str	r5, [sp]
 8296 0a00 201C     		mov	r0, r4
 8297 0a02 6149     		ldr	r1, .L471+8
 8298 0a04 1F22     		mov	r2, #31
 8299 0a06 6B23     		mov	r3, #107
 8300 0a08 FFF7FEFF 		bl	write_bitmap
 8301              	.LVL713:
5861:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 8302              		.loc 1 5861 0
 8303 0a0c 0095     		str	r5, [sp]
 8304 0a0e 201C     		mov	r0, r4
 8305 0a10 5E49     		ldr	r1, .L471+12
 8306 0a12 3E22     		mov	r2, #62
 8307 0a14 6623     		mov	r3, #102
 8308 0a16 FFF7FEFF 		bl	write_bitmap
 8309              	.LVL714:
5862:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 8310              		.loc 1 5862 0
 8311 0a1a 0095     		str	r5, [sp]
 8312 0a1c 201C     		mov	r0, r4
 8313 0a1e 5C49     		ldr	r1, .L471+16
 8314 0a20 6322     		mov	r2, #99
 8315 0a22 6B23     		mov	r3, #107
 8316 0a24 FFF7FEFF 		bl	write_bitmap
 8317              	.LVL715:
5863:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8318              		.loc 1 5863 0
 8319 0a28 5A4B     		ldr	r3, .L471+20
 8320 0a2a 1B78     		ldrb	r3, [r3]
 8321 0a2c 002B     		cmp	r3, #0
 8322 0a2e 01D1     		bne	.L448
 8323 0a30 5948     		ldr	r0, .L471+24
 8324 0a32 00E0     		b	.L439
 8325              	.L448:
 8326 0a34 5948     		ldr	r0, .L471+28
 8327              	.L439:
5863:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8328              		.loc 1 5863 0 is_stmt 0 discriminator 3
 8329 0a36 0023     		mov	r3, #0
 8330 0a38 0093     		str	r3, [sp]
 8331 0a3a 1A21     		mov	r1, #26
 8332 0a3c 7622     		mov	r2, #118
 8333 0a3e 7123     		mov	r3, #113
 8334 0a40 FFF7FEFF 		bl	display_f1_text
 8335              	.LVL716:
5864:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 8336              		.loc 1 5864 0 is_stmt 1 discriminator 3
 8337 0a44 0223     		mov	r3, #2
 8338 0a46 0093     		str	r3, [sp]
 8339 0a48 4D48     		ldr	r0, .L471
 8340 0a4a 5549     		ldr	r1, .L471+32
 8341 0a4c 8222     		mov	r2, #130
 8342 0a4e 6B23     		mov	r3, #107
 8343 0a50 FFF7FEFF 		bl	write_bitmap
 8344              	.LVL717:
5865:screens.c     **** 				break;
 8345              		.loc 1 5865 0 discriminator 3
 8346 0a54 6FE0     		b	.L432
 8347              	.L431:
5870:screens.c     **** 			switch( selection ) // Drawn according to position of selection pointer
 8348              		.loc 1 5870 0
 8349 0a56 534B     		ldr	r3, .L471+36
 8350 0a58 1B78     		ldrb	r3, [r3]
 8351 0a5a 012B     		cmp	r3, #1
 8352 0a5c 02D9     		bls	.L440
 8353 0a5e 022B     		cmp	r3, #2
 8354 0a60 69D1     		bne	.L432
 8355 0a62 34E0     		b	.L441
 8356              	.L440:
5874:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 8357              		.loc 1 5874 0
 8358 0a64 464C     		ldr	r4, .L471
 8359 0a66 0225     		mov	r5, #2
 8360 0a68 0095     		str	r5, [sp]
 8361 0a6a 201C     		mov	r0, r4
 8362 0a6c 4549     		ldr	r1, .L471+4
 8363 0a6e 0022     		mov	r2, #0
 8364 0a70 6B23     		mov	r3, #107
 8365 0a72 FFF7FEFF 		bl	write_bitmap
 8366              	.LVL718:
5875:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 8367              		.loc 1 5875 0
 8368 0a76 0095     		str	r5, [sp]
 8369 0a78 201C     		mov	r0, r4
 8370 0a7a 4349     		ldr	r1, .L471+8
 8371 0a7c 1F22     		mov	r2, #31
 8372 0a7e 6B23     		mov	r3, #107
 8373 0a80 FFF7FEFF 		bl	write_bitmap
 8374              	.LVL719:
5876:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 8375              		.loc 1 5876 0
 8376 0a84 0095     		str	r5, [sp]
 8377 0a86 201C     		mov	r0, r4
 8378 0a88 4749     		ldr	r1, .L471+40
 8379 0a8a 3E22     		mov	r2, #62
 8380 0a8c 6623     		mov	r3, #102
 8381 0a8e FFF7FEFF 		bl	write_bitmap
 8382              	.LVL720:
5877:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 8383              		.loc 1 5877 0
 8384 0a92 0095     		str	r5, [sp]
 8385 0a94 201C     		mov	r0, r4
 8386 0a96 3E49     		ldr	r1, .L471+16
 8387 0a98 6322     		mov	r2, #99
 8388 0a9a 6B23     		mov	r3, #107
 8389 0a9c FFF7FEFF 		bl	write_bitmap
 8390              	.LVL721:
5878:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8391              		.loc 1 5878 0
 8392 0aa0 3C4B     		ldr	r3, .L471+20
 8393 0aa2 1B78     		ldrb	r3, [r3]
 8394 0aa4 002B     		cmp	r3, #0
 8395 0aa6 01D1     		bne	.L449
 8396 0aa8 3B48     		ldr	r0, .L471+24
 8397 0aaa 00E0     		b	.L442
 8398              	.L449:
 8399 0aac 3B48     		ldr	r0, .L471+28
 8400              	.L442:
5878:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8401              		.loc 1 5878 0 is_stmt 0 discriminator 3
 8402 0aae 0023     		mov	r3, #0
 8403 0ab0 0093     		str	r3, [sp]
 8404 0ab2 1A21     		mov	r1, #26
 8405 0ab4 7622     		mov	r2, #118
 8406 0ab6 7123     		mov	r3, #113
 8407 0ab8 FFF7FEFF 		bl	display_f1_text
 8408              	.LVL722:
5879:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 8409              		.loc 1 5879 0 is_stmt 1 discriminator 3
 8410 0abc 0223     		mov	r3, #2
 8411 0abe 0093     		str	r3, [sp]
 8412 0ac0 2F48     		ldr	r0, .L471
 8413 0ac2 3749     		ldr	r1, .L471+32
 8414 0ac4 8222     		mov	r2, #130
 8415 0ac6 6B23     		mov	r3, #107
 8416 0ac8 FFF7FEFF 		bl	write_bitmap
 8417              	.LVL723:
5880:screens.c     **** 				break;
 8418              		.loc 1 5880 0 discriminator 3
 8419 0acc 33E0     		b	.L432
 8420              	.L441:
5883:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 8421              		.loc 1 5883 0
 8422 0ace 2C4C     		ldr	r4, .L471
 8423 0ad0 0225     		mov	r5, #2
 8424 0ad2 0095     		str	r5, [sp]
 8425 0ad4 201C     		mov	r0, r4
 8426 0ad6 2B49     		ldr	r1, .L471+4
 8427 0ad8 0022     		mov	r2, #0
 8428 0ada 6B23     		mov	r3, #107
 8429 0adc FFF7FEFF 		bl	write_bitmap
 8430              	.LVL724:
5884:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 8431              		.loc 1 5884 0
 8432 0ae0 0095     		str	r5, [sp]
 8433 0ae2 201C     		mov	r0, r4
 8434 0ae4 2849     		ldr	r1, .L471+8
 8435 0ae6 1F22     		mov	r2, #31
 8436 0ae8 6B23     		mov	r3, #107
 8437 0aea FFF7FEFF 		bl	write_bitmap
 8438              	.LVL725:
5885:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 8439              		.loc 1 5885 0
 8440 0aee 0095     		str	r5, [sp]
 8441 0af0 201C     		mov	r0, r4
 8442 0af2 2649     		ldr	r1, .L471+12
 8443 0af4 3E22     		mov	r2, #62
 8444 0af6 6623     		mov	r3, #102
 8445 0af8 FFF7FEFF 		bl	write_bitmap
 8446              	.LVL726:
5886:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 8447              		.loc 1 5886 0
 8448 0afc 0095     		str	r5, [sp]
 8449 0afe 201C     		mov	r0, r4
 8450 0b00 2349     		ldr	r1, .L471+16
 8451 0b02 6322     		mov	r2, #99
 8452 0b04 6B23     		mov	r3, #107
 8453 0b06 FFF7FEFF 		bl	write_bitmap
 8454              	.LVL727:
5887:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8455              		.loc 1 5887 0
 8456 0b0a 224B     		ldr	r3, .L471+20
 8457 0b0c 1B78     		ldrb	r3, [r3]
 8458 0b0e 002B     		cmp	r3, #0
 8459 0b10 01D1     		bne	.L450
 8460 0b12 2148     		ldr	r0, .L471+24
 8461 0b14 00E0     		b	.L443
 8462              	.L450:
 8463 0b16 2148     		ldr	r0, .L471+28
 8464              	.L443:
5887:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 8465              		.loc 1 5887 0 is_stmt 0 discriminator 3
 8466 0b18 0023     		mov	r3, #0
 8467 0b1a 0093     		str	r3, [sp]
 8468 0b1c 1A21     		mov	r1, #26
 8469 0b1e 7622     		mov	r2, #118
 8470 0b20 7123     		mov	r3, #113
 8471 0b22 FFF7FEFF 		bl	display_f1_text
 8472              	.LVL728:
5888:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 8473              		.loc 1 5888 0 is_stmt 1 discriminator 3
 8474 0b26 0223     		mov	r3, #2
 8475 0b28 0093     		str	r3, [sp]
 8476 0b2a 1548     		ldr	r0, .L471
 8477 0b2c 1C49     		ldr	r1, .L471+32
 8478 0b2e 8222     		mov	r2, #130
 8479 0b30 6B23     		mov	r3, #107
 8480 0b32 FFF7FEFF 		bl	write_bitmap
 8481              	.LVL729:
 8482              	.L432:
5894:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
 8483              		.loc 1 5894 0
 8484 0b36 124C     		ldr	r4, .L471
 8485 0b38 6423     		mov	r3, #100
 8486 0b3a 0093     		str	r3, [sp]
 8487 0b3c 4023     		mov	r3, #64
 8488 0b3e 0193     		str	r3, [sp, #4]
 8489 0b40 201C     		mov	r0, r4
 8490 0b42 1021     		mov	r1, #16
 8491 0b44 1522     		mov	r2, #21
 8492 0b46 1423     		mov	r3, #20
 8493 0b48 FFF7FEFF 		bl	draw_box
 8494              	.LVL730:
5895:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
 8495              		.loc 1 5895 0
 8496 0b4c 154B     		ldr	r3, .L471+36
 8497 0b4e 1B78     		ldrb	r3, [r3]
 8498 0b50 9A00     		lsl	r2, r3, #2
 8499 0b52 D318     		add	r3, r2, r3
 8500 0b54 5B06     		lsl	r3, r3, #25
 8501 0b56 A822     		mov	r2, #168
 8502 0b58 5205     		lsl	r2, r2, #21
 8503 0b5a 9B18     		add	r3, r3, r2
 8504 0b5c 1B0E     		lsr	r3, r3, #24
 8505 0b5e 0222     		mov	r2, #2
 8506 0b60 0092     		str	r2, [sp]
 8507 0b62 201C     		mov	r0, r4
 8508 0b64 1149     		ldr	r1, .L471+44
 8509 0b66 1022     		mov	r2, #16
 8510 0b68 FFF7FEFF 		bl	write_bitmap
 8511              	.LVL731:
5901:screens.c     **** }
 8512              		.loc 1 5901 0
 8513 0b6c 0BB0     		add	sp, sp, #44
 8514              		@ sp needed for prologue
 8515 0b6e 3CBC     		pop	{r2, r3, r4, r5}
 8516 0b70 9046     		mov	r8, r2
 8517 0b72 9946     		mov	r9, r3
 8518 0b74 A246     		mov	sl, r4
 8519 0b76 AB46     		mov	fp, r5
 8520 0b78 F0BC     		pop	{r4, r5, r6, r7}
 8521 0b7a 01BC     		pop	{r0}
 8522 0b7c 0047     		bx	r0
 8523              	.L472:
 8524 0b7e C046     		.align	2
 8525              	.L471:
 8526 0b80 00000000 		.word	adm
 8527 0b84 00000000 		.word	TABMINUS
 8528 0b88 00000000 		.word	TABPLUS
 8529 0b8c 00000000 		.word	TABNAV_UL
 8530 0b90 00000000 		.word	TAB_PAGE
 8531 0b94 00000000 		.word	.LANCHOR3
 8532 0b98 D8000000 		.word	.LC162
 8533 0b9c D4000000 		.word	.LC160
 8534 0ba0 00000000 		.word	TABESC
 8535 0ba4 00000000 		.word	selection
 8536 0ba8 00000000 		.word	TABNAV_DL
 8537 0bac 00000000 		.word	F1_POINT
 8538              		.cfi_endproc
 8539              	.LFE392:
 8541              		.section	.text.screen142,"ax",%progbits
 8542              		.align	2
 8543              		.global	screen142
 8544              		.code	16
 8545              		.thumb_func
 8547              	screen142:
 8548              	.LFB391:
5019:screens.c     **** {
 8549              		.loc 1 5019 0
 8550              		.cfi_startproc
 8551              	.LVL732:
 8552 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8553              	.LCFI23:
 8554              		.cfi_def_cfa_offset 20
 8555              		.cfi_offset 4, -20
 8556              		.cfi_offset 5, -16
 8557              		.cfi_offset 6, -12
 8558              		.cfi_offset 7, -8
 8559              		.cfi_offset 14, -4
 8560 0002 5F46     		mov	r7, fp
 8561 0004 5646     		mov	r6, sl
 8562 0006 4D46     		mov	r5, r9
 8563 0008 4446     		mov	r4, r8
 8564 000a F0B4     		push	{r4, r5, r6, r7}
 8565              	.LCFI24:
 8566              		.cfi_def_cfa_offset 36
 8567              		.cfi_offset 8, -36
 8568              		.cfi_offset 9, -32
 8569              		.cfi_offset 10, -28
 8570              		.cfi_offset 11, -24
 8571 000c 8BB0     		sub	sp, sp, #44
 8572              	.LCFI25:
 8573              		.cfi_def_cfa_offset 80
 8574 000e 041C     		mov	r4, r0
5026:screens.c     **** 	if( !startup )
 8575              		.loc 1 5026 0
 8576 0010 D74B     		ldr	r3, .L580
 8577 0012 1B78     		ldrb	r3, [r3]
 8578 0014 002B     		cmp	r3, #0
 8579 0016 12D1     		bne	.L474
5028:screens.c     **** 		startup = 1;
 8580              		.loc 1 5028 0
 8581 0018 0122     		mov	r2, #1
 8582 001a D54B     		ldr	r3, .L580
 8583 001c 1A70     		strb	r2, [r3]
5030:screens.c     **** 		draw_frame( adm );
 8584              		.loc 1 5030 0
 8585 001e D548     		ldr	r0, .L580+4
 8586              	.LVL733:
 8587 0020 FFF7FEFF 		bl	draw_frame
 8588              	.LVL734:
5032:screens.c     **** 		display_f1_text( "Baler Full", TSMAX, 80, 7, FIXED | CENTER | UNDERLINED );
 8589              		.loc 1 5032 0
 8590 0024 0A23     		mov	r3, #10
 8591 0026 0093     		str	r3, [sp]
 8592 0028 D348     		ldr	r0, .L580+8
 8593 002a 1A21     		mov	r1, #26
 8594 002c 5022     		mov	r2, #80
 8595 002e 0723     		mov	r3, #7
 8596 0030 FFF7FEFF 		bl	display_f1_text
 8597              	.LVL735:
5034:screens.c     **** 		page = 0;
 8598              		.loc 1 5034 0
 8599 0034 0023     		mov	r3, #0
 8600 0036 D14A     		ldr	r2, .L580+12
 8601 0038 1370     		strb	r3, [r2]
5035:screens.c     **** 		selection = 0;
 8602              		.loc 1 5035 0
 8603 003a D14A     		ldr	r2, .L580+16
 8604 003c 1370     		strb	r3, [r2]
 8605              	.LVL736:
 8606              	.L474:
5040:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 8607              		.loc 1 5040 0
 8608 003e 0020     		mov	r0, #0
 8609 0040 FFF7FEFF 		bl	ClockDisplay
 8610              	.LVL737:
5043:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 8611              		.loc 1 5043 0
 8612 0044 CF4B     		ldr	r3, .L580+20
 8613 0046 1B78     		ldrb	r3, [r3]
 8614 0048 002B     		cmp	r3, #0
 8615 004a 00D0     		beq	.LCB8303
 8616 004c 22E2     		b	.L475	@long jump
 8617              	.LCB8303:
5043:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 8618              		.loc 1 5043 0 is_stmt 0 discriminator 1
 8619 004e A30F     		lsr	r3, r4, #30
 8620 0050 00D1     		bne	.LCB8307
 8621 0052 0BE2     		b	.L476	@long jump
 8622              	.LCB8307:
5045:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 8623              		.loc 1 5045 0 is_stmt 1
 8624 0054 A400     		lsl	r4, r4, #2
 8625              	.LVL738:
 8626 0056 A408     		lsr	r4, r4, #2
 8627              	.LVL739:
5047:screens.c     **** 		if( lkey == SW_OL ) // -
 8628              		.loc 1 5047 0
 8629 0058 8023     		mov	r3, #128
 8630 005a 9B00     		lsl	r3, r3, #2
 8631 005c 9C42     		cmp	r4, r3
 8632 005e 00D0     		beq	.LCB8315
 8633 0060 CBE0     		b	.L477	@long jump
 8634              	.LCB8315:
5049:screens.c     **** 			if( page == 0 )
 8635              		.loc 1 5049 0
 8636 0062 C64B     		ldr	r3, .L580+12
 8637 0064 1B78     		ldrb	r3, [r3]
 8638 0066 002B     		cmp	r3, #0
 8639 0068 6BD1     		bne	.L478
5051:screens.c     **** 				switch( selection )
 8640              		.loc 1 5051 0
 8641 006a C54B     		ldr	r3, .L580+16
 8642 006c 1A78     		ldrb	r2, [r3]
 8643 006e 052A     		cmp	r2, #5
 8644 0070 00D9     		bls	.LCB8323
 8645 0072 BCE0     		b	.L479	@long jump
 8646              	.LCB8323:
 8647 0074 9300     		lsl	r3, r2, #2
 8648 0076 C44A     		ldr	r2, .L580+24
 8649 0078 D358     		ldr	r3, [r2, r3]
 8650 007a 9F46     		mov	pc, r3
 8651              		.section	.rodata.screen142,"a",%progbits
 8652              		.align	2
 8653              	.L486:
 8654 0000 7C000000 		.word	.L480
 8655 0004 9A000000 		.word	.L481
 8656 0008 BE000000 		.word	.L482
 8657 000c E2000000 		.word	.L483
 8658 0010 04010000 		.word	.L484
 8659 0014 26010000 		.word	.L485
 8660              		.section	.text.screen142
 8661              	.L480:
5054:screens.c     **** 					if( pFac.pf.GW302_LubeAlarm > PF_GW302_LubeAlarm[PF_MIN] ) // Limiting unsigned type to minimu
 8662              		.loc 1 5054 0
 8663 007c 7E23     		mov	r3, #126
 8664 007e C34A     		ldr	r2, .L580+28
 8665 0080 D35A     		ldrh	r3, [r2, r3]
 8666 0082 C34A     		ldr	r2, .L580+32
 8667 0084 5288     		ldrh	r2, [r2, #2]
 8668 0086 9A42     		cmp	r2, r3
 8669 0088 00D3     		bcc	.LCB8341
 8670 008a B0E0     		b	.L479	@long jump
 8671              	.LCB8341:
5055:screens.c     **** 						pFac.pf.GW302_LubeAlarm -= PF_GW302_LubeAlarm[PF_STEP];
 8672              		.loc 1 5055 0
 8673 008c C04A     		ldr	r2, .L580+32
 8674 008e 1288     		ldrh	r2, [r2]
 8675 0090 9B1A     		sub	r3, r3, r2
 8676 0092 7E22     		mov	r2, #126
 8677 0094 BD49     		ldr	r1, .L580+28
 8678 0096 8B52     		strh	r3, [r1, r2]
 8679 0098 A9E0     		b	.L479
 8680              	.L481:
5059:screens.c     **** 					pFac.pf.GW302_PresDeadband -= PF_GW302_PresDeadband[PF_STEP];
 8681              		.loc 1 5059 0
 8682 009a BC4E     		ldr	r6, .L580+28
 8683 009c 8025     		mov	r5, #128
 8684 009e BD4C     		ldr	r4, .L580+36
 8685              	.LVL740:
 8686 00a0 7059     		ldr	r0, [r6, r5]
 8687 00a2 2168     		ldr	r1, [r4]
 8688 00a4 FFF7FEFF 		bl	__aeabi_fsub
 8689              	.LVL741:
 8690 00a8 7051     		str	r0, [r6, r5]
5060:screens.c     **** 					if( pFac.pf.GW302_PresDeadband < PF_GW302_PresDeadband[PF_MIN] )
 8691              		.loc 1 5060 0
 8692 00aa 6468     		ldr	r4, [r4, #4]
 8693 00ac 211C     		add	r1, r4, #0
 8694 00ae FFF7FEFF 		bl	__aeabi_fcmplt
 8695              	.LVL742:
 8696 00b2 0028     		cmp	r0, #0
 8697 00b4 00D1     		bne	.LCB8366
 8698 00b6 9AE0     		b	.L479	@long jump
 8699              	.LCB8366:
5061:screens.c     **** 						pFac.pf.GW302_PresDeadband = PF_GW302_PresDeadband[PF_MIN]; // Limiting to minimum value
 8700              		.loc 1 5061 0
 8701 00b8 8023     		mov	r3, #128
 8702 00ba F450     		str	r4, [r6, r3]
 8703 00bc 97E0     		b	.L479
 8704              	.LVL743:
 8705              	.L482:
5065:screens.c     **** 					pFac.pf.GW302_NetSpeed -= PF_GW302_NetSpeed[PF_STEP];
 8706              		.loc 1 5065 0
 8707 00be B34E     		ldr	r6, .L580+28
 8708 00c0 8425     		mov	r5, #132
 8709 00c2 B54C     		ldr	r4, .L580+40
 8710              	.LVL744:
 8711 00c4 7059     		ldr	r0, [r6, r5]
 8712 00c6 2168     		ldr	r1, [r4]
 8713 00c8 FFF7FEFF 		bl	__aeabi_fsub
 8714              	.LVL745:
 8715 00cc 7051     		str	r0, [r6, r5]
5066:screens.c     **** 					if( pFac.pf.GW302_NetSpeed < PF_GW302_NetSpeed[PF_MIN] )
 8716              		.loc 1 5066 0
 8717 00ce 6468     		ldr	r4, [r4, #4]
 8718 00d0 211C     		add	r1, r4, #0
 8719 00d2 FFF7FEFF 		bl	__aeabi_fcmplt
 8720              	.LVL746:
 8721 00d6 0028     		cmp	r0, #0
 8722 00d8 00D1     		bne	.LCB8388
 8723 00da 88E0     		b	.L479	@long jump
 8724              	.LCB8388:
5067:screens.c     **** 						pFac.pf.GW302_NetSpeed = PF_GW302_NetSpeed[PF_MIN]; // Limiting to minimum value
 8725              		.loc 1 5067 0
 8726 00dc 8423     		mov	r3, #132
 8727 00de F450     		str	r4, [r6, r3]
 8728 00e0 85E0     		b	.L479
 8729              	.LVL747:
 8730              	.L483:
5071:screens.c     **** 					pFac.pf.GW302_PresSwDelay -= PF_GW302_PresSwDelay[PF_STEP];
 8731              		.loc 1 5071 0
 8732 00e2 AA4E     		ldr	r6, .L580+28
 8733 00e4 8825     		mov	r5, #136
 8734 00e6 AD4C     		ldr	r4, .L580+44
 8735              	.LVL748:
 8736 00e8 7059     		ldr	r0, [r6, r5]
 8737 00ea 2168     		ldr	r1, [r4]
 8738 00ec FFF7FEFF 		bl	__aeabi_fsub
 8739              	.LVL749:
 8740 00f0 7051     		str	r0, [r6, r5]
5072:screens.c     **** 					if( pFac.pf.GW302_PresSwDelay < PF_GW302_PresSwDelay[PF_MIN] )
 8741              		.loc 1 5072 0
 8742 00f2 6468     		ldr	r4, [r4, #4]
 8743 00f4 211C     		add	r1, r4, #0
 8744 00f6 FFF7FEFF 		bl	__aeabi_fcmplt
 8745              	.LVL750:
 8746 00fa 0028     		cmp	r0, #0
 8747 00fc 77D0     		beq	.L479
5073:screens.c     **** 						pFac.pf.GW302_PresSwDelay = PF_GW302_PresSwDelay[PF_MIN]; // Limiting to minimum value
 8748              		.loc 1 5073 0
 8749 00fe 8823     		mov	r3, #136
 8750 0100 F450     		str	r4, [r6, r3]
 8751 0102 74E0     		b	.L479
 8752              	.LVL751:
 8753              	.L484:
5077:screens.c     **** 					pFac.pf.GW302_DoorClosed -= PF_GW302_DoorClosed[PF_STEP];
 8754              		.loc 1 5077 0
 8755 0104 A14E     		ldr	r6, .L580+28
 8756 0106 8C25     		mov	r5, #140
 8757 0108 A54C     		ldr	r4, .L580+48
 8758              	.LVL752:
 8759 010a 7059     		ldr	r0, [r6, r5]
 8760 010c 2168     		ldr	r1, [r4]
 8761 010e FFF7FEFF 		bl	__aeabi_fsub
 8762              	.LVL753:
 8763 0112 7051     		str	r0, [r6, r5]
5078:screens.c     **** 					if( pFac.pf.GW302_DoorClosed < PF_GW302_DoorClosed[PF_MIN] )
 8764              		.loc 1 5078 0
 8765 0114 6468     		ldr	r4, [r4, #4]
 8766 0116 211C     		add	r1, r4, #0
 8767 0118 FFF7FEFF 		bl	__aeabi_fcmplt
 8768              	.LVL754:
 8769 011c 0028     		cmp	r0, #0
 8770 011e 66D0     		beq	.L479
5079:screens.c     **** 						pFac.pf.GW302_DoorClosed = PF_GW302_DoorClosed[PF_MIN]; // Limiting to minimum value
 8771              		.loc 1 5079 0
 8772 0120 8C23     		mov	r3, #140
 8773 0122 F450     		str	r4, [r6, r3]
 8774 0124 63E0     		b	.L479
 8775              	.LVL755:
 8776              	.L485:
5083:screens.c     **** 					if( pFac.pf.GW302_BaleSizeFactor > PF_GW302_BaleSizeFactor[PF_MIN] ) // Limiting unsigned type
 8777              		.loc 1 5083 0
 8778 0126 9023     		mov	r3, #144
 8779 0128 984A     		ldr	r2, .L580+28
 8780 012a D35C     		ldrb	r3, [r2, r3]
 8781 012c 9D4A     		ldr	r2, .L580+52
 8782 012e 5278     		ldrb	r2, [r2, #1]
 8783 0130 9A42     		cmp	r2, r3
 8784 0132 5CD2     		bcs	.L479
5084:screens.c     **** 						pFac.pf.GW302_BaleSizeFactor -= PF_GW302_BaleSizeFactor[PF_STEP];
 8785              		.loc 1 5084 0
 8786 0134 9B4A     		ldr	r2, .L580+52
 8787 0136 1278     		ldrb	r2, [r2]
 8788 0138 9B1A     		sub	r3, r3, r2
 8789 013a 9022     		mov	r2, #144
 8790 013c 9349     		ldr	r1, .L580+28
 8791 013e 8B54     		strb	r3, [r1, r2]
 8792 0140 55E0     		b	.L479
 8793              	.L478:
5090:screens.c     **** 				switch( selection )
 8794              		.loc 1 5090 0
 8795 0142 8F4B     		ldr	r3, .L580+16
 8796 0144 1A78     		ldrb	r2, [r3]
 8797 0146 042A     		cmp	r2, #4
 8798 0148 51D8     		bhi	.L479
 8799 014a 9300     		lsl	r3, r2, #2
 8800 014c 964A     		ldr	r2, .L580+56
 8801 014e D358     		ldr	r3, [r2, r3]
 8802 0150 9F46     		mov	pc, r3
 8803              		.section	.rodata.screen142
 8804              		.align	2
 8805              	.L496:
 8806 0018 52010000 		.word	.L491
 8807 001c 74010000 		.word	.L492
 8808 0020 96010000 		.word	.L493
 8809 0024 B2010000 		.word	.L494
 8810 0028 CE010000 		.word	.L495
 8811              		.section	.text.screen142
 8812              	.L491:
5093:screens.c     **** 					pFac.pf.GW302_FillPotRange -= PF_GW302_FillPotRange[PF_STEP];
 8813              		.loc 1 5093 0
 8814 0152 8E4E     		ldr	r6, .L580+28
 8815 0154 9425     		mov	r5, #148
 8816 0156 954C     		ldr	r4, .L580+60
 8817              	.LVL756:
 8818 0158 7059     		ldr	r0, [r6, r5]
 8819 015a 2168     		ldr	r1, [r4]
 8820 015c FFF7FEFF 		bl	__aeabi_fsub
 8821              	.LVL757:
 8822 0160 7051     		str	r0, [r6, r5]
5094:screens.c     **** 					if( pFac.pf.GW302_FillPotRange < PF_GW302_FillPotRange[PF_MIN] )
 8823              		.loc 1 5094 0
 8824 0162 6468     		ldr	r4, [r4, #4]
 8825 0164 211C     		add	r1, r4, #0
 8826 0166 FFF7FEFF 		bl	__aeabi_fcmplt
 8827              	.LVL758:
 8828 016a 0028     		cmp	r0, #0
 8829 016c 3FD0     		beq	.L479
5095:screens.c     **** 						pFac.pf.GW302_FillPotRange = PF_GW302_FillPotRange[PF_MIN]; // Limiting to minimum value
 8830              		.loc 1 5095 0
 8831 016e 9423     		mov	r3, #148
 8832 0170 F450     		str	r4, [r6, r3]
 8833 0172 3CE0     		b	.L479
 8834              	.LVL759:
 8835              	.L492:
5099:screens.c     **** 					pFac.pf.GW302_FillPotIgnore -= PF_GW302_FillPotIgnore[PF_STEP];
 8836              		.loc 1 5099 0
 8837 0174 854E     		ldr	r6, .L580+28
 8838 0176 9825     		mov	r5, #152
 8839 0178 8D4C     		ldr	r4, .L580+64
 8840              	.LVL760:
 8841 017a 7059     		ldr	r0, [r6, r5]
 8842 017c 2168     		ldr	r1, [r4]
 8843 017e FFF7FEFF 		bl	__aeabi_fsub
 8844              	.LVL761:
 8845 0182 7051     		str	r0, [r6, r5]
5100:screens.c     **** 					if( pFac.pf.GW302_FillPotIgnore < PF_GW302_FillPotIgnore[PF_MIN] )
 8846              		.loc 1 5100 0
 8847 0184 6468     		ldr	r4, [r4, #4]
 8848 0186 211C     		add	r1, r4, #0
 8849 0188 FFF7FEFF 		bl	__aeabi_fcmplt
 8850              	.LVL762:
 8851 018c 0028     		cmp	r0, #0
 8852 018e 2ED0     		beq	.L479
5101:screens.c     **** 						pFac.pf.GW302_FillPotIgnore = PF_GW302_FillPotIgnore[PF_MIN]; // Limiting to minimum value
 8853              		.loc 1 5101 0
 8854 0190 9823     		mov	r3, #152
 8855 0192 F450     		str	r4, [r6, r3]
 8856 0194 2BE0     		b	.L479
 8857              	.LVL763:
 8858              	.L493:
5105:screens.c     **** 					if( pFac.pf.GW302_EngageDiameter > PF_GW302_EngageDiameter[PF_MIN] ) // Limiting unsigned type
 8859              		.loc 1 5105 0
 8860 0196 9C23     		mov	r3, #156
 8861 0198 7C4A     		ldr	r2, .L580+28
 8862 019a D35C     		ldrb	r3, [r2, r3]
 8863 019c 854A     		ldr	r2, .L580+68
 8864 019e 5278     		ldrb	r2, [r2, #1]
 8865 01a0 9A42     		cmp	r2, r3
 8866 01a2 24D2     		bcs	.L479
5106:screens.c     **** 						pFac.pf.GW302_EngageDiameter -= PF_GW302_EngageDiameter[PF_STEP];
 8867              		.loc 1 5106 0
 8868 01a4 834A     		ldr	r2, .L580+68
 8869 01a6 1278     		ldrb	r2, [r2]
 8870 01a8 9B1A     		sub	r3, r3, r2
 8871 01aa 9C22     		mov	r2, #156
 8872 01ac 7749     		ldr	r1, .L580+28
 8873 01ae 8B54     		strb	r3, [r1, r2]
 8874 01b0 1DE0     		b	.L479
 8875              	.L494:
5110:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_STEER )
 8876              		.loc 1 5110 0
 8877 01b2 9D23     		mov	r3, #157
 8878 01b4 754A     		ldr	r2, .L580+28
 8879 01b6 D35C     		ldrb	r3, [r2, r3]
 8880 01b8 002B     		cmp	r3, #0
 8881 01ba 03D1     		bne	.L499
5111:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_FILL;
 8882              		.loc 1 5111 0
 8883 01bc 0121     		mov	r1, #1
 8884 01be 9D23     		mov	r3, #157
 8885 01c0 D154     		strb	r1, [r2, r3]
 8886 01c2 14E0     		b	.L479
 8887              	.L499:
5113:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_STEER;
 8888              		.loc 1 5113 0
 8889 01c4 0021     		mov	r1, #0
 8890 01c6 9D23     		mov	r3, #157
 8891 01c8 704A     		ldr	r2, .L580+28
 8892 01ca D154     		strb	r1, [r2, r3]
 8893 01cc 0FE0     		b	.L479
 8894              	.L495:
5117:screens.c     **** 					pFac.pf.GW302_RollerDelay -= PF_GW302_RollerDelay[PF_STEP];
 8895              		.loc 1 5117 0
 8896 01ce 6F4E     		ldr	r6, .L580+28
 8897 01d0 A025     		mov	r5, #160
 8898 01d2 794C     		ldr	r4, .L580+72
 8899              	.LVL764:
 8900 01d4 7059     		ldr	r0, [r6, r5]
 8901 01d6 2168     		ldr	r1, [r4]
 8902 01d8 FFF7FEFF 		bl	__aeabi_fsub
 8903              	.LVL765:
 8904 01dc 7051     		str	r0, [r6, r5]
5118:screens.c     **** 					if( pFac.pf.GW302_RollerDelay < PF_GW302_RollerDelay[PF_MIN] )
 8905              		.loc 1 5118 0
 8906 01de 6468     		ldr	r4, [r4, #4]
 8907 01e0 211C     		add	r1, r4, #0
 8908 01e2 FFF7FEFF 		bl	__aeabi_fcmplt
 8909              	.LVL766:
 8910 01e6 0028     		cmp	r0, #0
 8911 01e8 01D0     		beq	.L479
5119:screens.c     **** 						pFac.pf.GW302_RollerDelay = PF_GW302_RollerDelay[PF_MIN]; // Limiting to minimum value
 8912              		.loc 1 5119 0
 8913 01ea A023     		mov	r3, #160
 8914 01ec F450     		str	r4, [r6, r3]
 8915              	.L479:
5123:screens.c     **** 			SavecalDelayWithinMenus = 1;
 8916              		.loc 1 5123 0
 8917 01ee 0123     		mov	r3, #1
 8918 01f0 724A     		ldr	r2, .L580+76
 8919 01f2 1370     		strb	r3, [r2]
5124:screens.c     **** 			valuechanged = 1;
 8920              		.loc 1 5124 0
 8921 01f4 724A     		ldr	r2, .L580+80
 8922 01f6 1370     		strb	r3, [r2]
 8923              	.LVL767:
 8924 01f8 4CE1     		b	.L475
 8925              	.LVL768:
 8926              	.L477:
5127:screens.c     **** 		else if( lkey == SW_IL ) // +
 8927              		.loc 1 5127 0
 8928 01fa 042C     		cmp	r4, #4
 8929 01fc 00D0     		beq	.LCB8585
 8930 01fe 00E1     		b	.L501	@long jump
 8931              	.LCB8585:
5129:screens.c     **** 			if( page == 0 )
 8932              		.loc 1 5129 0
 8933 0200 5E4B     		ldr	r3, .L580+12
 8934 0202 1B78     		ldrb	r3, [r3]
 8935 0204 002B     		cmp	r3, #0
 8936 0206 70D1     		bne	.L502
5131:screens.c     **** 				switch( selection )
 8937              		.loc 1 5131 0
 8938 0208 5D4B     		ldr	r3, .L580+16
 8939 020a 1A78     		ldrb	r2, [r3]
 8940 020c 052A     		cmp	r2, #5
 8941 020e 00D9     		bls	.LCB8593
 8942 0210 F1E0     		b	.L503	@long jump
 8943              	.LCB8593:
 8944 0212 9300     		lsl	r3, r2, #2
 8945 0214 6B4A     		ldr	r2, .L580+84
 8946 0216 D358     		ldr	r3, [r2, r3]
 8947 0218 9F46     		mov	pc, r3
 8948              		.section	.rodata.screen142
 8949              		.align	2
 8950              	.L510:
 8951 002c 1A020000 		.word	.L504
 8952 0030 3A020000 		.word	.L505
 8953 0034 5E020000 		.word	.L506
 8954 0038 82020000 		.word	.L507
 8955 003c A6020000 		.word	.L508
 8956 0040 CA020000 		.word	.L509
 8957              		.section	.text.screen142
 8958              	.L504:
5134:screens.c     **** 					pFac.pf.GW302_LubeAlarm += PF_GW302_LubeAlarm[PF_STEP];
 8959              		.loc 1 5134 0
 8960 021a 5D4A     		ldr	r2, .L580+32
 8961 021c 5B48     		ldr	r0, .L580+28
 8962 021e 7E21     		mov	r1, #126
 8963 0220 1488     		ldrh	r4, [r2]
 8964              	.LVL769:
 8965 0222 435A     		ldrh	r3, [r0, r1]
 8966 0224 E318     		add	r3, r4, r3
 8967 0226 1B04     		lsl	r3, r3, #16
 8968 0228 1B0C     		lsr	r3, r3, #16
 8969 022a 4352     		strh	r3, [r0, r1]
5135:screens.c     **** 					if( pFac.pf.GW302_LubeAlarm > PF_GW302_LubeAlarm[PF_MAX] )
 8970              		.loc 1 5135 0
 8971 022c 9288     		ldrh	r2, [r2, #4]
 8972 022e 9342     		cmp	r3, r2
 8973 0230 00D8     		bhi	.LCB8617
 8974 0232 E0E0     		b	.L503	@long jump
 8975              	.LCB8617:
5136:screens.c     **** 						pFac.pf.GW302_LubeAlarm = PF_GW302_LubeAlarm[PF_MAX]; // Limiting to maximum value
 8976              		.loc 1 5136 0
 8977 0234 7E23     		mov	r3, #126
 8978 0236 C252     		strh	r2, [r0, r3]
 8979 0238 DDE0     		b	.L503
 8980              	.LVL770:
 8981              	.L505:
5140:screens.c     **** 					pFac.pf.GW302_PresDeadband += PF_GW302_PresDeadband[PF_STEP];
 8982              		.loc 1 5140 0
 8983 023a 544E     		ldr	r6, .L580+28
 8984 023c 8025     		mov	r5, #128
 8985 023e 554C     		ldr	r4, .L580+36
 8986              	.LVL771:
 8987 0240 7059     		ldr	r0, [r6, r5]
 8988 0242 2168     		ldr	r1, [r4]
 8989 0244 FFF7FEFF 		bl	__aeabi_fadd
 8990              	.LVL772:
 8991 0248 7051     		str	r0, [r6, r5]
5141:screens.c     **** 					if( pFac.pf.GW302_PresDeadband > PF_GW302_PresDeadband[PF_MAX]  )
 8992              		.loc 1 5141 0
 8993 024a A468     		ldr	r4, [r4, #8]
 8994 024c 211C     		add	r1, r4, #0
 8995 024e FFF7FEFF 		bl	__aeabi_fcmpgt
 8996              	.LVL773:
 8997 0252 0028     		cmp	r0, #0
 8998 0254 00D1     		bne	.LCB8639
 8999 0256 CEE0     		b	.L503	@long jump
 9000              	.LCB8639:
5142:screens.c     **** 						pFac.pf.GW302_PresDeadband = PF_GW302_PresDeadband[PF_MAX]; // Limiting to maximum value
 9001              		.loc 1 5142 0
 9002 0258 8023     		mov	r3, #128
 9003 025a F450     		str	r4, [r6, r3]
 9004 025c CBE0     		b	.L503
 9005              	.LVL774:
 9006              	.L506:
5146:screens.c     **** 					pFac.pf.GW302_NetSpeed += PF_GW302_NetSpeed[PF_STEP];
 9007              		.loc 1 5146 0
 9008 025e 4B4E     		ldr	r6, .L580+28
 9009 0260 8425     		mov	r5, #132
 9010 0262 4D4C     		ldr	r4, .L580+40
 9011              	.LVL775:
 9012 0264 7059     		ldr	r0, [r6, r5]
 9013 0266 2168     		ldr	r1, [r4]
 9014 0268 FFF7FEFF 		bl	__aeabi_fadd
 9015              	.LVL776:
 9016 026c 7051     		str	r0, [r6, r5]
5147:screens.c     **** 					if( pFac.pf.GW302_NetSpeed > PF_GW302_NetSpeed[PF_MAX] )
 9017              		.loc 1 5147 0
 9018 026e A468     		ldr	r4, [r4, #8]
 9019 0270 211C     		add	r1, r4, #0
 9020 0272 FFF7FEFF 		bl	__aeabi_fcmpgt
 9021              	.LVL777:
 9022 0276 0028     		cmp	r0, #0
 9023 0278 00D1     		bne	.LCB8661
 9024 027a BCE0     		b	.L503	@long jump
 9025              	.LCB8661:
5148:screens.c     **** 						pFac.pf.GW302_NetSpeed = PF_GW302_NetSpeed[PF_MAX]; // Limiting to maximum value
 9026              		.loc 1 5148 0
 9027 027c 8423     		mov	r3, #132
 9028 027e F450     		str	r4, [r6, r3]
 9029 0280 B9E0     		b	.L503
 9030              	.LVL778:
 9031              	.L507:
5152:screens.c     **** 					pFac.pf.GW302_PresSwDelay += PF_GW302_PresSwDelay[PF_STEP];
 9032              		.loc 1 5152 0
 9033 0282 424E     		ldr	r6, .L580+28
 9034 0284 8825     		mov	r5, #136
 9035 0286 454C     		ldr	r4, .L580+44
 9036              	.LVL779:
 9037 0288 7059     		ldr	r0, [r6, r5]
 9038 028a 2168     		ldr	r1, [r4]
 9039 028c FFF7FEFF 		bl	__aeabi_fadd
 9040              	.LVL780:
 9041 0290 7051     		str	r0, [r6, r5]
5153:screens.c     **** 					if( pFac.pf.GW302_PresSwDelay > PF_GW302_PresSwDelay[PF_MAX] )
 9042              		.loc 1 5153 0
 9043 0292 A468     		ldr	r4, [r4, #8]
 9044 0294 211C     		add	r1, r4, #0
 9045 0296 FFF7FEFF 		bl	__aeabi_fcmpgt
 9046              	.LVL781:
 9047 029a 0028     		cmp	r0, #0
 9048 029c 00D1     		bne	.LCB8683
 9049 029e AAE0     		b	.L503	@long jump
 9050              	.LCB8683:
5154:screens.c     **** 						pFac.pf.GW302_PresSwDelay = PF_GW302_PresSwDelay[PF_MAX]; // Limiting to maximum value
 9051              		.loc 1 5154 0
 9052 02a0 8823     		mov	r3, #136
 9053 02a2 F450     		str	r4, [r6, r3]
 9054 02a4 A7E0     		b	.L503
 9055              	.LVL782:
 9056              	.L508:
5158:screens.c     **** 					pFac.pf.GW302_DoorClosed += PF_GW302_DoorClosed[PF_STEP];
 9057              		.loc 1 5158 0
 9058 02a6 394E     		ldr	r6, .L580+28
 9059 02a8 8C25     		mov	r5, #140
 9060 02aa 3D4C     		ldr	r4, .L580+48
 9061              	.LVL783:
 9062 02ac 7059     		ldr	r0, [r6, r5]
 9063 02ae 2168     		ldr	r1, [r4]
 9064 02b0 FFF7FEFF 		bl	__aeabi_fadd
 9065              	.LVL784:
 9066 02b4 7051     		str	r0, [r6, r5]
5159:screens.c     **** 					if( pFac.pf.GW302_DoorClosed > PF_GW302_DoorClosed[PF_MAX] )
 9067              		.loc 1 5159 0
 9068 02b6 A468     		ldr	r4, [r4, #8]
 9069 02b8 211C     		add	r1, r4, #0
 9070 02ba FFF7FEFF 		bl	__aeabi_fcmpgt
 9071              	.LVL785:
 9072 02be 0028     		cmp	r0, #0
 9073 02c0 00D1     		bne	.LCB8705
 9074 02c2 98E0     		b	.L503	@long jump
 9075              	.LCB8705:
5160:screens.c     **** 						pFac.pf.GW302_DoorClosed = PF_GW302_DoorClosed[PF_MAX]; // Limiting to maximum value
 9076              		.loc 1 5160 0
 9077 02c4 8C23     		mov	r3, #140
 9078 02c6 F450     		str	r4, [r6, r3]
 9079 02c8 95E0     		b	.L503
 9080              	.LVL786:
 9081              	.L509:
5164:screens.c     **** 					pFac.pf.GW302_BaleSizeFactor += PF_GW302_BaleSizeFactor[PF_STEP];
 9082              		.loc 1 5164 0
 9083 02ca 364A     		ldr	r2, .L580+52
 9084 02cc 2F48     		ldr	r0, .L580+28
 9085 02ce 9021     		mov	r1, #144
 9086 02d0 1478     		ldrb	r4, [r2]
 9087              	.LVL787:
 9088 02d2 435C     		ldrb	r3, [r0, r1]
 9089 02d4 E318     		add	r3, r4, r3
 9090 02d6 1B06     		lsl	r3, r3, #24
 9091 02d8 1B0E     		lsr	r3, r3, #24
 9092 02da 4354     		strb	r3, [r0, r1]
5165:screens.c     **** 					if( pFac.pf.GW302_BaleSizeFactor > PF_GW302_BaleSizeFactor[PF_MAX] )
 9093              		.loc 1 5165 0
 9094 02dc 9278     		ldrb	r2, [r2, #2]
 9095 02de 9342     		cmp	r3, r2
 9096 02e0 00D8     		bhi	.LCB8725
 9097 02e2 88E0     		b	.L503	@long jump
 9098              	.LCB8725:
5166:screens.c     **** 						pFac.pf.GW302_BaleSizeFactor = PF_GW302_BaleSizeFactor[PF_MAX]; // Limiting to maximum value
 9099              		.loc 1 5166 0
 9100 02e4 9023     		mov	r3, #144
 9101 02e6 C254     		strb	r2, [r0, r3]
 9102 02e8 85E0     		b	.L503
 9103              	.LVL788:
 9104              	.L502:
5172:screens.c     **** 				switch( selection )
 9105              		.loc 1 5172 0
 9106 02ea 254B     		ldr	r3, .L580+16
 9107 02ec 1A78     		ldrb	r2, [r3]
 9108 02ee 042A     		cmp	r2, #4
 9109 02f0 00D9     		bls	.LCB8736
 9110 02f2 80E0     		b	.L503	@long jump
 9111              	.LCB8736:
 9112 02f4 9300     		lsl	r3, r2, #2
 9113 02f6 344A     		ldr	r2, .L580+88
 9114 02f8 D358     		ldr	r3, [r2, r3]
 9115 02fa 9F46     		mov	pc, r3
 9116              		.section	.rodata.screen142
 9117              		.align	2
 9118              	.L520:
 9119 0044 FC020000 		.word	.L515
 9120 0048 1E030000 		.word	.L516
 9121 004c 40030000 		.word	.L517
 9122 0050 5E030000 		.word	.L518
 9123 0054 D6030000 		.word	.L519
 9124              		.section	.text.screen142
 9125              	.L515:
5175:screens.c     **** 					pFac.pf.GW302_FillPotRange += PF_GW302_FillPotRange[PF_STEP];
 9126              		.loc 1 5175 0
 9127 02fc 234E     		ldr	r6, .L580+28
 9128 02fe 9425     		mov	r5, #148
 9129 0300 2A4C     		ldr	r4, .L580+60
 9130              	.LVL789:
 9131 0302 7059     		ldr	r0, [r6, r5]
 9132 0304 2168     		ldr	r1, [r4]
 9133 0306 FFF7FEFF 		bl	__aeabi_fadd
 9134              	.LVL790:
 9135 030a 7051     		str	r0, [r6, r5]
5176:screens.c     **** 					if( pFac.pf.GW302_FillPotRange > PF_GW302_FillPotRange[PF_MAX] )
 9136              		.loc 1 5176 0
 9137 030c A468     		ldr	r4, [r4, #8]
 9138 030e 211C     		add	r1, r4, #0
 9139 0310 FFF7FEFF 		bl	__aeabi_fcmpgt
 9140              	.LVL791:
 9141 0314 0028     		cmp	r0, #0
 9142 0316 6ED0     		beq	.L503
5177:screens.c     **** 						pFac.pf.GW302_FillPotRange = PF_GW302_FillPotRange[PF_MAX]; // Limiting to maximum value
 9143              		.loc 1 5177 0
 9144 0318 9423     		mov	r3, #148
 9145 031a F450     		str	r4, [r6, r3]
 9146 031c 6BE0     		b	.L503
 9147              	.LVL792:
 9148              	.L516:
5181:screens.c     **** 					pFac.pf.GW302_FillPotIgnore += PF_GW302_FillPotIgnore[PF_STEP];
 9149              		.loc 1 5181 0
 9150 031e 1B4E     		ldr	r6, .L580+28
 9151 0320 9825     		mov	r5, #152
 9152 0322 234C     		ldr	r4, .L580+64
 9153              	.LVL793:
 9154 0324 7059     		ldr	r0, [r6, r5]
 9155 0326 2168     		ldr	r1, [r4]
 9156 0328 FFF7FEFF 		bl	__aeabi_fadd
 9157              	.LVL794:
 9158 032c 7051     		str	r0, [r6, r5]
5182:screens.c     **** 					if( pFac.pf.GW302_FillPotIgnore > PF_GW302_FillPotIgnore[PF_MAX] )
 9159              		.loc 1 5182 0
 9160 032e A468     		ldr	r4, [r4, #8]
 9161 0330 211C     		add	r1, r4, #0
 9162 0332 FFF7FEFF 		bl	__aeabi_fcmpgt
 9163              	.LVL795:
 9164 0336 0028     		cmp	r0, #0
 9165 0338 5DD0     		beq	.L503
5183:screens.c     **** 						pFac.pf.GW302_FillPotIgnore = PF_GW302_FillPotIgnore[PF_MAX]; // Limiting to maximum value
 9166              		.loc 1 5183 0
 9167 033a 9823     		mov	r3, #152
 9168 033c F450     		str	r4, [r6, r3]
 9169 033e 5AE0     		b	.L503
 9170              	.LVL796:
 9171              	.L517:
5187:screens.c     **** 					pFac.pf.GW302_EngageDiameter += PF_GW302_EngageDiameter[PF_STEP];
 9172              		.loc 1 5187 0
 9173 0340 1C4A     		ldr	r2, .L580+68
 9174 0342 1248     		ldr	r0, .L580+28
 9175 0344 9C21     		mov	r1, #156
 9176 0346 1478     		ldrb	r4, [r2]
 9177              	.LVL797:
 9178 0348 435C     		ldrb	r3, [r0, r1]
 9179 034a E318     		add	r3, r4, r3
 9180 034c 1B06     		lsl	r3, r3, #24
 9181 034e 1B0E     		lsr	r3, r3, #24
 9182 0350 4354     		strb	r3, [r0, r1]
5188:screens.c     **** 					if( pFac.pf.GW302_EngageDiameter > PF_GW302_EngageDiameter[PF_MAX] )
 9183              		.loc 1 5188 0
 9184 0352 9278     		ldrb	r2, [r2, #2]
 9185 0354 9342     		cmp	r3, r2
 9186 0356 4ED9     		bls	.L503
5189:screens.c     **** 						pFac.pf.GW302_EngageDiameter = PF_GW302_EngageDiameter[PF_MAX]; // Limiting to maximum value
 9187              		.loc 1 5189 0
 9188 0358 9C23     		mov	r3, #156
 9189 035a C254     		strb	r2, [r0, r3]
 9190 035c 4BE0     		b	.L503
 9191              	.LVL798:
 9192              	.L518:
5193:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_STEER )
 9193              		.loc 1 5193 0
 9194 035e 9D23     		mov	r3, #157
 9195 0360 0A4A     		ldr	r2, .L580+28
 9196 0362 D35C     		ldrb	r3, [r2, r3]
 9197 0364 002B     		cmp	r3, #0
 9198 0366 31D1     		bne	.L523
5194:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_FILL;
 9199              		.loc 1 5194 0
 9200 0368 0121     		mov	r1, #1
 9201 036a 9D23     		mov	r3, #157
 9202 036c D154     		strb	r1, [r2, r3]
 9203 036e 42E0     		b	.L503
 9204              	.L581:
 9205              		.align	2
 9206              	.L580:
 9207 0370 00000000 		.word	startup
 9208 0374 00000000 		.word	adm
 9209 0378 D8020000 		.word	.LC346
 9210 037c 00000000 		.word	.LANCHOR4
 9211 0380 00000000 		.word	selection
 9212 0384 00000000 		.word	editing
 9213 0388 00000000 		.word	.L486
 9214 038c 00000000 		.word	pFac
 9215 0390 00000000 		.word	PF_GW302_LubeAlarm
 9216 0394 00000000 		.word	PF_GW302_PresDeadband
 9217 0398 00000000 		.word	PF_GW302_NetSpeed
 9218 039c 00000000 		.word	PF_GW302_PresSwDelay
 9219 03a0 00000000 		.word	PF_GW302_DoorClosed
 9220 03a4 00000000 		.word	PF_GW302_BaleSizeFactor
 9221 03a8 18000000 		.word	.L496
 9222 03ac 00000000 		.word	PF_GW302_FillPotRange
 9223 03b0 00000000 		.word	PF_GW302_FillPotIgnore
 9224 03b4 00000000 		.word	PF_GW302_EngageDiameter
 9225 03b8 00000000 		.word	PF_GW302_RollerDelay
 9226 03bc 00000000 		.word	SavecalDelayWithinMenus
 9227 03c0 00000000 		.word	valuechanged
 9228 03c4 2C000000 		.word	.L510
 9229 03c8 44000000 		.word	.L520
 9230              	.L523:
5196:screens.c     **** 						pFac.pf.GW302_BaleIndicator = BI_STEER;
 9231              		.loc 1 5196 0
 9232 03cc 0021     		mov	r1, #0
 9233 03ce 9D23     		mov	r3, #157
 9234 03d0 E64A     		ldr	r2, .L582
 9235 03d2 D154     		strb	r1, [r2, r3]
 9236 03d4 0FE0     		b	.L503
 9237              	.L519:
5200:screens.c     **** 					pFac.pf.GW302_RollerDelay += PF_GW302_RollerDelay[PF_STEP];
 9238              		.loc 1 5200 0
 9239 03d6 E54E     		ldr	r6, .L582
 9240 03d8 A025     		mov	r5, #160
 9241 03da E54C     		ldr	r4, .L582+4
 9242              	.LVL799:
 9243 03dc 7059     		ldr	r0, [r6, r5]
 9244 03de 2168     		ldr	r1, [r4]
 9245 03e0 FFF7FEFF 		bl	__aeabi_fadd
 9246              	.LVL800:
 9247 03e4 7051     		str	r0, [r6, r5]
5201:screens.c     **** 					if( pFac.pf.GW302_RollerDelay > PF_GW302_RollerDelay[PF_MAX] )
 9248              		.loc 1 5201 0
 9249 03e6 A468     		ldr	r4, [r4, #8]
 9250 03e8 211C     		add	r1, r4, #0
 9251 03ea FFF7FEFF 		bl	__aeabi_fcmpgt
 9252              	.LVL801:
 9253 03ee 0028     		cmp	r0, #0
 9254 03f0 01D0     		beq	.L503
5202:screens.c     **** 						pFac.pf.GW302_RollerDelay = PF_GW302_RollerDelay[PF_MAX]; // Limiting to maximum value
 9255              		.loc 1 5202 0
 9256 03f2 A023     		mov	r3, #160
 9257 03f4 F450     		str	r4, [r6, r3]
 9258              	.L503:
5206:screens.c     **** 			SavecalDelayWithinMenus = 1;
 9259              		.loc 1 5206 0
 9260 03f6 0123     		mov	r3, #1
 9261 03f8 DE4A     		ldr	r2, .L582+8
 9262 03fa 1370     		strb	r3, [r2]
5207:screens.c     **** 			valuechanged = 1;
 9263              		.loc 1 5207 0
 9264 03fc DE4A     		ldr	r2, .L582+12
 9265 03fe 1370     		strb	r3, [r2]
 9266              	.LVL802:
 9267 0400 48E0     		b	.L475
 9268              	.LVL803:
 9269              	.L501:
5210:screens.c     **** 		else if( lkey == SW_CU ) // ^
 9270              		.loc 1 5210 0
 9271 0402 202C     		cmp	r4, #32
 9272 0404 07D1     		bne	.L525
5212:screens.c     **** 			if( selection )
 9273              		.loc 1 5212 0
 9274 0406 DD4B     		ldr	r3, .L582+16
 9275 0408 1B78     		ldrb	r3, [r3]
 9276 040a 002B     		cmp	r3, #0
 9277 040c 42D0     		beq	.L475
5214:screens.c     **** 				selection--;
 9278              		.loc 1 5214 0
 9279 040e 013B     		sub	r3, r3, #1
 9280 0410 DA4A     		ldr	r2, .L582+16
 9281 0412 1370     		strb	r3, [r2]
 9282              	.LVL804:
 9283 0414 3EE0     		b	.L475
 9284              	.LVL805:
 9285              	.L525:
5218:screens.c     **** 		else if( lkey == SW_CD ) // V
 9286              		.loc 1 5218 0
 9287 0416 402C     		cmp	r4, #64
 9288 0418 13D1     		bne	.L526
5220:screens.c     **** 			if( page == 0 )
 9289              		.loc 1 5220 0
 9290 041a D94B     		ldr	r3, .L582+20
 9291 041c 1B78     		ldrb	r3, [r3]
 9292 041e 002B     		cmp	r3, #0
 9293 0420 07D1     		bne	.L527
5222:screens.c     **** 				if( selection < 5 )
 9294              		.loc 1 5222 0
 9295 0422 D64B     		ldr	r3, .L582+16
 9296 0424 1B78     		ldrb	r3, [r3]
 9297 0426 042B     		cmp	r3, #4
 9298 0428 3AD8     		bhi	.L555
5224:screens.c     **** 					selection++;
 9299              		.loc 1 5224 0
 9300 042a 0133     		add	r3, r3, #1
 9301 042c D34A     		ldr	r2, .L582+16
 9302 042e 1370     		strb	r3, [r2]
 9303              	.LVL806:
 9304 0430 30E0     		b	.L475
 9305              	.LVL807:
 9306              	.L527:
5230:screens.c     **** 				if( selection < 4 )
 9307              		.loc 1 5230 0
 9308 0432 D24B     		ldr	r3, .L582+16
 9309 0434 1B78     		ldrb	r3, [r3]
 9310 0436 032B     		cmp	r3, #3
 9311 0438 30D8     		bhi	.L529
5232:screens.c     **** 					selection++;
 9312              		.loc 1 5232 0
 9313 043a 0133     		add	r3, r3, #1
 9314 043c CF4A     		ldr	r2, .L582+16
 9315 043e 1370     		strb	r3, [r2]
 9316              	.LVL808:
 9317 0440 28E0     		b	.L475
 9318              	.LVL809:
 9319              	.L526:
5237:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) ) // ESC /  <
 9320              		.loc 1 5237 0
 9321 0442 102C     		cmp	r4, #16
 9322 0444 03D0     		beq	.L577
 9323 0446 631E     		sub	r3, r4, #1
 9324 0448 FF3B     		sub	r3, r3, #255
 9325 044a 002B     		cmp	r3, #0
 9326 044c 03D1     		bne	.L530
 9327              	.L577:
5239:screens.c     **** 			escape = 1;
 9328              		.loc 1 5239 0
 9329 044e 0122     		mov	r2, #1
 9330 0450 CC4B     		ldr	r3, .L582+24
 9331 0452 1A70     		strb	r2, [r3]
 9332 0454 1EE0     		b	.L475
 9333              	.L530:
5241:screens.c     **** 		else if( lkey == SW_IR ) // PAGE
 9334              		.loc 1 5241 0
 9335 0456 082C     		cmp	r4, #8
 9336 0458 1CD1     		bne	.L475
5243:screens.c     **** 			page = page? 0:1;
 9337              		.loc 1 5243 0
 9338 045a C94B     		ldr	r3, .L582+20
 9339 045c 1A78     		ldrb	r2, [r3]
 9340 045e 5142     		neg	r1, r2
 9341 0460 4A41     		adc	r2, r2, r1
 9342 0462 1A70     		strb	r2, [r3]
5245:screens.c     **** 			selection = 0;
 9343              		.loc 1 5245 0
 9344 0464 0022     		mov	r2, #0
 9345 0466 C54B     		ldr	r3, .L582+16
 9346 0468 1A70     		strb	r2, [r3]
 9347 046a 13E0     		b	.L475
 9348              	.L476:
5252:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 9349              		.loc 1 5252 0
 9350 046c C64B     		ldr	r3, .L582+28
 9351 046e 1B78     		ldrb	r3, [r3]
 9352 0470 002B     		cmp	r3, #0
 9353 0472 03D1     		bne	.L532
5252:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 9354              		.loc 1 5252 0 is_stmt 0 discriminator 1
 9355 0474 BF4B     		ldr	r3, .L582+8
 9356 0476 1B78     		ldrb	r3, [r3]
 9357 0478 002B     		cmp	r3, #0
 9358 047a 0BD0     		beq	.L475
 9359              	.L532:
5254:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 9360              		.loc 1 5254 0 is_stmt 1
 9361 047c C34B     		ldr	r3, .L582+32
 9362 047e 1B78     		ldrb	r3, [r3]
 9363 0480 032B     		cmp	r3, #3
 9364 0482 07D9     		bls	.L475
5256:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 9365              		.loc 1 5256 0
 9366 0484 0023     		mov	r3, #0
 9367 0486 C04A     		ldr	r2, .L582+28
 9368 0488 1370     		strb	r3, [r2]
5257:screens.c     **** 				SavecalDelayWithinMenus = 0;
 9369              		.loc 1 5257 0
 9370 048a BA4A     		ldr	r2, .L582+8
 9371 048c 1370     		strb	r3, [r2]
5258:screens.c     **** 				savecal = 1;
 9372              		.loc 1 5258 0
 9373 048e 0122     		mov	r2, #1
 9374 0490 BF4B     		ldr	r3, .L582+36
 9375 0492 1A70     		strb	r2, [r3]
 9376              	.LVL810:
 9377              	.L475:
5267:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 9378              		.loc 1 5267 0
 9379 0494 BA4B     		ldr	r3, .L582+20
 9380 0496 1B78     		ldrb	r3, [r3]
 9381 0498 002B     		cmp	r3, #0
 9382 049a 03D0     		beq	.L556
 9383              	.LVL811:
 9384              	.L529:
5267:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 9385              		.loc 1 5267 0 is_stmt 0 discriminator 2
 9386 049c BD48     		ldr	r0, .L582+40
 9387 049e 02E0     		b	.L528
 9388              	.LVL812:
 9389              	.L555:
5267:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 9390              		.loc 1 5267 0
 9391 04a0 BD48     		ldr	r0, .L582+44
 9392 04a2 00E0     		b	.L528
 9393              	.LVL813:
 9394              	.L556:
 9395 04a4 BC48     		ldr	r0, .L582+44
 9396              	.LVL814:
 9397              	.L528:
5267:screens.c     **** 		display_f1_text( (page==0)? "1":"2", TSMAX, 134, 7, FIXED ); 
 9398              		.loc 1 5267 0 discriminator 3
 9399 04a6 0024     		mov	r4, #0
 9400 04a8 0094     		str	r4, [sp]
 9401 04aa 1A21     		mov	r1, #26
 9402 04ac 8622     		mov	r2, #134
 9403 04ae 0723     		mov	r3, #7
 9404 04b0 FFF7FEFF 		bl	display_f1_text
 9405              	.LVL815:
5268:screens.c     **** 		display_f1_text( "/2", TSMAX, 140, 7, FIXED );
 9406              		.loc 1 5268 0 is_stmt 1 discriminator 3
 9407 04b4 0094     		str	r4, [sp]
 9408 04b6 B948     		ldr	r0, .L582+48
 9409 04b8 1A21     		mov	r1, #26
 9410 04ba 8C22     		mov	r2, #140
 9411 04bc 0723     		mov	r3, #7
 9412 04be FFF7FEFF 		bl	display_f1_text
 9413              	.LVL816:
5271:screens.c     **** 		draw_box( adm, (20+1), 21, 156, 100, CLEAR );
 9414              		.loc 1 5271 0 discriminator 3
 9415 04c2 6423     		mov	r3, #100
 9416 04c4 0093     		str	r3, [sp]
 9417 04c6 4023     		mov	r3, #64
 9418 04c8 0193     		str	r3, [sp, #4]
 9419 04ca B548     		ldr	r0, .L582+52
 9420 04cc 1521     		mov	r1, #21
 9421 04ce 1522     		mov	r2, #21
 9422 04d0 9C23     		mov	r3, #156
 9423 04d2 FFF7FEFF 		bl	draw_box
 9424              	.LVL817:
5274:screens.c     **** 		if( page == 0 )
 9425              		.loc 1 5274 0 discriminator 3
 9426 04d6 AA4B     		ldr	r3, .L582+20
 9427 04d8 1B78     		ldrb	r3, [r3]
 9428 04da 002B     		cmp	r3, #0
 9429 04dc 4ED1     		bne	.L533
5276:screens.c     **** 			display_f1_text( "Lube Alarm", TSMAX, 24, 21, FIXED );
 9430              		.loc 1 5276 0
 9431 04de 0094     		str	r4, [sp]
 9432 04e0 B048     		ldr	r0, .L582+56
 9433 04e2 1A21     		mov	r1, #26
 9434 04e4 1822     		mov	r2, #24
 9435 04e6 1523     		mov	r3, #21
 9436 04e8 FFF7FEFF 		bl	display_f1_text
 9437              	.LVL818:
5278:screens.c     **** 			display_f1_text( "Pres. Deadband", TSMAX, 24, 31, FIXED );
 9438              		.loc 1 5278 0
 9439 04ec 0094     		str	r4, [sp]
 9440 04ee AE48     		ldr	r0, .L582+60
 9441 04f0 1A21     		mov	r1, #26
 9442 04f2 1822     		mov	r2, #24
 9443 04f4 1F23     		mov	r3, #31
 9444 04f6 FFF7FEFF 		bl	display_f1_text
 9445              	.LVL819:
5279:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
 9446              		.loc 1 5279 0
 9447 04fa 0094     		str	r4, [sp]
 9448 04fc AB48     		ldr	r0, .L582+64
 9449 04fe 1A21     		mov	r1, #26
 9450 0500 9122     		mov	r2, #145
 9451 0502 1F23     		mov	r3, #31
 9452 0504 FFF7FEFF 		bl	display_f1_text
 9453              	.LVL820:
5281:screens.c     **** 			display_f1_text( "Net Speed", TSMAX, 24, 41, FIXED );
 9454              		.loc 1 5281 0
 9455 0508 0094     		str	r4, [sp]
 9456 050a A948     		ldr	r0, .L582+68
 9457 050c 1A21     		mov	r1, #26
 9458 050e 1822     		mov	r2, #24
 9459 0510 2923     		mov	r3, #41
 9460 0512 FFF7FEFF 		bl	display_f1_text
 9461              	.LVL821:
5282:screens.c     **** 			display_f1_text( "Hz", TSMAX, 145, 41, FIXED );
 9462              		.loc 1 5282 0
 9463 0516 0094     		str	r4, [sp]
 9464 0518 A648     		ldr	r0, .L582+72
 9465 051a 1A21     		mov	r1, #26
 9466 051c 9122     		mov	r2, #145
 9467 051e 2923     		mov	r3, #41
 9468 0520 FFF7FEFF 		bl	display_f1_text
 9469              	.LVL822:
5284:screens.c     **** 			display_f1_text( "Pres. Sw. Delay", TSMAX, 24, 51, FIXED );
 9470              		.loc 1 5284 0
 9471 0524 0094     		str	r4, [sp]
 9472 0526 A448     		ldr	r0, .L582+76
 9473 0528 1A21     		mov	r1, #26
 9474 052a 1822     		mov	r2, #24
 9475 052c 3323     		mov	r3, #51
 9476 052e FFF7FEFF 		bl	display_f1_text
 9477              	.LVL823:
5285:screens.c     **** 			display_f1_text( "s", TSMAX, 145, 51, FIXED );
 9478              		.loc 1 5285 0
 9479 0532 A24D     		ldr	r5, .L582+80
 9480 0534 0094     		str	r4, [sp]
 9481 0536 281C     		mov	r0, r5
 9482 0538 1A21     		mov	r1, #26
 9483 053a 9122     		mov	r2, #145
 9484 053c 3323     		mov	r3, #51
 9485 053e FFF7FEFF 		bl	display_f1_text
 9486              	.LVL824:
5287:screens.c     **** 			display_f1_text( "Door Closed", TSMAX, 24, 61, FIXED );
 9487              		.loc 1 5287 0
 9488 0542 0094     		str	r4, [sp]
 9489 0544 9E48     		ldr	r0, .L582+84
 9490 0546 1A21     		mov	r1, #26
 9491 0548 1822     		mov	r2, #24
 9492 054a 3D23     		mov	r3, #61
 9493 054c FFF7FEFF 		bl	display_f1_text
 9494              	.LVL825:
5288:screens.c     **** 			display_f1_text( "s", TSMAX, 145, 61, FIXED );
 9495              		.loc 1 5288 0
 9496 0550 0094     		str	r4, [sp]
 9497 0552 281C     		mov	r0, r5
 9498 0554 1A21     		mov	r1, #26
 9499 0556 9122     		mov	r2, #145
 9500 0558 3D23     		mov	r3, #61
 9501 055a FFF7FEFF 		bl	display_f1_text
 9502              	.LVL826:
5290:screens.c     **** 			display_f1_text( "Bale Size Factor", TSMAX, 24, 71, FIXED );
 9503              		.loc 1 5290 0
 9504 055e 0094     		str	r4, [sp]
 9505 0560 9848     		ldr	r0, .L582+88
 9506 0562 1A21     		mov	r1, #26
 9507 0564 1822     		mov	r2, #24
 9508 0566 4723     		mov	r3, #71
 9509 0568 FFF7FEFF 		bl	display_f1_text
 9510              	.LVL827:
5293:screens.c     **** 			display_f1_text( "(     V )", TSMAX, 106, 81, FIXED );
 9511              		.loc 1 5293 0
 9512 056c 0094     		str	r4, [sp]
 9513 056e 9648     		ldr	r0, .L582+92
 9514 0570 1A21     		mov	r1, #26
 9515 0572 6A22     		mov	r2, #106
 9516 0574 5123     		mov	r3, #81
 9517 0576 FFF7FEFF 		bl	display_f1_text
 9518              	.LVL828:
 9519 057a 40E0     		b	.L534
 9520              	.L533:
5297:screens.c     **** 			display_f1_text( "Fill Pot Range", TSMAX, 24, 21, FIXED );
 9521              		.loc 1 5297 0
 9522 057c 0024     		mov	r4, #0
 9523 057e 0094     		str	r4, [sp]
 9524 0580 9248     		ldr	r0, .L582+96
 9525 0582 1A21     		mov	r1, #26
 9526 0584 1822     		mov	r2, #24
 9527 0586 1523     		mov	r3, #21
 9528 0588 FFF7FEFF 		bl	display_f1_text
 9529              	.LVL829:
5298:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 21, FIXED );
 9530              		.loc 1 5298 0
 9531 058c 874D     		ldr	r5, .L582+64
 9532 058e 0094     		str	r4, [sp]
 9533 0590 281C     		mov	r0, r5
 9534 0592 1A21     		mov	r1, #26
 9535 0594 9122     		mov	r2, #145
 9536 0596 1523     		mov	r3, #21
 9537 0598 FFF7FEFF 		bl	display_f1_text
 9538              	.LVL830:
5300:screens.c     **** 			display_f1_text( "Fill Pot Ignore", TSMAX, 24, 31, FIXED );
 9539              		.loc 1 5300 0
 9540 059c 0094     		str	r4, [sp]
 9541 059e 8C48     		ldr	r0, .L582+100
 9542 05a0 1A21     		mov	r1, #26
 9543 05a2 1822     		mov	r2, #24
 9544 05a4 1F23     		mov	r3, #31
 9545 05a6 FFF7FEFF 		bl	display_f1_text
 9546              	.LVL831:
5301:screens.c     **** 			display_f1_text( "V", TSMAX, 145, 31, FIXED );
 9547              		.loc 1 5301 0
 9548 05aa 0094     		str	r4, [sp]
 9549 05ac 281C     		mov	r0, r5
 9550 05ae 1A21     		mov	r1, #26
 9551 05b0 9122     		mov	r2, #145
 9552 05b2 1F23     		mov	r3, #31
 9553 05b4 FFF7FEFF 		bl	display_f1_text
 9554              	.LVL832:
5303:screens.c     **** 			display_f1_text( "Engage Diameter", TSMAX, 24, 41, FIXED );
 9555              		.loc 1 5303 0
 9556 05b8 0094     		str	r4, [sp]
 9557 05ba 8648     		ldr	r0, .L582+104
 9558 05bc 1A21     		mov	r1, #26
 9559 05be 1822     		mov	r2, #24
 9560 05c0 2923     		mov	r3, #41
 9561 05c2 FFF7FEFF 		bl	display_f1_text
 9562              	.LVL833:
5304:screens.c     **** 			display_f1_text( "%", TSMAX, 145, 41, FIXED );
 9563              		.loc 1 5304 0
 9564 05c6 0094     		str	r4, [sp]
 9565 05c8 8348     		ldr	r0, .L582+108
 9566 05ca 1A21     		mov	r1, #26
 9567 05cc 9122     		mov	r2, #145
 9568 05ce 2923     		mov	r3, #41
 9569 05d0 FFF7FEFF 		bl	display_f1_text
 9570              	.LVL834:
5306:screens.c     **** 			display_f1_text( "Bale Indicator", TSMAX, 24, 51, FIXED );
 9571              		.loc 1 5306 0
 9572 05d4 0094     		str	r4, [sp]
 9573 05d6 8148     		ldr	r0, .L582+112
 9574 05d8 1A21     		mov	r1, #26
 9575 05da 1822     		mov	r2, #24
 9576 05dc 3323     		mov	r3, #51
 9577 05de FFF7FEFF 		bl	display_f1_text
 9578              	.LVL835:
5308:screens.c     **** 			display_f1_text( "Roller Delay", TSMAX, 24, 61, FIXED );
 9579              		.loc 1 5308 0
 9580 05e2 0094     		str	r4, [sp]
 9581 05e4 7E48     		ldr	r0, .L582+116
 9582 05e6 1A21     		mov	r1, #26
 9583 05e8 1822     		mov	r2, #24
 9584 05ea 3D23     		mov	r3, #61
 9585 05ec FFF7FEFF 		bl	display_f1_text
 9586              	.LVL836:
5309:screens.c     **** 			display_f1_text( "s", TSMAX, 145, 61, FIXED );
 9587              		.loc 1 5309 0
 9588 05f0 0094     		str	r4, [sp]
 9589 05f2 7248     		ldr	r0, .L582+80
 9590 05f4 1A21     		mov	r1, #26
 9591 05f6 9122     		mov	r2, #145
 9592 05f8 3D23     		mov	r3, #61
 9593 05fa FFF7FEFF 		bl	display_f1_text
 9594              	.LVL837:
 9595              	.L534:
5321:screens.c     **** 		if( page == 0 )
 9596              		.loc 1 5321 0
 9597 05fe 604B     		ldr	r3, .L582+20
 9598 0600 1B78     		ldrb	r3, [r3]
 9599 0602 002B     		cmp	r3, #0
 9600 0604 00D0     		beq	.LCB9212
 9601 0606 FFE0     		b	.L535	@long jump
 9602              	.LCB9212:
5323:screens.c     **** 			display_number( (float)pFac.pf.GW302_LubeAlarm,
 9603              		.loc 1 5323 0
 9604 0608 584A     		ldr	r2, .L582
 9605 060a 9146     		mov	r9, r2
 9606 060c 7E23     		mov	r3, #126
 9607 060e D05A     		ldrh	r0, [r2, r3]
 9608 0610 FFF7FEFF 		bl	__aeabi_ui2f
 9609              	.LVL838:
 9610 0614 8346     		mov	fp, r0
5324:screens.c     **** 					(float)PF_GW302_LubeAlarm[PF_MIN], (float)PF_GW302_LubeAlarm[PF_MAX],
 9611              		.loc 1 5324 0
 9612 0616 734C     		ldr	r4, .L582+120
5323:screens.c     **** 			display_number( (float)pFac.pf.GW302_LubeAlarm,
 9613              		.loc 1 5323 0
 9614 0618 6088     		ldrh	r0, [r4, #2]
 9615 061a FFF7FEFF 		bl	__aeabi_ui2f
 9616              	.LVL839:
 9617 061e 8246     		mov	sl, r0
 9618 0620 A088     		ldrh	r0, [r4, #4]
 9619 0622 FFF7FEFF 		bl	__aeabi_ui2f
 9620              	.LVL840:
 9621 0626 021C     		add	r2, r0, #0
 9622 0628 FE25     		mov	r5, #254
 9623 062a AD05     		lsl	r5, r5, #22
 9624 062c 0024     		mov	r4, #0
 9625 062e 0094     		str	r4, [sp]
 9626 0630 8E23     		mov	r3, #142
 9627 0632 9846     		mov	r8, r3
 9628 0634 0193     		str	r3, [sp, #4]
 9629 0636 1523     		mov	r3, #21
 9630 0638 0293     		str	r3, [sp, #8]
 9631 063a 1223     		mov	r3, #18
 9632 063c 0393     		str	r3, [sp, #12]
 9633 063e 1027     		mov	r7, #16
 9634 0640 0497     		str	r7, [sp, #16]
 9635 0642 694E     		ldr	r6, .L582+124
 9636 0644 0596     		str	r6, [sp, #20]
 9637 0646 0694     		str	r4, [sp, #24]
 9638 0648 0794     		str	r4, [sp, #28]
 9639 064a 5846     		mov	r0, fp
 9640 064c 5146     		mov	r1, sl
 9641 064e 2B1C     		add	r3, r5, #0
 9642 0650 FFF7FEFF 		bl	display_number
 9643              	.LVL841:
5326:screens.c     **** 			display_number( (float)pFac.pf.GW302_PresDeadband,
 9644              		.loc 1 5326 0
 9645 0654 8023     		mov	r3, #128
 9646 0656 4A46     		mov	r2, r9
 9647 0658 D058     		ldr	r0, [r2, r3]
 9648 065a 644B     		ldr	r3, .L582+128
 9649 065c 5968     		ldr	r1, [r3, #4]
 9650 065e 9A68     		ldr	r2, [r3, #8]
 9651 0660 0223     		mov	r3, #2
 9652 0662 0093     		str	r3, [sp]
 9653 0664 4346     		mov	r3, r8
 9654 0666 0193     		str	r3, [sp, #4]
 9655 0668 1F23     		mov	r3, #31
 9656 066a 0293     		str	r3, [sp, #8]
 9657 066c 1823     		mov	r3, #24
 9658 066e 9B46     		mov	fp, r3
 9659 0670 0393     		str	r3, [sp, #12]
 9660 0672 0497     		str	r7, [sp, #16]
 9661 0674 0596     		str	r6, [sp, #20]
 9662 0676 0694     		str	r4, [sp, #24]
 9663 0678 0794     		str	r4, [sp, #28]
 9664 067a 2B1C     		add	r3, r5, #0
 9665 067c FFF7FEFF 		bl	display_number
 9666              	.LVL842:
5329:screens.c     **** 			display_number( (float)pFac.pf.GW302_NetSpeed,
 9667              		.loc 1 5329 0
 9668 0680 8423     		mov	r3, #132
 9669 0682 4A46     		mov	r2, r9
 9670 0684 D058     		ldr	r0, [r2, r3]
 9671 0686 5A4B     		ldr	r3, .L582+132
 9672 0688 5968     		ldr	r1, [r3, #4]
 9673 068a 9A68     		ldr	r2, [r3, #8]
 9674 068c 0123     		mov	r3, #1
 9675 068e 9A46     		mov	sl, r3
 9676 0690 0093     		str	r3, [sp]
 9677 0692 4346     		mov	r3, r8
 9678 0694 0193     		str	r3, [sp, #4]
 9679 0696 2923     		mov	r3, #41
 9680 0698 0293     		str	r3, [sp, #8]
 9681 069a 5B46     		mov	r3, fp
 9682 069c 0393     		str	r3, [sp, #12]
 9683 069e 0497     		str	r7, [sp, #16]
 9684 06a0 0596     		str	r6, [sp, #20]
 9685 06a2 0694     		str	r4, [sp, #24]
 9686 06a4 0794     		str	r4, [sp, #28]
 9687 06a6 2B1C     		add	r3, r5, #0
 9688 06a8 FFF7FEFF 		bl	display_number
 9689              	.LVL843:
5332:screens.c     **** 			display_number( (float)pFac.pf.GW302_PresSwDelay,
 9690              		.loc 1 5332 0
 9691 06ac 4A46     		mov	r2, r9
 9692 06ae 8823     		mov	r3, #136
 9693 06b0 D058     		ldr	r0, [r2, r3]
 9694 06b2 504B     		ldr	r3, .L582+136
 9695 06b4 5968     		ldr	r1, [r3, #4]
 9696 06b6 9A68     		ldr	r2, [r3, #8]
 9697 06b8 5346     		mov	r3, sl
 9698 06ba 0093     		str	r3, [sp]
 9699 06bc 4346     		mov	r3, r8
 9700 06be 0193     		str	r3, [sp, #4]
 9701 06c0 3323     		mov	r3, #51
 9702 06c2 0293     		str	r3, [sp, #8]
 9703 06c4 1223     		mov	r3, #18
 9704 06c6 0393     		str	r3, [sp, #12]
 9705 06c8 0497     		str	r7, [sp, #16]
 9706 06ca 0596     		str	r6, [sp, #20]
 9707 06cc 0694     		str	r4, [sp, #24]
 9708 06ce 0794     		str	r4, [sp, #28]
 9709 06d0 2B1C     		add	r3, r5, #0
 9710 06d2 FFF7FEFF 		bl	display_number
 9711              	.LVL844:
5335:screens.c     **** 			display_number( (float)pFac.pf.GW302_DoorClosed,
 9712              		.loc 1 5335 0
 9713 06d6 8C23     		mov	r3, #140
 9714 06d8 4A46     		mov	r2, r9
 9715 06da D058     		ldr	r0, [r2, r3]
 9716 06dc 464B     		ldr	r3, .L582+140
 9717 06de 5968     		ldr	r1, [r3, #4]
 9718 06e0 9A68     		ldr	r2, [r3, #8]
 9719 06e2 5346     		mov	r3, sl
 9720 06e4 0093     		str	r3, [sp]
 9721 06e6 4346     		mov	r3, r8
 9722 06e8 0193     		str	r3, [sp, #4]
 9723 06ea 3D23     		mov	r3, #61
 9724 06ec 0293     		str	r3, [sp, #8]
 9725 06ee 1223     		mov	r3, #18
 9726 06f0 0393     		str	r3, [sp, #12]
 9727 06f2 0497     		str	r7, [sp, #16]
 9728 06f4 0596     		str	r6, [sp, #20]
 9729 06f6 0694     		str	r4, [sp, #24]
 9730 06f8 0794     		str	r4, [sp, #28]
 9731 06fa 2B1C     		add	r3, r5, #0
 9732 06fc FFF7FEFF 		bl	display_number
 9733              	.LVL845:
5338:screens.c     **** 			display_number( (float)pFac.pf.GW302_BaleSizeFactor,
 9734              		.loc 1 5338 0
 9735 0700 9023     		mov	r3, #144
 9736 0702 4A46     		mov	r2, r9
 9737 0704 D05C     		ldrb	r0, [r2, r3]
 9738 0706 FFF7FEFF 		bl	__aeabi_ui2f
 9739              	.LVL846:
 9740 070a 0990     		str	r0, [sp, #36]
5339:screens.c     **** 					(float)PF_GW302_BaleSizeFactor[PF_MIN], (float)PF_GW302_BaleSizeFactor[PF_MAX],
 9741              		.loc 1 5339 0
 9742 070c 3B4B     		ldr	r3, .L582+144
 9743 070e 9946     		mov	r9, r3
5338:screens.c     **** 			display_number( (float)pFac.pf.GW302_BaleSizeFactor,
 9744              		.loc 1 5338 0
 9745 0710 5878     		ldrb	r0, [r3, #1]
 9746 0712 FFF7FEFF 		bl	__aeabi_ui2f
 9747              	.LVL847:
 9748 0716 8246     		mov	sl, r0
 9749 0718 4B46     		mov	r3, r9
 9750 071a 9878     		ldrb	r0, [r3, #2]
 9751 071c FFF7FEFF 		bl	__aeabi_ui2f
 9752              	.LVL848:
 9753 0720 021C     		add	r2, r0, #0
 9754 0722 0094     		str	r4, [sp]
 9755 0724 4346     		mov	r3, r8
 9756 0726 0193     		str	r3, [sp, #4]
 9757 0728 4723     		mov	r3, #71
 9758 072a 0293     		str	r3, [sp, #8]
 9759 072c 1223     		mov	r3, #18
 9760 072e 0393     		str	r3, [sp, #12]
 9761 0730 0497     		str	r7, [sp, #16]
 9762 0732 0596     		str	r6, [sp, #20]
 9763 0734 0694     		str	r4, [sp, #24]
 9764 0736 0794     		str	r4, [sp, #28]
 9765 0738 0998     		ldr	r0, [sp, #36]
 9766 073a 5146     		mov	r1, sl
 9767 073c 2B1C     		add	r3, r5, #0
 9768 073e FFF7FEFF 		bl	display_number
 9769              	.LVL849:
5343:screens.c     **** 			display_number( DiaMaxVolts, 0.0, 9.99,  1.0, DP2, 136, 81, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
 9770              		.loc 1 5343 0
 9771 0742 2F4B     		ldr	r3, .L582+148
 9772 0744 1868     		ldr	r0, [r3]
 9773 0746 0222     		mov	r2, #2
 9774 0748 0092     		str	r2, [sp]
 9775 074a 8823     		mov	r3, #136
 9776 074c 0193     		str	r3, [sp, #4]
 9777 074e 5123     		mov	r3, #81
 9778 0750 0293     		str	r3, [sp, #8]
 9779 0752 5A46     		mov	r2, fp
 9780 0754 0392     		str	r2, [sp, #12]
 9781 0756 0497     		str	r7, [sp, #16]
 9782 0758 0596     		str	r6, [sp, #20]
 9783 075a 0694     		str	r4, [sp, #24]
 9784 075c 0794     		str	r4, [sp, #28]
 9785 075e 0021     		mov	r1, #0
 9786 0760 284A     		ldr	r2, .L582+152
 9787 0762 2B1C     		add	r3, r5, #0
 9788 0764 FFF7FEFF 		bl	display_number
 9789              	.LVL850:
 9790 0768 CFE0     		b	.L536
 9791              	.L583:
 9792 076a C046     		.align	2
 9793              	.L582:
 9794 076c 00000000 		.word	pFac
 9795 0770 00000000 		.word	PF_GW302_RollerDelay
 9796 0774 00000000 		.word	SavecalDelayWithinMenus
 9797 0778 00000000 		.word	valuechanged
 9798 077c 00000000 		.word	selection
 9799 0780 00000000 		.word	.LANCHOR4
 9800 0784 00000000 		.word	escape
 9801 0788 00000000 		.word	SavecalDelayOnMainDisplay
 9802 078c 00000000 		.word	swrel
 9803 0790 00000000 		.word	savecal
 9804 0794 D8000000 		.word	.LC162
 9805 0798 D4000000 		.word	.LC160
 9806 079c EC000000 		.word	.LC190
 9807 07a0 00000000 		.word	adm
 9808 07a4 E4020000 		.word	.LC373
 9809 07a8 F0020000 		.word	.LC375
 9810 07ac 00000000 		.word	.LC64
 9811 07b0 00030000 		.word	.LC378
 9812 07b4 0C030000 		.word	.LC380
 9813 07b8 10030000 		.word	.LC382
 9814 07bc D0000000 		.word	.LC149
 9815 07c0 20030000 		.word	.LC385
 9816 07c4 2C030000 		.word	.LC387
 9817 07c8 40030000 		.word	.LC389
 9818 07cc 4C030000 		.word	.LC391
 9819 07d0 5C030000 		.word	.LC393
 9820 07d4 6C030000 		.word	.LC395
 9821 07d8 64000000 		.word	.LC111
 9822 07dc 7C030000 		.word	.LC398
 9823 07e0 8C030000 		.word	.LC400
 9824 07e4 00000000 		.word	PF_GW302_LubeAlarm
 9825 07e8 00000000 		.word	RDSfnt1
 9826 07ec 00000000 		.word	PF_GW302_PresDeadband
 9827 07f0 00000000 		.word	PF_GW302_NetSpeed
 9828 07f4 00000000 		.word	PF_GW302_PresSwDelay
 9829 07f8 00000000 		.word	PF_GW302_DoorClosed
 9830 07fc 00000000 		.word	PF_GW302_BaleSizeFactor
 9831 0800 00000000 		.word	DiaMaxVolts
 9832 0804 0AD71F41 		.word	1092605706
 9833              	.L535:
5347:screens.c     **** 			display_number( (float)pFac.pf.GW302_FillPotRange,
 9834              		.loc 1 5347 0
 9835 0808 E94D     		ldr	r5, .L584
 9836 080a 9423     		mov	r3, #148
 9837 080c E858     		ldr	r0, [r5, r3]
 9838 080e E94B     		ldr	r3, .L584+4
 9839 0810 5968     		ldr	r1, [r3, #4]
 9840 0812 9A68     		ldr	r2, [r3, #8]
 9841 0814 FE26     		mov	r6, #254
 9842 0816 B605     		lsl	r6, r6, #22
 9843 0818 0223     		mov	r3, #2
 9844 081a 9B46     		mov	fp, r3
 9845 081c 0093     		str	r3, [sp]
 9846 081e 8E23     		mov	r3, #142
 9847 0820 9946     		mov	r9, r3
 9848 0822 0193     		str	r3, [sp, #4]
 9849 0824 1523     		mov	r3, #21
 9850 0826 0293     		str	r3, [sp, #8]
 9851 0828 1823     		mov	r3, #24
 9852 082a 9A46     		mov	sl, r3
 9853 082c 0393     		str	r3, [sp, #12]
 9854 082e 1023     		mov	r3, #16
 9855 0830 9846     		mov	r8, r3
 9856 0832 0493     		str	r3, [sp, #16]
 9857 0834 E04F     		ldr	r7, .L584+8
 9858 0836 0597     		str	r7, [sp, #20]
 9859 0838 0024     		mov	r4, #0
 9860 083a 0694     		str	r4, [sp, #24]
 9861 083c 0794     		str	r4, [sp, #28]
 9862 083e 331C     		add	r3, r6, #0
 9863 0840 FFF7FEFF 		bl	display_number
 9864              	.LVL851:
5350:screens.c     **** 			display_number( (float)pFac.pf.GW302_FillPotIgnore,
 9865              		.loc 1 5350 0
 9866 0844 9823     		mov	r3, #152
 9867 0846 E858     		ldr	r0, [r5, r3]
 9868 0848 DC4B     		ldr	r3, .L584+12
 9869 084a 5968     		ldr	r1, [r3, #4]
 9870 084c 9A68     		ldr	r2, [r3, #8]
 9871 084e 5B46     		mov	r3, fp
 9872 0850 0093     		str	r3, [sp]
 9873 0852 4B46     		mov	r3, r9
 9874 0854 0193     		str	r3, [sp, #4]
 9875 0856 1F23     		mov	r3, #31
 9876 0858 0293     		str	r3, [sp, #8]
 9877 085a 5346     		mov	r3, sl
 9878 085c 0393     		str	r3, [sp, #12]
 9879 085e 4346     		mov	r3, r8
 9880 0860 0493     		str	r3, [sp, #16]
 9881 0862 0597     		str	r7, [sp, #20]
 9882 0864 0694     		str	r4, [sp, #24]
 9883 0866 0794     		str	r4, [sp, #28]
 9884 0868 331C     		add	r3, r6, #0
 9885 086a FFF7FEFF 		bl	display_number
 9886              	.LVL852:
5353:screens.c     **** 			display_number( (float)pFac.pf.GW302_EngageDiameter,
 9887              		.loc 1 5353 0
 9888 086e 9C23     		mov	r3, #156
 9889 0870 E85C     		ldrb	r0, [r5, r3]
 9890 0872 FFF7FEFF 		bl	__aeabi_ui2f
 9891              	.LVL853:
 9892 0876 8346     		mov	fp, r0
5354:screens.c     **** 					(float)PF_GW302_EngageDiameter[PF_MIN], (float)PF_GW302_EngageDiameter[PF_MAX],
 9893              		.loc 1 5354 0
 9894 0878 D14A     		ldr	r2, .L584+16
 9895 087a 9246     		mov	sl, r2
5353:screens.c     **** 			display_number( (float)pFac.pf.GW302_EngageDiameter,
 9896              		.loc 1 5353 0
 9897 087c 5078     		ldrb	r0, [r2, #1]
 9898 087e FFF7FEFF 		bl	__aeabi_ui2f
 9899              	.LVL854:
 9900 0882 0990     		str	r0, [sp, #36]
 9901 0884 5246     		mov	r2, sl
 9902 0886 9078     		ldrb	r0, [r2, #2]
 9903 0888 FFF7FEFF 		bl	__aeabi_ui2f
 9904              	.LVL855:
 9905 088c 021C     		add	r2, r0, #0
 9906 088e 0094     		str	r4, [sp]
 9907 0890 4B46     		mov	r3, r9
 9908 0892 0193     		str	r3, [sp, #4]
 9909 0894 2923     		mov	r3, #41
 9910 0896 0293     		str	r3, [sp, #8]
 9911 0898 1223     		mov	r3, #18
 9912 089a 0393     		str	r3, [sp, #12]
 9913 089c 4346     		mov	r3, r8
 9914 089e 0493     		str	r3, [sp, #16]
 9915 08a0 0597     		str	r7, [sp, #20]
 9916 08a2 0694     		str	r4, [sp, #24]
 9917 08a4 0794     		str	r4, [sp, #28]
 9918 08a6 5846     		mov	r0, fp
 9919 08a8 0999     		ldr	r1, [sp, #36]
 9920 08aa 331C     		add	r3, r6, #0
 9921 08ac FFF7FEFF 		bl	display_number
 9922              	.LVL856:
5357:screens.c     **** 			if( pFac.pf.GW302_BaleIndicator == BI_STEER )
 9923              		.loc 1 5357 0
 9924 08b0 9D23     		mov	r3, #157
 9925 08b2 EB5C     		ldrb	r3, [r5, r3]
 9926 08b4 002B     		cmp	r3, #0
 9927 08b6 07D1     		bne	.L537
5358:screens.c     **** 				display_f1_text( "Steer", TSMAX, 125, 51, FIXED );
 9928              		.loc 1 5358 0
 9929 08b8 0093     		str	r3, [sp]
 9930 08ba C248     		ldr	r0, .L584+20
 9931 08bc 1A21     		mov	r1, #26
 9932 08be 7D22     		mov	r2, #125
 9933 08c0 3323     		mov	r3, #51
 9934 08c2 FFF7FEFF 		bl	display_f1_text
 9935              	.LVL857:
 9936 08c6 07E0     		b	.L538
 9937              	.L537:
5360:screens.c     **** 				display_f1_text( " Fill", TSMAX, 125, 51, FIXED );
 9938              		.loc 1 5360 0
 9939 08c8 0023     		mov	r3, #0
 9940 08ca 0093     		str	r3, [sp]
 9941 08cc BE48     		ldr	r0, .L584+24
 9942 08ce 1A21     		mov	r1, #26
 9943 08d0 7D22     		mov	r2, #125
 9944 08d2 3323     		mov	r3, #51
 9945 08d4 FFF7FEFF 		bl	display_f1_text
 9946              	.LVL858:
 9947              	.L538:
5362:screens.c     **** 			display_number( (float)pFac.pf.GW302_RollerDelay,
 9948              		.loc 1 5362 0
 9949 08d8 A023     		mov	r3, #160
 9950 08da B54A     		ldr	r2, .L584
 9951 08dc D058     		ldr	r0, [r2, r3]
 9952 08de BB4B     		ldr	r3, .L584+28
 9953 08e0 5968     		ldr	r1, [r3, #4]
 9954 08e2 9A68     		ldr	r2, [r3, #8]
 9955 08e4 0123     		mov	r3, #1
 9956 08e6 0093     		str	r3, [sp]
 9957 08e8 8E23     		mov	r3, #142
 9958 08ea 0193     		str	r3, [sp, #4]
 9959 08ec 3D23     		mov	r3, #61
 9960 08ee 0293     		str	r3, [sp, #8]
 9961 08f0 1223     		mov	r3, #18
 9962 08f2 0393     		str	r3, [sp, #12]
 9963 08f4 1023     		mov	r3, #16
 9964 08f6 0493     		str	r3, [sp, #16]
 9965 08f8 AF4B     		ldr	r3, .L584+8
 9966 08fa 0593     		str	r3, [sp, #20]
 9967 08fc 0023     		mov	r3, #0
 9968 08fe 0693     		str	r3, [sp, #24]
 9969 0900 0793     		str	r3, [sp, #28]
 9970 0902 FE23     		mov	r3, #254
 9971 0904 9B05     		lsl	r3, r3, #22
 9972 0906 FFF7FEFF 		bl	display_number
 9973              	.LVL859:
 9974              	.L536:
5373:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs
 9975              		.loc 1 5373 0
 9976 090a 7E23     		mov	r3, #126
 9977 090c 0093     		str	r3, [sp]
 9978 090e 4023     		mov	r3, #64
 9979 0910 0193     		str	r3, [sp, #4]
 9980 0912 AF48     		ldr	r0, .L584+32
 9981 0914 0121     		mov	r1, #1
 9982 0916 6622     		mov	r2, #102
 9983 0918 9E23     		mov	r3, #158
 9984 091a FFF7FEFF 		bl	draw_box
 9985              	.LVL860:
5375:screens.c     **** 		if( page == 0 )
 9986              		.loc 1 5375 0
 9987 091e AD4B     		ldr	r3, .L584+36
 9988 0920 1B78     		ldrb	r3, [r3]
 9989 0922 002B     		cmp	r3, #0
 9990 0924 00D0     		beq	.LCB9590
 9991 0926 A9E0     		b	.L539	@long jump
 9992              	.LCB9590:
5377:screens.c     **** 			switch( selection )
 9993              		.loc 1 5377 0
 9994 0928 AB4B     		ldr	r3, .L584+40
 9995 092a 1B78     		ldrb	r3, [r3]
 9996 092c 042B     		cmp	r3, #4
 9997 092e 02D8     		bhi	.L544
 9998 0930 002B     		cmp	r3, #0
 9999 0932 39D1     		bne	.L542
 10000 0934 03E0     		b	.L578
 10001              	.L544:
 10002 0936 052B     		cmp	r3, #5
 10003 0938 00D0     		beq	.LCB9608
 10004 093a 71E1     		b	.L540	@long jump
 10005              	.LCB9608:
 10006 093c 69E0     		b	.L543
 10007              	.L578:
5380:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 10008              		.loc 1 5380 0
 10009 093e A44C     		ldr	r4, .L584+32
 10010 0940 0225     		mov	r5, #2
 10011 0942 0095     		str	r5, [sp]
 10012 0944 201C     		mov	r0, r4
 10013 0946 A549     		ldr	r1, .L584+44
 10014 0948 0022     		mov	r2, #0
 10015 094a 6B23     		mov	r3, #107
 10016 094c FFF7FEFF 		bl	write_bitmap
 10017              	.LVL861:
5381:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 10018              		.loc 1 5381 0
 10019 0950 0095     		str	r5, [sp]
 10020 0952 201C     		mov	r0, r4
 10021 0954 A249     		ldr	r1, .L584+48
 10022 0956 1F22     		mov	r2, #31
 10023 0958 6B23     		mov	r3, #107
 10024 095a FFF7FEFF 		bl	write_bitmap
 10025              	.LVL862:
5382:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 10026              		.loc 1 5382 0
 10027 095e 0095     		str	r5, [sp]
 10028 0960 201C     		mov	r0, r4
 10029 0962 A049     		ldr	r1, .L584+52
 10030 0964 3E22     		mov	r2, #62
 10031 0966 6623     		mov	r3, #102
 10032 0968 FFF7FEFF 		bl	write_bitmap
 10033              	.LVL863:
5383:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 10034              		.loc 1 5383 0
 10035 096c 0095     		str	r5, [sp]
 10036 096e 201C     		mov	r0, r4
 10037 0970 9D49     		ldr	r1, .L584+56
 10038 0972 6322     		mov	r2, #99
 10039 0974 6B23     		mov	r3, #107
 10040 0976 FFF7FEFF 		bl	write_bitmap
 10041              	.LVL864:
5384:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10042              		.loc 1 5384 0
 10043 097a 964B     		ldr	r3, .L584+36
 10044 097c 1B78     		ldrb	r3, [r3]
 10045 097e 002B     		cmp	r3, #0
 10046 0980 01D1     		bne	.L557
 10047 0982 9A48     		ldr	r0, .L584+60
 10048 0984 00E0     		b	.L545
 10049              	.L557:
 10050 0986 9A48     		ldr	r0, .L584+64
 10051              	.L545:
5384:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10052              		.loc 1 5384 0 is_stmt 0 discriminator 3
 10053 0988 0023     		mov	r3, #0
 10054 098a 0093     		str	r3, [sp]
 10055 098c 1A21     		mov	r1, #26
 10056 098e 7622     		mov	r2, #118
 10057 0990 7123     		mov	r3, #113
 10058 0992 FFF7FEFF 		bl	display_f1_text
 10059              	.LVL865:
5385:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 10060              		.loc 1 5385 0 is_stmt 1 discriminator 3
 10061 0996 0223     		mov	r3, #2
 10062 0998 0093     		str	r3, [sp]
 10063 099a 8D48     		ldr	r0, .L584+32
 10064 099c 9549     		ldr	r1, .L584+68
 10065 099e 8222     		mov	r2, #130
 10066 09a0 6B23     		mov	r3, #107
 10067 09a2 FFF7FEFF 		bl	write_bitmap
 10068              	.LVL866:
5386:screens.c     **** 				break;
 10069              		.loc 1 5386 0 discriminator 3
 10070 09a6 3BE1     		b	.L540
 10071              	.L542:
5392:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 10072              		.loc 1 5392 0
 10073 09a8 894C     		ldr	r4, .L584+32
 10074 09aa 0225     		mov	r5, #2
 10075 09ac 0095     		str	r5, [sp]
 10076 09ae 201C     		mov	r0, r4
 10077 09b0 8A49     		ldr	r1, .L584+44
 10078 09b2 0022     		mov	r2, #0
 10079 09b4 6B23     		mov	r3, #107
 10080 09b6 FFF7FEFF 		bl	write_bitmap
 10081              	.LVL867:
5393:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 10082              		.loc 1 5393 0
 10083 09ba 0095     		str	r5, [sp]
 10084 09bc 201C     		mov	r0, r4
 10085 09be 8849     		ldr	r1, .L584+48
 10086 09c0 1F22     		mov	r2, #31
 10087 09c2 6B23     		mov	r3, #107
 10088 09c4 FFF7FEFF 		bl	write_bitmap
 10089              	.LVL868:
5394:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 10090              		.loc 1 5394 0
 10091 09c8 0095     		str	r5, [sp]
 10092 09ca 201C     		mov	r0, r4
 10093 09cc 8A49     		ldr	r1, .L584+72
 10094 09ce 3E22     		mov	r2, #62
 10095 09d0 6623     		mov	r3, #102
 10096 09d2 FFF7FEFF 		bl	write_bitmap
 10097              	.LVL869:
5395:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 10098              		.loc 1 5395 0
 10099 09d6 0095     		str	r5, [sp]
 10100 09d8 201C     		mov	r0, r4
 10101 09da 8349     		ldr	r1, .L584+56
 10102 09dc 6322     		mov	r2, #99
 10103 09de 6B23     		mov	r3, #107
 10104 09e0 FFF7FEFF 		bl	write_bitmap
 10105              	.LVL870:
5396:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10106              		.loc 1 5396 0
 10107 09e4 7B4B     		ldr	r3, .L584+36
 10108 09e6 1B78     		ldrb	r3, [r3]
 10109 09e8 002B     		cmp	r3, #0
 10110 09ea 01D1     		bne	.L558
 10111 09ec 7F48     		ldr	r0, .L584+60
 10112 09ee 00E0     		b	.L546
 10113              	.L558:
 10114 09f0 7F48     		ldr	r0, .L584+64
 10115              	.L546:
5396:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10116              		.loc 1 5396 0 is_stmt 0 discriminator 3
 10117 09f2 0023     		mov	r3, #0
 10118 09f4 0093     		str	r3, [sp]
 10119 09f6 1A21     		mov	r1, #26
 10120 09f8 7622     		mov	r2, #118
 10121 09fa 7123     		mov	r3, #113
 10122 09fc FFF7FEFF 		bl	display_f1_text
 10123              	.LVL871:
5397:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 10124              		.loc 1 5397 0 is_stmt 1 discriminator 3
 10125 0a00 0223     		mov	r3, #2
 10126 0a02 0093     		str	r3, [sp]
 10127 0a04 7248     		ldr	r0, .L584+32
 10128 0a06 7B49     		ldr	r1, .L584+68
 10129 0a08 8222     		mov	r2, #130
 10130 0a0a 6B23     		mov	r3, #107
 10131 0a0c FFF7FEFF 		bl	write_bitmap
 10132              	.LVL872:
5398:screens.c     **** 				break;
 10133              		.loc 1 5398 0 discriminator 3
 10134 0a10 06E1     		b	.L540
 10135              	.L543:
5401:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 10136              		.loc 1 5401 0
 10137 0a12 6F4C     		ldr	r4, .L584+32
 10138 0a14 0225     		mov	r5, #2
 10139 0a16 0095     		str	r5, [sp]
 10140 0a18 201C     		mov	r0, r4
 10141 0a1a 7049     		ldr	r1, .L584+44
 10142 0a1c 0022     		mov	r2, #0
 10143 0a1e 6B23     		mov	r3, #107
 10144 0a20 FFF7FEFF 		bl	write_bitmap
 10145              	.LVL873:
5402:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 10146              		.loc 1 5402 0
 10147 0a24 0095     		str	r5, [sp]
 10148 0a26 201C     		mov	r0, r4
 10149 0a28 6D49     		ldr	r1, .L584+48
 10150 0a2a 1F22     		mov	r2, #31
 10151 0a2c 6B23     		mov	r3, #107
 10152 0a2e FFF7FEFF 		bl	write_bitmap
 10153              	.LVL874:
5403:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 10154              		.loc 1 5403 0
 10155 0a32 0095     		str	r5, [sp]
 10156 0a34 201C     		mov	r0, r4
 10157 0a36 7149     		ldr	r1, .L584+76
 10158 0a38 3E22     		mov	r2, #62
 10159 0a3a 6623     		mov	r3, #102
 10160 0a3c FFF7FEFF 		bl	write_bitmap
 10161              	.LVL875:
5404:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 10162              		.loc 1 5404 0
 10163 0a40 0095     		str	r5, [sp]
 10164 0a42 201C     		mov	r0, r4
 10165 0a44 6849     		ldr	r1, .L584+56
 10166 0a46 6322     		mov	r2, #99
 10167 0a48 6B23     		mov	r3, #107
 10168 0a4a FFF7FEFF 		bl	write_bitmap
 10169              	.LVL876:
5405:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10170              		.loc 1 5405 0
 10171 0a4e 614B     		ldr	r3, .L584+36
 10172 0a50 1B78     		ldrb	r3, [r3]
 10173 0a52 002B     		cmp	r3, #0
 10174 0a54 01D1     		bne	.L559
 10175 0a56 6548     		ldr	r0, .L584+60
 10176 0a58 00E0     		b	.L547
 10177              	.L559:
 10178 0a5a 6548     		ldr	r0, .L584+64
 10179              	.L547:
5405:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10180              		.loc 1 5405 0 is_stmt 0 discriminator 3
 10181 0a5c 0023     		mov	r3, #0
 10182 0a5e 0093     		str	r3, [sp]
 10183 0a60 1A21     		mov	r1, #26
 10184 0a62 7622     		mov	r2, #118
 10185 0a64 7123     		mov	r3, #113
 10186 0a66 FFF7FEFF 		bl	display_f1_text
 10187              	.LVL877:
5406:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 10188              		.loc 1 5406 0 is_stmt 1 discriminator 3
 10189 0a6a 0223     		mov	r3, #2
 10190 0a6c 0093     		str	r3, [sp]
 10191 0a6e 5848     		ldr	r0, .L584+32
 10192 0a70 6049     		ldr	r1, .L584+68
 10193 0a72 8222     		mov	r2, #130
 10194 0a74 6B23     		mov	r3, #107
 10195 0a76 FFF7FEFF 		bl	write_bitmap
 10196              	.LVL878:
5407:screens.c     **** 				break;
 10197              		.loc 1 5407 0 discriminator 3
 10198 0a7a D1E0     		b	.L540
 10199              	.L539:
5412:screens.c     **** 			switch( selection ) 
 10200              		.loc 1 5412 0
 10201 0a7c 564B     		ldr	r3, .L584+40
 10202 0a7e 1B78     		ldrb	r3, [r3]
 10203 0a80 032B     		cmp	r3, #3
 10204 0a82 02D8     		bhi	.L551
 10205 0a84 002B     		cmp	r3, #0
 10206 0a86 39D1     		bne	.L549
 10207 0a88 03E0     		b	.L579
 10208              	.L551:
 10209 0a8a 042B     		cmp	r3, #4
 10210 0a8c 00D0     		beq	.LCB9813
 10211 0a8e C7E0     		b	.L540	@long jump
 10212              	.LCB9813:
 10213 0a90 69E0     		b	.L550
 10214              	.L579:
5415:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 10215              		.loc 1 5415 0
 10216 0a92 4F4C     		ldr	r4, .L584+32
 10217 0a94 0225     		mov	r5, #2
 10218 0a96 0095     		str	r5, [sp]
 10219 0a98 201C     		mov	r0, r4
 10220 0a9a 5049     		ldr	r1, .L584+44
 10221 0a9c 0022     		mov	r2, #0
 10222 0a9e 6B23     		mov	r3, #107
 10223 0aa0 FFF7FEFF 		bl	write_bitmap
 10224              	.LVL879:
5416:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 10225              		.loc 1 5416 0
 10226 0aa4 0095     		str	r5, [sp]
 10227 0aa6 201C     		mov	r0, r4
 10228 0aa8 4D49     		ldr	r1, .L584+48
 10229 0aaa 1F22     		mov	r2, #31
 10230 0aac 6B23     		mov	r3, #107
 10231 0aae FFF7FEFF 		bl	write_bitmap
 10232              	.LVL880:
5417:screens.c     **** 				write_bitmap( adm, TABNAV_DL,  62, 102, OR );    // NAVIGATION: Down Left
 10233              		.loc 1 5417 0
 10234 0ab2 0095     		str	r5, [sp]
 10235 0ab4 201C     		mov	r0, r4
 10236 0ab6 4B49     		ldr	r1, .L584+52
 10237 0ab8 3E22     		mov	r2, #62
 10238 0aba 6623     		mov	r3, #102
 10239 0abc FFF7FEFF 		bl	write_bitmap
 10240              	.LVL881:
5418:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 10241              		.loc 1 5418 0
 10242 0ac0 0095     		str	r5, [sp]
 10243 0ac2 201C     		mov	r0, r4
 10244 0ac4 4849     		ldr	r1, .L584+56
 10245 0ac6 6322     		mov	r2, #99
 10246 0ac8 6B23     		mov	r3, #107
 10247 0aca FFF7FEFF 		bl	write_bitmap
 10248              	.LVL882:
5419:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10249              		.loc 1 5419 0
 10250 0ace 414B     		ldr	r3, .L584+36
 10251 0ad0 1B78     		ldrb	r3, [r3]
 10252 0ad2 002B     		cmp	r3, #0
 10253 0ad4 01D1     		bne	.L560
 10254 0ad6 4548     		ldr	r0, .L584+60
 10255 0ad8 00E0     		b	.L552
 10256              	.L560:
 10257 0ada 4548     		ldr	r0, .L584+64
 10258              	.L552:
5419:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10259              		.loc 1 5419 0 is_stmt 0 discriminator 3
 10260 0adc 0023     		mov	r3, #0
 10261 0ade 0093     		str	r3, [sp]
 10262 0ae0 1A21     		mov	r1, #26
 10263 0ae2 7622     		mov	r2, #118
 10264 0ae4 7123     		mov	r3, #113
 10265 0ae6 FFF7FEFF 		bl	display_f1_text
 10266              	.LVL883:
5420:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 10267              		.loc 1 5420 0 is_stmt 1 discriminator 3
 10268 0aea 0223     		mov	r3, #2
 10269 0aec 0093     		str	r3, [sp]
 10270 0aee 3848     		ldr	r0, .L584+32
 10271 0af0 4049     		ldr	r1, .L584+68
 10272 0af2 8222     		mov	r2, #130
 10273 0af4 6B23     		mov	r3, #107
 10274 0af6 FFF7FEFF 		bl	write_bitmap
 10275              	.LVL884:
5421:screens.c     **** 				break;
 10276              		.loc 1 5421 0 discriminator 3
 10277 0afa 91E0     		b	.L540
 10278              	.L549:
5426:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 10279              		.loc 1 5426 0
 10280 0afc 344C     		ldr	r4, .L584+32
 10281 0afe 0225     		mov	r5, #2
 10282 0b00 0095     		str	r5, [sp]
 10283 0b02 201C     		mov	r0, r4
 10284 0b04 3549     		ldr	r1, .L584+44
 10285 0b06 0022     		mov	r2, #0
 10286 0b08 6B23     		mov	r3, #107
 10287 0b0a FFF7FEFF 		bl	write_bitmap
 10288              	.LVL885:
5427:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 10289              		.loc 1 5427 0
 10290 0b0e 0095     		str	r5, [sp]
 10291 0b10 201C     		mov	r0, r4
 10292 0b12 3349     		ldr	r1, .L584+48
 10293 0b14 1F22     		mov	r2, #31
 10294 0b16 6B23     		mov	r3, #107
 10295 0b18 FFF7FEFF 		bl	write_bitmap
 10296              	.LVL886:
5428:screens.c     **** 				write_bitmap( adm, TABNAV_UDL, 62, 102, OR );    // NAVIGATION: Up Down Left
 10297              		.loc 1 5428 0
 10298 0b1c 0095     		str	r5, [sp]
 10299 0b1e 201C     		mov	r0, r4
 10300 0b20 3549     		ldr	r1, .L584+72
 10301 0b22 3E22     		mov	r2, #62
 10302 0b24 6623     		mov	r3, #102
 10303 0b26 FFF7FEFF 		bl	write_bitmap
 10304              	.LVL887:
5429:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 10305              		.loc 1 5429 0
 10306 0b2a 0095     		str	r5, [sp]
 10307 0b2c 201C     		mov	r0, r4
 10308 0b2e 2E49     		ldr	r1, .L584+56
 10309 0b30 6322     		mov	r2, #99
 10310 0b32 6B23     		mov	r3, #107
 10311 0b34 FFF7FEFF 		bl	write_bitmap
 10312              	.LVL888:
5430:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10313              		.loc 1 5430 0
 10314 0b38 264B     		ldr	r3, .L584+36
 10315 0b3a 1B78     		ldrb	r3, [r3]
 10316 0b3c 002B     		cmp	r3, #0
 10317 0b3e 01D1     		bne	.L561
 10318 0b40 2A48     		ldr	r0, .L584+60
 10319 0b42 00E0     		b	.L553
 10320              	.L561:
 10321 0b44 2A48     		ldr	r0, .L584+64
 10322              	.L553:
5430:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10323              		.loc 1 5430 0 is_stmt 0 discriminator 3
 10324 0b46 0023     		mov	r3, #0
 10325 0b48 0093     		str	r3, [sp]
 10326 0b4a 1A21     		mov	r1, #26
 10327 0b4c 7622     		mov	r2, #118
 10328 0b4e 7123     		mov	r3, #113
 10329 0b50 FFF7FEFF 		bl	display_f1_text
 10330              	.LVL889:
5431:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 10331              		.loc 1 5431 0 is_stmt 1 discriminator 3
 10332 0b54 0223     		mov	r3, #2
 10333 0b56 0093     		str	r3, [sp]
 10334 0b58 1D48     		ldr	r0, .L584+32
 10335 0b5a 2649     		ldr	r1, .L584+68
 10336 0b5c 8222     		mov	r2, #130
 10337 0b5e 6B23     		mov	r3, #107
 10338 0b60 FFF7FEFF 		bl	write_bitmap
 10339              	.LVL890:
5432:screens.c     **** 				break;
 10340              		.loc 1 5432 0 discriminator 3
 10341 0b64 5CE0     		b	.L540
 10342              	.L550:
5435:screens.c     **** 				write_bitmap( adm, TABMINUS,    0, 107, OR );    // -
 10343              		.loc 1 5435 0
 10344 0b66 1A4C     		ldr	r4, .L584+32
 10345 0b68 0225     		mov	r5, #2
 10346 0b6a 0095     		str	r5, [sp]
 10347 0b6c 201C     		mov	r0, r4
 10348 0b6e 1B49     		ldr	r1, .L584+44
 10349 0b70 0022     		mov	r2, #0
 10350 0b72 6B23     		mov	r3, #107
 10351 0b74 FFF7FEFF 		bl	write_bitmap
 10352              	.LVL891:
5436:screens.c     **** 				write_bitmap( adm, TABPLUS,    31, 107, OR );    // +
 10353              		.loc 1 5436 0
 10354 0b78 0095     		str	r5, [sp]
 10355 0b7a 201C     		mov	r0, r4
 10356 0b7c 1849     		ldr	r1, .L584+48
 10357 0b7e 1F22     		mov	r2, #31
 10358 0b80 6B23     		mov	r3, #107
 10359 0b82 FFF7FEFF 		bl	write_bitmap
 10360              	.LVL892:
5437:screens.c     **** 				write_bitmap( adm, TABNAV_UL,  62, 102, OR );    // NAVIGATION: Up Left
 10361              		.loc 1 5437 0
 10362 0b86 0095     		str	r5, [sp]
 10363 0b88 201C     		mov	r0, r4
 10364 0b8a 1C49     		ldr	r1, .L584+76
 10365 0b8c 3E22     		mov	r2, #62
 10366 0b8e 6623     		mov	r3, #102
 10367 0b90 FFF7FEFF 		bl	write_bitmap
 10368              	.LVL893:
5438:screens.c     **** 				write_bitmap( adm, TAB_PAGE,   99, 107, OR );    // PAGE
 10369              		.loc 1 5438 0
 10370 0b94 0095     		str	r5, [sp]
 10371 0b96 201C     		mov	r0, r4
 10372 0b98 1349     		ldr	r1, .L584+56
 10373 0b9a 6322     		mov	r2, #99
 10374 0b9c 6B23     		mov	r3, #107
 10375 0b9e FFF7FEFF 		bl	write_bitmap
 10376              	.LVL894:
5439:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10377              		.loc 1 5439 0
 10378 0ba2 0C4B     		ldr	r3, .L584+36
 10379 0ba4 1B78     		ldrb	r3, [r3]
 10380 0ba6 002B     		cmp	r3, #0
 10381 0ba8 2AD1     		bne	.L562
 10382 0baa 1048     		ldr	r0, .L584+60
 10383 0bac 29E0     		b	.L554
 10384              	.L585:
 10385 0bae C046     		.align	2
 10386              	.L584:
 10387 0bb0 00000000 		.word	pFac
 10388 0bb4 00000000 		.word	PF_GW302_FillPotRange
 10389 0bb8 00000000 		.word	RDSfnt1
 10390 0bbc 00000000 		.word	PF_GW302_FillPotIgnore
 10391 0bc0 00000000 		.word	PF_GW302_EngageDiameter
 10392 0bc4 9C030000 		.word	.LC404
 10393 0bc8 A4030000 		.word	.LC406
 10394 0bcc 00000000 		.word	PF_GW302_RollerDelay
 10395 0bd0 00000000 		.word	adm
 10396 0bd4 00000000 		.word	.LANCHOR4
 10397 0bd8 00000000 		.word	selection
 10398 0bdc 00000000 		.word	TABMINUS
 10399 0be0 00000000 		.word	TABPLUS
 10400 0be4 00000000 		.word	TABNAV_DL
 10401 0be8 00000000 		.word	TAB_PAGE
 10402 0bec D8000000 		.word	.LC162
 10403 0bf0 D4000000 		.word	.LC160
 10404 0bf4 00000000 		.word	TABESC
 10405 0bf8 00000000 		.word	TABNAV_UDL
 10406 0bfc 00000000 		.word	TABNAV_UL
 10407              	.L562:
 10408 0c00 1948     		ldr	r0, .L586
 10409              	.L554:
5439:screens.c     **** 				display_f1_text( (page==0)? "2":"1", TSMAX, 99+19, 113, FIXED );
 10410              		.loc 1 5439 0 is_stmt 0 discriminator 3
 10411 0c02 0023     		mov	r3, #0
 10412 0c04 0093     		str	r3, [sp]
 10413 0c06 1A21     		mov	r1, #26
 10414 0c08 7622     		mov	r2, #118
 10415 0c0a 7123     		mov	r3, #113
 10416 0c0c FFF7FEFF 		bl	display_f1_text
 10417              	.LVL895:
5440:screens.c     **** 				write_bitmap( adm, TABESC,    130, 107, OR );    // ESC
 10418              		.loc 1 5440 0 is_stmt 1 discriminator 3
 10419 0c10 0223     		mov	r3, #2
 10420 0c12 0093     		str	r3, [sp]
 10421 0c14 1548     		ldr	r0, .L586+4
 10422 0c16 1649     		ldr	r1, .L586+8
 10423 0c18 8222     		mov	r2, #130
 10424 0c1a 6B23     		mov	r3, #107
 10425 0c1c FFF7FEFF 		bl	write_bitmap
 10426              	.LVL896:
 10427              	.L540:
5446:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
 10428              		.loc 1 5446 0
 10429 0c20 124C     		ldr	r4, .L586+4
 10430 0c22 6423     		mov	r3, #100
 10431 0c24 0093     		str	r3, [sp]
 10432 0c26 4023     		mov	r3, #64
 10433 0c28 0193     		str	r3, [sp, #4]
 10434 0c2a 201C     		mov	r0, r4
 10435 0c2c 1021     		mov	r1, #16
 10436 0c2e 1522     		mov	r2, #21
 10437 0c30 1423     		mov	r3, #20
 10438 0c32 FFF7FEFF 		bl	draw_box
 10439              	.LVL897:
5447:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
 10440              		.loc 1 5447 0
 10441 0c36 0F4B     		ldr	r3, .L586+12
 10442 0c38 1B78     		ldrb	r3, [r3]
 10443 0c3a 9A00     		lsl	r2, r3, #2
 10444 0c3c D318     		add	r3, r2, r3
 10445 0c3e 5B06     		lsl	r3, r3, #25
 10446 0c40 A822     		mov	r2, #168
 10447 0c42 5205     		lsl	r2, r2, #21
 10448 0c44 9B18     		add	r3, r3, r2
 10449 0c46 1B0E     		lsr	r3, r3, #24
 10450 0c48 0222     		mov	r2, #2
 10451 0c4a 0092     		str	r2, [sp]
 10452 0c4c 201C     		mov	r0, r4
 10453 0c4e 0A49     		ldr	r1, .L586+16
 10454 0c50 1022     		mov	r2, #16
 10455 0c52 FFF7FEFF 		bl	write_bitmap
 10456              	.LVL898:
5453:screens.c     **** }
 10457              		.loc 1 5453 0
 10458 0c56 0BB0     		add	sp, sp, #44
 10459              		@ sp needed for prologue
 10460 0c58 3CBC     		pop	{r2, r3, r4, r5}
 10461 0c5a 9046     		mov	r8, r2
 10462 0c5c 9946     		mov	r9, r3
 10463 0c5e A246     		mov	sl, r4
 10464 0c60 AB46     		mov	fp, r5
 10465 0c62 F0BC     		pop	{r4, r5, r6, r7}
 10466 0c64 01BC     		pop	{r0}
 10467 0c66 0047     		bx	r0
 10468              	.L587:
 10469              		.align	2
 10470              	.L586:
 10471 0c68 D4000000 		.word	.LC160
 10472 0c6c 00000000 		.word	adm
 10473 0c70 00000000 		.word	TABESC
 10474 0c74 00000000 		.word	selection
 10475 0c78 00000000 		.word	F1_POINT
 10476              		.cfi_endproc
 10477              	.LFE391:
 10479              		.section	.text.screen124,"ax",%progbits
 10480              		.align	2
 10481              		.global	screen124
 10482              		.code	16
 10483              		.thumb_func
 10485              	screen124:
 10486              	.LFB385:
3727:screens.c     **** {
 10487              		.loc 1 3727 0
 10488              		.cfi_startproc
 10489              	.LVL899:
 10490 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10491              	.LCFI26:
 10492              		.cfi_def_cfa_offset 20
 10493              		.cfi_offset 4, -20
 10494              		.cfi_offset 5, -16
 10495              		.cfi_offset 6, -12
 10496              		.cfi_offset 7, -8
 10497              		.cfi_offset 14, -4
 10498 0002 89B0     		sub	sp, sp, #36
 10499              	.LCFI27:
 10500              		.cfi_def_cfa_offset 56
 10501 0004 041C     		mov	r4, r0
3731:screens.c     **** 	if( !startup )
 10502              		.loc 1 3731 0
 10503 0006 394B     		ldr	r3, .L592
 10504 0008 1B78     		ldrb	r3, [r3]
 10505 000a 002B     		cmp	r3, #0
 10506 000c 32D1     		bne	.L589
3733:screens.c     **** 		startup = 1;
 10507              		.loc 1 3733 0
 10508 000e 0122     		mov	r2, #1
 10509 0010 364B     		ldr	r3, .L592
 10510 0012 1A70     		strb	r2, [r3]
3735:screens.c     **** 		draw_frame( adm );
 10511              		.loc 1 3735 0
 10512 0014 364D     		ldr	r5, .L592+4
 10513 0016 281C     		mov	r0, r5
 10514              	.LVL900:
 10515 0018 FFF7FEFF 		bl	draw_frame
 10516              	.LVL901:
3741:screens.c     **** 		write_bitmap( adm, ICON_FILL_POT_ZERO_RESET, ICON_FILL_POT_ZERO_RESET_X, ICON_FILL_POT_ZERO_RESET
 10517              		.loc 1 3741 0
 10518 001c 0226     		mov	r6, #2
 10519 001e 0096     		str	r6, [sp]
 10520 0020 281C     		mov	r0, r5
 10521 0022 3449     		ldr	r1, .L592+8
 10522 0024 2622     		mov	r2, #38
 10523 0026 2D23     		mov	r3, #45
 10524 0028 FFF7FEFF 		bl	write_bitmap
 10525              	.LVL902:
3747:screens.c     **** 		write_bitmap( adm, TAB,       0,  107, OR );
 10526              		.loc 1 3747 0
 10527 002c 324F     		ldr	r7, .L592+12
 10528 002e 0096     		str	r6, [sp]
 10529 0030 281C     		mov	r0, r5
 10530 0032 391C     		mov	r1, r7
 10531 0034 0022     		mov	r2, #0
 10532 0036 6B23     		mov	r3, #107
 10533 0038 FFF7FEFF 		bl	write_bitmap
 10534              	.LVL903:
3748:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
 10535              		.loc 1 3748 0
 10536 003c 0096     		str	r6, [sp]
 10537 003e 281C     		mov	r0, r5
 10538 0040 391C     		mov	r1, r7
 10539 0042 1F22     		mov	r2, #31
 10540 0044 6B23     		mov	r3, #107
 10541 0046 FFF7FEFF 		bl	write_bitmap
 10542              	.LVL904:
3749:screens.c     **** 		write_bitmap( adm, TABNAV_,   62, 102, OR ); // NAVIGATION: Blank
 10543              		.loc 1 3749 0
 10544 004a 0096     		str	r6, [sp]
 10545 004c 281C     		mov	r0, r5
 10546 004e 2B49     		ldr	r1, .L592+16
 10547 0050 3E22     		mov	r2, #62
 10548 0052 6623     		mov	r3, #102
 10549 0054 FFF7FEFF 		bl	write_bitmap
 10550              	.LVL905:
3750:screens.c     **** 		write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
 10551              		.loc 1 3750 0
 10552 0058 0096     		str	r6, [sp]
 10553 005a 281C     		mov	r0, r5
 10554 005c 2849     		ldr	r1, .L592+20
 10555 005e 6322     		mov	r2, #99
 10556 0060 6B23     		mov	r3, #107
 10557 0062 FFF7FEFF 		bl	write_bitmap
 10558              	.LVL906:
3751:screens.c     **** 		write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
 10559              		.loc 1 3751 0
 10560 0066 0096     		str	r6, [sp]
 10561 0068 281C     		mov	r0, r5
 10562 006a 2649     		ldr	r1, .L592+24
 10563 006c 8222     		mov	r2, #130
 10564 006e 6B23     		mov	r3, #107
 10565 0070 FFF7FEFF 		bl	write_bitmap
 10566              	.LVL907:
 10567              	.L589:
3755:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 10568              		.loc 1 3755 0
 10569 0074 0020     		mov	r0, #0
 10570 0076 FFF7FEFF 		bl	ClockDisplay
 10571              	.LVL908:
3761:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 10572              		.loc 1 3761 0
 10573 007a A30F     		lsr	r3, r4, #30
3763:screens.c     **** 	if( key_status )
 10574              		.loc 1 3763 0
 10575 007c 14D0     		beq	.L590
3765:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 10576              		.loc 1 3765 0
 10577 007e A400     		lsl	r4, r4, #2
 10578              	.LVL909:
 10579 0080 A408     		lsr	r4, r4, #2
 10580              	.LVL910:
3767:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey CROSS)
 10581              		.loc 1 3767 0
 10582 0082 8023     		mov	r3, #128
 10583 0084 5B00     		lsl	r3, r3, #1
 10584 0086 9C42     		cmp	r4, r3
 10585 0088 03D1     		bne	.L591
3769:screens.c     **** 			escape = 1;
 10586              		.loc 1 3769 0
 10587 008a 0122     		mov	r2, #1
 10588 008c 1E4B     		ldr	r3, .L592+28
 10589 008e 1A70     		strb	r2, [r3]
 10590 0090 0AE0     		b	.L590
 10591              	.L591:
3771:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
 10592              		.loc 1 3771 0
 10593 0092 082C     		cmp	r4, #8
 10594 0094 08D1     		bne	.L590
3773:screens.c     **** 			pFac.pf.GW302_BaleShapeIndicatorZero = BaleShapeVolts;
 10595              		.loc 1 3773 0
 10596 0096 1D4B     		ldr	r3, .L592+32
 10597 0098 1A68     		ldr	r2, [r3]
 10598 009a 1D4B     		ldr	r3, .L592+36
 10599 009c DA66     		str	r2, [r3, #108]
3774:screens.c     **** 			SavecalDelayWithinMenus = 1;
 10600              		.loc 1 3774 0
 10601 009e 0123     		mov	r3, #1
 10602 00a0 1C4A     		ldr	r2, .L592+40
 10603 00a2 1370     		strb	r3, [r2]
3775:screens.c     **** 			escape = 1;
 10604              		.loc 1 3775 0
 10605 00a4 184A     		ldr	r2, .L592+28
 10606 00a6 1370     		strb	r3, [r2]
 10607              	.L590:
3783:screens.c     **** 	display_number( BaleShapeVolts, 0.0, 0.0, 1.0, DP1, 147, 4, DW4, RIGHT, &RDSfnt1, NULL, PNULL );
 10608              		.loc 1 3783 0
 10609 00a8 184B     		ldr	r3, .L592+32
 10610 00aa 1868     		ldr	r0, [r3]
 10611 00ac 0022     		mov	r2, #0
 10612 00ae 0123     		mov	r3, #1
 10613 00b0 0093     		str	r3, [sp]
 10614 00b2 9323     		mov	r3, #147
 10615 00b4 0193     		str	r3, [sp, #4]
 10616 00b6 0423     		mov	r3, #4
 10617 00b8 0293     		str	r3, [sp, #8]
 10618 00ba 1823     		mov	r3, #24
 10619 00bc 0393     		str	r3, [sp, #12]
 10620 00be 1023     		mov	r3, #16
 10621 00c0 0493     		str	r3, [sp, #16]
 10622 00c2 154B     		ldr	r3, .L592+44
 10623 00c4 0593     		str	r3, [sp, #20]
 10624 00c6 0024     		mov	r4, #0
 10625              	.LVL911:
 10626 00c8 0694     		str	r4, [sp, #24]
 10627 00ca 0794     		str	r4, [sp, #28]
 10628 00cc 111C     		add	r1, r2, #0
 10629 00ce FE23     		mov	r3, #254
 10630 00d0 9B05     		lsl	r3, r3, #22
 10631 00d2 FFF7FEFF 		bl	display_number
 10632              	.LVL912:
3784:screens.c     **** 	display_f1_text( "V", TSMAX, 149, 4,  FIXED );
 10633              		.loc 1 3784 0
 10634 00d6 0094     		str	r4, [sp]
 10635 00d8 1048     		ldr	r0, .L592+48
 10636 00da 1A21     		mov	r1, #26
 10637 00dc 9522     		mov	r2, #149
 10638 00de 0423     		mov	r3, #4
 10639 00e0 FFF7FEFF 		bl	display_f1_text
 10640              	.LVL913:
3786:screens.c     **** }
 10641              		.loc 1 3786 0
 10642 00e4 09B0     		add	sp, sp, #36
 10643              		@ sp needed for prologue
 10644 00e6 F0BC     		pop	{r4, r5, r6, r7}
 10645 00e8 01BC     		pop	{r0}
 10646 00ea 0047     		bx	r0
 10647              	.L593:
 10648              		.align	2
 10649              	.L592:
 10650 00ec 00000000 		.word	startup
 10651 00f0 00000000 		.word	adm
 10652 00f4 00000000 		.word	ICON_FILL_POT_ZERO_RESET
 10653 00f8 00000000 		.word	TAB
 10654 00fc 00000000 		.word	TABNAV_
 10655 0100 00000000 		.word	TABTICK
 10656 0104 00000000 		.word	TABCROSS
 10657 0108 00000000 		.word	escape
 10658 010c 00000000 		.word	BaleShapeVolts
 10659 0110 00000000 		.word	pFac
 10660 0114 00000000 		.word	SavecalDelayWithinMenus
 10661 0118 00000000 		.word	RDSfnt1
 10662 011c 00000000 		.word	.LC64
 10663              		.cfi_endproc
 10664              	.LFE385:
 10666              		.global	__aeabi_dcmpge
 10667              		.global	__aeabi_dcmple
 10668              		.section	.text.screen152,"ax",%progbits
 10669              		.align	2
 10670              		.global	screen152
 10671              		.code	16
 10672              		.thumb_func
 10674              	screen152:
 10675              	.LFB399:
7224:screens.c     **** {
 10676              		.loc 1 7224 0
 10677              		.cfi_startproc
 10678              	.LVL914:
 10679 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10680              	.LCFI28:
 10681              		.cfi_def_cfa_offset 20
 10682              		.cfi_offset 4, -20
 10683              		.cfi_offset 5, -16
 10684              		.cfi_offset 6, -12
 10685              		.cfi_offset 7, -8
 10686              		.cfi_offset 14, -4
 10687 0002 4746     		mov	r7, r8
 10688 0004 80B4     		push	{r7}
 10689              	.LCFI29:
 10690              		.cfi_def_cfa_offset 24
 10691              		.cfi_offset 8, -24
 10692 0006 8AB0     		sub	sp, sp, #40
 10693              	.LCFI30:
 10694              		.cfi_def_cfa_offset 64
 10695 0008 041C     		mov	r4, r0
7229:screens.c     **** 	if( !startup )
 10696              		.loc 1 7229 0
 10697 000a C54B     		ldr	r3, .L627+16
 10698 000c 1B78     		ldrb	r3, [r3]
 10699 000e 002B     		cmp	r3, #0
 10700 0010 3CD1     		bne	.L595
7231:screens.c     **** 		startup = 1;
 10701              		.loc 1 7231 0
 10702 0012 0122     		mov	r2, #1
 10703 0014 9046     		mov	r8, r2
 10704 0016 C24B     		ldr	r3, .L627+16
 10705 0018 1A70     		strb	r2, [r3]
7232:screens.c     **** 		draw_frame( adm );
 10706              		.loc 1 7232 0
 10707 001a C24D     		ldr	r5, .L627+20
 10708 001c 281C     		mov	r0, r5
 10709              	.LVL915:
 10710 001e FFF7FEFF 		bl	draw_frame
 10711              	.LVL916:
7233:screens.c     **** 		display_f1_text( ptText[31], TSMAX, 80, 12,  FIXED | CENTER | UNDERLINED  ); // "Analogue Inputs"
 10712              		.loc 1 7233 0
 10713 0022 C14B     		ldr	r3, .L627+24
 10714 0024 1B68     		ldr	r3, [r3]
 10715 0026 D86F     		ldr	r0, [r3, #124]
 10716 0028 0A23     		mov	r3, #10
 10717 002a 0093     		str	r3, [sp]
 10718 002c 1A21     		mov	r1, #26
 10719 002e 5022     		mov	r2, #80
 10720 0030 0C23     		mov	r3, #12
 10721 0032 FFF7FEFF 		bl	display_f1_text
 10722              	.LVL917:
7235:screens.c     **** 		write_bitmap( adm, TAB,        0, 107, OR );
 10723              		.loc 1 7235 0
 10724 0036 BD4F     		ldr	r7, .L627+28
 10725 0038 0226     		mov	r6, #2
 10726 003a 0096     		str	r6, [sp]
 10727 003c 281C     		mov	r0, r5
 10728 003e 391C     		mov	r1, r7
 10729 0040 0022     		mov	r2, #0
 10730 0042 6B23     		mov	r3, #107
 10731 0044 FFF7FEFF 		bl	write_bitmap
 10732              	.LVL918:
7236:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
 10733              		.loc 1 7236 0
 10734 0048 0096     		str	r6, [sp]
 10735 004a 281C     		mov	r0, r5
 10736 004c 391C     		mov	r1, r7
 10737 004e 1F22     		mov	r2, #31
 10738 0050 6B23     		mov	r3, #107
 10739 0052 FFF7FEFF 		bl	write_bitmap
 10740              	.LVL919:
7237:screens.c     **** 		write_bitmap( adm, TABNAV_LR, 62, 102, OR ); // NAVIGATION: left right
 10741              		.loc 1 7237 0
 10742 0056 0096     		str	r6, [sp]
 10743 0058 281C     		mov	r0, r5
 10744 005a B549     		ldr	r1, .L627+32
 10745 005c 3E22     		mov	r2, #62
 10746 005e 6623     		mov	r3, #102
 10747 0060 FFF7FEFF 		bl	write_bitmap
 10748              	.LVL920:
7238:screens.c     **** 		write_bitmap( adm, TAB,       99, 107, OR );
 10749              		.loc 1 7238 0
 10750 0064 0096     		str	r6, [sp]
 10751 0066 281C     		mov	r0, r5
 10752 0068 391C     		mov	r1, r7
 10753 006a 6322     		mov	r2, #99
 10754 006c 6B23     		mov	r3, #107
 10755 006e FFF7FEFF 		bl	write_bitmap
 10756              	.LVL921:
7239:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
 10757              		.loc 1 7239 0
 10758 0072 0096     		str	r6, [sp]
 10759 0074 281C     		mov	r0, r5
 10760 0076 AF49     		ldr	r1, .L627+36
 10761 0078 8222     		mov	r2, #130
 10762 007a 6B23     		mov	r3, #107
 10763 007c FFF7FEFF 		bl	write_bitmap
 10764              	.LVL922:
7242:screens.c     **** 		AT91C_BASE_PIOB->PIO_SODR = IE_IP01 | IE_IP02 | IE_IP03 | IE_IP04;
 10765              		.loc 1 7242 0
 10766 0080 AD4A     		ldr	r2, .L627+40
 10767 0082 AE4B     		ldr	r3, .L627+44
 10768 0084 1A63     		str	r2, [r3, #48]
7243:screens.c     **** 		leaf = 1;
 10769              		.loc 1 7243 0
 10770 0086 AE4B     		ldr	r3, .L627+48
 10771 0088 4246     		mov	r2, r8
 10772 008a 1A70     		strb	r2, [r3]
 10773              	.L595:
7247:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 10774              		.loc 1 7247 0
 10775 008c 0020     		mov	r0, #0
 10776 008e FFF7FEFF 		bl	ClockDisplay
 10777              	.LVL923:
7249:screens.c     **** 	if( lkey & (SW_NEW | SW_REP) )
 10778              		.loc 1 7249 0
 10779 0092 A30F     		lsr	r3, r4, #30
 10780 0094 14D0     		beq	.L596
7251:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 10781              		.loc 1 7251 0
 10782 0096 A400     		lsl	r4, r4, #2
 10783              	.LVL924:
 10784 0098 A408     		lsr	r4, r4, #2
 10785              	.LVL925:
7252:screens.c     **** 		if( lkey == SW_CL )
 10786              		.loc 1 7252 0
 10787 009a 102C     		cmp	r4, #16
 10788 009c 03D1     		bne	.L597
7254:screens.c     **** 			window = screen150;
 10789              		.loc 1 7254 0
 10790 009e A94A     		ldr	r2, .L627+52
 10791 00a0 A94B     		ldr	r3, .L627+56
 10792 00a2 1A60     		str	r2, [r3]
 10793 00a4 0CE0     		b	.L596
 10794              	.L597:
7256:screens.c     **** 		else if( lkey == SW_CR )
 10795              		.loc 1 7256 0
 10796 00a6 802C     		cmp	r4, #128
 10797 00a8 03D1     		bne	.L598
7258:screens.c     **** 			window = screen151; /* Outputs */
 10798              		.loc 1 7258 0
 10799 00aa A84A     		ldr	r2, .L627+60
 10800 00ac A64B     		ldr	r3, .L627+56
 10801 00ae 1A60     		str	r2, [r3]
 10802 00b0 06E0     		b	.L596
 10803              	.L598:
7260:screens.c     **** 		else if( lkey == SW_OR )
 10804              		.loc 1 7260 0
 10805 00b2 8023     		mov	r3, #128
 10806 00b4 5B00     		lsl	r3, r3, #1
 10807 00b6 9C42     		cmp	r4, r3
 10808 00b8 02D1     		bne	.L596
7262:screens.c     **** 			escape = 1;
 10809              		.loc 1 7262 0
 10810 00ba 0122     		mov	r2, #1
 10811 00bc A44B     		ldr	r3, .L627+64
 10812 00be 1A70     		strb	r2, [r3]
 10813              	.L596:
7267:screens.c     **** 	draw_box( adm, 1, 25, 158, 101, CLEAR );
 10814              		.loc 1 7267 0
 10815 00c0 6523     		mov	r3, #101
 10816 00c2 0093     		str	r3, [sp]
 10817 00c4 4023     		mov	r3, #64
 10818 00c6 0193     		str	r3, [sp, #4]
 10819 00c8 9648     		ldr	r0, .L627+20
 10820 00ca 0121     		mov	r1, #1
 10821 00cc 1922     		mov	r2, #25
 10822 00ce 9E23     		mov	r3, #158
 10823 00d0 FFF7FEFF 		bl	draw_box
 10824              	.LVL926:
7270:screens.c     **** 	sprintf(tstring, ptText[32], 1);
 10825              		.loc 1 7270 0
 10826 00d4 944E     		ldr	r6, .L627+24
 10827 00d6 8025     		mov	r5, #128
 10828 00d8 3368     		ldr	r3, [r6]
 10829 00da 5959     		ldr	r1, [r3, r5]
 10830 00dc 02A8     		add	r0, sp, #8
 10831 00de 0122     		mov	r2, #1
 10832 00e0 FFF7FEFF 		bl	sprintf
 10833              	.LVL927:
7271:screens.c     **** 	display_f1_text( tstring, TSMAX, 16, 35,  FIXED  ); // AnIP%u
 10834              		.loc 1 7271 0
 10835 00e4 0024     		mov	r4, #0
 10836              	.LVL928:
 10837 00e6 0094     		str	r4, [sp]
 10838 00e8 02A8     		add	r0, sp, #8
 10839 00ea 1A21     		mov	r1, #26
 10840 00ec 1022     		mov	r2, #16
 10841 00ee 2323     		mov	r3, #35
 10842 00f0 FFF7FEFF 		bl	display_f1_text
 10843              	.LVL929:
7273:screens.c     **** 	sprintf(tstring, ptText[32], 2);
 10844              		.loc 1 7273 0
 10845 00f4 3268     		ldr	r2, [r6]
 10846 00f6 5159     		ldr	r1, [r2, r5]
 10847 00f8 02A8     		add	r0, sp, #8
 10848 00fa 0222     		mov	r2, #2
 10849 00fc FFF7FEFF 		bl	sprintf
 10850              	.LVL930:
7274:screens.c     **** 	display_f1_text( tstring, TSMAX, 90, 35,  FIXED  ); // AnIP%u
 10851              		.loc 1 7274 0
 10852 0100 0094     		str	r4, [sp]
 10853 0102 02A8     		add	r0, sp, #8
 10854 0104 1A21     		mov	r1, #26
 10855 0106 5A22     		mov	r2, #90
 10856 0108 2323     		mov	r3, #35
 10857 010a FFF7FEFF 		bl	display_f1_text
 10858              	.LVL931:
7276:screens.c     **** 	sprintf(tstring, ptText[32], 3);
 10859              		.loc 1 7276 0
 10860 010e 3368     		ldr	r3, [r6]
 10861 0110 5959     		ldr	r1, [r3, r5]
 10862 0112 02A8     		add	r0, sp, #8
 10863 0114 0322     		mov	r2, #3
 10864 0116 FFF7FEFF 		bl	sprintf
 10865              	.LVL932:
7277:screens.c     **** 	display_f1_text( tstring, TSMAX, 16, 69,  FIXED  ); // AnIP%u
 10866              		.loc 1 7277 0
 10867 011a 0094     		str	r4, [sp]
 10868 011c 02A8     		add	r0, sp, #8
 10869 011e 1A21     		mov	r1, #26
 10870 0120 1022     		mov	r2, #16
 10871 0122 4523     		mov	r3, #69
 10872 0124 FFF7FEFF 		bl	display_f1_text
 10873              	.LVL933:
7279:screens.c     **** 	sprintf(tstring, ptText[32], 4);
 10874              		.loc 1 7279 0
 10875 0128 3368     		ldr	r3, [r6]
 10876 012a 5959     		ldr	r1, [r3, r5]
 10877 012c 02A8     		add	r0, sp, #8
 10878 012e 0422     		mov	r2, #4
 10879 0130 FFF7FEFF 		bl	sprintf
 10880              	.LVL934:
7280:screens.c     **** 	display_f1_text( tstring, TSMAX, 90, 69,  FIXED  ); // AnIP%u
 10881              		.loc 1 7280 0
 10882 0134 0094     		str	r4, [sp]
 10883 0136 02A8     		add	r0, sp, #8
 10884 0138 1A21     		mov	r1, #26
 10885 013a 5A22     		mov	r2, #90
 10886 013c 4523     		mov	r3, #69
 10887 013e FFF7FEFF 		bl	display_f1_text
 10888              	.LVL935:
7283:screens.c     **** 	sprintf( tstring, "%.2fV", BaleDiaVolts );
 10889              		.loc 1 7283 0
 10890 0142 844D     		ldr	r5, .L627+68
 10891 0144 2868     		ldr	r0, [r5]
 10892 0146 FFF7FEFF 		bl	__aeabi_f2d
 10893              	.LVL936:
 10894 014a 021C     		mov	r2, r0
 10895 014c 0B1C     		mov	r3, r1
 10896 014e 02A8     		add	r0, sp, #8
 10897 0150 8149     		ldr	r1, .L627+72
 10898 0152 FFF7FEFF 		bl	sprintf
 10899              	.LVL937:
7284:screens.c     **** 	display_f1_text( tstring, TSMAX, 46, 47, FIXED );
 10900              		.loc 1 7284 0
 10901 0156 0094     		str	r4, [sp]
 10902 0158 02A8     		add	r0, sp, #8
 10903 015a 1A21     		mov	r1, #26
 10904 015c 2E22     		mov	r2, #46
 10905 015e 2F23     		mov	r3, #47
 10906 0160 FFF7FEFF 		bl	display_f1_text
 10907              	.LVL938:
7286:screens.c     **** 	if( BaleDiaVolts >= (POTDIV * 1.70) )
 10908              		.loc 1 7286 0
 10909 0164 2868     		ldr	r0, [r5]
 10910 0166 FFF7FEFF 		bl	__aeabi_f2d
 10911              	.LVL939:
 10912 016a 041C     		mov	r4, r0
 10913 016c 0D1C     		mov	r5, r1
 10914 016e 694B     		ldr	r3, .L627+4
 10915 0170 674A     		ldr	r2, .L627
 10916 0172 FFF7FEFF 		bl	__aeabi_dcmpge
 10917              	.LVL940:
 10918 0176 0028     		cmp	r0, #0
 10919 0178 03D0     		beq	.L623
7288:screens.c     **** 		c = 0;
 10920              		.loc 1 7288 0
 10921 017a 0022     		mov	r2, #0
 10922 017c 774B     		ldr	r3, .L627+76
 10923 017e 1A70     		strb	r2, [r3]
 10924 0180 0AE0     		b	.L601
 10925              	.L623:
7290:screens.c     **** 	else if( BaleDiaVolts <= (POTDIV * 1.60) )
 10926              		.loc 1 7290 0
 10927 0182 201C     		mov	r0, r4
 10928 0184 291C     		mov	r1, r5
 10929 0186 644A     		ldr	r2, .L627+8
 10930 0188 644B     		ldr	r3, .L627+12
 10931 018a FFF7FEFF 		bl	__aeabi_dcmple
 10932              	.LVL941:
 10933 018e 0028     		cmp	r0, #0
 10934 0190 02D0     		beq	.L601
7292:screens.c     **** 		c = 1;
 10935              		.loc 1 7292 0
 10936 0192 0122     		mov	r2, #1
 10937 0194 714B     		ldr	r3, .L627+76
 10938 0196 1A70     		strb	r2, [r3]
 10939              	.L601:
7294:screens.c     **** 	write_bitmap( adm, ip_status[c], 48+3, 33, OR );
 10940              		.loc 1 7294 0
 10941 0198 704B     		ldr	r3, .L627+76
 10942 019a 1A78     		ldrb	r2, [r3]
 10943 019c 9200     		lsl	r2, r2, #2
 10944 019e 704B     		ldr	r3, .L627+80
 10945 01a0 D158     		ldr	r1, [r2, r3]
 10946 01a2 0223     		mov	r3, #2
 10947 01a4 0093     		str	r3, [sp]
 10948 01a6 5F48     		ldr	r0, .L627+20
 10949 01a8 3322     		mov	r2, #51
 10950 01aa 2123     		mov	r3, #33
 10951 01ac FFF7FEFF 		bl	write_bitmap
 10952              	.LVL942:
7297:screens.c     **** 	sprintf( tstring, "%.2fV", DensityPresVolts );
 10953              		.loc 1 7297 0
 10954 01b0 6C4C     		ldr	r4, .L627+84
 10955 01b2 2068     		ldr	r0, [r4]
 10956 01b4 FFF7FEFF 		bl	__aeabi_f2d
 10957              	.LVL943:
 10958 01b8 021C     		mov	r2, r0
 10959 01ba 0B1C     		mov	r3, r1
 10960 01bc 02A8     		add	r0, sp, #8
 10961 01be 6649     		ldr	r1, .L627+72
 10962 01c0 FFF7FEFF 		bl	sprintf
 10963              	.LVL944:
7298:screens.c     **** 	display_f1_text( tstring, TSMAX, 120, 47, FIXED );
 10964              		.loc 1 7298 0
 10965 01c4 0023     		mov	r3, #0
 10966 01c6 0093     		str	r3, [sp]
 10967 01c8 02A8     		add	r0, sp, #8
 10968 01ca 1A21     		mov	r1, #26
 10969 01cc 7822     		mov	r2, #120
 10970 01ce 2F23     		mov	r3, #47
 10971 01d0 FFF7FEFF 		bl	display_f1_text
 10972              	.LVL945:
7300:screens.c     **** 	if( DensityPresVolts >= (POTDIV * 1.70) )
 10973              		.loc 1 7300 0
 10974 01d4 2068     		ldr	r0, [r4]
 10975 01d6 FFF7FEFF 		bl	__aeabi_f2d
 10976              	.LVL946:
 10977 01da 041C     		mov	r4, r0
 10978 01dc 0D1C     		mov	r5, r1
 10979 01de 4D4B     		ldr	r3, .L627+4
 10980 01e0 4B4A     		ldr	r2, .L627
 10981 01e2 FFF7FEFF 		bl	__aeabi_dcmpge
 10982              	.LVL947:
 10983 01e6 0028     		cmp	r0, #0
 10984 01e8 03D0     		beq	.L624
7302:screens.c     **** 		c = 0;
 10985              		.loc 1 7302 0
 10986 01ea 0022     		mov	r2, #0
 10987 01ec 5B4B     		ldr	r3, .L627+76
 10988 01ee 1A70     		strb	r2, [r3]
 10989 01f0 0AE0     		b	.L605
 10990              	.L624:
7304:screens.c     **** 	else if( DensityPresVolts <= (POTDIV * 1.60) )
 10991              		.loc 1 7304 0
 10992 01f2 201C     		mov	r0, r4
 10993 01f4 291C     		mov	r1, r5
 10994 01f6 484A     		ldr	r2, .L627+8
 10995 01f8 484B     		ldr	r3, .L627+12
 10996 01fa FFF7FEFF 		bl	__aeabi_dcmple
 10997              	.LVL948:
 10998 01fe 0028     		cmp	r0, #0
 10999 0200 02D0     		beq	.L605
7306:screens.c     **** 		c = 1;
 11000              		.loc 1 7306 0
 11001 0202 0122     		mov	r2, #1
 11002 0204 554B     		ldr	r3, .L627+76
 11003 0206 1A70     		strb	r2, [r3]
 11004              	.L605:
7308:screens.c     **** 	write_bitmap( adm, ip_status[c], 122+3, 33, OR );
 11005              		.loc 1 7308 0
 11006 0208 544B     		ldr	r3, .L627+76
 11007 020a 1A78     		ldrb	r2, [r3]
 11008 020c 9200     		lsl	r2, r2, #2
 11009 020e 544B     		ldr	r3, .L627+80
 11010 0210 D158     		ldr	r1, [r2, r3]
 11011 0212 0223     		mov	r3, #2
 11012 0214 0093     		str	r3, [sp]
 11013 0216 4348     		ldr	r0, .L627+20
 11014 0218 7D22     		mov	r2, #125
 11015 021a 2123     		mov	r3, #33
 11016 021c FFF7FEFF 		bl	write_bitmap
 11017              	.LVL949:
7311:screens.c     **** 	sprintf( tstring, "%.2fV", BaleShapeVolts );
 11018              		.loc 1 7311 0
 11019 0220 514C     		ldr	r4, .L627+88
 11020 0222 2068     		ldr	r0, [r4]
 11021 0224 FFF7FEFF 		bl	__aeabi_f2d
 11022              	.LVL950:
 11023 0228 021C     		mov	r2, r0
 11024 022a 0B1C     		mov	r3, r1
 11025 022c 02A8     		add	r0, sp, #8
 11026 022e 4A49     		ldr	r1, .L627+72
 11027 0230 FFF7FEFF 		bl	sprintf
 11028              	.LVL951:
7312:screens.c     **** 	display_f1_text( tstring, TSMAX, 46, 81, FIXED );
 11029              		.loc 1 7312 0
 11030 0234 0023     		mov	r3, #0
 11031 0236 0093     		str	r3, [sp]
 11032 0238 02A8     		add	r0, sp, #8
 11033 023a 1A21     		mov	r1, #26
 11034 023c 2E22     		mov	r2, #46
 11035 023e 5123     		mov	r3, #81
 11036 0240 FFF7FEFF 		bl	display_f1_text
 11037              	.LVL952:
7314:screens.c     **** 	if( BaleShapeVolts >= (POTDIV * 1.70) )
 11038              		.loc 1 7314 0
 11039 0244 2068     		ldr	r0, [r4]
 11040 0246 FFF7FEFF 		bl	__aeabi_f2d
 11041              	.LVL953:
 11042 024a 041C     		mov	r4, r0
 11043 024c 0D1C     		mov	r5, r1
 11044 024e 314B     		ldr	r3, .L627+4
 11045 0250 2F4A     		ldr	r2, .L627
 11046 0252 FFF7FEFF 		bl	__aeabi_dcmpge
 11047              	.LVL954:
 11048 0256 0028     		cmp	r0, #0
 11049 0258 03D0     		beq	.L625
7316:screens.c     **** 		c = 0;
 11050              		.loc 1 7316 0
 11051 025a 0022     		mov	r2, #0
 11052 025c 3F4B     		ldr	r3, .L627+76
 11053 025e 1A70     		strb	r2, [r3]
 11054 0260 0AE0     		b	.L609
 11055              	.L625:
7318:screens.c     **** 	else if( BaleShapeVolts <= (POTDIV * 1.60) )
 11056              		.loc 1 7318 0
 11057 0262 201C     		mov	r0, r4
 11058 0264 291C     		mov	r1, r5
 11059 0266 2C4A     		ldr	r2, .L627+8
 11060 0268 2C4B     		ldr	r3, .L627+12
 11061 026a FFF7FEFF 		bl	__aeabi_dcmple
 11062              	.LVL955:
 11063 026e 0028     		cmp	r0, #0
 11064 0270 02D0     		beq	.L609
7320:screens.c     **** 		c = 1;
 11065              		.loc 1 7320 0
 11066 0272 0122     		mov	r2, #1
 11067 0274 394B     		ldr	r3, .L627+76
 11068 0276 1A70     		strb	r2, [r3]
 11069              	.L609:
7322:screens.c     **** 	write_bitmap( adm, ip_status[c], 48+3, 67, OR );
 11070              		.loc 1 7322 0
 11071 0278 384B     		ldr	r3, .L627+76
 11072 027a 1A78     		ldrb	r2, [r3]
 11073 027c 9200     		lsl	r2, r2, #2
 11074 027e 384B     		ldr	r3, .L627+80
 11075 0280 D158     		ldr	r1, [r2, r3]
 11076 0282 0223     		mov	r3, #2
 11077 0284 0093     		str	r3, [sp]
 11078 0286 2748     		ldr	r0, .L627+20
 11079 0288 3322     		mov	r2, #51
 11080 028a 4323     		mov	r3, #67
 11081 028c FFF7FEFF 		bl	write_bitmap
 11082              	.LVL956:
7325:screens.c     **** 	sprintf( tstring, "%.2fV", KnifePresVolts );
 11083              		.loc 1 7325 0
 11084 0290 364C     		ldr	r4, .L627+92
 11085 0292 2068     		ldr	r0, [r4]
 11086 0294 FFF7FEFF 		bl	__aeabi_f2d
 11087              	.LVL957:
 11088 0298 021C     		mov	r2, r0
 11089 029a 0B1C     		mov	r3, r1
 11090 029c 02A8     		add	r0, sp, #8
 11091 029e 2E49     		ldr	r1, .L627+72
 11092 02a0 FFF7FEFF 		bl	sprintf
 11093              	.LVL958:
7326:screens.c     **** 	display_f1_text( tstring, TSMAX, 120, 81, FIXED );
 11094              		.loc 1 7326 0
 11095 02a4 0023     		mov	r3, #0
 11096 02a6 0093     		str	r3, [sp]
 11097 02a8 02A8     		add	r0, sp, #8
 11098 02aa 1A21     		mov	r1, #26
 11099 02ac 7822     		mov	r2, #120
 11100 02ae 5123     		mov	r3, #81
 11101 02b0 FFF7FEFF 		bl	display_f1_text
 11102              	.LVL959:
7328:screens.c     **** 	if( KnifePresVolts >= (POTDIV * 1.70) )
 11103              		.loc 1 7328 0
 11104 02b4 2068     		ldr	r0, [r4]
 11105 02b6 FFF7FEFF 		bl	__aeabi_f2d
 11106              	.LVL960:
 11107 02ba 041C     		mov	r4, r0
 11108 02bc 0D1C     		mov	r5, r1
 11109 02be 154B     		ldr	r3, .L627+4
 11110 02c0 134A     		ldr	r2, .L627
 11111 02c2 FFF7FEFF 		bl	__aeabi_dcmpge
 11112              	.LVL961:
 11113 02c6 0028     		cmp	r0, #0
 11114 02c8 03D0     		beq	.L626
7330:screens.c     **** 		c = 0;
 11115              		.loc 1 7330 0
 11116 02ca 0022     		mov	r2, #0
 11117 02cc 234B     		ldr	r3, .L627+76
 11118 02ce 1A70     		strb	r2, [r3]
 11119 02d0 0AE0     		b	.L613
 11120              	.L626:
7332:screens.c     **** 	else if( KnifePresVolts <= (POTDIV * 1.60) )
 11121              		.loc 1 7332 0
 11122 02d2 201C     		mov	r0, r4
 11123 02d4 291C     		mov	r1, r5
 11124 02d6 104A     		ldr	r2, .L627+8
 11125 02d8 104B     		ldr	r3, .L627+12
 11126 02da FFF7FEFF 		bl	__aeabi_dcmple
 11127              	.LVL962:
 11128 02de 0028     		cmp	r0, #0
 11129 02e0 02D0     		beq	.L613
7334:screens.c     **** 		c = 1;
 11130              		.loc 1 7334 0
 11131 02e2 0122     		mov	r2, #1
 11132 02e4 1D4B     		ldr	r3, .L627+76
 11133 02e6 1A70     		strb	r2, [r3]
 11134              	.L613:
7336:screens.c     **** 	write_bitmap( adm, ip_status[c], 122+3, 67, OR );
 11135              		.loc 1 7336 0
 11136 02e8 1C4B     		ldr	r3, .L627+76
 11137 02ea 1A78     		ldrb	r2, [r3]
 11138 02ec 9200     		lsl	r2, r2, #2
 11139 02ee 1C4B     		ldr	r3, .L627+80
 11140 02f0 D158     		ldr	r1, [r2, r3]
 11141 02f2 0223     		mov	r3, #2
 11142 02f4 0093     		str	r3, [sp]
 11143 02f6 0B48     		ldr	r0, .L627+20
 11144 02f8 7D22     		mov	r2, #125
 11145 02fa 4323     		mov	r3, #67
 11146 02fc FFF7FEFF 		bl	write_bitmap
 11147              	.LVL963:
7337:screens.c     **** }
 11148              		.loc 1 7337 0
 11149 0300 0AB0     		add	sp, sp, #40
 11150              		@ sp needed for prologue
 11151 0302 04BC     		pop	{r2}
 11152 0304 9046     		mov	r8, r2
 11153 0306 F0BC     		pop	{r4, r5, r6, r7}
 11154 0308 01BC     		pop	{r0}
 11155 030a 0047     		bx	r0
 11156              	.L628:
 11157 030c C046C046 		.align	3
 11158              	.L627:
 11159 0310 A5BDC117 		.word	398572965
 11160 0314 26530540 		.word	1074090790
 11161 0318 6FA301BC 		.word	-1140743313
 11162 031c 05120440 		.word	1074008581
 11163 0320 00000000 		.word	startup
 11164 0324 00000000 		.word	adm
 11165 0328 00000000 		.word	ptText
 11166 032c 00000000 		.word	TAB
 11167 0330 00000000 		.word	TABNAV_LR
 11168 0334 00000000 		.word	TABESC
 11169 0338 002C8000 		.word	8399872
 11170 033c 00F6FFFF 		.word	-2560
 11171 0340 00000000 		.word	leaf
 11172 0344 00000000 		.word	screen150
 11173 0348 00000000 		.word	window
 11174 034c 00000000 		.word	screen151
 11175 0350 00000000 		.word	escape
 11176 0354 00000000 		.word	BaleDiaVolts
 11177 0358 AC030000 		.word	.LC440
 11178 035c 00000000 		.word	.LANCHOR5
 11179 0360 00000000 		.word	ip_status
 11180 0364 00000000 		.word	DensityPresVolts
 11181 0368 00000000 		.word	BaleShapeVolts
 11182 036c 00000000 		.word	KnifePresVolts
 11183              		.cfi_endproc
 11184              	.LFE399:
 11186              		.section	.text.screen121,"ax",%progbits
 11187              		.align	2
 11188              		.global	screen121
 11189              		.code	16
 11190              		.thumb_func
 11192              	screen121:
 11193              	.LFB384:
3589:screens.c     **** {
 11194              		.loc 1 3589 0
 11195              		.cfi_startproc
 11196              	.LVL964:
 11197 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11198              	.LCFI31:
 11199              		.cfi_def_cfa_offset 20
 11200              		.cfi_offset 4, -20
 11201              		.cfi_offset 5, -16
 11202              		.cfi_offset 6, -12
 11203              		.cfi_offset 7, -8
 11204              		.cfi_offset 14, -4
 11205 0002 8BB0     		sub	sp, sp, #44
 11206              	.LCFI32:
 11207              		.cfi_def_cfa_offset 64
 11208 0004 041C     		mov	r4, r0
3594:screens.c     **** 	if( !startup )
 11209              		.loc 1 3594 0
 11210 0006 344B     		ldr	r3, .L633
 11211 0008 1B78     		ldrb	r3, [r3]
 11212 000a 002B     		cmp	r3, #0
 11213 000c 41D1     		bne	.L630
3596:screens.c     **** 		startup = 1;
 11214              		.loc 1 3596 0
 11215 000e 0122     		mov	r2, #1
 11216 0010 314B     		ldr	r3, .L633
 11217 0012 1A70     		strb	r2, [r3]
3598:screens.c     **** 		draw_frame( adm );
 11218              		.loc 1 3598 0
 11219 0014 314D     		ldr	r5, .L633+4
 11220 0016 281C     		mov	r0, r5
 11221              	.LVL965:
 11222 0018 FFF7FEFF 		bl	draw_frame
 11223              	.LVL966:
3604:screens.c     **** 		write_bitmap( adm, ICON_BALE_COUNT_RESET, ICON_BALE_COUNT_RESET_X, ICON_BALE_COUNT_RESET_Y, OR );
 11224              		.loc 1 3604 0
 11225 001c 0226     		mov	r6, #2
 11226 001e 0096     		str	r6, [sp]
 11227 0020 281C     		mov	r0, r5
 11228 0022 2F49     		ldr	r1, .L633+8
 11229 0024 2622     		mov	r2, #38
 11230 0026 2D23     		mov	r3, #45
 11231 0028 FFF7FEFF 		bl	write_bitmap
 11232              	.LVL967:
3606:screens.c     **** 		sprintf ( tstring, "%c", ('A' + SelectedBaleStore) ); /* A - J */
 11233              		.loc 1 3606 0
 11234 002c 2D4B     		ldr	r3, .L633+12
 11235 002e 1A78     		ldrb	r2, [r3]
 11236 0030 4132     		add	r2, r2, #65
 11237 0032 02A8     		add	r0, sp, #8
 11238 0034 2C49     		ldr	r1, .L633+16
 11239 0036 FFF7FEFF 		bl	sprintf
 11240              	.LVL968:
3607:screens.c     **** 		display_f1_text( tstring, TSMAX, ICON_BALE_COUNT_RESET_TEXT_X, ICON_BALE_COUNT_RESET_TEXT_Y, FIXE
 11241              		.loc 1 3607 0
 11242 003a 0023     		mov	r3, #0
 11243 003c 0093     		str	r3, [sp]
 11244 003e 02A8     		add	r0, sp, #8
 11245 0040 1A21     		mov	r1, #26
 11246 0042 2822     		mov	r2, #40
 11247 0044 3423     		mov	r3, #52
 11248 0046 FFF7FEFF 		bl	display_f1_text
 11249              	.LVL969:
3613:screens.c     **** 		write_bitmap( adm, TAB,       0,  107, OR );
 11250              		.loc 1 3613 0
 11251 004a 284F     		ldr	r7, .L633+20
 11252 004c 0096     		str	r6, [sp]
 11253 004e 281C     		mov	r0, r5
 11254 0050 391C     		mov	r1, r7
 11255 0052 0022     		mov	r2, #0
 11256 0054 6B23     		mov	r3, #107
 11257 0056 FFF7FEFF 		bl	write_bitmap
 11258              	.LVL970:
3614:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
 11259              		.loc 1 3614 0
 11260 005a 0096     		str	r6, [sp]
 11261 005c 281C     		mov	r0, r5
 11262 005e 391C     		mov	r1, r7
 11263 0060 1F22     		mov	r2, #31
 11264 0062 6B23     		mov	r3, #107
 11265 0064 FFF7FEFF 		bl	write_bitmap
 11266              	.LVL971:
3615:screens.c     **** 		write_bitmap( adm, TABNAV_,   62, 102, OR ); // NAVIGATION: Blank
 11267              		.loc 1 3615 0
 11268 0068 0096     		str	r6, [sp]
 11269 006a 281C     		mov	r0, r5
 11270 006c 2049     		ldr	r1, .L633+24
 11271 006e 3E22     		mov	r2, #62
 11272 0070 6623     		mov	r3, #102
 11273 0072 FFF7FEFF 		bl	write_bitmap
 11274              	.LVL972:
3616:screens.c     **** 		write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
 11275              		.loc 1 3616 0
 11276 0076 0096     		str	r6, [sp]
 11277 0078 281C     		mov	r0, r5
 11278 007a 1E49     		ldr	r1, .L633+28
 11279 007c 6322     		mov	r2, #99
 11280 007e 6B23     		mov	r3, #107
 11281 0080 FFF7FEFF 		bl	write_bitmap
 11282              	.LVL973:
3617:screens.c     **** 		write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
 11283              		.loc 1 3617 0
 11284 0084 0096     		str	r6, [sp]
 11285 0086 281C     		mov	r0, r5
 11286 0088 1B49     		ldr	r1, .L633+32
 11287 008a 8222     		mov	r2, #130
 11288 008c 6B23     		mov	r3, #107
 11289 008e FFF7FEFF 		bl	write_bitmap
 11290              	.LVL974:
 11291              	.L630:
3621:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 11292              		.loc 1 3621 0
 11293 0092 0020     		mov	r0, #0
 11294 0094 FFF7FEFF 		bl	ClockDisplay
 11295              	.LVL975:
3627:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP); 
 11296              		.loc 1 3627 0
 11297 0098 A30F     		lsr	r3, r4, #30
3629:screens.c     **** 	if( key_status )
 11298              		.loc 1 3629 0
 11299 009a 18D0     		beq	.L629
3631:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 11300              		.loc 1 3631 0
 11301 009c A400     		lsl	r4, r4, #2
 11302              	.LVL976:
 11303 009e A408     		lsr	r4, r4, #2
 11304              	.LVL977:
3633:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey CROSS)
 11305              		.loc 1 3633 0
 11306 00a0 8023     		mov	r3, #128
 11307 00a2 5B00     		lsl	r3, r3, #1
 11308 00a4 9C42     		cmp	r4, r3
 11309 00a6 03D1     		bne	.L632
3635:screens.c     **** 			escape = 1;	  
 11310              		.loc 1 3635 0
 11311 00a8 0122     		mov	r2, #1
 11312 00aa 144B     		ldr	r3, .L633+36
 11313 00ac 1A70     		strb	r2, [r3]
 11314 00ae 0EE0     		b	.L629
 11315              	.L632:
3637:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
 11316              		.loc 1 3637 0
 11317 00b0 082C     		cmp	r4, #8
 11318 00b2 0CD1     		bne	.L629
3639:screens.c     **** 			pFac.pf.BaleTotal[SelectedBaleStore] = PF_GW302_BaleTotal[PF_MIN]; // 0UL
 11319              		.loc 1 3639 0
 11320 00b4 0B4B     		ldr	r3, .L633+12
 11321 00b6 1A78     		ldrb	r2, [r3]
 11322 00b8 0432     		add	r2, r2, #4
 11323 00ba 9200     		lsl	r2, r2, #2
 11324 00bc 104B     		ldr	r3, .L633+40
 11325 00be 5968     		ldr	r1, [r3, #4]
 11326 00c0 104B     		ldr	r3, .L633+44
 11327 00c2 D150     		str	r1, [r2, r3]
3640:screens.c     **** 			SavecalDelayWithinMenus = 1;
 11328              		.loc 1 3640 0
 11329 00c4 0123     		mov	r3, #1
 11330 00c6 104A     		ldr	r2, .L633+48
 11331 00c8 1370     		strb	r3, [r2]
3641:screens.c     **** 			escape = 1;	  
 11332              		.loc 1 3641 0
 11333 00ca 0C4A     		ldr	r2, .L633+36
 11334 00cc 1370     		strb	r3, [r2]
 11335              	.L629:
3645:screens.c     **** }
 11336              		.loc 1 3645 0
 11337 00ce 0BB0     		add	sp, sp, #44
 11338              		@ sp needed for prologue
 11339              	.LVL978:
 11340 00d0 F0BC     		pop	{r4, r5, r6, r7}
 11341 00d2 01BC     		pop	{r0}
 11342 00d4 0047     		bx	r0
 11343              	.L634:
 11344 00d6 C046     		.align	2
 11345              	.L633:
 11346 00d8 00000000 		.word	startup
 11347 00dc 00000000 		.word	adm
 11348 00e0 00000000 		.word	ICON_BALE_COUNT_RESET
 11349 00e4 00000000 		.word	SelectedBaleStore
 11350 00e8 B4030000 		.word	.LC451
 11351 00ec 00000000 		.word	TAB
 11352 00f0 00000000 		.word	TABNAV_
 11353 00f4 00000000 		.word	TABTICK
 11354 00f8 00000000 		.word	TABCROSS
 11355 00fc 00000000 		.word	escape
 11356 0100 00000000 		.word	PF_GW302_BaleTotal
 11357 0104 00000000 		.word	pFac
 11358 0108 00000000 		.word	SavecalDelayWithinMenus
 11359              		.cfi_endproc
 11360              	.LFE384:
 11362              		.section	.text.screen120,"ax",%progbits
 11363              		.align	2
 11364              		.global	screen120
 11365              		.code	16
 11366              		.thumb_func
 11368              	screen120:
 11369              	.LFB383:
3510:screens.c     **** {
 11370              		.loc 1 3510 0
 11371              		.cfi_startproc
 11372              	.LVL979:
 11373 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11374              	.LCFI33:
 11375              		.cfi_def_cfa_offset 20
 11376              		.cfi_offset 4, -20
 11377              		.cfi_offset 5, -16
 11378              		.cfi_offset 6, -12
 11379              		.cfi_offset 7, -8
 11380              		.cfi_offset 14, -4
 11381 0002 8BB0     		sub	sp, sp, #44
 11382              	.LCFI34:
 11383              		.cfi_def_cfa_offset 64
 11384 0004 041C     		mov	r4, r0
3515:screens.c     **** 	if( !startup )
 11385              		.loc 1 3515 0
 11386 0006 324B     		ldr	r3, .L639
 11387 0008 1B78     		ldrb	r3, [r3]
 11388 000a 002B     		cmp	r3, #0
 11389 000c 41D1     		bne	.L636
3517:screens.c     **** 		startup = 1;
 11390              		.loc 1 3517 0
 11391 000e 0122     		mov	r2, #1
 11392 0010 2F4B     		ldr	r3, .L639
 11393 0012 1A70     		strb	r2, [r3]
3519:screens.c     **** 		draw_frame( adm );
 11394              		.loc 1 3519 0
 11395 0014 2F4D     		ldr	r5, .L639+4
 11396 0016 281C     		mov	r0, r5
 11397              	.LVL980:
 11398 0018 FFF7FEFF 		bl	draw_frame
 11399              	.LVL981:
3525:screens.c     **** 		write_bitmap( adm, ICON_LUBE_COUNT_RESET, ICON_LUBE_COUNT_RESET_X, ICON_LUBE_COUNT_RESET_Y, OR );
 11400              		.loc 1 3525 0
 11401 001c 0226     		mov	r6, #2
 11402 001e 0096     		str	r6, [sp]
 11403 0020 281C     		mov	r0, r5
 11404 0022 2D49     		ldr	r1, .L639+8
 11405 0024 2622     		mov	r2, #38
 11406 0026 2D23     		mov	r3, #45
 11407 0028 FFF7FEFF 		bl	write_bitmap
 11408              	.LVL982:
3527:screens.c     **** 		sprintf( tstring, "%3u", pFac.pf.GW302_LubeAlarm );
 11409              		.loc 1 3527 0
 11410 002c 7E23     		mov	r3, #126
 11411 002e 2B4A     		ldr	r2, .L639+12
 11412 0030 D25A     		ldrh	r2, [r2, r3]
 11413 0032 02A8     		add	r0, sp, #8
 11414 0034 2A49     		ldr	r1, .L639+16
 11415 0036 FFF7FEFF 		bl	sprintf
 11416              	.LVL983:
3528:screens.c     **** 		display_f1_text( tstring, TSMAX, ICON_LUBE_COUNT_RESET_TEXT_X, ICON_LUBE_COUNT_RESET_TEXT_Y, FIXE
 11417              		.loc 1 3528 0
 11418 003a 0023     		mov	r3, #0
 11419 003c 0093     		str	r3, [sp]
 11420 003e 02A8     		add	r0, sp, #8
 11421 0040 1A21     		mov	r1, #26
 11422 0042 6222     		mov	r2, #98
 11423 0044 3423     		mov	r3, #52
 11424 0046 FFF7FEFF 		bl	display_f1_text
 11425              	.LVL984:
3534:screens.c     **** 		write_bitmap( adm, TAB,       0,  107, OR );
 11426              		.loc 1 3534 0
 11427 004a 264F     		ldr	r7, .L639+20
 11428 004c 0096     		str	r6, [sp]
 11429 004e 281C     		mov	r0, r5
 11430 0050 391C     		mov	r1, r7
 11431 0052 0022     		mov	r2, #0
 11432 0054 6B23     		mov	r3, #107
 11433 0056 FFF7FEFF 		bl	write_bitmap
 11434              	.LVL985:
3535:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
 11435              		.loc 1 3535 0
 11436 005a 0096     		str	r6, [sp]
 11437 005c 281C     		mov	r0, r5
 11438 005e 391C     		mov	r1, r7
 11439 0060 1F22     		mov	r2, #31
 11440 0062 6B23     		mov	r3, #107
 11441 0064 FFF7FEFF 		bl	write_bitmap
 11442              	.LVL986:
3536:screens.c     **** 		write_bitmap( adm, TABNAV_,   62, 102, OR ); // NAVIGATION: Blank
 11443              		.loc 1 3536 0
 11444 0068 0096     		str	r6, [sp]
 11445 006a 281C     		mov	r0, r5
 11446 006c 1E49     		ldr	r1, .L639+24
 11447 006e 3E22     		mov	r2, #62
 11448 0070 6623     		mov	r3, #102
 11449 0072 FFF7FEFF 		bl	write_bitmap
 11450              	.LVL987:
3537:screens.c     **** 		write_bitmap( adm, TABTICK,   99, 107, OR ); // TICK
 11451              		.loc 1 3537 0
 11452 0076 0096     		str	r6, [sp]
 11453 0078 281C     		mov	r0, r5
 11454 007a 1C49     		ldr	r1, .L639+28
 11455 007c 6322     		mov	r2, #99
 11456 007e 6B23     		mov	r3, #107
 11457 0080 FFF7FEFF 		bl	write_bitmap
 11458              	.LVL988:
3538:screens.c     **** 		write_bitmap( adm, TABCROSS, 130, 107, OR ); // CROSS
 11459              		.loc 1 3538 0
 11460 0084 0096     		str	r6, [sp]
 11461 0086 281C     		mov	r0, r5
 11462 0088 1949     		ldr	r1, .L639+32
 11463 008a 8222     		mov	r2, #130
 11464 008c 6B23     		mov	r3, #107
 11465 008e FFF7FEFF 		bl	write_bitmap
 11466              	.LVL989:
 11467              	.L636:
3542:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 11468              		.loc 1 3542 0
 11469 0092 0020     		mov	r0, #0
 11470 0094 FFF7FEFF 		bl	ClockDisplay
 11471              	.LVL990:
3548:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 11472              		.loc 1 3548 0
 11473 0098 A30F     		lsr	r3, r4, #30
3550:screens.c     **** 	if( key_status )
 11474              		.loc 1 3550 0
 11475 009a 15D0     		beq	.L635
3552:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 11476              		.loc 1 3552 0
 11477 009c A400     		lsl	r4, r4, #2
 11478              	.LVL991:
 11479 009e A408     		lsr	r4, r4, #2
 11480              	.LVL992:
3554:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey CROSS)
 11481              		.loc 1 3554 0
 11482 00a0 8023     		mov	r3, #128
 11483 00a2 5B00     		lsl	r3, r3, #1
 11484 00a4 9C42     		cmp	r4, r3
 11485 00a6 03D1     		bne	.L638
3556:screens.c     **** 			escape = 1;
 11486              		.loc 1 3556 0
 11487 00a8 0122     		mov	r2, #1
 11488 00aa 124B     		ldr	r3, .L639+36
 11489 00ac 1A70     		strb	r2, [r3]
 11490 00ae 0BE0     		b	.L635
 11491              	.L638:
3558:screens.c     **** 		else if( lkey == SW_IR ) // inner-right button (softkey TICK)
 11492              		.loc 1 3558 0
 11493 00b0 082C     		cmp	r4, #8
 11494 00b2 09D1     		bne	.L635
3560:screens.c     **** 			pRun.pr.LubeCounter = pFac.pf.GW302_LubeAlarm;
 11495              		.loc 1 3560 0
 11496 00b4 7E23     		mov	r3, #126
 11497 00b6 094A     		ldr	r2, .L639+12
 11498 00b8 D25A     		ldrh	r2, [r2, r3]
 11499 00ba 0F4B     		ldr	r3, .L639+40
 11500 00bc DA80     		strh	r2, [r3, #6]
3561:screens.c     **** 			SavecalDelayWithinMenus = 1;
 11501              		.loc 1 3561 0
 11502 00be 0123     		mov	r3, #1
 11503 00c0 0E4A     		ldr	r2, .L639+44
 11504 00c2 1370     		strb	r3, [r2]
3562:screens.c     **** 			escape = 1;
 11505              		.loc 1 3562 0
 11506 00c4 0B4A     		ldr	r2, .L639+36
 11507 00c6 1370     		strb	r3, [r2]
 11508              	.L635:
3566:screens.c     **** }
 11509              		.loc 1 3566 0
 11510 00c8 0BB0     		add	sp, sp, #44
 11511              		@ sp needed for prologue
 11512              	.LVL993:
 11513 00ca F0BC     		pop	{r4, r5, r6, r7}
 11514 00cc 01BC     		pop	{r0}
 11515 00ce 0047     		bx	r0
 11516              	.L640:
 11517              		.align	2
 11518              	.L639:
 11519 00d0 00000000 		.word	startup
 11520 00d4 00000000 		.word	adm
 11521 00d8 00000000 		.word	ICON_LUBE_COUNT_RESET
 11522 00dc 00000000 		.word	pFac
 11523 00e0 B8030000 		.word	.LC465
 11524 00e4 00000000 		.word	TAB
 11525 00e8 00000000 		.word	TABNAV_
 11526 00ec 00000000 		.word	TABTICK
 11527 00f0 00000000 		.word	TABCROSS
 11528 00f4 00000000 		.word	escape
 11529 00f8 00000000 		.word	pRun
 11530 00fc 00000000 		.word	SavecalDelayWithinMenus
 11531              		.cfi_endproc
 11532              	.LFE383:
 11534              		.global	__aeabi_uidiv
 11535              		.global	__aeabi_uidivmod
 11536              		.section	.text.screen112,"ax",%progbits
 11537              		.align	2
 11538              		.global	screen112
 11539              		.code	16
 11540              		.thumb_func
 11542              	screen112:
 11543              	.LFB381:
2931:screens.c     **** {
 11544              		.loc 1 2931 0
 11545              		.cfi_startproc
 11546              	.LVL994:
 11547 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11548              	.LCFI35:
 11549              		.cfi_def_cfa_offset 20
 11550              		.cfi_offset 4, -20
 11551              		.cfi_offset 5, -16
 11552              		.cfi_offset 6, -12
 11553              		.cfi_offset 7, -8
 11554              		.cfi_offset 14, -4
 11555 0002 5F46     		mov	r7, fp
 11556 0004 5646     		mov	r6, sl
 11557 0006 4D46     		mov	r5, r9
 11558 0008 4446     		mov	r4, r8
 11559 000a F0B4     		push	{r4, r5, r6, r7}
 11560              	.LCFI36:
 11561              		.cfi_def_cfa_offset 36
 11562              		.cfi_offset 8, -36
 11563              		.cfi_offset 9, -32
 11564              		.cfi_offset 10, -28
 11565              		.cfi_offset 11, -24
 11566 000c 93B0     		sub	sp, sp, #76
 11567              	.LCFI37:
 11568              		.cfi_def_cfa_offset 112
 11569 000e 8246     		mov	sl, r0
2940:screens.c     **** 	if( startup != 1 )
 11570              		.loc 1 2940 0
 11571 0010 B64B     		ldr	r3, .L690
 11572 0012 1B78     		ldrb	r3, [r3]
 11573 0014 012B     		cmp	r3, #1
 11574 0016 7ED0     		beq	.L642
2942:screens.c     **** 		startup = 1;
 11575              		.loc 1 2942 0
 11576 0018 0122     		mov	r2, #1
 11577 001a B44B     		ldr	r3, .L690
 11578 001c 1A70     		strb	r2, [r3]
2944:screens.c     **** 		draw_frame( adm );
 11579              		.loc 1 2944 0
 11580 001e B44C     		ldr	r4, .L690+4
 11581 0020 201C     		mov	r0, r4
 11582              	.LVL995:
 11583 0022 FFF7FEFF 		bl	draw_frame
 11584              	.LVL996:
2950:screens.c     **** 		write_bitmap( adm, TAB,       99, 107, OR );
 11585              		.loc 1 2950 0
 11586 0026 0225     		mov	r5, #2
 11587 0028 0095     		str	r5, [sp]
 11588 002a 201C     		mov	r0, r4
 11589 002c B149     		ldr	r1, .L690+8
 11590 002e 6322     		mov	r2, #99
 11591 0030 6B23     		mov	r3, #107
 11592 0032 FFF7FEFF 		bl	write_bitmap
 11593              	.LVL997:
2951:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
 11594              		.loc 1 2951 0
 11595 0036 0095     		str	r5, [sp]
 11596 0038 201C     		mov	r0, r4
 11597 003a AF49     		ldr	r1, .L690+12
 11598 003c 8222     		mov	r2, #130
 11599 003e 6B23     		mov	r3, #107
 11600 0040 FFF7FEFF 		bl	write_bitmap
 11601              	.LVL998:
 11602 0044 1025     		mov	r5, #16
 11603 0046 0024     		mov	r4, #0
2981:screens.c     **** 					write_bitmap( adm, ICON_BALE_COUNT, x_pos, y_pos, OR );
 11604              		.loc 1 2981 0
 11605 0048 A948     		ldr	r0, .L690+4
 11606 004a 8346     		mov	fp, r0
 11607 004c AB4A     		ldr	r2, .L690+16
 11608 004e 9146     		mov	r9, r2
 11609 0050 0223     		mov	r3, #2
 11610 0052 9846     		mov	r8, r3
 11611 0054 2FE0     		b	.L643
 11612              	.LVL999:
 11613              	.L647:
2967:screens.c     **** 					write_bitmap( adm, ICON_LUBE_COUNT, x_pos, y_pos, OR );
 11614              		.loc 1 2967 0
 11615 0056 4046     		mov	r0, r8
 11616 0058 0090     		str	r0, [sp]
 11617 005a A548     		ldr	r0, .L690+4
 11618 005c A849     		ldr	r1, .L690+20
 11619 005e 5C22     		mov	r2, #92
 11620 0060 2B1C     		mov	r3, r5
 11621 0062 FFF7FEFF 		bl	write_bitmap
 11622              	.LVL1000:
 11623 0066 20E0     		b	.L644
 11624              	.LVL1001:
 11625              	.L689:
2969:screens.c     **** 				else if( (x==1) && (y==5) ) /* (2,6) Grand Total Bales */
 11626              		.loc 1 2969 0
 11627 0068 052E     		cmp	r6, #5
 11628 006a 08D1     		bne	.L645
 11629              	.LVL1002:
2974:screens.c     **** 					write_bitmap( adm, ICON_GRAND_TOTAL_BALES, x_pos, y_pos, OR );
 11630              		.loc 1 2974 0
 11631 006c 4246     		mov	r2, r8
 11632 006e 0092     		str	r2, [sp]
 11633 0070 9F48     		ldr	r0, .L690+4
 11634 0072 A449     		ldr	r1, .L690+24
 11635 0074 5C22     		mov	r2, #92
 11636 0076 2B1C     		mov	r3, r5
 11637 0078 FFF7FEFF 		bl	write_bitmap
 11638              	.LVL1003:
 11639 007c 15E0     		b	.L644
 11640              	.LVL1004:
 11641              	.L645:
2981:screens.c     **** 					write_bitmap( adm, ICON_BALE_COUNT, x_pos, y_pos, OR );
 11642              		.loc 1 2981 0
 11643 007e 4346     		mov	r3, r8
 11644 0080 0093     		str	r3, [sp]
 11645 0082 9B48     		ldr	r0, .L690+4
 11646 0084 9D49     		ldr	r1, .L690+16
 11647 0086 5C22     		mov	r2, #92
 11648 0088 2B1C     		mov	r3, r5
 11649 008a FFF7FEFF 		bl	write_bitmap
 11650              	.LVL1005:
2930:screens.c     **** void screen112( unsigned int lkey )
 11651              		.loc 1 2930 0
 11652 008e 221C     		mov	r2, r4
 11653 0090 4732     		add	r2, r2, #71
2987:screens.c     **** 					sprintf ( tstring, "%c", ('A' + i) );
 11654              		.loc 1 2987 0
 11655 0092 05A8     		add	r0, sp, #20
 11656 0094 9C49     		ldr	r1, .L690+28
 11657 0096 FFF7FEFF 		bl	sprintf
 11658              	.LVL1006:
2988:screens.c     **** 					display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );
 11659              		.loc 1 2988 0
 11660 009a 0023     		mov	r3, #0
 11661 009c 0093     		str	r3, [sp]
 11662 009e 05A8     		add	r0, sp, #20
 11663 00a0 1A21     		mov	r1, #26
 11664 00a2 5C22     		mov	r2, #92
 11665 00a4 3B1C     		mov	r3, r7
 11666 00a6 FFF7FEFF 		bl	display_f1_text
 11667              	.LVL1007:
 11668              	.L644:
 11669 00aa 0134     		add	r4, r4, #1
 11670 00ac 0E35     		add	r5, r5, #14
 11671 00ae 2D06     		lsl	r5, r5, #24
 11672 00b0 2D0E     		lsr	r5, r5, #24
2957:screens.c     **** 		for( y=0; y<6; y++ )
 11673              		.loc 1 2957 0
 11674 00b2 062C     		cmp	r4, #6
 11675 00b4 1DD0     		beq	.L646
 11676              	.LVL1008:
 11677              	.L643:
2930:screens.c     **** void screen112( unsigned int lkey )
 11678              		.loc 1 2930 0 discriminator 1
 11679 00b6 EF1C     		add	r7, r5, #3
 11680 00b8 3F06     		lsl	r7, r7, #24
 11681 00ba 3F0E     		lsr	r7, r7, #24
 11682 00bc 2606     		lsl	r6, r4, #24
 11683 00be 360E     		lsr	r6, r6, #24
 11684              	.LVL1009:
2981:screens.c     **** 					write_bitmap( adm, ICON_BALE_COUNT, x_pos, y_pos, OR );
 11685              		.loc 1 2981 0 discriminator 1
 11686 00c0 4046     		mov	r0, r8
 11687 00c2 0090     		str	r0, [sp]
 11688 00c4 5846     		mov	r0, fp
 11689 00c6 4946     		mov	r1, r9
 11690 00c8 0E22     		mov	r2, #14
 11691 00ca 2B1C     		mov	r3, r5
 11692 00cc FFF7FEFF 		bl	write_bitmap
 11693              	.LVL1010:
2930:screens.c     **** void screen112( unsigned int lkey )
 11694              		.loc 1 2930 0 discriminator 1
 11695 00d0 221C     		mov	r2, r4
 11696 00d2 4132     		add	r2, r2, #65
2987:screens.c     **** 					sprintf ( tstring, "%c", ('A' + i) );
 11697              		.loc 1 2987 0 discriminator 1
 11698 00d4 05A8     		add	r0, sp, #20
 11699 00d6 8C49     		ldr	r1, .L690+28
 11700 00d8 FFF7FEFF 		bl	sprintf
 11701              	.LVL1011:
2988:screens.c     **** 					display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );
 11702              		.loc 1 2988 0 discriminator 1
 11703 00dc 0023     		mov	r3, #0
 11704 00de 0093     		str	r3, [sp]
 11705 00e0 05A8     		add	r0, sp, #20
 11706 00e2 1A21     		mov	r1, #26
 11707 00e4 0E22     		mov	r2, #14
 11708 00e6 3B1C     		mov	r3, r7
 11709 00e8 FFF7FEFF 		bl	display_f1_text
 11710              	.LVL1012:
2962:screens.c     **** 				if( (x==1) && (y==4) ) /* (2,5) Lube Count */
 11711              		.loc 1 2962 0 discriminator 1
 11712 00ec 042E     		cmp	r6, #4
 11713 00ee BBD1     		bne	.L689
 11714 00f0 B1E7     		b	.L647
 11715              	.LVL1013:
 11716              	.L646:
3001:screens.c     **** 		sprintf ( tstring, "%6lu", pFac.pf.GrandBaleTotal );
 11717              		.loc 1 3001 0
 11718 00f2 864B     		ldr	r3, .L690+32
 11719 00f4 9A68     		ldr	r2, [r3, #8]
 11720 00f6 05A8     		add	r0, sp, #20
 11721 00f8 8549     		ldr	r1, .L690+36
 11722 00fa FFF7FEFF 		bl	sprintf
 11723              	.LVL1014:
3002:screens.c     **** 		display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );
 11724              		.loc 1 3002 0
 11725 00fe 0023     		mov	r3, #0
 11726 0100 0093     		str	r3, [sp]
 11727 0102 05A8     		add	r0, sp, #20
 11728 0104 1A21     		mov	r1, #26
 11729 0106 7522     		mov	r2, #117
 11730 0108 5923     		mov	r3, #89
 11731 010a FFF7FEFF 		bl	display_f1_text
 11732              	.LVL1015:
3005:screens.c     **** 		old_BaleStore = 0xff;
 11733              		.loc 1 3005 0
 11734 010e FF24     		mov	r4, #255
3004:screens.c     **** 		old_selection = 0xff;
 11735              		.loc 1 3004 0
 11736 0110 FF22     		mov	r2, #255
 11737 0112 0392     		str	r2, [sp, #12]
 11738 0114 05E0     		b	.L649
 11739              	.LVL1016:
 11740              	.L642:
3009:screens.c     **** 		old_selection = selection;
 11741              		.loc 1 3009 0
 11742 0116 7F4B     		ldr	r3, .L690+40
 11743 0118 1B78     		ldrb	r3, [r3]
 11744 011a 0393     		str	r3, [sp, #12]
 11745              	.LVL1017:
3010:screens.c     **** 		old_BaleStore = pFac.pf.BaleStore;
 11746              		.loc 1 3010 0
 11747 011c 3823     		mov	r3, #56
 11748 011e 7B4A     		ldr	r2, .L690+32
 11749 0120 D45C     		ldrb	r4, [r2, r3]
 11750              	.LVL1018:
 11751              	.L649:
3014:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 11752              		.loc 1 3014 0
 11753 0122 0020     		mov	r0, #0
 11754 0124 FFF7FEFF 		bl	ClockDisplay
 11755              	.LVL1019:
3021:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 11756              		.loc 1 3021 0
 11757 0128 5046     		mov	r0, sl
 11758 012a 830F     		lsr	r3, r0, #30
3023:screens.c     **** 	if( key_status )
 11759              		.loc 1 3023 0
 11760 012c 00D1     		bne	.LCB11299
 11761 012e 8AE0     		b	.L650	@long jump
 11762              	.LCB11299:
 11763              	.LVL1020:
3025:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 11764              		.loc 1 3025 0
 11765 0130 8300     		lsl	r3, r0, #2
 11766 0132 9B08     		lsr	r3, r3, #2
 11767              	.LVL1021:
3027:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
 11768              		.loc 1 3027 0
 11769 0134 8022     		mov	r2, #128
 11770 0136 5200     		lsl	r2, r2, #1
 11771 0138 9342     		cmp	r3, r2
 11772 013a 03D1     		bne	.L651
3029:screens.c     **** 			escape = 1;
 11773              		.loc 1 3029 0
 11774 013c 0122     		mov	r2, #1
 11775 013e 764B     		ldr	r3, .L690+44
 11776              	.LVL1022:
 11777 0140 1A70     		strb	r2, [r3]
 11778 0142 80E0     		b	.L650
 11779              	.LVL1023:
 11780              	.L651:
3031:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey ENT)
 11781              		.loc 1 3031 0
 11782 0144 042B     		cmp	r3, #4
 11783 0146 07D1     		bne	.L652
3033:screens.c     **** 			if( selection < 10 ) /* Bale count, A - J */
 11784              		.loc 1 3033 0
 11785 0148 724B     		ldr	r3, .L690+40
 11786              	.LVL1024:
 11787 014a 1B78     		ldrb	r3, [r3]
 11788 014c 092B     		cmp	r3, #9
 11789 014e 7AD8     		bhi	.L650
3035:screens.c     **** 				pFac.pf.BaleStore = selection; /* Reset current bale store to that currently selected */
 11790              		.loc 1 3035 0
 11791 0150 3822     		mov	r2, #56
 11792 0152 6E49     		ldr	r1, .L690+32
 11793 0154 8B54     		strb	r3, [r1, r2]
 11794 0156 76E0     		b	.L650
 11795              	.LVL1025:
 11796              	.L652:
3038:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey RESET)
 11797              		.loc 1 3038 0
 11798 0158 8022     		mov	r2, #128
 11799 015a 9200     		lsl	r2, r2, #2
 11800 015c 9342     		cmp	r3, r2
 11801 015e 0FD1     		bne	.L653
3040:screens.c     **** 			if( selection < 10 ) /* Bale count, A - J */
 11802              		.loc 1 3040 0
 11803 0160 6C4B     		ldr	r3, .L690+40
 11804              	.LVL1026:
 11805 0162 1B78     		ldrb	r3, [r3]
 11806 0164 092B     		cmp	r3, #9
 11807 0166 05D8     		bhi	.L654
3042:screens.c     **** 				SelectedBaleStore = selection;
 11808              		.loc 1 3042 0
 11809 0168 6C4A     		ldr	r2, .L690+48
 11810 016a 1370     		strb	r3, [r2]
3043:screens.c     **** 				window = screen121;  /* Bale Count Reset Screen */
 11811              		.loc 1 3043 0
 11812 016c 6C4A     		ldr	r2, .L690+52
 11813 016e 6D4B     		ldr	r3, .L690+56
 11814 0170 1A60     		str	r2, [r3]
 11815 0172 68E0     		b	.L650
 11816              	.L654:
3045:screens.c     **** 			else if( selection == 10 ) /* Lube count */
 11817              		.loc 1 3045 0
 11818 0174 0A2B     		cmp	r3, #10
 11819 0176 66D1     		bne	.L650
3047:screens.c     **** 				window = screen120;  /* Lube Count Reset Screen */
 11820              		.loc 1 3047 0
 11821 0178 6B4A     		ldr	r2, .L690+60
 11822 017a 6A4B     		ldr	r3, .L690+56
 11823 017c 1A60     		str	r2, [r3]
 11824 017e 62E0     		b	.L650
 11825              	.LVL1027:
 11826              	.L653:
3050:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
 11827              		.loc 1 3050 0
 11828 0180 202B     		cmp	r3, #32
 11829 0182 07D1     		bne	.L655
3052:screens.c     **** 			if( selection ) /* Bale count, B - J & Lube Count */
 11830              		.loc 1 3052 0
 11831 0184 634B     		ldr	r3, .L690+40
 11832              	.LVL1028:
 11833 0186 1B78     		ldrb	r3, [r3]
 11834 0188 002B     		cmp	r3, #0
 11835 018a 5CD0     		beq	.L650
3054:screens.c     **** 				selection--;
 11836              		.loc 1 3054 0
 11837 018c 013B     		sub	r3, r3, #1
 11838 018e 614A     		ldr	r2, .L690+40
 11839 0190 1370     		strb	r3, [r2]
 11840 0192 58E0     		b	.L650
 11841              	.LVL1029:
 11842              	.L655:
3057:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
 11843              		.loc 1 3057 0
 11844 0194 402B     		cmp	r3, #64
 11845 0196 07D1     		bne	.L656
3059:screens.c     **** 			if( selection < 11 ) /* Bale count, A - J & Lube Count */
 11846              		.loc 1 3059 0
 11847 0198 5E4B     		ldr	r3, .L690+40
 11848              	.LVL1030:
 11849 019a 1B78     		ldrb	r3, [r3]
 11850 019c 0A2B     		cmp	r3, #10
 11851 019e 52D8     		bhi	.L650
3061:screens.c     **** 				selection++;
 11852              		.loc 1 3061 0
 11853 01a0 0133     		add	r3, r3, #1
 11854 01a2 5C4A     		ldr	r2, .L690+40
 11855 01a4 1370     		strb	r3, [r2]
 11856 01a6 4EE0     		b	.L650
 11857              	.LVL1031:
 11858              	.L656:
3064:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
 11859              		.loc 1 3064 0
 11860 01a8 102B     		cmp	r3, #16
 11861 01aa 25D1     		bne	.L657
3066:screens.c     **** 			if( selection == 6 )      /* Bale count, G */
 11862              		.loc 1 3066 0
 11863 01ac 594B     		ldr	r3, .L690+40
 11864              	.LVL1032:
 11865 01ae 1B78     		ldrb	r3, [r3]
 11866 01b0 062B     		cmp	r3, #6
 11867 01b2 03D1     		bne	.L658
3067:screens.c     **** 				selection = 0; /* Bale count, A */
 11868              		.loc 1 3067 0
 11869 01b4 0022     		mov	r2, #0
 11870 01b6 574B     		ldr	r3, .L690+40
 11871 01b8 1A70     		strb	r2, [r3]
 11872 01ba 44E0     		b	.L650
 11873              	.L658:
3068:screens.c     **** 			else if( selection == 7 ) /* Bale count, H */
 11874              		.loc 1 3068 0
 11875 01bc 072B     		cmp	r3, #7
 11876 01be 03D1     		bne	.L659
3069:screens.c     **** 				selection = 1; /* Bale count, B */
 11877              		.loc 1 3069 0
 11878 01c0 0122     		mov	r2, #1
 11879 01c2 544B     		ldr	r3, .L690+40
 11880 01c4 1A70     		strb	r2, [r3]
 11881 01c6 3EE0     		b	.L650
 11882              	.L659:
3070:screens.c     **** 			else if( selection == 8 ) /* Bale count, I */
 11883              		.loc 1 3070 0
 11884 01c8 082B     		cmp	r3, #8
 11885 01ca 03D1     		bne	.L660
3071:screens.c     **** 				selection = 2; /* Bale count, C */
 11886              		.loc 1 3071 0
 11887 01cc 0222     		mov	r2, #2
 11888 01ce 514B     		ldr	r3, .L690+40
 11889 01d0 1A70     		strb	r2, [r3]
 11890 01d2 38E0     		b	.L650
 11891              	.L660:
3072:screens.c     **** 			else if( selection == 9 ) /* Bale count, J */
 11892              		.loc 1 3072 0
 11893 01d4 092B     		cmp	r3, #9
 11894 01d6 03D1     		bne	.L661
3073:screens.c     **** 				selection = 3; /* Bale count, D */
 11895              		.loc 1 3073 0
 11896 01d8 0322     		mov	r2, #3
 11897 01da 4E4B     		ldr	r3, .L690+40
 11898 01dc 1A70     		strb	r2, [r3]
 11899 01de 32E0     		b	.L650
 11900              	.L661:
3074:screens.c     **** 			else if( selection == 10 ) /* Lube Count */
 11901              		.loc 1 3074 0
 11902 01e0 0A2B     		cmp	r3, #10
 11903 01e2 03D1     		bne	.L662
3075:screens.c     **** 				selection = 4; /* Bale count, E */
 11904              		.loc 1 3075 0
 11905 01e4 0422     		mov	r2, #4
 11906 01e6 4B4B     		ldr	r3, .L690+40
 11907 01e8 1A70     		strb	r2, [r3]
 11908 01ea 2CE0     		b	.L650
 11909              	.L662:
3076:screens.c     **** 			else if( selection == 11 ) /* Grand Total Bales */
 11910              		.loc 1 3076 0
 11911 01ec 0B2B     		cmp	r3, #11
 11912 01ee 2AD1     		bne	.L650
3077:screens.c     **** 				selection = 5; /* Bale count, F */
 11913              		.loc 1 3077 0
 11914 01f0 0522     		mov	r2, #5
 11915 01f2 484B     		ldr	r3, .L690+40
 11916 01f4 1A70     		strb	r2, [r3]
 11917 01f6 26E0     		b	.L650
 11918              	.LVL1033:
 11919              	.L657:
3079:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
 11920              		.loc 1 3079 0
 11921 01f8 802B     		cmp	r3, #128
 11922 01fa 24D1     		bne	.L650
3081:screens.c     **** 			if( selection == 0 )      /* Bale count, A */
 11923              		.loc 1 3081 0
 11924 01fc 454B     		ldr	r3, .L690+40
 11925              	.LVL1034:
 11926 01fe 1B78     		ldrb	r3, [r3]
 11927 0200 002B     		cmp	r3, #0
 11928 0202 03D1     		bne	.L663
3082:screens.c     **** 				selection = 6; /* Bale count, G */
 11929              		.loc 1 3082 0
 11930 0204 0622     		mov	r2, #6
 11931 0206 434B     		ldr	r3, .L690+40
 11932 0208 1A70     		strb	r2, [r3]
 11933 020a 1CE0     		b	.L650
 11934              	.L663:
3083:screens.c     **** 			else if( selection == 1 ) /* Bale count, B */
 11935              		.loc 1 3083 0
 11936 020c 012B     		cmp	r3, #1
 11937 020e 03D1     		bne	.L664
3084:screens.c     **** 				selection = 7; /* Bale count, H */
 11938              		.loc 1 3084 0
 11939 0210 0722     		mov	r2, #7
 11940 0212 404B     		ldr	r3, .L690+40
 11941 0214 1A70     		strb	r2, [r3]
 11942 0216 16E0     		b	.L650
 11943              	.L664:
3085:screens.c     **** 			else if( selection == 2 ) /* Bale count, C */
 11944              		.loc 1 3085 0
 11945 0218 022B     		cmp	r3, #2
 11946 021a 03D1     		bne	.L665
3086:screens.c     **** 				selection = 8; /* Bale count, I */
 11947              		.loc 1 3086 0
 11948 021c 0822     		mov	r2, #8
 11949 021e 3D4B     		ldr	r3, .L690+40
 11950 0220 1A70     		strb	r2, [r3]
 11951 0222 10E0     		b	.L650
 11952              	.L665:
3087:screens.c     **** 			else if( selection == 3 ) /* Bale count, D */
 11953              		.loc 1 3087 0
 11954 0224 032B     		cmp	r3, #3
 11955 0226 03D1     		bne	.L666
3088:screens.c     **** 				selection = 9; /* Bale count, J */
 11956              		.loc 1 3088 0
 11957 0228 0922     		mov	r2, #9
 11958 022a 3A4B     		ldr	r3, .L690+40
 11959 022c 1A70     		strb	r2, [r3]
 11960 022e 0AE0     		b	.L650
 11961              	.L666:
3089:screens.c     **** 			else if( selection == 4 ) /* Bale count, E */
 11962              		.loc 1 3089 0
 11963 0230 042B     		cmp	r3, #4
 11964 0232 03D1     		bne	.L667
3090:screens.c     **** 				selection = 10; /* Lube Count */
 11965              		.loc 1 3090 0
 11966 0234 0A22     		mov	r2, #10
 11967 0236 374B     		ldr	r3, .L690+40
 11968 0238 1A70     		strb	r2, [r3]
 11969 023a 04E0     		b	.L650
 11970              	.L667:
3091:screens.c     **** 			else if( selection == 5 ) /* Bale count, F */
 11971              		.loc 1 3091 0
 11972 023c 052B     		cmp	r3, #5
 11973 023e 02D1     		bne	.L650
3092:screens.c     **** 				selection = 11; /* Grand Total Bales */	
 11974              		.loc 1 3092 0
 11975 0240 0B22     		mov	r2, #11
 11976 0242 344B     		ldr	r3, .L690+40
 11977 0244 1A70     		strb	r2, [r3]
 11978              	.LVL1035:
 11979              	.L650:
3101:screens.c     **** 	if( pFac.pf.BaleStore != old_BaleStore )
 11980              		.loc 1 3101 0
 11981 0246 3823     		mov	r3, #56
 11982 0248 304A     		ldr	r2, .L690+32
 11983 024a D35C     		ldrb	r3, [r2, r3]
 11984 024c A342     		cmp	r3, r4
 11985 024e 00D1     		bne	.LCB11513
 11986 0250 CBE1     		b	.L668	@long jump
 11987              	.LCB11513:
3103:screens.c     **** 		if( old_BaleStore != 0xff ) /* not starting up */
 11988              		.loc 1 3103 0
 11989 0252 FF2C     		cmp	r4, #255
 11990 0254 00D1     		bne	.LCB11515
 11991 0256 C8E1     		b	.L668	@long jump
 11992              	.LCB11515:
 11993              	.LVL1036:
3106:screens.c     **** 			x = old_BaleStore / 6 ;
 11994              		.loc 1 3106 0
 11995 0258 201C     		mov	r0, r4
 11996              	.LVL1037:
 11997 025a 0621     		mov	r1, #6
 11998 025c FFF7FEFF 		bl	__aeabi_uidiv
 11999              	.LVL1038:
3107:screens.c     **** 			x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + CURRENT_SELECTION_INDIC
 12000              		.loc 1 3107 0
 12001 0260 0306     		lsl	r3, r0, #24
 12002 0262 1B0E     		lsr	r3, r3, #24
 12003 0264 4E25     		mov	r5, #78
 12004 0266 5D43     		mul	r5, r3
 12005 0268 2735     		add	r5, r5, #39
3110:screens.c     **** 			draw_box( adm, x_pos, y_pos, (x_pos + CURRENT_SELECTION_INDICATOR_DIM_X - 1), (y_pos + CURRENT_S
 12006              		.loc 1 3110 0
 12007 026a 2D06     		lsl	r5, r5, #24
 12008 026c 2D0E     		lsr	r5, r5, #24
3108:screens.c     **** 			y = old_BaleStore % 6 ;
 12009              		.loc 1 3108 0
 12010 026e 201C     		mov	r0, r4
 12011 0270 0621     		mov	r1, #6
 12012 0272 FFF7FEFF 		bl	__aeabi_uidivmod
 12013              	.LVL1039:
3109:screens.c     **** 			y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + CURRENT_SELECTION_INDIC
 12014              		.loc 1 3109 0
 12015 0276 0B06     		lsl	r3, r1, #24
 12016 0278 1B0E     		lsr	r3, r3, #24
 12017 027a D900     		lsl	r1, r3, #3
 12018 027c C91A     		sub	r1, r1, r3
 12019 027e 4906     		lsl	r1, r1, #25
3110:screens.c     **** 			draw_box( adm, x_pos, y_pos, (x_pos + CURRENT_SELECTION_INDICATOR_DIM_X - 1), (y_pos + CURRENT_S
 12020              		.loc 1 3110 0
 12021 0280 8022     		mov	r2, #128
 12022 0282 5205     		lsl	r2, r2, #21
 12023 0284 8918     		add	r1, r1, r2
 12024 0286 2B1C     		mov	r3, r5
 12025 0288 0B33     		add	r3, r3, #11
 12026 028a 1B06     		lsl	r3, r3, #24
 12027 028c 1B0E     		lsr	r3, r3, #24
 12028 028e 0A0E     		lsr	r2, r1, #24
 12029 0290 C020     		mov	r0, #192
 12030 0292 0005     		lsl	r0, r0, #20
 12031 0294 0918     		add	r1, r1, r0
 12032 0296 090E     		lsr	r1, r1, #24
 12033 0298 0091     		str	r1, [sp]
 12034 029a 4021     		mov	r1, #64
 12035 029c 0191     		str	r1, [sp, #4]
 12036 029e 1448     		ldr	r0, .L690+4
 12037 02a0 291C     		mov	r1, r5
 12038 02a2 FFF7FEFF 		bl	draw_box
 12039              	.LVL1040:
 12040 02a6 A0E1     		b	.L668
 12041              	.LVL1041:
 12042              	.L674:
3123:screens.c     **** 			if( (x==1) && (y==4) ) /* (2,5) Lube Count */
 12043              		.loc 1 3123 0
 12044 02a8 631E     		sub	r3, r4, #1
 12045 02aa 5A42     		neg	r2, r3
 12046 02ac 5341     		adc	r3, r3, r2
 12047 02ae 002B     		cmp	r3, #0
 12048 02b0 40D0     		beq	.L669
 12049 02b2 042E     		cmp	r6, #4
 12050 02b4 3ED1     		bne	.L669
 12051              	.LVL1042:
3127:screens.c     **** 				if( pRun.pr.LubeCounter < 0 )
 12052              		.loc 1 3127 0
 12053 02b6 1D4B     		ldr	r3, .L690+64
 12054 02b8 DA88     		ldrh	r2, [r3, #6]
 12055 02ba 1304     		lsl	r3, r2, #16
 12056 02bc 1B14     		asr	r3, r3, #16
 12057 02be 05D5     		bpl	.L670
3128:screens.c     **** 					sprintf( tstring, "   %3u", 0 );
 12058              		.loc 1 3128 0
 12059 02c0 05A8     		add	r0, sp, #20
 12060 02c2 1B49     		ldr	r1, .L690+68
 12061 02c4 4A46     		mov	r2, r9
 12062 02c6 FFF7FEFF 		bl	sprintf
 12063              	.LVL1043:
 12064 02ca 05E0     		b	.L671
 12065              	.L670:
3130:screens.c     **** 					sprintf( tstring, "   %3u", pRun.pr.LubeCounter );
 12066              		.loc 1 3130 0
 12067 02cc 1204     		lsl	r2, r2, #16
 12068 02ce 1214     		asr	r2, r2, #16
 12069 02d0 05A8     		add	r0, sp, #20
 12070 02d2 1749     		ldr	r1, .L690+68
 12071 02d4 FFF7FEFF 		bl	sprintf
 12072              	.LVL1044:
 12073              	.L671:
3131:screens.c     **** 				display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );
 12074              		.loc 1 3131 0
 12075 02d8 4A46     		mov	r2, r9
 12076 02da 0092     		str	r2, [sp]
 12077 02dc 05A8     		add	r0, sp, #20
 12078 02de 1A21     		mov	r1, #26
 12079 02e0 2A1C     		mov	r2, r5
 12080 02e2 4346     		mov	r3, r8
 12081 02e4 FFF7FEFF 		bl	display_f1_text
 12082              	.LVL1045:
 12083 02e8 39E0     		b	.L672
 12084              	.L691:
 12085 02ea C046     		.align	2
 12086              	.L690:
 12087 02ec 00000000 		.word	startup
 12088 02f0 00000000 		.word	adm
 12089 02f4 00000000 		.word	TAB
 12090 02f8 00000000 		.word	TABESC
 12091 02fc 00000000 		.word	ICON_BALE_COUNT
 12092 0300 00000000 		.word	ICON_LUBE_COUNT
 12093 0304 00000000 		.word	ICON_GRAND_TOTAL_BALES
 12094 0308 B4030000 		.word	.LC451
 12095 030c 00000000 		.word	pFac
 12096 0310 BC030000 		.word	.LC483
 12097 0314 00000000 		.word	selection
 12098 0318 00000000 		.word	escape
 12099 031c 00000000 		.word	SelectedBaleStore
 12100 0320 00000000 		.word	screen121
 12101 0324 00000000 		.word	window
 12102 0328 00000000 		.word	screen120
 12103 032c 00000000 		.word	pRun
 12104 0330 C4030000 		.word	.LC493
 12105              	.LVL1046:
 12106              	.L669:
3133:screens.c     **** 			else if( (x==1) && (y==5) ) /* (2,6) Grand Total Bales */
 12107              		.loc 1 3133 0
 12108 0334 002B     		cmp	r3, #0
 12109 0336 02D0     		beq	.L687
 12110 0338 5346     		mov	r3, sl
 12111 033a 002B     		cmp	r3, #0
 12112 033c 0FD1     		bne	.L672
 12113              	.L687:
 12114              	.LVL1047:
3142:screens.c     **** 				sprintf ( tstring, "%6lu", pFac.pf.BaleTotal[i] );
 12115              		.loc 1 3142 0
 12116 033e 3A1D     		add	r2, r7, #4
 12117 0340 9200     		lsl	r2, r2, #2
 12118 0342 B24B     		ldr	r3, .L692
 12119 0344 D258     		ldr	r2, [r2, r3]
 12120 0346 05A8     		add	r0, sp, #20
 12121 0348 B149     		ldr	r1, .L692+4
 12122 034a FFF7FEFF 		bl	sprintf
 12123              	.LVL1048:
3143:screens.c     **** 				display_f1_text( tstring, TSMAX, x_pos, y_pos, FIXED );	
 12124              		.loc 1 3143 0
 12125 034e 4846     		mov	r0, r9
 12126 0350 0090     		str	r0, [sp]
 12127 0352 05A8     		add	r0, sp, #20
 12128 0354 1A21     		mov	r1, #26
 12129 0356 2A1C     		mov	r2, r5
 12130 0358 4346     		mov	r3, r8
 12131 035a FFF7FEFF 		bl	display_f1_text
 12132              	.LVL1049:
 12133              	.L672:
3120:screens.c     **** 		for( x=0; x<2; x++)
 12134              		.loc 1 3120 0
 12135 035e 0134     		add	r4, r4, #1
 12136 0360 2406     		lsl	r4, r4, #24
 12137 0362 240E     		lsr	r4, r4, #24
 12138              	.LVL1050:
 12139 0364 4E35     		add	r5, r5, #78
 12140 0366 2D06     		lsl	r5, r5, #24
 12141 0368 2D0E     		lsr	r5, r5, #24
 12142 036a 0637     		add	r7, r7, #6
 12143 036c 3F06     		lsl	r7, r7, #24
 12144 036e 3F0E     		lsr	r7, r7, #24
 12145 0370 022C     		cmp	r4, #2
 12146 0372 99D1     		bne	.L674
3118:screens.c     **** 	for( y=0; y<6; y++)
 12147              		.loc 1 3118 0
 12148 0374 0136     		add	r6, r6, #1
 12149 0376 3606     		lsl	r6, r6, #24
 12150 0378 360E     		lsr	r6, r6, #24
 12151              	.LVL1051:
 12152 037a 4346     		mov	r3, r8
 12153 037c 0E33     		add	r3, r3, #14
 12154 037e 1B06     		lsl	r3, r3, #24
 12155 0380 1B0E     		lsr	r3, r3, #24
 12156 0382 9846     		mov	r8, r3
 12157 0384 062E     		cmp	r6, #6
 12158 0386 08D0     		beq	.L675
 12159              	.LVL1052:
 12160              	.L686:
3004:screens.c     **** 		old_selection = 0xff;
 12161              		.loc 1 3004 0 discriminator 1
 12162 0388 371C     		mov	r7, r6
 12163 038a 5D46     		mov	r5, fp
 12164 038c 4C46     		mov	r4, r9
3133:screens.c     **** 			else if( (x==1) && (y==5) ) /* (2,6) Grand Total Bales */
 12165              		.loc 1 3133 0 discriminator 1
 12166 038e 731F     		sub	r3, r6, #5
 12167 0390 5A42     		neg	r2, r3
 12168 0392 5341     		adc	r3, r3, r2
 12169 0394 1B06     		lsl	r3, r3, #24
 12170 0396 9A46     		mov	sl, r3
 12171 0398 86E7     		b	.L674
 12172              	.LVL1053:
 12173              	.L675:
3152:screens.c     **** 	if( selection != old_selection )
 12174              		.loc 1 3152 0
 12175 039a 9E4B     		ldr	r3, .L692+8
 12176 039c 1B78     		ldrb	r3, [r3]
 12177 039e 039A     		ldr	r2, [sp, #12]
 12178 03a0 9342     		cmp	r3, r2
 12179 03a2 48D0     		beq	.L676
3154:screens.c     **** 		if( old_selection != 0xff ) /* not starting up */
 12180              		.loc 1 3154 0
 12181 03a4 FF2A     		cmp	r2, #255
 12182 03a6 25D0     		beq	.L677
 12183              	.LVL1054:
3157:screens.c     **** 			x = old_selection / 6 ;
 12184              		.loc 1 3157 0
 12185 03a8 101C     		mov	r0, r2
 12186 03aa 0621     		mov	r1, #6
 12187 03ac FFF7FEFF 		bl	__aeabi_uidiv
 12188              	.LVL1055:
3158:screens.c     **** 			x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + SELECTION_POINTER_OFFSE
 12189              		.loc 1 3158 0
 12190 03b0 0306     		lsl	r3, r0, #24
 12191 03b2 1B0E     		lsr	r3, r3, #24
 12192 03b4 4E24     		mov	r4, #78
 12193 03b6 5C43     		mul	r4, r3
 12194 03b8 0634     		add	r4, r4, #6
3161:screens.c     **** 			draw_box( adm, x_pos, y_pos, (x_pos + SELECTION_POINTER_DIM_X - 1), (y_pos + SELECTION_POINTER_D
 12195              		.loc 1 3161 0
 12196 03ba 2406     		lsl	r4, r4, #24
 12197 03bc 240E     		lsr	r4, r4, #24
3159:screens.c     **** 			y = old_selection % 6 ;
 12198              		.loc 1 3159 0
 12199 03be 0398     		ldr	r0, [sp, #12]
 12200 03c0 0621     		mov	r1, #6
 12201 03c2 FFF7FEFF 		bl	__aeabi_uidivmod
 12202              	.LVL1056:
3160:screens.c     **** 			y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + SELECTION_POINTER_OFFSE
 12203              		.loc 1 3160 0
 12204 03c6 0B06     		lsl	r3, r1, #24
 12205 03c8 1B0E     		lsr	r3, r3, #24
 12206 03ca D900     		lsl	r1, r3, #3
 12207 03cc C91A     		sub	r1, r1, r3
 12208 03ce 4906     		lsl	r1, r1, #25
3161:screens.c     **** 			draw_box( adm, x_pos, y_pos, (x_pos + SELECTION_POINTER_DIM_X - 1), (y_pos + SELECTION_POINTER_D
 12209              		.loc 1 3161 0
 12210 03d0 8023     		mov	r3, #128
 12211 03d2 5B05     		lsl	r3, r3, #21
 12212 03d4 C918     		add	r1, r1, r3
 12213 03d6 E31C     		add	r3, r4, #3
 12214 03d8 1B06     		lsl	r3, r3, #24
 12215 03da 1B0E     		lsr	r3, r3, #24
 12216 03dc 0A0E     		lsr	r2, r1, #24
 12217 03de C020     		mov	r0, #192
 12218 03e0 0005     		lsl	r0, r0, #20
 12219 03e2 0918     		add	r1, r1, r0
 12220 03e4 090E     		lsr	r1, r1, #24
 12221 03e6 0091     		str	r1, [sp]
 12222 03e8 4021     		mov	r1, #64
 12223 03ea 0191     		str	r1, [sp, #4]
 12224 03ec 8A48     		ldr	r0, .L692+12
 12225 03ee 211C     		mov	r1, r4
 12226 03f0 FFF7FEFF 		bl	draw_box
 12227              	.LVL1057:
 12228              	.L677:
3165:screens.c     **** 		x = selection / 6 ;
 12229              		.loc 1 3165 0
 12230 03f4 874B     		ldr	r3, .L692+8
 12231 03f6 1C78     		ldrb	r4, [r3]
 12232              	.LVL1058:
 12233 03f8 201C     		mov	r0, r4
 12234 03fa 0621     		mov	r1, #6
 12235 03fc FFF7FEFF 		bl	__aeabi_uidiv
 12236              	.LVL1059:
3166:screens.c     **** 		x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + SELECTION_POINTER_OFFSET
 12237              		.loc 1 3166 0
 12238 0400 0506     		lsl	r5, r0, #24
 12239 0402 2D0E     		lsr	r5, r5, #24
 12240 0404 4E23     		mov	r3, #78
 12241 0406 5D43     		mul	r5, r3
 12242 0408 0635     		add	r5, r5, #6
3169:screens.c     **** 		write_bitmap( adm, ICON_SELECTION_POINTER, x_pos, y_pos, OR ); /* Draw pointer in new position */
 12243              		.loc 1 3169 0
 12244 040a 2D06     		lsl	r5, r5, #24
 12245 040c 2D0E     		lsr	r5, r5, #24
3167:screens.c     **** 		y = selection % 6 ;
 12246              		.loc 1 3167 0
 12247 040e 201C     		mov	r0, r4
 12248 0410 0621     		mov	r1, #6
 12249 0412 FFF7FEFF 		bl	__aeabi_uidivmod
 12250              	.LVL1060:
3168:screens.c     **** 		y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + SELECTION_POINTER_OFFSET
 12251              		.loc 1 3168 0
 12252 0416 0906     		lsl	r1, r1, #24
 12253 0418 090E     		lsr	r1, r1, #24
 12254 041a CB00     		lsl	r3, r1, #3
 12255 041c 5B1A     		sub	r3, r3, r1
 12256 041e 5B06     		lsl	r3, r3, #25
3169:screens.c     **** 		write_bitmap( adm, ICON_SELECTION_POINTER, x_pos, y_pos, OR ); /* Draw pointer in new position */
 12257              		.loc 1 3169 0
 12258 0420 8022     		mov	r2, #128
 12259 0422 5205     		lsl	r2, r2, #21
 12260 0424 9B18     		add	r3, r3, r2
 12261 0426 1B0E     		lsr	r3, r3, #24
 12262 0428 0222     		mov	r2, #2
 12263 042a 0092     		str	r2, [sp]
 12264 042c 7A48     		ldr	r0, .L692+12
 12265 042e 7B49     		ldr	r1, .L692+16
 12266 0430 2A1C     		mov	r2, r5
 12267 0432 FFF7FEFF 		bl	write_bitmap
 12268              	.LVL1061:
 12269              	.L676:
3177:screens.c     **** 	if( half_second )
 12270              		.loc 1 3177 0
 12271 0436 7A4B     		ldr	r3, .L692+20
 12272 0438 1B78     		ldrb	r3, [r3]
 12273 043a 002B     		cmp	r3, #0
 12274 043c 22D0     		beq	.L678
3179:screens.c     **** 		if( selection < 11 ) /* Bale count, A - J  &  Lube count  */
 12275              		.loc 1 3179 0
 12276 043e 754B     		ldr	r3, .L692+8
 12277 0440 1C78     		ldrb	r4, [r3]
 12278 0442 0A2C     		cmp	r4, #10
 12279 0444 1ED8     		bhi	.L678
 12280              	.LVL1062:
3182:screens.c     **** 			x = selection / 6 ;
 12281              		.loc 1 3182 0
 12282 0446 201C     		mov	r0, r4
 12283 0448 0621     		mov	r1, #6
 12284 044a FFF7FEFF 		bl	__aeabi_uidiv
 12285              	.LVL1063:
3183:screens.c     **** 			x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + COUNT_OFFSET_X;
 12286              		.loc 1 3183 0
 12287 044e 0306     		lsl	r3, r0, #24
 12288 0450 1B0E     		lsr	r3, r3, #24
 12289 0452 4E25     		mov	r5, #78
 12290 0454 5D43     		mul	r5, r3
 12291 0456 2735     		add	r5, r5, #39
3186:screens.c     **** 			display_f1_text( "      ", TSMAX, x_pos, y_pos, FIXED );
 12292              		.loc 1 3186 0
 12293 0458 2D06     		lsl	r5, r5, #24
 12294 045a 2D0E     		lsr	r5, r5, #24
3184:screens.c     **** 			y = selection % 6 ;
 12295              		.loc 1 3184 0
 12296 045c 201C     		mov	r0, r4
 12297 045e 0621     		mov	r1, #6
 12298 0460 FFF7FEFF 		bl	__aeabi_uidivmod
 12299              	.LVL1064:
3185:screens.c     **** 			y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + COUNT_OFFSET_Y;
 12300              		.loc 1 3185 0
 12301 0464 0B06     		lsl	r3, r1, #24
 12302 0466 1B0E     		lsr	r3, r3, #24
 12303 0468 DA00     		lsl	r2, r3, #3
 12304 046a D31A     		sub	r3, r2, r3
 12305 046c 5B06     		lsl	r3, r3, #25
3186:screens.c     **** 			display_f1_text( "      ", TSMAX, x_pos, y_pos, FIXED );
 12306              		.loc 1 3186 0
 12307 046e 9820     		mov	r0, #152
 12308 0470 4005     		lsl	r0, r0, #21
 12309 0472 1B18     		add	r3, r3, r0
 12310 0474 1B0E     		lsr	r3, r3, #24
 12311 0476 0022     		mov	r2, #0
 12312 0478 0092     		str	r2, [sp]
 12313 047a 6A48     		ldr	r0, .L692+24
 12314 047c 1A21     		mov	r1, #26
 12315 047e 2A1C     		mov	r2, r5
 12316 0480 FFF7FEFF 		bl	display_f1_text
 12317              	.LVL1065:
 12318              	.L678:
3195:screens.c     **** 	x = pFac.pf.BaleStore / 6 ;
 12319              		.loc 1 3195 0
 12320 0484 3823     		mov	r3, #56
 12321 0486 614A     		ldr	r2, .L692
 12322 0488 D45C     		ldrb	r4, [r2, r3]
 12323              	.LVL1066:
 12324 048a 201C     		mov	r0, r4
 12325 048c 0621     		mov	r1, #6
 12326 048e FFF7FEFF 		bl	__aeabi_uidiv
 12327              	.LVL1067:
3196:screens.c     **** 	x_pos = BALE_COUNT_MENU_ORIGIN_X + (BALE_COUNT_MENU_ITEM_OFFSET_X * x) + CURRENT_SELECTION_INDICAT
 12328              		.loc 1 3196 0
 12329 0492 0506     		lsl	r5, r0, #24
 12330 0494 2D0E     		lsr	r5, r5, #24
 12331 0496 4E23     		mov	r3, #78
 12332 0498 5D43     		mul	r5, r3
 12333 049a 2735     		add	r5, r5, #39
3199:screens.c     **** 	write_bitmap( adm, ICON_CURRENT_SELECTION_INDICATOR, x_pos, y_pos, OR ); /* Draw tick in new posit
 12334              		.loc 1 3199 0
 12335 049c 2D06     		lsl	r5, r5, #24
 12336 049e 2D0E     		lsr	r5, r5, #24
3197:screens.c     **** 	y = pFac.pf.BaleStore % 6 ;
 12337              		.loc 1 3197 0
 12338 04a0 201C     		mov	r0, r4
 12339 04a2 0621     		mov	r1, #6
 12340 04a4 FFF7FEFF 		bl	__aeabi_uidivmod
 12341              	.LVL1068:
3198:screens.c     **** 	y_pos = BALE_COUNT_MENU_ORIGIN_Y + (BALE_COUNT_MENU_ITEM_OFFSET_Y * y) + CURRENT_SELECTION_INDICAT
 12342              		.loc 1 3198 0
 12343 04a8 0906     		lsl	r1, r1, #24
 12344 04aa 090E     		lsr	r1, r1, #24
 12345 04ac CB00     		lsl	r3, r1, #3
 12346 04ae 5B1A     		sub	r3, r3, r1
 12347 04b0 5B06     		lsl	r3, r3, #25
3199:screens.c     **** 	write_bitmap( adm, ICON_CURRENT_SELECTION_INDICATOR, x_pos, y_pos, OR ); /* Draw tick in new posit
 12348              		.loc 1 3199 0
 12349 04b2 8022     		mov	r2, #128
 12350 04b4 5205     		lsl	r2, r2, #21
 12351 04b6 9B18     		add	r3, r3, r2
 12352 04b8 1B0E     		lsr	r3, r3, #24
 12353 04ba 0222     		mov	r2, #2
 12354 04bc 0092     		str	r2, [sp]
 12355 04be 5648     		ldr	r0, .L692+12
 12356 04c0 5949     		ldr	r1, .L692+28
 12357 04c2 2A1C     		mov	r2, r5
 12358 04c4 FFF7FEFF 		bl	write_bitmap
 12359              	.LVL1069:
3205:screens.c     **** 	if( selection != old_selection )
 12360              		.loc 1 3205 0
 12361 04c8 524B     		ldr	r3, .L692+8
 12362 04ca 1B78     		ldrb	r3, [r3]
 12363 04cc 0398     		ldr	r0, [sp, #12]
 12364 04ce 8342     		cmp	r3, r0
 12365 04d0 00D1     		bne	.LCB11911
 12366 04d2 91E0     		b	.L641	@long jump
 12367              	.LCB11911:
3208:screens.c     **** 		draw_box( adm, 1, 102, 62+36-1, 102+24-1,   CLEAR );
 12368              		.loc 1 3208 0
 12369 04d4 7D23     		mov	r3, #125
 12370 04d6 0093     		str	r3, [sp]
 12371 04d8 4023     		mov	r3, #64
 12372 04da 0193     		str	r3, [sp, #4]
 12373 04dc 4E48     		ldr	r0, .L692+12
 12374 04de 0121     		mov	r1, #1
 12375 04e0 6622     		mov	r2, #102
 12376 04e2 6123     		mov	r3, #97
 12377 04e4 FFF7FEFF 		bl	draw_box
 12378              	.LVL1070:
3210:screens.c     **** 		switch( selection )
 12379              		.loc 1 3210 0
 12380 04e8 4A4B     		ldr	r3, .L692+8
 12381 04ea 1A78     		ldrb	r2, [r3]
 12382 04ec 0A2A     		cmp	r2, #10
 12383 04ee 63D8     		bhi	.L680
 12384 04f0 9300     		lsl	r3, r2, #2
 12385 04f2 4E4A     		ldr	r2, .L692+32
 12386 04f4 D358     		ldr	r3, [r2, r3]
 12387 04f6 9F46     		mov	pc, r3
 12388              		.section	.rodata.screen112,"a",%progbits
 12389              		.align	2
 12390              	.L685:
 12391 0000 F8040000 		.word	.L681
 12392 0004 28050000 		.word	.L682
 12393 0008 28050000 		.word	.L682
 12394 000c 28050000 		.word	.L682
 12395 0010 28050000 		.word	.L682
 12396 0014 28050000 		.word	.L682
 12397 0018 58050000 		.word	.L683
 12398 001c 58050000 		.word	.L683
 12399 0020 58050000 		.word	.L683
 12400 0024 58050000 		.word	.L683
 12401 0028 88050000 		.word	.L684
 12402              		.section	.text.screen112
 12403              	.L681:
3213:screens.c     **** 			write_bitmap( adm, TABRESET,                    0, 107, OR ); // RESET
 12404              		.loc 1 3213 0
 12405 04f8 474C     		ldr	r4, .L692+12
 12406              	.LVL1071:
 12407 04fa 0225     		mov	r5, #2
 12408 04fc 0095     		str	r5, [sp]
 12409 04fe 201C     		mov	r0, r4
 12410 0500 4B49     		ldr	r1, .L692+36
 12411 0502 0022     		mov	r2, #0
 12412 0504 6B23     		mov	r3, #107
 12413 0506 FFF7FEFF 		bl	write_bitmap
 12414              	.LVL1072:
3214:screens.c     **** 			write_bitmap( adm, TAB_MAKE_SELECTION_CURRENT, 31, 107, OR ); // TICK
 12415              		.loc 1 3214 0
 12416 050a 0095     		str	r5, [sp]
 12417 050c 201C     		mov	r0, r4
 12418 050e 4949     		ldr	r1, .L692+40
 12419 0510 1F22     		mov	r2, #31
 12420 0512 6B23     		mov	r3, #107
 12421 0514 FFF7FEFF 		bl	write_bitmap
 12422              	.LVL1073:
3215:screens.c     **** 			write_bitmap( adm, TABNAV_DR,                  62, 102, OR ); // NAVIGATION: Down Right
 12423              		.loc 1 3215 0
 12424 0518 0095     		str	r5, [sp]
 12425 051a 201C     		mov	r0, r4
 12426 051c 4649     		ldr	r1, .L692+44
 12427 051e 3E22     		mov	r2, #62
 12428 0520 6623     		mov	r3, #102
 12429 0522 FFF7FEFF 		bl	write_bitmap
 12430              	.LVL1074:
3216:screens.c     **** 			break;
 12431              		.loc 1 3216 0
 12432 0526 67E0     		b	.L641
 12433              	.LVL1075:
 12434              	.L682:
3222:screens.c     **** 			write_bitmap( adm, TABRESET,                    0, 107, OR ); // RESET
 12435              		.loc 1 3222 0
 12436 0528 3B4C     		ldr	r4, .L692+12
 12437              	.LVL1076:
 12438 052a 0225     		mov	r5, #2
 12439 052c 0095     		str	r5, [sp]
 12440 052e 201C     		mov	r0, r4
 12441 0530 3F49     		ldr	r1, .L692+36
 12442 0532 0022     		mov	r2, #0
 12443 0534 6B23     		mov	r3, #107
 12444 0536 FFF7FEFF 		bl	write_bitmap
 12445              	.LVL1077:
3223:screens.c     **** 			write_bitmap( adm, TAB_MAKE_SELECTION_CURRENT, 31, 107, OR ); // TICK
 12446              		.loc 1 3223 0
 12447 053a 0095     		str	r5, [sp]
 12448 053c 201C     		mov	r0, r4
 12449 053e 3D49     		ldr	r1, .L692+40
 12450 0540 1F22     		mov	r2, #31
 12451 0542 6B23     		mov	r3, #107
 12452 0544 FFF7FEFF 		bl	write_bitmap
 12453              	.LVL1078:
3224:screens.c     **** 			write_bitmap( adm, TABNAV_UDR,                 62, 102, OR ); // NAVIGATION: Up Down Right
 12454              		.loc 1 3224 0
 12455 0548 0095     		str	r5, [sp]
 12456 054a 201C     		mov	r0, r4
 12457 054c 3B49     		ldr	r1, .L692+48
 12458 054e 3E22     		mov	r2, #62
 12459 0550 6623     		mov	r3, #102
 12460 0552 FFF7FEFF 		bl	write_bitmap
 12461              	.LVL1079:
3225:screens.c     **** 			break;
 12462              		.loc 1 3225 0
 12463 0556 4FE0     		b	.L641
 12464              	.LVL1080:
 12465              	.L683:
3230:screens.c     **** 			write_bitmap( adm, TABRESET,                    0, 107, OR ); // RESET
 12466              		.loc 1 3230 0
 12467 0558 2F4C     		ldr	r4, .L692+12
 12468              	.LVL1081:
 12469 055a 0225     		mov	r5, #2
 12470 055c 0095     		str	r5, [sp]
 12471 055e 201C     		mov	r0, r4
 12472 0560 3349     		ldr	r1, .L692+36
 12473 0562 0022     		mov	r2, #0
 12474 0564 6B23     		mov	r3, #107
 12475 0566 FFF7FEFF 		bl	write_bitmap
 12476              	.LVL1082:
3231:screens.c     **** 			write_bitmap( adm, TAB_MAKE_SELECTION_CURRENT, 31, 107, OR ); // TICK
 12477              		.loc 1 3231 0
 12478 056a 0095     		str	r5, [sp]
 12479 056c 201C     		mov	r0, r4
 12480 056e 3149     		ldr	r1, .L692+40
 12481 0570 1F22     		mov	r2, #31
 12482 0572 6B23     		mov	r3, #107
 12483 0574 FFF7FEFF 		bl	write_bitmap
 12484              	.LVL1083:
3232:screens.c     **** 			write_bitmap( adm, TABNAV_UDL,                 62, 102, OR ); // NAVIGATION: Up Down Left
 12485              		.loc 1 3232 0
 12486 0578 0095     		str	r5, [sp]
 12487 057a 201C     		mov	r0, r4
 12488 057c 3049     		ldr	r1, .L692+52
 12489 057e 3E22     		mov	r2, #62
 12490 0580 6623     		mov	r3, #102
 12491 0582 FFF7FEFF 		bl	write_bitmap
 12492              	.LVL1084:
3233:screens.c     **** 			break;
 12493              		.loc 1 3233 0
 12494 0586 37E0     		b	.L641
 12495              	.LVL1085:
 12496              	.L684:
3235:screens.c     **** 			write_bitmap( adm, TABRESET,    0, 107, OR ); // RESET
 12497              		.loc 1 3235 0
 12498 0588 234C     		ldr	r4, .L692+12
 12499              	.LVL1086:
 12500 058a 0225     		mov	r5, #2
 12501 058c 0095     		str	r5, [sp]
 12502 058e 201C     		mov	r0, r4
 12503 0590 2749     		ldr	r1, .L692+36
 12504 0592 0022     		mov	r2, #0
 12505 0594 6B23     		mov	r3, #107
 12506 0596 FFF7FEFF 		bl	write_bitmap
 12507              	.LVL1087:
3236:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
 12508              		.loc 1 3236 0
 12509 059a 0095     		str	r5, [sp]
 12510 059c 201C     		mov	r0, r4
 12511 059e 2949     		ldr	r1, .L692+56
 12512 05a0 1F22     		mov	r2, #31
 12513 05a2 6B23     		mov	r3, #107
 12514 05a4 FFF7FEFF 		bl	write_bitmap
 12515              	.LVL1088:
3237:screens.c     **** 			write_bitmap( adm, TABNAV_UDL, 62, 102, OR ); // NAVIGATION: Up Down Left
 12516              		.loc 1 3237 0
 12517 05a8 0095     		str	r5, [sp]
 12518 05aa 201C     		mov	r0, r4
 12519 05ac 2449     		ldr	r1, .L692+52
 12520 05ae 3E22     		mov	r2, #62
 12521 05b0 6623     		mov	r3, #102
 12522 05b2 FFF7FEFF 		bl	write_bitmap
 12523              	.LVL1089:
3238:screens.c     **** 			break;
 12524              		.loc 1 3238 0
 12525 05b6 1FE0     		b	.L641
 12526              	.LVL1090:
 12527              	.L680:
3240:screens.c     **** 			write_bitmap( adm, TAB,         0, 107, OR );
 12528              		.loc 1 3240 0
 12529 05b8 174C     		ldr	r4, .L692+12
 12530              	.LVL1091:
 12531 05ba 224E     		ldr	r6, .L692+56
 12532 05bc 0225     		mov	r5, #2
 12533 05be 0095     		str	r5, [sp]
 12534 05c0 201C     		mov	r0, r4
 12535 05c2 311C     		mov	r1, r6
 12536 05c4 0022     		mov	r2, #0
 12537 05c6 6B23     		mov	r3, #107
 12538 05c8 FFF7FEFF 		bl	write_bitmap
 12539              	.LVL1092:
3241:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
 12540              		.loc 1 3241 0
 12541 05cc 0095     		str	r5, [sp]
 12542 05ce 201C     		mov	r0, r4
 12543 05d0 311C     		mov	r1, r6
 12544 05d2 1F22     		mov	r2, #31
 12545 05d4 6B23     		mov	r3, #107
 12546 05d6 FFF7FEFF 		bl	write_bitmap
 12547              	.LVL1093:
3242:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR ); // NAVIGATION: Up Left
 12548              		.loc 1 3242 0
 12549 05da 0095     		str	r5, [sp]
 12550 05dc 201C     		mov	r0, r4
 12551 05de 1A49     		ldr	r1, .L692+60
 12552 05e0 3E22     		mov	r2, #62
 12553 05e2 6623     		mov	r3, #102
 12554 05e4 FFF7FEFF 		bl	write_bitmap
 12555              	.LVL1094:
3243:screens.c     **** 			break;
 12556              		.loc 1 3243 0
 12557 05e8 06E0     		b	.L641
 12558              	.LVL1095:
 12559              	.L668:
3004:screens.c     **** 		old_selection = 0xff;
 12560              		.loc 1 3004 0
 12561 05ea 1322     		mov	r2, #19
 12562 05ec 9046     		mov	r8, r2
 12563 05ee 0026     		mov	r6, #0
 12564 05f0 2723     		mov	r3, #39
 12565 05f2 9B46     		mov	fp, r3
 12566 05f4 B146     		mov	r9, r6
 12567 05f6 C7E6     		b	.L686
 12568              	.LVL1096:
 12569              	.L641:
3247:screens.c     **** }
 12570              		.loc 1 3247 0
 12571 05f8 13B0     		add	sp, sp, #76
 12572              		@ sp needed for prologue
 12573 05fa 3CBC     		pop	{r2, r3, r4, r5}
 12574 05fc 9046     		mov	r8, r2
 12575 05fe 9946     		mov	r9, r3
 12576 0600 A246     		mov	sl, r4
 12577 0602 AB46     		mov	fp, r5
 12578 0604 F0BC     		pop	{r4, r5, r6, r7}
 12579 0606 01BC     		pop	{r0}
 12580 0608 0047     		bx	r0
 12581              	.L693:
 12582 060a C046     		.align	2
 12583              	.L692:
 12584 060c 00000000 		.word	pFac
 12585 0610 BC030000 		.word	.LC483
 12586 0614 00000000 		.word	selection
 12587 0618 00000000 		.word	adm
 12588 061c 00000000 		.word	ICON_SELECTION_POINTER
 12589 0620 00000000 		.word	half_second
 12590 0624 CC030000 		.word	.LC497
 12591 0628 00000000 		.word	ICON_CURRENT_SELECTION_INDICATOR
 12592 062c 00000000 		.word	.L685
 12593 0630 00000000 		.word	TABRESET
 12594 0634 00000000 		.word	TAB_MAKE_SELECTION_CURRENT
 12595 0638 00000000 		.word	TABNAV_DR
 12596 063c 00000000 		.word	TABNAV_UDR
 12597 0640 00000000 		.word	TABNAV_UDL
 12598 0644 00000000 		.word	TAB
 12599 0648 00000000 		.word	TABNAV_UL
 12600              		.cfi_endproc
 12601              	.LFE381:
 12603              		.section	.text.screen150,"ax",%progbits
 12604              		.align	2
 12605              		.global	screen150
 12606              		.code	16
 12607              		.thumb_func
 12609              	screen150:
 12610              	.LFB398:
7126:screens.c     **** {
 12611              		.loc 1 7126 0
 12612              		.cfi_startproc
 12613              	.LVL1097:
 12614 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 12615              	.LCFI38:
 12616              		.cfi_def_cfa_offset 20
 12617              		.cfi_offset 4, -20
 12618              		.cfi_offset 5, -16
 12619              		.cfi_offset 6, -12
 12620              		.cfi_offset 7, -8
 12621              		.cfi_offset 14, -4
 12622 0002 4746     		mov	r7, r8
 12623 0004 80B4     		push	{r7}
 12624              	.LCFI39:
 12625              		.cfi_def_cfa_offset 24
 12626              		.cfi_offset 8, -24
 12627 0006 82B0     		sub	sp, sp, #8
 12628              	.LCFI40:
 12629              		.cfi_def_cfa_offset 32
 12630 0008 041C     		mov	r4, r0
7129:screens.c     **** 	if( !startup )
 12631              		.loc 1 7129 0
 12632 000a 7D4B     		ldr	r3, .L704
 12633 000c 1B78     		ldrb	r3, [r3]
 12634 000e 002B     		cmp	r3, #0
 12635 0010 34D1     		bne	.L695
7131:screens.c     **** 		startup = 1;
 12636              		.loc 1 7131 0
 12637 0012 0127     		mov	r7, #1
 12638 0014 7A4B     		ldr	r3, .L704
 12639 0016 1F70     		strb	r7, [r3]
7133:screens.c     **** 		draw_frame( adm );
 12640              		.loc 1 7133 0
 12641 0018 7A4D     		ldr	r5, .L704+4
 12642 001a 281C     		mov	r0, r5
 12643              	.LVL1098:
 12644 001c FFF7FEFF 		bl	draw_frame
 12645              	.LVL1099:
7135:screens.c     **** 		display_f1_text( ptText[30], TSMAX, 80, 12,  FIXED | CENTER | UNDERLINED  ); // "Digital Inputs"
 12646              		.loc 1 7135 0
 12647 0020 794B     		ldr	r3, .L704+8
 12648 0022 1B68     		ldr	r3, [r3]
 12649 0024 986F     		ldr	r0, [r3, #120]
 12650 0026 0A23     		mov	r3, #10
 12651 0028 0093     		str	r3, [sp]
 12652 002a 1A21     		mov	r1, #26
 12653 002c 5022     		mov	r2, #80
 12654 002e 0C23     		mov	r3, #12
 12655 0030 FFF7FEFF 		bl	display_f1_text
 12656              	.LVL1100:
7138:screens.c     **** 		write_bitmap( adm, TAB,        0, 107, OR );
 12657              		.loc 1 7138 0
 12658 0034 754A     		ldr	r2, .L704+12
 12659 0036 9046     		mov	r8, r2
 12660 0038 0226     		mov	r6, #2
 12661 003a 0096     		str	r6, [sp]
 12662 003c 281C     		mov	r0, r5
 12663 003e 111C     		mov	r1, r2
 12664 0040 0022     		mov	r2, #0
 12665 0042 6B23     		mov	r3, #107
 12666 0044 FFF7FEFF 		bl	write_bitmap
 12667              	.LVL1101:
7139:screens.c     **** 		write_bitmap( adm, TAB,       31, 107, OR );
 12668              		.loc 1 7139 0
 12669 0048 0096     		str	r6, [sp]
 12670 004a 281C     		mov	r0, r5
 12671 004c 4146     		mov	r1, r8
 12672 004e 1F22     		mov	r2, #31
 12673 0050 6B23     		mov	r3, #107
 12674 0052 FFF7FEFF 		bl	write_bitmap
 12675              	.LVL1102:
7140:screens.c     **** 		write_bitmap( adm, TABNAV_LR, 62, 102, OR ); // NAVIGATION: left right
 12676              		.loc 1 7140 0
 12677 0056 0096     		str	r6, [sp]
 12678 0058 281C     		mov	r0, r5
 12679 005a 6D49     		ldr	r1, .L704+16
 12680 005c 3E22     		mov	r2, #62
 12681 005e 6623     		mov	r3, #102
 12682 0060 FFF7FEFF 		bl	write_bitmap
 12683              	.LVL1103:
7144:screens.c     **** 		write_bitmap( adm, TABESC,   130, 107, OR ); // ESC
 12684              		.loc 1 7144 0
 12685 0064 0096     		str	r6, [sp]
 12686 0066 281C     		mov	r0, r5
 12687 0068 6A49     		ldr	r1, .L704+20
 12688 006a 8222     		mov	r2, #130
 12689 006c 6B23     		mov	r3, #107
 12690 006e FFF7FEFF 		bl	write_bitmap
 12691              	.LVL1104:
7146:screens.c     **** 		ResetSequenceFactors(SEQ_ALL);
 12692              		.loc 1 7146 0
 12693 0072 FF20     		mov	r0, #255
 12694 0074 FFF7FEFF 		bl	ResetSequenceFactors
 12695              	.LVL1105:
7147:screens.c     **** 		leaf = 1;
 12696              		.loc 1 7147 0
 12697 0078 674B     		ldr	r3, .L704+24
 12698 007a 1F70     		strb	r7, [r3]
 12699              	.L695:
7151:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 12700              		.loc 1 7151 0
 12701 007c 0020     		mov	r0, #0
 12702 007e FFF7FEFF 		bl	ClockDisplay
 12703              	.LVL1106:
7153:screens.c     **** 	if( lkey & (SW_NEW | SW_REP) )
 12704              		.loc 1 7153 0
 12705 0082 A30F     		lsr	r3, r4, #30
 12706 0084 25D0     		beq	.L696
7155:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 12707              		.loc 1 7155 0
 12708 0086 A400     		lsl	r4, r4, #2
 12709              	.LVL1107:
 12710 0088 A408     		lsr	r4, r4, #2
 12711              	.LVL1108:
7156:screens.c     **** 		if( lkey == SW_CR )
 12712              		.loc 1 7156 0
 12713 008a 802C     		cmp	r4, #128
 12714 008c 03D1     		bne	.L697
7158:screens.c     **** 			window = screen152; // Ananlog inputs
 12715              		.loc 1 7158 0
 12716 008e 634A     		ldr	r2, .L704+28
 12717 0090 634B     		ldr	r3, .L704+32
 12718 0092 1A60     		str	r2, [r3]
 12719 0094 1DE0     		b	.L696
 12720              	.L697:
7160:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) )
 12721              		.loc 1 7160 0
 12722 0096 102C     		cmp	r4, #16
 12723 0098 03D0     		beq	.L703
 12724 009a 631E     		sub	r3, r4, #1
 12725 009c FF3B     		sub	r3, r3, #255
 12726 009e 002B     		cmp	r3, #0
 12727 00a0 05D1     		bne	.L698
 12728              	.L703:
7162:screens.c     **** 			SavecalDelayWithinMenus = 1;
 12729              		.loc 1 7162 0
 12730 00a2 0123     		mov	r3, #1
 12731 00a4 5F4A     		ldr	r2, .L704+36
 12732 00a6 1370     		strb	r3, [r2]
7163:screens.c     **** 			escape = 1;
 12733              		.loc 1 7163 0
 12734 00a8 5F4A     		ldr	r2, .L704+40
 12735 00aa 1370     		strb	r3, [r2]
 12736 00ac 11E0     		b	.L696
 12737              	.L698:
7165:screens.c     **** 		else if( lkey == SW_IR ) // Toggling 'Chopping Knives Fitted' setting between enabled & disabled
 12738              		.loc 1 7165 0
 12739 00ae 082C     		cmp	r4, #8
 12740 00b0 0FD1     		bne	.L696
7167:screens.c     **** 			if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED )
 12741              		.loc 1 7167 0
 12742 00b2 8C23     		mov	r3, #140
 12743 00b4 5B00     		lsl	r3, r3, #1
 12744 00b6 5D4A     		ldr	r2, .L704+44
 12745 00b8 D35C     		ldrb	r3, [r2, r3]
 12746 00ba 012B     		cmp	r3, #1
 12747 00bc 04D1     		bne	.L700
7169:screens.c     **** 				pFac.pf.GW302_ChoppingKnivesFitted = CKF_DISABLED;
 12748              		.loc 1 7169 0
 12749 00be 0021     		mov	r1, #0
 12750 00c0 8C23     		mov	r3, #140
 12751 00c2 5B00     		lsl	r3, r3, #1
 12752 00c4 D154     		strb	r1, [r2, r3]
 12753 00c6 04E0     		b	.L696
 12754              	.L700:
7173:screens.c     **** 				pFac.pf.GW302_ChoppingKnivesFitted = CKF_ENABLED;
 12755              		.loc 1 7173 0
 12756 00c8 0121     		mov	r1, #1
 12757 00ca 8C23     		mov	r3, #140
 12758 00cc 5B00     		lsl	r3, r3, #1
 12759 00ce 574A     		ldr	r2, .L704+44
 12760 00d0 D154     		strb	r1, [r2, r3]
 12761              	.L696:
7180:screens.c     **** 	draw_box( adm, 99, 107, 128, 126, CLEAR ); // Clear 3rd tab area
 12762              		.loc 1 7180 0
 12763 00d2 7E23     		mov	r3, #126
 12764 00d4 0093     		str	r3, [sp]
 12765 00d6 4023     		mov	r3, #64
 12766 00d8 0193     		str	r3, [sp, #4]
 12767 00da 4A48     		ldr	r0, .L704+4
 12768 00dc 6321     		mov	r1, #99
 12769 00de 6B22     		mov	r2, #107
 12770 00e0 8023     		mov	r3, #128
 12771 00e2 FFF7FEFF 		bl	draw_box
 12772              	.LVL1109:
7181:screens.c     **** 	if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED )
 12773              		.loc 1 7181 0
 12774 00e6 8C23     		mov	r3, #140
 12775 00e8 5B00     		lsl	r3, r3, #1
 12776 00ea 504A     		ldr	r2, .L704+44
 12777 00ec D35C     		ldrb	r3, [r2, r3]
 12778 00ee 012B     		cmp	r3, #1
 12779 00f0 08D1     		bne	.L701
7183:screens.c     **** 		write_bitmap( adm, TABKNFON, 99, 107, OR );
 12780              		.loc 1 7183 0
 12781 00f2 0223     		mov	r3, #2
 12782 00f4 0093     		str	r3, [sp]
 12783 00f6 4348     		ldr	r0, .L704+4
 12784 00f8 4D49     		ldr	r1, .L704+48
 12785 00fa 6322     		mov	r2, #99
 12786 00fc 6B23     		mov	r3, #107
 12787 00fe FFF7FEFF 		bl	write_bitmap
 12788              	.LVL1110:
 12789 0102 07E0     		b	.L702
 12790              	.L701:
7187:screens.c     **** 		write_bitmap( adm, TABKNFOFF, 99, 107, OR );
 12791              		.loc 1 7187 0
 12792 0104 0223     		mov	r3, #2
 12793 0106 0093     		str	r3, [sp]
 12794 0108 3E48     		ldr	r0, .L704+4
 12795 010a 4A49     		ldr	r1, .L704+52
 12796 010c 6322     		mov	r2, #99
 12797 010e 6B23     		mov	r3, #107
 12798 0110 FFF7FEFF 		bl	write_bitmap
 12799              	.LVL1111:
 12800              	.L702:
7191:screens.c     **** 	draw_box( adm, 22, 36, 138, 70, CLEAR );
 12801              		.loc 1 7191 0
 12802 0114 3B4C     		ldr	r4, .L704+4
 12803              	.LVL1112:
 12804 0116 4623     		mov	r3, #70
 12805 0118 0093     		str	r3, [sp]
 12806 011a 4025     		mov	r5, #64
 12807 011c 0195     		str	r5, [sp, #4]
 12808 011e 201C     		mov	r0, r4
 12809 0120 1621     		mov	r1, #22
 12810 0122 2422     		mov	r2, #36
 12811 0124 8A23     		mov	r3, #138
 12812 0126 FFF7FEFF 		bl	draw_box
 12813              	.LVL1113:
7192:screens.c     **** 	draw_box( adm, 18, 78, 137, 100, CLEAR );
 12814              		.loc 1 7192 0
 12815 012a 6423     		mov	r3, #100
 12816 012c 0093     		str	r3, [sp]
 12817 012e 0195     		str	r5, [sp, #4]
 12818 0130 201C     		mov	r0, r4
 12819 0132 1221     		mov	r1, #18
 12820 0134 4E22     		mov	r2, #78
 12821 0136 8923     		mov	r3, #137
 12822 0138 FFF7FEFF 		bl	draw_box
 12823              	.LVL1114:
7194:screens.c     **** 	display_f1_text( "1      2      3", TSMAX,  22, 38, FIXED );
 12824              		.loc 1 7194 0
 12825 013c 0025     		mov	r5, #0
 12826 013e 0095     		str	r5, [sp]
 12827 0140 3D48     		ldr	r0, .L704+56
 12828 0142 1A21     		mov	r1, #26
 12829 0144 1622     		mov	r2, #22
 12830 0146 2623     		mov	r3, #38
 12831 0148 FFF7FEFF 		bl	display_f1_text
 12832              	.LVL1115:
7195:screens.c     **** 	display_f1_text( "4      5      6", TSMAX,  22, 60, FIXED );
 12833              		.loc 1 7195 0
 12834 014c 0095     		str	r5, [sp]
 12835 014e 3B48     		ldr	r0, .L704+60
 12836 0150 1A21     		mov	r1, #26
 12837 0152 1622     		mov	r2, #22
 12838 0154 3C23     		mov	r3, #60
 12839 0156 FFF7FEFF 		bl	display_f1_text
 12840              	.LVL1116:
7197:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP07) ? 1 : 0;
 12841              		.loc 1 7197 0
 12842 015a 394B     		ldr	r3, .L704+64
 12843 015c 9846     		mov	r8, r3
 12844 015e DB6B     		ldr	r3, [r3, #60]
 12845              	.LVL1117:
7198:screens.c     **** 	write_bitmap( adm, ip_status[c], 31, 36, OR );
 12846              		.loc 1 7198 0
 12847 0160 384E     		ldr	r6, .L704+68
7197:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP07) ? 1 : 0;
 12848              		.loc 1 7197 0
 12849 0162 1B0B     		lsr	r3, r3, #12
 12850              	.LVL1118:
 12851 0164 0127     		mov	r7, #1
 12852 0166 3B40     		and	r3, r7
7198:screens.c     **** 	write_bitmap( adm, ip_status[c], 31, 36, OR );
 12853              		.loc 1 7198 0
 12854 0168 9B00     		lsl	r3, r3, #2
 12855 016a 9959     		ldr	r1, [r3, r6]
 12856 016c 0225     		mov	r5, #2
 12857 016e 0095     		str	r5, [sp]
 12858 0170 201C     		mov	r0, r4
 12859 0172 1F22     		mov	r2, #31
 12860 0174 2423     		mov	r3, #36
 12861 0176 FFF7FEFF 		bl	write_bitmap
 12862              	.LVL1119:
7200:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP08) ? 1 : 0;
 12863              		.loc 1 7200 0
 12864 017a 4246     		mov	r2, r8
 12865 017c D36B     		ldr	r3, [r2, #60]
 12866              	.LVL1120:
 12867 017e 1B0D     		lsr	r3, r3, #20
 12868              	.LVL1121:
 12869 0180 3B40     		and	r3, r7
7201:screens.c     **** 	write_bitmap( adm, ip_status[c], 75, 36, OR );
 12870              		.loc 1 7201 0
 12871 0182 9B00     		lsl	r3, r3, #2
 12872 0184 9959     		ldr	r1, [r3, r6]
 12873 0186 0095     		str	r5, [sp]
 12874 0188 201C     		mov	r0, r4
 12875 018a 4B22     		mov	r2, #75
 12876 018c 2423     		mov	r3, #36
 12877 018e FFF7FEFF 		bl	write_bitmap
 12878              	.LVL1122:
7203:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP09) ? 1 : 0;
 12879              		.loc 1 7203 0
 12880 0192 4246     		mov	r2, r8
 12881 0194 D36B     		ldr	r3, [r2, #60]
 12882              	.LVL1123:
 12883 0196 9B0D     		lsr	r3, r3, #22
 12884              	.LVL1124:
 12885 0198 3B40     		and	r3, r7
7204:screens.c     **** 	write_bitmap( adm, ip_status[c], 117, 36, OR );
 12886              		.loc 1 7204 0
 12887 019a 9B00     		lsl	r3, r3, #2
 12888 019c 9959     		ldr	r1, [r3, r6]
 12889 019e 0095     		str	r5, [sp]
 12890 01a0 201C     		mov	r0, r4
 12891 01a2 7522     		mov	r2, #117
 12892 01a4 2423     		mov	r3, #36
 12893 01a6 FFF7FEFF 		bl	write_bitmap
 12894              	.LVL1125:
7206:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP10) ? 1 : 0;
 12895              		.loc 1 7206 0
 12896 01aa 4246     		mov	r2, r8
 12897 01ac D36B     		ldr	r3, [r2, #60]
 12898              	.LVL1126:
 12899 01ae 1B0E     		lsr	r3, r3, #24
 12900              	.LVL1127:
 12901 01b0 3B40     		and	r3, r7
7207:screens.c     **** 	write_bitmap( adm, ip_status[c], 31, 58, OR );
 12902              		.loc 1 7207 0
 12903 01b2 9B00     		lsl	r3, r3, #2
 12904 01b4 9959     		ldr	r1, [r3, r6]
 12905 01b6 0095     		str	r5, [sp]
 12906 01b8 201C     		mov	r0, r4
 12907 01ba 1F22     		mov	r2, #31
 12908 01bc 3A23     		mov	r3, #58
 12909 01be FFF7FEFF 		bl	write_bitmap
 12910              	.LVL1128:
7209:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP11) ? 1 : 0;
 12911              		.loc 1 7209 0
 12912 01c2 4246     		mov	r2, r8
 12913 01c4 D36B     		ldr	r3, [r2, #60]
 12914              	.LVL1129:
 12915 01c6 9B0E     		lsr	r3, r3, #26
 12916              	.LVL1130:
 12917 01c8 3B40     		and	r3, r7
7210:screens.c     **** 	write_bitmap( adm, ip_status[c], 75, 58, OR );
 12918              		.loc 1 7210 0
 12919 01ca 9B00     		lsl	r3, r3, #2
 12920 01cc 9959     		ldr	r1, [r3, r6]
 12921 01ce 0095     		str	r5, [sp]
 12922 01d0 201C     		mov	r0, r4
 12923 01d2 4B22     		mov	r2, #75
 12924 01d4 3A23     		mov	r3, #58
 12925 01d6 FFF7FEFF 		bl	write_bitmap
 12926              	.LVL1131:
7212:screens.c     **** 	c = (AT91C_BASE_PIOB->PIO_PDSR & IP12) ? 1 : 0;
 12927              		.loc 1 7212 0
 12928 01da 4246     		mov	r2, r8
 12929 01dc D36B     		ldr	r3, [r2, #60]
 12930              	.LVL1132:
 12931 01de 1B0F     		lsr	r3, r3, #28
 12932              	.LVL1133:
 12933 01e0 1F40     		and	r7, r3
7213:screens.c     **** 	write_bitmap( adm, ip_status[c], 117, 58, OR );
 12934              		.loc 1 7213 0
 12935 01e2 BF00     		lsl	r7, r7, #2
 12936 01e4 B959     		ldr	r1, [r7, r6]
 12937 01e6 0095     		str	r5, [sp]
 12938 01e8 201C     		mov	r0, r4
 12939 01ea 7522     		mov	r2, #117
 12940 01ec 3A23     		mov	r3, #58
 12941 01ee FFF7FEFF 		bl	write_bitmap
 12942              	.LVL1134:
7215:screens.c     **** }
 12943              		.loc 1 7215 0
 12944 01f2 02B0     		add	sp, sp, #8
 12945              		@ sp needed for prologue
 12946 01f4 04BC     		pop	{r2}
 12947 01f6 9046     		mov	r8, r2
 12948 01f8 F0BC     		pop	{r4, r5, r6, r7}
 12949 01fa 01BC     		pop	{r0}
 12950 01fc 0047     		bx	r0
 12951              	.L705:
 12952 01fe C046     		.align	2
 12953              	.L704:
 12954 0200 00000000 		.word	startup
 12955 0204 00000000 		.word	adm
 12956 0208 00000000 		.word	ptText
 12957 020c 00000000 		.word	TAB
 12958 0210 00000000 		.word	TABNAV_LR
 12959 0214 00000000 		.word	TABESC
 12960 0218 00000000 		.word	leaf
 12961 021c 00000000 		.word	screen152
 12962 0220 00000000 		.word	window
 12963 0224 00000000 		.word	SavecalDelayWithinMenus
 12964 0228 00000000 		.word	escape
 12965 022c 00000000 		.word	pFac
 12966 0230 00000000 		.word	TABKNFON
 12967 0234 00000000 		.word	TABKNFOFF
 12968 0238 04000000 		.word	.LC82
 12969 023c 14000000 		.word	.LC84
 12970 0240 00F6FFFF 		.word	-2560
 12971 0244 00000000 		.word	ip_status
 12972              		.cfi_endproc
 12973              	.LFE398:
 12975              		.section	.text.screen147,"ax",%progbits
 12976              		.align	2
 12977              		.global	screen147
 12978              		.code	16
 12979              		.thumb_func
 12981              	screen147:
 12982              	.LFB396:
6841:screens.c     **** {
 12983              		.loc 1 6841 0
 12984              		.cfi_startproc
 12985              	.LVL1135:
 12986 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 12987              	.LCFI41:
 12988              		.cfi_def_cfa_offset 20
 12989              		.cfi_offset 4, -20
 12990              		.cfi_offset 5, -16
 12991              		.cfi_offset 6, -12
 12992              		.cfi_offset 7, -8
 12993              		.cfi_offset 14, -4
 12994 0002 4746     		mov	r7, r8
 12995 0004 80B4     		push	{r7}
 12996              	.LCFI42:
 12997              		.cfi_def_cfa_offset 24
 12998              		.cfi_offset 8, -24
 12999 0006 82B0     		sub	sp, sp, #8
 13000              	.LCFI43:
 13001              		.cfi_def_cfa_offset 32
 13002 0008 041C     		mov	r4, r0
6844:screens.c     **** 	if( !startup )
 13003              		.loc 1 6844 0
 13004 000a 524B     		ldr	r3, .L714
 13005 000c 1B78     		ldrb	r3, [r3]
 13006 000e 002B     		cmp	r3, #0
 13007 0010 3CD1     		bne	.L707
6846:screens.c     **** 		startup = 1;
 13008              		.loc 1 6846 0
 13009 0012 0127     		mov	r7, #1
 13010 0014 4F4B     		ldr	r3, .L714
 13011 0016 1F70     		strb	r7, [r3]
6848:screens.c     **** 		draw_frame( adm );
 13012              		.loc 1 6848 0
 13013 0018 4F4D     		ldr	r5, .L714+4
 13014 001a 281C     		mov	r0, r5
 13015              	.LVL1136:
 13016 001c FFF7FEFF 		bl	draw_frame
 13017              	.LVL1137:
6850:screens.c     **** 		display_f1_text( ptText[37], TSMAX, 80, 8, FIXED | CENTER | UNDERLINED ); // "Reset Defaults"
 13018              		.loc 1 6850 0
 13019 0020 4E4E     		ldr	r6, .L714+8
 13020 0022 9423     		mov	r3, #148
 13021 0024 3268     		ldr	r2, [r6]
 13022 0026 D058     		ldr	r0, [r2, r3]
 13023 0028 0A23     		mov	r3, #10
 13024 002a 0093     		str	r3, [sp]
 13025 002c 1A21     		mov	r1, #26
 13026 002e 5022     		mov	r2, #80
 13027 0030 0823     		mov	r3, #8
 13028 0032 FFF7FEFF 		bl	display_f1_text
 13029              	.LVL1138:
6852:screens.c     **** 		display_f1_text( ptText[38], TSMAX, 32, 37, FIXED ); // "Press \001 to Reset"
 13030              		.loc 1 6852 0
 13031 0036 3268     		ldr	r2, [r6]
 13032 0038 9823     		mov	r3, #152
 13033 003a D058     		ldr	r0, [r2, r3]
 13034 003c 0023     		mov	r3, #0
 13035 003e 0093     		str	r3, [sp]
 13036 0040 1A21     		mov	r1, #26
 13037 0042 2022     		mov	r2, #32
 13038 0044 2523     		mov	r3, #37
 13039 0046 FFF7FEFF 		bl	display_f1_text
 13040              	.LVL1139:
6854:screens.c     **** 		write_bitmap( adm, TAB,      0, 107, OR );
 13041              		.loc 1 6854 0
 13042 004a 454B     		ldr	r3, .L714+12
 13043 004c 9846     		mov	r8, r3
 13044 004e 0226     		mov	r6, #2
 13045 0050 0096     		str	r6, [sp]
 13046 0052 281C     		mov	r0, r5
 13047 0054 191C     		mov	r1, r3
 13048 0056 0022     		mov	r2, #0
 13049 0058 6B23     		mov	r3, #107
 13050 005a FFF7FEFF 		bl	write_bitmap
 13051              	.LVL1140:
6855:screens.c     **** 		write_bitmap( adm, TAB,     31, 107, OR );
 13052              		.loc 1 6855 0
 13053 005e 0096     		str	r6, [sp]
 13054 0060 281C     		mov	r0, r5
 13055 0062 4146     		mov	r1, r8
 13056 0064 1F22     		mov	r2, #31
 13057 0066 6B23     		mov	r3, #107
 13058 0068 FFF7FEFF 		bl	write_bitmap
 13059              	.LVL1141:
6856:screens.c     **** 		write_bitmap( adm, TABNAV_, 62, 102, OR ); // NAVIGATION: blank
 13060              		.loc 1 6856 0
 13061 006c 0096     		str	r6, [sp]
 13062 006e 281C     		mov	r0, r5
 13063 0070 3C49     		ldr	r1, .L714+16
 13064 0072 3E22     		mov	r2, #62
 13065 0074 6623     		mov	r3, #102
 13066 0076 FFF7FEFF 		bl	write_bitmap
 13067              	.LVL1142:
6857:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
 13068              		.loc 1 6857 0
 13069 007a 0096     		str	r6, [sp]
 13070 007c 281C     		mov	r0, r5
 13071 007e 3A49     		ldr	r1, .L714+20
 13072 0080 8222     		mov	r2, #130
 13073 0082 6B23     		mov	r3, #107
 13074 0084 FFF7FEFF 		bl	write_bitmap
 13075              	.LVL1143:
6859:screens.c     **** 		leaf = 1;
 13076              		.loc 1 6859 0
 13077 0088 384B     		ldr	r3, .L714+24
 13078 008a 1F70     		strb	r7, [r3]
 13079              	.L707:
6863:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 13080              		.loc 1 6863 0
 13081 008c 0020     		mov	r0, #0
 13082 008e FFF7FEFF 		bl	ClockDisplay
 13083              	.LVL1144:
6866:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 13084              		.loc 1 6866 0
 13085 0092 374B     		ldr	r3, .L714+28
 13086 0094 1B78     		ldrb	r3, [r3]
 13087 0096 002B     		cmp	r3, #0
 13088 0098 20D1     		bne	.L708
6866:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 13089              		.loc 1 6866 0 is_stmt 0 discriminator 1
 13090 009a A30F     		lsr	r3, r4, #30
 13091 009c 1ED0     		beq	.L708
6868:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 13092              		.loc 1 6868 0 is_stmt 1
 13093 009e A400     		lsl	r4, r4, #2
 13094              	.LVL1145:
 13095 00a0 A408     		lsr	r4, r4, #2
 13096              	.LVL1146:
6869:screens.c     **** 		if( lkey == SW_OR )
 13097              		.loc 1 6869 0
 13098 00a2 8023     		mov	r3, #128
 13099 00a4 5B00     		lsl	r3, r3, #1
 13100 00a6 9C42     		cmp	r4, r3
 13101 00a8 06D1     		bne	.L709
6871:screens.c     **** 			escape = 1;
 13102              		.loc 1 6871 0
 13103 00aa 0122     		mov	r2, #1
 13104 00ac 314B     		ldr	r3, .L714+32
 13105 00ae 1A70     		strb	r2, [r3]
6872:screens.c     **** 			ResetFactors = 0;
 13106              		.loc 1 6872 0
 13107 00b0 0022     		mov	r2, #0
 13108 00b2 314B     		ldr	r3, .L714+36
 13109 00b4 1A70     		strb	r2, [r3]
 13110 00b6 2EE0     		b	.L710
 13111              	.L709:
6874:screens.c     **** 		else if( lkey == SW_IR ) // if enter key is pressed
 13112              		.loc 1 6874 0
 13113 00b8 082C     		cmp	r4, #8
 13114 00ba 0FD1     		bne	.L708
6876:screens.c     **** 			if( !ResetFactors )
 13115              		.loc 1 6876 0
 13116 00bc 2E4B     		ldr	r3, .L714+36
 13117 00be 1B78     		ldrb	r3, [r3]
 13118 00c0 002B     		cmp	r3, #0
 13119 00c2 0FD1     		bne	.L711
6878:screens.c     **** 				SetDefaultFactors();
 13120              		.loc 1 6878 0
 13121 00c4 FFF7FEFF 		bl	SetDefaultFactors
 13122              	.LVL1147:
6879:screens.c     **** 				SetDefaultTotals();
 13123              		.loc 1 6879 0
 13124 00c8 FFF7FEFF 		bl	SetDefaultTotals
 13125              	.LVL1148:
6880:screens.c     **** 				ResetFactors = 1;
 13126              		.loc 1 6880 0
 13127 00cc 0122     		mov	r2, #1
 13128 00ce 2A4B     		ldr	r3, .L714+36
 13129 00d0 1A70     		strb	r2, [r3]
6882:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 13130              		.loc 1 6882 0
 13131 00d2 0023     		mov	r3, #0
 13132 00d4 294A     		ldr	r2, .L714+40
 13133 00d6 1370     		strb	r3, [r2]
6883:screens.c     **** 				SavecalDelayWithinMenus = 0;
 13134              		.loc 1 6883 0
 13135 00d8 294A     		ldr	r2, .L714+44
 13136 00da 1370     		strb	r3, [r2]
 13137              	.L708:
6888:screens.c     **** 	if( ResetFactors )
 13138              		.loc 1 6888 0
 13139 00dc 264B     		ldr	r3, .L714+36
 13140 00de 1B78     		ldrb	r3, [r3]
 13141 00e0 002B     		cmp	r3, #0
 13142 00e2 18D0     		beq	.L710
 13143              	.L711:
6890:screens.c     **** 		draw_box( adm, 24, 37, 150, 47, CLEAR );
 13144              		.loc 1 6890 0
 13145 00e4 2F23     		mov	r3, #47
 13146 00e6 0093     		str	r3, [sp]
 13147 00e8 4023     		mov	r3, #64
 13148 00ea 0193     		str	r3, [sp, #4]
 13149 00ec 1A48     		ldr	r0, .L714+4
 13150 00ee 1821     		mov	r1, #24
 13151 00f0 2522     		mov	r2, #37
 13152 00f2 9623     		mov	r3, #150
 13153 00f4 FFF7FEFF 		bl	draw_box
 13154              	.LVL1149:
6892:screens.c     **** 		display_f1_text( "Factors Reset", TSMAX, 44, 37, FIXED );
 13155              		.loc 1 6892 0
 13156 00f8 0024     		mov	r4, #0
 13157              	.LVL1150:
 13158 00fa 0094     		str	r4, [sp]
 13159 00fc 2148     		ldr	r0, .L714+48
 13160 00fe 1A21     		mov	r1, #26
 13161 0100 2C22     		mov	r2, #44
 13162 0102 2523     		mov	r3, #37
 13163 0104 FFF7FEFF 		bl	display_f1_text
 13164              	.LVL1151:
6893:screens.c     **** 		display_f1_text( "to Defaults",   TSMAX, 44, 47, FIXED );
 13165              		.loc 1 6893 0
 13166 0108 0094     		str	r4, [sp]
 13167 010a 1F48     		ldr	r0, .L714+52
 13168 010c 1A21     		mov	r1, #26
 13169 010e 2C22     		mov	r2, #44
 13170 0110 2F23     		mov	r3, #47
 13171 0112 FFF7FEFF 		bl	display_f1_text
 13172              	.LVL1152:
 13173              	.L710:
6896:screens.c     **** 	draw_box( adm, 99, 107, 128, 126, CLEAR );
 13174              		.loc 1 6896 0
 13175 0116 7E23     		mov	r3, #126
 13176 0118 0093     		str	r3, [sp]
 13177 011a 4023     		mov	r3, #64
 13178 011c 0193     		str	r3, [sp, #4]
 13179 011e 0E48     		ldr	r0, .L714+4
 13180 0120 6321     		mov	r1, #99
 13181 0122 6B22     		mov	r2, #107
 13182 0124 8023     		mov	r3, #128
 13183 0126 FFF7FEFF 		bl	draw_box
 13184              	.LVL1153:
6897:screens.c     **** 	write_bitmap( adm, ResetFactors? TAB:TABENT, 99, 107, OR );
 13185              		.loc 1 6897 0
 13186 012a 134B     		ldr	r3, .L714+36
 13187 012c 1B78     		ldrb	r3, [r3]
 13188 012e 002B     		cmp	r3, #0
 13189 0130 01D0     		beq	.L713
 13190 0132 0B49     		ldr	r1, .L714+12
 13191 0134 00E0     		b	.L712
 13192              	.L713:
 13193 0136 1549     		ldr	r1, .L714+56
 13194              	.L712:
6897:screens.c     **** 	write_bitmap( adm, ResetFactors? TAB:TABENT, 99, 107, OR );
 13195              		.loc 1 6897 0 is_stmt 0 discriminator 3
 13196 0138 0223     		mov	r3, #2
 13197 013a 0093     		str	r3, [sp]
 13198 013c 0648     		ldr	r0, .L714+4
 13199 013e 6322     		mov	r2, #99
 13200 0140 6B23     		mov	r3, #107
 13201 0142 FFF7FEFF 		bl	write_bitmap
 13202              	.LVL1154:
6898:screens.c     **** }
 13203              		.loc 1 6898 0 is_stmt 1 discriminator 3
 13204 0146 02B0     		add	sp, sp, #8
 13205              		@ sp needed for prologue
 13206 0148 04BC     		pop	{r2}
 13207 014a 9046     		mov	r8, r2
 13208 014c F0BC     		pop	{r4, r5, r6, r7}
 13209 014e 01BC     		pop	{r0}
 13210 0150 0047     		bx	r0
 13211              	.L715:
 13212 0152 C046     		.align	2
 13213              	.L714:
 13214 0154 00000000 		.word	startup
 13215 0158 00000000 		.word	adm
 13216 015c 00000000 		.word	ptText
 13217 0160 00000000 		.word	TAB
 13218 0164 00000000 		.word	TABNAV_
 13219 0168 00000000 		.word	TABESC
 13220 016c 00000000 		.word	leaf
 13221 0170 00000000 		.word	editing
 13222 0174 00000000 		.word	escape
 13223 0178 00000000 		.word	.LANCHOR6
 13224 017c 00000000 		.word	SavecalDelayOnMainDisplay
 13225 0180 00000000 		.word	SavecalDelayWithinMenus
 13226 0184 D4030000 		.word	.LC537
 13227 0188 E4030000 		.word	.LC539
 13228 018c 00000000 		.word	TABENT
 13229              		.cfi_endproc
 13230              	.LFE396:
 13232              		.section	.text.screen140,"ax",%progbits
 13233              		.align	2
 13234              		.global	screen140
 13235              		.code	16
 13236              		.thumb_func
 13238              	screen140:
 13239              	.LFB389:
4687:screens.c     **** {
 13240              		.loc 1 4687 0
 13241              		.cfi_startproc
 13242              	.LVL1155:
 13243 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13244              	.LCFI44:
 13245              		.cfi_def_cfa_offset 20
 13246              		.cfi_offset 4, -20
 13247              		.cfi_offset 5, -16
 13248              		.cfi_offset 6, -12
 13249              		.cfi_offset 7, -8
 13250              		.cfi_offset 14, -4
 13251 0002 83B0     		sub	sp, sp, #12
 13252              	.LCFI45:
 13253              		.cfi_def_cfa_offset 32
 13254 0004 061C     		mov	r6, r0
 13255              	.LVL1156:
4697:screens.c     **** 	if( startup != 1 )
 13256              		.loc 1 4697 0
 13257 0006 804B     		ldr	r3, .L729
 13258 0008 1B78     		ldrb	r3, [r3]
 13259 000a 012B     		cmp	r3, #1
 13260 000c 42D0     		beq	.L717
4699:screens.c     **** 		startup = 1;
 13261              		.loc 1 4699 0
 13262 000e 0127     		mov	r7, #1
 13263 0010 7D4B     		ldr	r3, .L729
 13264 0012 1F70     		strb	r7, [r3]
4701:screens.c     **** 		draw_frame( adm );
 13265              		.loc 1 4701 0
 13266 0014 7D4C     		ldr	r4, .L729+4
 13267 0016 201C     		mov	r0, r4
 13268              	.LVL1157:
 13269 0018 FFF7FEFF 		bl	draw_frame
 13270              	.LVL1158:
4703:screens.c     **** 		write_bitmap( adm, ICON_TECHNICIAN_MENU, 50, 14, OR ); // Spanner picture
 13271              		.loc 1 4703 0
 13272 001c 0225     		mov	r5, #2
 13273 001e 0095     		str	r5, [sp]
 13274 0020 201C     		mov	r0, r4
 13275 0022 7B49     		ldr	r1, .L729+8
 13276 0024 3222     		mov	r2, #50
 13277 0026 0E23     		mov	r3, #14
 13278 0028 FFF7FEFF 		bl	write_bitmap
 13279              	.LVL1159:
4705:screens.c     **** 		display_f1_text( "ENTER PIN CODE", TSMAX, 80, 45, FIXED | CENTER );
 13280              		.loc 1 4705 0
 13281 002c 0095     		str	r5, [sp]
 13282 002e 7948     		ldr	r0, .L729+12
 13283 0030 1A21     		mov	r1, #26
 13284 0032 5022     		mov	r2, #80
 13285 0034 2D23     		mov	r3, #45
 13286 0036 FFF7FEFF 		bl	display_f1_text
 13287              	.LVL1160:
4707:screens.c     **** 		write_bitmap( adm, TABMINUS, 0, 107, OR ); // -
 13288              		.loc 1 4707 0
 13289 003a 0095     		str	r5, [sp]
 13290 003c 201C     		mov	r0, r4
 13291 003e 7649     		ldr	r1, .L729+16
 13292 0040 0022     		mov	r2, #0
 13293 0042 6B23     		mov	r3, #107
 13294 0044 FFF7FEFF 		bl	write_bitmap
 13295              	.LVL1161:
4708:screens.c     **** 		write_bitmap( adm, TABPLUS, 31, 107, OR ); // +
 13296              		.loc 1 4708 0
 13297 0048 0095     		str	r5, [sp]
 13298 004a 201C     		mov	r0, r4
 13299 004c 7349     		ldr	r1, .L729+20
 13300 004e 1F22     		mov	r2, #31
 13301 0050 6B23     		mov	r3, #107
 13302 0052 FFF7FEFF 		bl	write_bitmap
 13303              	.LVL1162:
4709:screens.c     **** 		write_bitmap( adm, TABNAV_, 62, 102, OR ); // NAVIGATION: blank
 13304              		.loc 1 4709 0
 13305 0056 0095     		str	r5, [sp]
 13306 0058 201C     		mov	r0, r4
 13307 005a 7149     		ldr	r1, .L729+24
 13308 005c 3E22     		mov	r2, #62
 13309 005e 6623     		mov	r3, #102
 13310 0060 FFF7FEFF 		bl	write_bitmap
 13311              	.LVL1163:
4710:screens.c     **** 		write_bitmap( adm, TABENT,  99, 107, OR ); // ENT
 13312              		.loc 1 4710 0
 13313 0064 0095     		str	r5, [sp]
 13314 0066 201C     		mov	r0, r4
 13315 0068 6E49     		ldr	r1, .L729+28
 13316 006a 6322     		mov	r2, #99
 13317 006c 6B23     		mov	r3, #107
 13318 006e FFF7FEFF 		bl	write_bitmap
 13319              	.LVL1164:
4711:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
 13320              		.loc 1 4711 0
 13321 0072 0095     		str	r5, [sp]
 13322 0074 201C     		mov	r0, r4
 13323 0076 6C49     		ldr	r1, .L729+32
 13324 0078 8222     		mov	r2, #130
 13325 007a 6B23     		mov	r3, #107
 13326 007c FFF7FEFF 		bl	write_bitmap
 13327              	.LVL1165:
4713:screens.c     **** 		dig[0] = '0';
 13328              		.loc 1 4713 0
 13329 0080 6A4B     		ldr	r3, .L729+36
 13330 0082 3022     		mov	r2, #48
 13331 0084 1A70     		strb	r2, [r3]
4714:screens.c     **** 		dig[1] = '0';
 13332              		.loc 1 4714 0
 13333 0086 5A70     		strb	r2, [r3, #1]
4715:screens.c     **** 		dig[2] = '0';
 13334              		.loc 1 4715 0
 13335 0088 9A70     		strb	r2, [r3, #2]
4716:screens.c     **** 		dig[3] = '0';
 13336              		.loc 1 4716 0
 13337 008a DA70     		strb	r2, [r3, #3]
4717:screens.c     **** 		dig[4] = 0x00;
 13338              		.loc 1 4717 0
 13339 008c 0022     		mov	r2, #0
 13340 008e 1A71     		strb	r2, [r3, #4]
4719:screens.c     **** 		leaf = 1; /* don't save this screen */
 13341              		.loc 1 4719 0
 13342 0090 674B     		ldr	r3, .L729+40
 13343 0092 1F70     		strb	r7, [r3]
 13344              	.L717:
4723:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 13345              		.loc 1 4723 0
 13346 0094 0020     		mov	r0, #0
 13347 0096 FFF7FEFF 		bl	ClockDisplay
 13348              	.LVL1166:
4726:screens.c     **** 	if(lkey & (SW_NEW | SW_REP))
 13349              		.loc 1 4726 0
 13350 009a B30F     		lsr	r3, r6, #30
 13351 009c 00D1     		bne	.LCB12852
 13352 009e 84E0     		b	.L718	@long jump
 13353              	.LCB12852:
4728:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 13354              		.loc 1 4728 0
 13355 00a0 B600     		lsl	r6, r6, #2
 13356              	.LVL1167:
 13357 00a2 B608     		lsr	r6, r6, #2
 13358              	.LVL1168:
4730:screens.c     **** 		if( lkey == SW_IL )
 13359              		.loc 1 4730 0
 13360 00a4 042E     		cmp	r6, #4
 13361 00a6 0FD1     		bne	.L719
4732:screens.c     **** 			switch( selection )
 13362              		.loc 1 4732 0
 13363 00a8 624B     		ldr	r3, .L729+44
 13364 00aa 1B78     		ldrb	r3, [r3]
 13365 00ac 032B     		cmp	r3, #3
 13366 00ae 7CD8     		bhi	.L718
 13367              	.LVL1169:
4739:screens.c     **** 				if( *pd < '9' )
 13368              		.loc 1 4739 0
 13369 00b0 5E4A     		ldr	r2, .L729+36
 13370 00b2 D25C     		ldrb	r2, [r2, r3]
 13371 00b4 382A     		cmp	r2, #56
 13372 00b6 03D8     		bhi	.L721
4741:screens.c     **** 					(*pd)++;
 13373              		.loc 1 4741 0
 13374 00b8 0132     		add	r2, r2, #1
 13375 00ba 5C49     		ldr	r1, .L729+36
 13376 00bc CA54     		strb	r2, [r1, r3]
 13377 00be 74E0     		b	.L718
 13378              	.L721:
4745:screens.c     **** 					*pd = '0';
 13379              		.loc 1 4745 0
 13380 00c0 3021     		mov	r1, #48
 13381 00c2 5A4A     		ldr	r2, .L729+36
 13382 00c4 D154     		strb	r1, [r2, r3]
 13383 00c6 70E0     		b	.L718
 13384              	.LVL1170:
 13385              	.L719:
4750:screens.c     **** 		else if( lkey == SW_OL )
 13386              		.loc 1 4750 0
 13387 00c8 8023     		mov	r3, #128
 13388 00ca 9B00     		lsl	r3, r3, #2
 13389 00cc 9E42     		cmp	r6, r3
 13390 00ce 0FD1     		bne	.L722
4752:screens.c     **** 			switch( selection )
 13391              		.loc 1 4752 0
 13392 00d0 584B     		ldr	r3, .L729+44
 13393 00d2 1B78     		ldrb	r3, [r3]
 13394 00d4 032B     		cmp	r3, #3
 13395 00d6 68D8     		bhi	.L718
 13396              	.LVL1171:
4759:screens.c     **** 				if( *pd > '0' )
 13397              		.loc 1 4759 0
 13398 00d8 544A     		ldr	r2, .L729+36
 13399 00da D25C     		ldrb	r2, [r2, r3]
 13400 00dc 302A     		cmp	r2, #48
 13401 00de 03D9     		bls	.L724
4761:screens.c     **** 					(*pd)--;
 13402              		.loc 1 4761 0
 13403 00e0 013A     		sub	r2, r2, #1
 13404 00e2 5249     		ldr	r1, .L729+36
 13405 00e4 CA54     		strb	r2, [r1, r3]
 13406 00e6 60E0     		b	.L718
 13407              	.L724:
4765:screens.c     **** 					*pd = '9';
 13408              		.loc 1 4765 0
 13409 00e8 3921     		mov	r1, #57
 13410 00ea 504A     		ldr	r2, .L729+36
 13411 00ec D154     		strb	r1, [r2, r3]
 13412 00ee 5CE0     		b	.L718
 13413              	.LVL1172:
 13414              	.L722:
4770:screens.c     **** 		else if( lkey == SW_OR )
 13415              		.loc 1 4770 0
 13416 00f0 8023     		mov	r3, #128
 13417 00f2 5B00     		lsl	r3, r3, #1
 13418 00f4 9E42     		cmp	r6, r3
 13419 00f6 03D1     		bne	.L725
4772:screens.c     **** 			escape = 1;
 13420              		.loc 1 4772 0
 13421 00f8 0122     		mov	r2, #1
 13422 00fa 4F4B     		ldr	r3, .L729+48
 13423 00fc 1A70     		strb	r2, [r3]
 13424 00fe 54E0     		b	.L718
 13425              	.L725:
4774:screens.c     **** 		else if( lkey == SW_IR )
 13426              		.loc 1 4774 0
 13427 0100 082E     		cmp	r6, #8
 13428 0102 52D1     		bne	.L718
4776:screens.c     **** 			if( selection < 3 )
 13429              		.loc 1 4776 0
 13430 0104 4B4B     		ldr	r3, .L729+44
 13431 0106 1B78     		ldrb	r3, [r3]
 13432 0108 022B     		cmp	r3, #2
 13433 010a 03D8     		bhi	.L726
4778:screens.c     **** 				selection++;
 13434              		.loc 1 4778 0
 13435 010c 0133     		add	r3, r3, #1
 13436 010e 494A     		ldr	r2, .L729+44
 13437 0110 1370     		strb	r3, [r2]
 13438 0112 4AE0     		b	.L718
 13439              	.L726:
4782:screens.c     **** 				pin = Pop->PinNumber;
 13440              		.loc 1 4782 0
 13441 0114 494B     		ldr	r3, .L729+52
 13442 0116 1C88     		ldrh	r4, [r3]
 13443              	.LVL1173:
4783:screens.c     **** 				c = (pin % 10) + '0';
 13444              		.loc 1 4783 0
 13445 0118 201C     		mov	r0, r4
 13446 011a 0A21     		mov	r1, #10
 13447 011c FFF7FEFF 		bl	__aeabi_uidivmod
 13448              	.LVL1174:
 13449 0120 0B1C     		mov	r3, r1
 13450 0122 3033     		add	r3, r3, #48
4784:screens.c     **** 				if( dig[3] == c )
 13451              		.loc 1 4784 0
 13452 0124 414A     		ldr	r2, .L729+36
 13453 0126 D278     		ldrb	r2, [r2, #3]
 13454 0128 1B06     		lsl	r3, r3, #24
 13455 012a 1B0E     		lsr	r3, r3, #24
 13456 012c 9342     		cmp	r3, r2
 13457 012e 39D1     		bne	.L727
4786:screens.c     **** 					pin /= 10;
 13458              		.loc 1 4786 0
 13459 0130 201C     		mov	r0, r4
 13460 0132 0A21     		mov	r1, #10
 13461 0134 FFF7FEFF 		bl	__aeabi_uidiv
 13462              	.LVL1175:
 13463 0138 0404     		lsl	r4, r0, #16
 13464              	.LVL1176:
 13465 013a 240C     		lsr	r4, r4, #16
 13466              	.LVL1177:
4787:screens.c     **** 					c = (pin % 10) + '0';
 13467              		.loc 1 4787 0
 13468 013c 201C     		mov	r0, r4
 13469 013e 0A21     		mov	r1, #10
 13470 0140 FFF7FEFF 		bl	__aeabi_uidivmod
 13471              	.LVL1178:
 13472 0144 0B1C     		mov	r3, r1
 13473 0146 3033     		add	r3, r3, #48
4788:screens.c     **** 					if( dig[2] == c )
 13474              		.loc 1 4788 0
 13475 0148 384A     		ldr	r2, .L729+36
 13476 014a 9278     		ldrb	r2, [r2, #2]
 13477 014c 1B06     		lsl	r3, r3, #24
 13478 014e 1B0E     		lsr	r3, r3, #24
 13479 0150 9342     		cmp	r3, r2
 13480 0152 2AD1     		bne	.L718
4790:screens.c     **** 						pin /= 10;
 13481              		.loc 1 4790 0
 13482 0154 201C     		mov	r0, r4
 13483 0156 0A21     		mov	r1, #10
 13484 0158 FFF7FEFF 		bl	__aeabi_uidiv
 13485              	.LVL1179:
 13486 015c 0404     		lsl	r4, r0, #16
 13487              	.LVL1180:
 13488 015e 240C     		lsr	r4, r4, #16
 13489              	.LVL1181:
4791:screens.c     **** 						c = (pin % 10) + '0';
 13490              		.loc 1 4791 0
 13491 0160 201C     		mov	r0, r4
 13492 0162 0A21     		mov	r1, #10
 13493 0164 FFF7FEFF 		bl	__aeabi_uidivmod
 13494              	.LVL1182:
 13495 0168 0B1C     		mov	r3, r1
 13496 016a 3033     		add	r3, r3, #48
4792:screens.c     **** 						if( dig[1] == c )
 13497              		.loc 1 4792 0
 13498 016c 2F4A     		ldr	r2, .L729+36
 13499 016e 5278     		ldrb	r2, [r2, #1]
 13500 0170 1B06     		lsl	r3, r3, #24
 13501 0172 1B0E     		lsr	r3, r3, #24
 13502 0174 9342     		cmp	r3, r2
 13503 0176 18D1     		bne	.L718
 13504              	.LVL1183:
4794:screens.c     **** 							pin /= 10;
 13505              		.loc 1 4794 0
 13506 0178 201C     		mov	r0, r4
 13507 017a 0A21     		mov	r1, #10
 13508 017c FFF7FEFF 		bl	__aeabi_uidiv
 13509              	.LVL1184:
4795:screens.c     **** 							c = (pin % 10) + '0';
 13510              		.loc 1 4795 0
 13511 0180 0004     		lsl	r0, r0, #16
 13512 0182 000C     		lsr	r0, r0, #16
 13513 0184 0A21     		mov	r1, #10
 13514 0186 FFF7FEFF 		bl	__aeabi_uidivmod
 13515              	.LVL1185:
 13516 018a 0B1C     		mov	r3, r1
 13517 018c 3033     		add	r3, r3, #48
4796:screens.c     **** 							if( dig[0] == c )
 13518              		.loc 1 4796 0
 13519 018e 274A     		ldr	r2, .L729+36
 13520 0190 1278     		ldrb	r2, [r2]
 13521 0192 1B06     		lsl	r3, r3, #24
 13522 0194 1B0E     		lsr	r3, r3, #24
 13523 0196 9A42     		cmp	r2, r3
 13524 0198 07D1     		bne	.L718
4798:screens.c     **** 								window = Pop->PinWindow; /* Pin Secured Window */
 13525              		.loc 1 4798 0
 13526 019a 284B     		ldr	r3, .L729+52
 13527 019c 5A68     		ldr	r2, [r3, #4]
 13528 019e 284B     		ldr	r3, .L729+56
 13529 01a0 1A60     		str	r2, [r3]
 13530 01a2 02E0     		b	.L718
 13531              	.LVL1186:
 13532              	.L727:
4805:screens.c     **** 					selection = 0;
 13533              		.loc 1 4805 0
 13534 01a4 0022     		mov	r2, #0
 13535 01a6 234B     		ldr	r3, .L729+44
 13536 01a8 1A70     		strb	r2, [r3]
 13537              	.LVL1187:
 13538              	.L718:
4811:screens.c     **** 	display_f1_text( dig, TSMAX, 68, 60, FIXED );
 13539              		.loc 1 4811 0
 13540 01aa 0023     		mov	r3, #0
 13541 01ac 0093     		str	r3, [sp]
 13542 01ae 1F48     		ldr	r0, .L729+36
 13543 01b0 1A21     		mov	r1, #26
 13544 01b2 4422     		mov	r2, #68
 13545 01b4 3C23     		mov	r3, #60
 13546 01b6 FFF7FEFF 		bl	display_f1_text
 13547              	.LVL1188:
4813:screens.c     **** 	draw_line( adm, 68, 68, 68+22, 68, CLEAR );
 13548              		.loc 1 4813 0
 13549 01ba 4423     		mov	r3, #68
 13550 01bc 0093     		str	r3, [sp]
 13551 01be 4023     		mov	r3, #64
 13552 01c0 0193     		str	r3, [sp, #4]
 13553 01c2 1248     		ldr	r0, .L729+4
 13554 01c4 4421     		mov	r1, #68
 13555 01c6 4422     		mov	r2, #68
 13556 01c8 5A23     		mov	r3, #90
 13557 01ca FFF7FEFF 		bl	draw_line
 13558              	.LVL1189:
4814:screens.c     **** 	c = 68+(selection*6);
 13559              		.loc 1 4814 0
 13560 01ce 194B     		ldr	r3, .L729+44
 13561 01d0 1A78     		ldrb	r2, [r3]
 13562              	.LVL1190:
4815:screens.c     **** 	if( !half_second )
 13563              		.loc 1 4815 0
 13564 01d2 1C4B     		ldr	r3, .L729+60
 13565 01d4 1B78     		ldrb	r3, [r3]
 13566 01d6 002B     		cmp	r3, #0
 13567 01d8 12D1     		bne	.L716
4814:screens.c     **** 	c = 68+(selection*6);
 13568              		.loc 1 4814 0
 13569 01da 5300     		lsl	r3, r2, #1
 13570 01dc 9A18     		add	r2, r3, r2
 13571              	.LVL1191:
 13572 01de 5206     		lsl	r2, r2, #25
4817:screens.c     **** 		draw_line( adm, c, 68, c+4, 68, OR );
 13573              		.loc 1 4817 0
 13574 01e0 8823     		mov	r3, #136
 13575 01e2 DB05     		lsl	r3, r3, #23
 13576 01e4 D118     		add	r1, r2, r3
 13577 01e6 090E     		lsr	r1, r1, #24
 13578 01e8 9023     		mov	r3, #144
 13579 01ea DB05     		lsl	r3, r3, #23
 13580 01ec D218     		add	r2, r2, r3
 13581 01ee 130E     		lsr	r3, r2, #24
 13582 01f0 4422     		mov	r2, #68
 13583 01f2 0092     		str	r2, [sp]
 13584 01f4 0222     		mov	r2, #2
 13585 01f6 0192     		str	r2, [sp, #4]
 13586 01f8 0448     		ldr	r0, .L729+4
 13587 01fa 4422     		mov	r2, #68
 13588 01fc FFF7FEFF 		bl	draw_line
 13589              	.LVL1192:
 13590              	.L716:
4819:screens.c     **** }
 13591              		.loc 1 4819 0
 13592 0200 03B0     		add	sp, sp, #12
 13593              		@ sp needed for prologue
 13594              	.LVL1193:
 13595 0202 F0BC     		pop	{r4, r5, r6, r7}
 13596 0204 01BC     		pop	{r0}
 13597 0206 0047     		bx	r0
 13598              	.L730:
 13599              		.align	2
 13600              	.L729:
 13601 0208 00000000 		.word	startup
 13602 020c 00000000 		.word	adm
 13603 0210 00000000 		.word	ICON_TECHNICIAN_MENU
 13604 0214 F0030000 		.word	.LC544
 13605 0218 00000000 		.word	TABMINUS
 13606 021c 00000000 		.word	TABPLUS
 13607 0220 00000000 		.word	TABNAV_
 13608 0224 00000000 		.word	TABENT
 13609 0228 00000000 		.word	TABESC
 13610 022c 00000000 		.word	.LANCHOR7
 13611 0230 00000000 		.word	leaf
 13612 0234 00000000 		.word	selection
 13613 0238 00000000 		.word	escape
 13614 023c 00000000 		.word	PinOption
 13615 0240 00000000 		.word	window
 13616 0244 00000000 		.word	half_second
 13617              		.cfi_endproc
 13618              	.LFE389:
 13620              		.global	__aeabi_i2f
 13621              		.global	__aeabi_f2uiz
 13622              		.section	.text.screen111,"ax",%progbits
 13623              		.align	2
 13624              		.global	screen111
 13625              		.code	16
 13626              		.thumb_func
 13628              	screen111:
 13629              	.LFB380:
2304:screens.c     **** {
 13630              		.loc 1 2304 0
 13631              		.cfi_startproc
 13632              	.LVL1194:
 13633 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13634              	.LCFI46:
 13635              		.cfi_def_cfa_offset 20
 13636              		.cfi_offset 4, -20
 13637              		.cfi_offset 5, -16
 13638              		.cfi_offset 6, -12
 13639              		.cfi_offset 7, -8
 13640              		.cfi_offset 14, -4
 13641 0002 5F46     		mov	r7, fp
 13642 0004 5646     		mov	r6, sl
 13643 0006 4D46     		mov	r5, r9
 13644 0008 4446     		mov	r4, r8
 13645 000a F0B4     		push	{r4, r5, r6, r7}
 13646              	.LCFI47:
 13647              		.cfi_def_cfa_offset 36
 13648              		.cfi_offset 8, -36
 13649              		.cfi_offset 9, -32
 13650              		.cfi_offset 10, -28
 13651              		.cfi_offset 11, -24
 13652 000c 8BB0     		sub	sp, sp, #44
 13653              	.LCFI48:
 13654              		.cfi_def_cfa_offset 80
 13655 000e 061C     		mov	r6, r0
2312:screens.c     **** 	if( startup != 1)
 13656              		.loc 1 2312 0
 13657 0010 C84B     		ldr	r3, .L829
 13658 0012 1B78     		ldrb	r3, [r3]
 13659 0014 012B     		cmp	r3, #1
 13660 0016 18D0     		beq	.L732
2314:screens.c     **** 		startup = 1;
 13661              		.loc 1 2314 0
 13662 0018 0122     		mov	r2, #1
 13663 001a C64B     		ldr	r3, .L829
 13664 001c 1A70     		strb	r2, [r3]
2316:screens.c     **** 		draw_frame( adm );
 13665              		.loc 1 2316 0
 13666 001e C64C     		ldr	r4, .L829+4
 13667 0020 201C     		mov	r0, r4
 13668              	.LVL1195:
 13669 0022 FFF7FEFF 		bl	draw_frame
 13670              	.LVL1196:
2322:screens.c     **** 		write_bitmap( adm, TAB,     99, 107, OR );
 13671              		.loc 1 2322 0
 13672 0026 0225     		mov	r5, #2
 13673 0028 0095     		str	r5, [sp]
 13674 002a 201C     		mov	r0, r4
 13675 002c C349     		ldr	r1, .L829+8
 13676 002e 6322     		mov	r2, #99
 13677 0030 6B23     		mov	r3, #107
 13678 0032 FFF7FEFF 		bl	write_bitmap
 13679              	.LVL1197:
2323:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
 13680              		.loc 1 2323 0
 13681 0036 0095     		str	r5, [sp]
 13682 0038 201C     		mov	r0, r4
 13683 003a C149     		ldr	r1, .L829+12
 13684 003c 8222     		mov	r2, #130
 13685 003e 6B23     		mov	r3, #107
 13686 0040 FFF7FEFF 		bl	write_bitmap
 13687              	.LVL1198:
2327:screens.c     **** 		old_page = 0xff;
 13688              		.loc 1 2327 0
 13689 0044 FF24     		mov	r4, #255
2326:screens.c     **** 		old_selection = 0xff;
 13690              		.loc 1 2326 0
 13691 0046 FF25     		mov	r5, #255
 13692 0048 03E0     		b	.L733
 13693              	.LVL1199:
 13694              	.L732:
2331:screens.c     **** 		old_selection = selection;
 13695              		.loc 1 2331 0
 13696 004a BE4B     		ldr	r3, .L829+16
 13697 004c 1D78     		ldrb	r5, [r3]
 13698              	.LVL1200:
2332:screens.c     **** 		old_page = page;
 13699              		.loc 1 2332 0
 13700 004e BE4B     		ldr	r3, .L829+20
 13701              	.LVL1201:
 13702 0050 1C78     		ldrb	r4, [r3]
 13703              	.LVL1202:
 13704              	.L733:
2336:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 13705              		.loc 1 2336 0
 13706 0052 0020     		mov	r0, #0
 13707 0054 FFF7FEFF 		bl	ClockDisplay
 13708              	.LVL1203:
2342:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 13709              		.loc 1 2342 0
 13710 0058 B30F     		lsr	r3, r6, #30
2344:screens.c     **** 	if( key_status )
 13711              		.loc 1 2344 0
 13712 005a 00D1     		bne	.LCB13210
 13713 005c A9E1     		b	.L734	@long jump
 13714              	.LCB13210:
2346:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 13715              		.loc 1 2346 0
 13716 005e B600     		lsl	r6, r6, #2
 13717              	.LVL1204:
 13718 0060 B608     		lsr	r6, r6, #2
 13719              	.LVL1205:
2348:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
 13720              		.loc 1 2348 0
 13721 0062 8023     		mov	r3, #128
 13722 0064 5B00     		lsl	r3, r3, #1
 13723 0066 9E42     		cmp	r6, r3
 13724 0068 06D1     		bne	.L735
2350:screens.c     **** 			escape = 1;
 13725              		.loc 1 2350 0
 13726 006a 0122     		mov	r2, #1
 13727 006c B74B     		ldr	r3, .L829+24
 13728 006e 1A70     		strb	r2, [r3]
2351:screens.c     **** 			page = 0;
 13729              		.loc 1 2351 0
 13730 0070 0022     		mov	r2, #0
 13731 0072 B54B     		ldr	r3, .L829+20
 13732 0074 1A70     		strb	r2, [r3]
 13733 0076 9CE1     		b	.L734
 13734              	.L735:
2353:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey -)
 13735              		.loc 1 2353 0
 13736 0078 8023     		mov	r3, #128
 13737 007a 9B00     		lsl	r3, r3, #2
 13738 007c 9E42     		cmp	r6, r3
 13739 007e 00D0     		beq	.LCB13233
 13740 0080 9BE0     		b	.L736	@long jump
 13741              	.LCB13233:
2355:screens.c     **** 			if( page == 0 )
 13742              		.loc 1 2355 0
 13743 0082 B14B     		ldr	r3, .L829+20
 13744 0084 1B78     		ldrb	r3, [r3]
 13745 0086 002B     		cmp	r3, #0
 13746 0088 40D1     		bne	.L737
2357:screens.c     **** 				switch( selection )
 13747              		.loc 1 2357 0
 13748 008a AE4B     		ldr	r3, .L829+16
 13749 008c 1B78     		ldrb	r3, [r3]
 13750 008e 012B     		cmp	r3, #1
 13751 0090 1AD0     		beq	.L740
 13752 0092 002B     		cmp	r3, #0
 13753 0094 05D0     		beq	.L739
 13754 0096 022B     		cmp	r3, #2
 13755 0098 25D0     		beq	.L741
 13756 009a 032B     		cmp	r3, #3
 13757 009c 00D0     		beq	.LCB13255
 13758 009e 88E0     		b	.L738	@long jump
 13759              	.LCB13255:
 13760 00a0 25E0     		b	.L742
 13761              	.L739:
2361:screens.c     **** 					pFac.pf.GW302_DiameterCorrection -= PF_GW302_DiameterCorrection[PF_STEP];
 13762              		.loc 1 2361 0
 13763 00a2 AB48     		ldr	r0, .L829+28
 13764 00a4 6821     		mov	r1, #104
 13765 00a6 AB4A     		ldr	r2, .L829+32
 13766 00a8 465C     		ldrb	r6, [r0, r1]
 13767              	.LVL1206:
 13768 00aa 1378     		ldrb	r3, [r2]
 13769 00ac F31A     		sub	r3, r6, r3
 13770 00ae 1B06     		lsl	r3, r3, #24
 13771 00b0 1B0E     		lsr	r3, r3, #24
 13772 00b2 4354     		strb	r3, [r0, r1]
2362:screens.c     **** 					if( pFac.pf.GW302_DiameterCorrection < PF_GW302_DiameterCorrection[PF_MIN] )
 13773              		.loc 1 2362 0
 13774 00b4 5278     		ldrb	r2, [r2, #1]
 13775 00b6 1B06     		lsl	r3, r3, #24
 13776 00b8 1B16     		asr	r3, r3, #24
 13777 00ba 1106     		lsl	r1, r2, #24
 13778 00bc 0916     		asr	r1, r1, #24
 13779 00be 8B42     		cmp	r3, r1
 13780 00c0 77DA     		bge	.L738
2363:screens.c     **** 						pFac.pf.GW302_DiameterCorrection = PF_GW302_DiameterCorrection[PF_MIN];  // Limiting to minim
 13781              		.loc 1 2363 0
 13782 00c2 6823     		mov	r3, #104
 13783 00c4 C254     		strb	r2, [r0, r3]
 13784 00c6 74E0     		b	.L738
 13785              	.LVL1207:
 13786              	.L740:
2367:screens.c     **** 					pFac.pf.GW302_NetDelay -= PF_GW302_NetDelay[PF_STEP];
 13787              		.loc 1 2367 0
 13788 00c8 A14F     		ldr	r7, .L829+28
 13789 00ca A34E     		ldr	r6, .L829+36
 13790              	.LVL1208:
 13791 00cc B86F     		ldr	r0, [r7, #120]
 13792 00ce 3168     		ldr	r1, [r6]
 13793 00d0 FFF7FEFF 		bl	__aeabi_fsub
 13794              	.LVL1209:
 13795 00d4 B867     		str	r0, [r7, #120]
2368:screens.c     **** 					if( pFac.pf.GW302_NetDelay < PF_GW302_NetDelay[PF_MIN] )
 13796              		.loc 1 2368 0
 13797 00d6 7668     		ldr	r6, [r6, #4]
 13798 00d8 311C     		add	r1, r6, #0
 13799 00da FFF7FEFF 		bl	__aeabi_fcmplt
 13800              	.LVL1210:
 13801 00de 0028     		cmp	r0, #0
 13802 00e0 67D0     		beq	.L738
2369:screens.c     **** 						pFac.pf.GW302_NetDelay = PF_GW302_NetDelay[PF_MIN];  // Limiting to minimum value
 13803              		.loc 1 2369 0
 13804 00e2 BE67     		str	r6, [r7, #120]
 13805 00e4 65E0     		b	.L738
 13806              	.LVL1211:
 13807              	.L741:
2373:screens.c     **** 					window = screen125;	
 13808              		.loc 1 2373 0
 13809 00e6 9D4A     		ldr	r2, .L829+40
 13810 00e8 9D4B     		ldr	r3, .L829+44
 13811 00ea 1A60     		str	r2, [r3]
2374:screens.c     **** 					break;
 13812              		.loc 1 2374 0
 13813 00ec 61E0     		b	.L738
 13814              	.L742:
2377:screens.c     **** 					pFac.pf.GW302_PreWarningBeep -= PF_GW302_PreWarningBeep[PF_STEP];
 13815              		.loc 1 2377 0
 13816 00ee 9848     		ldr	r0, .L829+28
 13817 00f0 7421     		mov	r1, #116
 13818 00f2 9C4A     		ldr	r2, .L829+48
 13819 00f4 465C     		ldrb	r6, [r0, r1]
 13820              	.LVL1212:
 13821 00f6 1378     		ldrb	r3, [r2]
 13822 00f8 F31A     		sub	r3, r6, r3
 13823 00fa 1B06     		lsl	r3, r3, #24
 13824 00fc 1B0E     		lsr	r3, r3, #24
 13825 00fe 4354     		strb	r3, [r0, r1]
2378:screens.c     **** 					if( pFac.pf.GW302_PreWarningBeep < PF_GW302_PreWarningBeep[PF_MIN] )
 13826              		.loc 1 2378 0
 13827 0100 5278     		ldrb	r2, [r2, #1]
 13828 0102 9342     		cmp	r3, r2
 13829 0104 55D2     		bcs	.L738
2379:screens.c     **** 						pFac.pf.GW302_PreWarningBeep = PF_GW302_PreWarningBeep[PF_MIN];    // Limiting to minimum val
 13830              		.loc 1 2379 0
 13831 0106 7423     		mov	r3, #116
 13832 0108 C254     		strb	r2, [r0, r3]
 13833 010a 52E0     		b	.L738
 13834              	.LVL1213:
 13835              	.L737:
2385:screens.c     **** 				switch( selection )
 13836              		.loc 1 2385 0
 13837 010c 8D4B     		ldr	r3, .L829+16
 13838 010e 1B78     		ldrb	r3, [r3]
 13839 0110 012B     		cmp	r3, #1
 13840 0112 19D0     		beq	.L745
 13841 0114 002B     		cmp	r3, #0
 13842 0116 02D0     		beq	.L744
 13843 0118 022B     		cmp	r3, #2
 13844 011a 4AD1     		bne	.L738
 13845 011c 18E0     		b	.L746
 13846              	.L744:
2389:screens.c     **** 					if( pFac.pf.GW302_BaleShapeIndicator == BSI_ON )
 13847              		.loc 1 2389 0
 13848 011e 6923     		mov	r3, #105
 13849 0120 8B4A     		ldr	r2, .L829+28
 13850 0122 D35C     		ldrb	r3, [r2, r3]
 13851 0124 012B     		cmp	r3, #1
 13852 0126 03D1     		bne	.L747
2391:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_OFF;
 13853              		.loc 1 2391 0
 13854 0128 0021     		mov	r1, #0
 13855 012a 6923     		mov	r3, #105
 13856 012c D154     		strb	r1, [r2, r3]
 13857 012e 40E0     		b	.L738
 13858              	.L747:
2393:screens.c     **** 					else if( pFac.pf.GW302_BaleShapeIndicator == BSI_BEEP )
 13859              		.loc 1 2393 0
 13860 0130 022B     		cmp	r3, #2
 13861 0132 04D1     		bne	.L748
2395:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_ON;
 13862              		.loc 1 2395 0
 13863 0134 0121     		mov	r1, #1
 13864 0136 6923     		mov	r3, #105
 13865 0138 854A     		ldr	r2, .L829+28
 13866 013a D154     		strb	r1, [r2, r3]
 13867 013c 39E0     		b	.L738
 13868              	.L748:
2399:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_BEEP;
 13869              		.loc 1 2399 0
 13870 013e 0221     		mov	r1, #2
 13871 0140 6923     		mov	r3, #105
 13872 0142 834A     		ldr	r2, .L829+28
 13873 0144 D154     		strb	r1, [r2, r3]
 13874 0146 34E0     		b	.L738
 13875              	.L745:
2404:screens.c     **** 					window = screen124; // Fill Pot Zero Reset Screen (AKA Bale Shape Indicator Zero)
 13876              		.loc 1 2404 0
 13877 0148 874A     		ldr	r2, .L829+52
 13878 014a 854B     		ldr	r3, .L829+44
 13879 014c 1A60     		str	r2, [r3]
2405:screens.c     **** 					break;
 13880              		.loc 1 2405 0
 13881 014e 30E0     		b	.L738
 13882              	.L746:
2408:screens.c     **** 					if( pFac.pf.GW302_NetTwineOption > PF_GW302_NetTwineOption[PF_MIN] )  /* Net/Twine ICON  [Net/
 13883              		.loc 1 2408 0
 13884 0150 7C23     		mov	r3, #124
 13885 0152 7F4A     		ldr	r2, .L829+28
 13886 0154 D35C     		ldrb	r3, [r2, r3]
 13887 0156 854A     		ldr	r2, .L829+56
 13888 0158 5278     		ldrb	r2, [r2, #1]
 13889 015a 9A42     		cmp	r2, r3
 13890 015c 04D2     		bcs	.L749
2410:screens.c     **** 						pFac.pf.GW302_NetTwineOption--;
 13891              		.loc 1 2410 0
 13892 015e 013B     		sub	r3, r3, #1
 13893 0160 7C22     		mov	r2, #124
 13894 0162 7B49     		ldr	r1, .L829+28
 13895 0164 8B54     		strb	r3, [r1, r2]
 13896 0166 04E0     		b	.L750
 13897              	.L749:
2414:screens.c     **** 						pFac.pf.GW302_NetTwineOption = PF_GW302_NetTwineOption[PF_MAX];
 13898              		.loc 1 2414 0
 13899 0168 804B     		ldr	r3, .L829+56
 13900 016a 9978     		ldrb	r1, [r3, #2]
 13901 016c 7C23     		mov	r3, #124
 13902 016e 784A     		ldr	r2, .L829+28
 13903 0170 D154     		strb	r1, [r2, r3]
 13904              	.L750:
2417:screens.c     **** 					draw_box( adm, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y, ICON_TWINE_ZERO_X + 100, ICON_TWINE_ZERO_
 13905              		.loc 1 2417 0
 13906 0172 5423     		mov	r3, #84
 13907 0174 0093     		str	r3, [sp]
 13908 0176 4023     		mov	r3, #64
 13909 0178 0193     		str	r3, [sp, #4]
 13910 017a 6F48     		ldr	r0, .L829+4
 13911 017c 2A21     		mov	r1, #42
 13912 017e 3622     		mov	r2, #54
 13913 0180 8E23     		mov	r3, #142
 13914 0182 FFF7FEFF 		bl	draw_box
 13915              	.LVL1214:
2418:screens.c     **** 						switch( pFac.pf.GW302_NetTwineOption )
 13916              		.loc 1 2418 0
 13917 0186 7C23     		mov	r3, #124
 13918 0188 714A     		ldr	r2, .L829+28
 13919 018a D35C     		ldrb	r3, [r2, r3]
 13920 018c 012B     		cmp	r3, #1
 13921 018e 08D1     		bne	.L825
2421:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO
 13922              		.loc 1 2421 0
 13923 0190 0223     		mov	r3, #2
 13924 0192 0093     		str	r3, [sp]
 13925 0194 6848     		ldr	r0, .L829+4
 13926 0196 7649     		ldr	r1, .L829+60
 13927 0198 2A22     		mov	r2, #42
 13928 019a 3623     		mov	r3, #54
 13929 019c FFF7FEFF 		bl	write_bitmap
 13930              	.LVL1215:
2422:screens.c     **** 							break;
 13931              		.loc 1 2422 0
 13932 01a0 07E0     		b	.L738
 13933              	.L825:
2424:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_NET_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y
 13934              		.loc 1 2424 0
 13935 01a2 0223     		mov	r3, #2
 13936 01a4 0093     		str	r3, [sp]
 13937 01a6 6448     		ldr	r0, .L829+4
 13938 01a8 7249     		ldr	r1, .L829+64
 13939 01aa 2A22     		mov	r2, #42
 13940 01ac 3623     		mov	r3, #54
 13941 01ae FFF7FEFF 		bl	write_bitmap
 13942              	.LVL1216:
 13943              	.L738:
2431:screens.c     **** 			SavecalDelayWithinMenus = 1;
 13944              		.loc 1 2431 0
 13945 01b2 0122     		mov	r2, #1
 13946 01b4 704B     		ldr	r3, .L829+68
 13947 01b6 1A70     		strb	r2, [r3]
 13948 01b8 FBE0     		b	.L734
 13949              	.LVL1217:
 13950              	.L736:
2433:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey +)
 13951              		.loc 1 2433 0
 13952 01ba 042E     		cmp	r6, #4
 13953 01bc 00D0     		beq	.LCB13458
 13954 01be 8EE0     		b	.L753	@long jump
 13955              	.LCB13458:
2435:screens.c     **** 			if( page == 0 )
 13956              		.loc 1 2435 0
 13957 01c0 614B     		ldr	r3, .L829+20
 13958 01c2 1B78     		ldrb	r3, [r3]
 13959 01c4 002B     		cmp	r3, #0
 13960 01c6 39D1     		bne	.L754
2437:screens.c     **** 				switch( selection )
 13961              		.loc 1 2437 0
 13962 01c8 5E4B     		ldr	r3, .L829+16
 13963 01ca 1B78     		ldrb	r3, [r3]
 13964 01cc 012B     		cmp	r3, #1
 13965 01ce 17D0     		beq	.L757
 13966 01d0 002B     		cmp	r3, #0
 13967 01d2 02D0     		beq	.L756
 13968 01d4 032B     		cmp	r3, #3
 13969 01d6 7ED1     		bne	.L755
 13970 01d8 21E0     		b	.L758
 13971              	.L756:
2441:screens.c     **** 					pFac.pf.GW302_DiameterCorrection += PF_GW302_DiameterCorrection[PF_STEP];
 13972              		.loc 1 2441 0
 13973 01da 5E4A     		ldr	r2, .L829+32
 13974 01dc 5C48     		ldr	r0, .L829+28
 13975 01de 6821     		mov	r1, #104
 13976 01e0 1678     		ldrb	r6, [r2]
 13977              	.LVL1218:
 13978 01e2 435C     		ldrb	r3, [r0, r1]
 13979 01e4 F318     		add	r3, r6, r3
 13980 01e6 1B06     		lsl	r3, r3, #24
 13981 01e8 1B0E     		lsr	r3, r3, #24
 13982 01ea 4354     		strb	r3, [r0, r1]
2442:screens.c     **** 					if( pFac.pf.GW302_DiameterCorrection > PF_GW302_DiameterCorrection[PF_MAX] )
 13983              		.loc 1 2442 0
 13984 01ec 9278     		ldrb	r2, [r2, #2]
 13985 01ee 1B06     		lsl	r3, r3, #24
 13986 01f0 1B16     		asr	r3, r3, #24
 13987 01f2 1106     		lsl	r1, r2, #24
 13988 01f4 0916     		asr	r1, r1, #24
 13989 01f6 8B42     		cmp	r3, r1
 13990 01f8 6DDD     		ble	.L755
2443:screens.c     **** 						pFac.pf.GW302_DiameterCorrection = PF_GW302_DiameterCorrection[PF_MAX];  // Limiting to maxim
 13991              		.loc 1 2443 0
 13992 01fa 6823     		mov	r3, #104
 13993 01fc C254     		strb	r2, [r0, r3]
 13994 01fe 6AE0     		b	.L755
 13995              	.LVL1219:
 13996              	.L757:
2447:screens.c     **** 					pFac.pf.GW302_NetDelay += PF_GW302_NetDelay[PF_STEP];
 13997              		.loc 1 2447 0
 13998 0200 534F     		ldr	r7, .L829+28
 13999 0202 554E     		ldr	r6, .L829+36
 14000              	.LVL1220:
 14001 0204 B86F     		ldr	r0, [r7, #120]
 14002 0206 3168     		ldr	r1, [r6]
 14003 0208 FFF7FEFF 		bl	__aeabi_fadd
 14004              	.LVL1221:
 14005 020c B867     		str	r0, [r7, #120]
2448:screens.c     **** 					if( pFac.pf.GW302_NetDelay > PF_GW302_NetDelay[PF_MAX] )
 14006              		.loc 1 2448 0
 14007 020e B668     		ldr	r6, [r6, #8]
 14008 0210 311C     		add	r1, r6, #0
 14009 0212 FFF7FEFF 		bl	__aeabi_fcmpgt
 14010              	.LVL1222:
 14011 0216 0028     		cmp	r0, #0
 14012 0218 5DD0     		beq	.L755
2449:screens.c     **** 						pFac.pf.GW302_NetDelay = PF_GW302_NetDelay[PF_MAX];  // Limiting to maximum value
 14013              		.loc 1 2449 0
 14014 021a BE67     		str	r6, [r7, #120]
 14015 021c 5BE0     		b	.L755
 14016              	.LVL1223:
 14017              	.L758:
2455:screens.c     **** 					pFac.pf.GW302_PreWarningBeep += PF_GW302_PreWarningBeep[PF_STEP];
 14018              		.loc 1 2455 0
 14019 021e 514A     		ldr	r2, .L829+48
 14020 0220 4B48     		ldr	r0, .L829+28
 14021 0222 7421     		mov	r1, #116
 14022 0224 1678     		ldrb	r6, [r2]
 14023              	.LVL1224:
 14024 0226 435C     		ldrb	r3, [r0, r1]
 14025 0228 F318     		add	r3, r6, r3
 14026 022a 1B06     		lsl	r3, r3, #24
 14027 022c 1B0E     		lsr	r3, r3, #24
 14028 022e 4354     		strb	r3, [r0, r1]
2456:screens.c     **** 					if( pFac.pf.GW302_PreWarningBeep > PF_GW302_PreWarningBeep[PF_MAX] )
 14029              		.loc 1 2456 0
 14030 0230 9278     		ldrb	r2, [r2, #2]
 14031 0232 9342     		cmp	r3, r2
 14032 0234 4FD9     		bls	.L755
2457:screens.c     **** 						pFac.pf.GW302_PreWarningBeep = PF_GW302_PreWarningBeep[PF_MAX];  // Limiting to maximum value
 14033              		.loc 1 2457 0
 14034 0236 7423     		mov	r3, #116
 14035 0238 C254     		strb	r2, [r0, r3]
 14036 023a 4CE0     		b	.L755
 14037              	.LVL1225:
 14038              	.L754:
2463:screens.c     **** 				switch( selection )
 14039              		.loc 1 2463 0
 14040 023c 414B     		ldr	r3, .L829+16
 14041 023e 1B78     		ldrb	r3, [r3]
 14042 0240 002B     		cmp	r3, #0
 14043 0242 02D0     		beq	.L760
 14044 0244 022B     		cmp	r3, #2
 14045 0246 46D1     		bne	.L755
 14046 0248 14E0     		b	.L761
 14047              	.L760:
2467:screens.c     **** 					if( pFac.pf.GW302_BaleShapeIndicator == BSI_ON )
 14048              		.loc 1 2467 0
 14049 024a 6923     		mov	r3, #105
 14050 024c 404A     		ldr	r2, .L829+28
 14051 024e D35C     		ldrb	r3, [r2, r3]
 14052 0250 012B     		cmp	r3, #1
 14053 0252 03D1     		bne	.L762
2469:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_BEEP;
 14054              		.loc 1 2469 0
 14055 0254 0221     		mov	r1, #2
 14056 0256 6923     		mov	r3, #105
 14057 0258 D154     		strb	r1, [r2, r3]
 14058 025a 3CE0     		b	.L755
 14059              	.L762:
2471:screens.c     **** 					else if( pFac.pf.GW302_BaleShapeIndicator == BSI_BEEP )
 14060              		.loc 1 2471 0
 14061 025c 022B     		cmp	r3, #2
 14062 025e 04D1     		bne	.L763
2473:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_OFF;
 14063              		.loc 1 2473 0
 14064 0260 0021     		mov	r1, #0
 14065 0262 6923     		mov	r3, #105
 14066 0264 3A4A     		ldr	r2, .L829+28
 14067 0266 D154     		strb	r1, [r2, r3]
 14068 0268 35E0     		b	.L755
 14069              	.L763:
2477:screens.c     **** 						pFac.pf.GW302_BaleShapeIndicator = BSI_ON;
 14070              		.loc 1 2477 0
 14071 026a 0121     		mov	r1, #1
 14072 026c 6923     		mov	r3, #105
 14073 026e 384A     		ldr	r2, .L829+28
 14074 0270 D154     		strb	r1, [r2, r3]
 14075 0272 30E0     		b	.L755
 14076              	.L761:
2483:screens.c     **** 					if( pFac.pf.GW302_NetTwineOption < PF_GW302_NetTwineOption[PF_MAX] )  /* Net/Twine ICON  [Net/
 14077              		.loc 1 2483 0
 14078 0274 7C23     		mov	r3, #124
 14079 0276 364A     		ldr	r2, .L829+28
 14080 0278 D35C     		ldrb	r3, [r2, r3]
 14081 027a 3C4A     		ldr	r2, .L829+56
 14082 027c 9278     		ldrb	r2, [r2, #2]
 14083 027e 9A42     		cmp	r2, r3
 14084 0280 04D9     		bls	.L764
2485:screens.c     **** 						pFac.pf.GW302_NetTwineOption++; /*TO_TWINE*/
 14085              		.loc 1 2485 0
 14086 0282 0133     		add	r3, r3, #1
 14087 0284 7C22     		mov	r2, #124
 14088 0286 3249     		ldr	r1, .L829+28
 14089 0288 8B54     		strb	r3, [r1, r2]
 14090 028a 04E0     		b	.L765
 14091              	.L764:
2489:screens.c     **** 						pFac.pf.GW302_NetTwineOption = PF_GW302_NetTwineOption[PF_MIN]; /*TO_NET*/
 14092              		.loc 1 2489 0
 14093 028c 374B     		ldr	r3, .L829+56
 14094 028e 5978     		ldrb	r1, [r3, #1]
 14095 0290 7C23     		mov	r3, #124
 14096 0292 2F4A     		ldr	r2, .L829+28
 14097 0294 D154     		strb	r1, [r2, r3]
 14098              	.L765:
2491:screens.c     **** 					draw_box( adm, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y, ICON_TWINE_ZERO_X + 100, ICON_TWINE_ZERO_
 14099              		.loc 1 2491 0
 14100 0296 5423     		mov	r3, #84
 14101 0298 0093     		str	r3, [sp]
 14102 029a 4023     		mov	r3, #64
 14103 029c 0193     		str	r3, [sp, #4]
 14104 029e 2648     		ldr	r0, .L829+4
 14105 02a0 2A21     		mov	r1, #42
 14106 02a2 3622     		mov	r2, #54
 14107 02a4 8E23     		mov	r3, #142
 14108 02a6 FFF7FEFF 		bl	draw_box
 14109              	.LVL1226:
2493:screens.c     **** 						switch( pFac.pf.GW302_NetTwineOption )
 14110              		.loc 1 2493 0
 14111 02aa 7C23     		mov	r3, #124
 14112 02ac 284A     		ldr	r2, .L829+28
 14113 02ae D35C     		ldrb	r3, [r2, r3]
 14114 02b0 012B     		cmp	r3, #1
 14115 02b2 08D1     		bne	.L826
2496:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO
 14116              		.loc 1 2496 0
 14117 02b4 0223     		mov	r3, #2
 14118 02b6 0093     		str	r3, [sp]
 14119 02b8 1F48     		ldr	r0, .L829+4
 14120 02ba 2D49     		ldr	r1, .L829+60
 14121 02bc 2A22     		mov	r2, #42
 14122 02be 3623     		mov	r3, #54
 14123 02c0 FFF7FEFF 		bl	write_bitmap
 14124              	.LVL1227:
2497:screens.c     **** 							break;
 14125              		.loc 1 2497 0
 14126 02c4 07E0     		b	.L755
 14127              	.L826:
2499:screens.c     **** 							write_bitmap( adm, ICON_NET_TWINE_WITH_NET_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y
 14128              		.loc 1 2499 0
 14129 02c6 0223     		mov	r3, #2
 14130 02c8 0093     		str	r3, [sp]
 14131 02ca 1B48     		ldr	r0, .L829+4
 14132 02cc 2949     		ldr	r1, .L829+64
 14133 02ce 2A22     		mov	r2, #42
 14134 02d0 3623     		mov	r3, #54
 14135 02d2 FFF7FEFF 		bl	write_bitmap
 14136              	.LVL1228:
 14137              	.L755:
2505:screens.c     **** 			SavecalDelayWithinMenus = 1;
 14138              		.loc 1 2505 0
 14139 02d6 0122     		mov	r2, #1
 14140 02d8 274B     		ldr	r3, .L829+68
 14141 02da 1A70     		strb	r2, [r3]
 14142 02dc 69E0     		b	.L734
 14143              	.LVL1229:
 14144              	.L753:
2507:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
 14145              		.loc 1 2507 0
 14146 02de 202E     		cmp	r6, #32
 14147 02e0 1AD1     		bne	.L768
2509:screens.c     **** 			if( page == 0 )
 14148              		.loc 1 2509 0
 14149 02e2 194B     		ldr	r3, .L829+20
 14150 02e4 1B78     		ldrb	r3, [r3]
 14151 02e6 002B     		cmp	r3, #0
 14152 02e8 07D1     		bne	.L769
2511:screens.c     **** 				if( selection )
 14153              		.loc 1 2511 0
 14154 02ea 164B     		ldr	r3, .L829+16
 14155 02ec 1B78     		ldrb	r3, [r3]
 14156 02ee 002B     		cmp	r3, #0
 14157 02f0 5FD0     		beq	.L734
2513:screens.c     **** 					selection--;
 14158              		.loc 1 2513 0
 14159 02f2 013B     		sub	r3, r3, #1
 14160 02f4 134A     		ldr	r2, .L829+16
 14161 02f6 1370     		strb	r3, [r2]
 14162 02f8 5BE0     		b	.L734
 14163              	.L769:
2518:screens.c     **** 				if( selection )
 14164              		.loc 1 2518 0
 14165 02fa 124B     		ldr	r3, .L829+16
 14166 02fc 1B78     		ldrb	r3, [r3]
 14167 02fe 002B     		cmp	r3, #0
 14168 0300 03D0     		beq	.L770
2520:screens.c     **** 					selection--;
 14169              		.loc 1 2520 0
 14170 0302 013B     		sub	r3, r3, #1
 14171 0304 0F4A     		ldr	r2, .L829+16
 14172 0306 1370     		strb	r3, [r2]
 14173 0308 53E0     		b	.L734
 14174              	.L770:
2524:screens.c     **** 					selection = 3; /* last option */
 14175              		.loc 1 2524 0
 14176 030a 0322     		mov	r2, #3
 14177 030c 0D4B     		ldr	r3, .L829+16
 14178 030e 1A70     		strb	r2, [r3]
2525:screens.c     **** 					page = 0;
 14179              		.loc 1 2525 0
 14180 0310 0022     		mov	r2, #0
 14181 0312 0D4B     		ldr	r3, .L829+20
 14182 0314 1A70     		strb	r2, [r3]
 14183 0316 4CE0     		b	.L734
 14184              	.L768:
2529:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
 14185              		.loc 1 2529 0
 14186 0318 402E     		cmp	r6, #64
 14187 031a 4AD1     		bne	.L734
2531:screens.c     **** 			if( page == 0 )
 14188              		.loc 1 2531 0
 14189 031c 0A4B     		ldr	r3, .L829+20
 14190 031e 1B78     		ldrb	r3, [r3]
 14191 0320 002B     		cmp	r3, #0
 14192 0322 32D1     		bne	.L771
2533:screens.c     **** 				if( selection < 3 )
 14193              		.loc 1 2533 0
 14194 0324 074B     		ldr	r3, .L829+16
 14195 0326 1B78     		ldrb	r3, [r3]
 14196 0328 022B     		cmp	r3, #2
 14197 032a 27D8     		bhi	.L772
2535:screens.c     **** 					selection++;
 14198              		.loc 1 2535 0
 14199 032c 0133     		add	r3, r3, #1
 14200 032e 054A     		ldr	r2, .L829+16
 14201 0330 1370     		strb	r3, [r2]
 14202 0332 3EE0     		b	.L734
 14203              	.L830:
 14204              		.align	2
 14205              	.L829:
 14206 0334 00000000 		.word	startup
 14207 0338 00000000 		.word	adm
 14208 033c 00000000 		.word	TAB
 14209 0340 00000000 		.word	TABESC
 14210 0344 00000000 		.word	selection
 14211 0348 00000000 		.word	.LANCHOR8
 14212 034c 00000000 		.word	escape
 14213 0350 00000000 		.word	pFac
 14214 0354 00000000 		.word	PF_GW302_DiameterCorrection
 14215 0358 00000000 		.word	PF_GW302_NetDelay
 14216 035c 00000000 		.word	screen125
 14217 0360 00000000 		.word	window
 14218 0364 00000000 		.word	PF_GW302_PreWarningBeep
 14219 0368 00000000 		.word	screen124
 14220 036c 00000000 		.word	PF_GW302_NetTwineOption
 14221 0370 00000000 		.word	ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED
 14222 0374 00000000 		.word	ICON_NET_TWINE_WITH_NET_HIGHLIGHTED
 14223 0378 00000000 		.word	SavecalDelayWithinMenus
 14224              	.L772:
2539:screens.c     **** 					selection = 0; /* first option */
 14225              		.loc 1 2539 0
 14226 037c 0022     		mov	r2, #0
 14227 037e D84B     		ldr	r3, .L831
 14228 0380 1A70     		strb	r2, [r3]
2540:screens.c     **** 					page = 1;
 14229              		.loc 1 2540 0
 14230 0382 0122     		mov	r2, #1
 14231 0384 D74B     		ldr	r3, .L831+4
 14232 0386 1A70     		strb	r2, [r3]
 14233 0388 13E0     		b	.L734
 14234              	.L771:
2545:screens.c     **** 				if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
 14235              		.loc 1 2545 0
 14236 038a C323     		mov	r3, #195
 14237 038c D64A     		ldr	r2, .L831+8
 14238 038e D35C     		ldrb	r3, [r2, r3]
 14239 0390 012B     		cmp	r3, #1
 14240 0392 07D1     		bne	.L773
2547:screens.c     **** 					if( selection < 2 )
 14241              		.loc 1 2547 0
 14242 0394 D24B     		ldr	r3, .L831
 14243 0396 1B78     		ldrb	r3, [r3]
 14244 0398 012B     		cmp	r3, #1
 14245 039a 0AD8     		bhi	.L734
2549:screens.c     **** 						selection++;
 14246              		.loc 1 2549 0
 14247 039c 0133     		add	r3, r3, #1
 14248 039e D04A     		ldr	r2, .L831
 14249 03a0 1370     		strb	r3, [r2]
 14250 03a2 06E0     		b	.L734
 14251              	.L773:
2554:screens.c     **** 					if( selection < 1 )
 14252              		.loc 1 2554 0
 14253 03a4 CE4B     		ldr	r3, .L831
 14254 03a6 1B78     		ldrb	r3, [r3]
 14255 03a8 002B     		cmp	r3, #0
 14256 03aa 02D1     		bne	.L734
2556:screens.c     **** 						selection++;
 14257              		.loc 1 2556 0
 14258 03ac 0122     		mov	r2, #1
 14259 03ae CC4B     		ldr	r3, .L831
 14260 03b0 1A70     		strb	r2, [r3]
 14261              	.LVL1230:
 14262              	.L734:
2568:screens.c     **** 	if( page != old_page )
 14263              		.loc 1 2568 0
 14264 03b2 CC4B     		ldr	r3, .L831+4
 14265 03b4 1B78     		ldrb	r3, [r3]
 14266 03b6 A342     		cmp	r3, r4
 14267 03b8 00D1     		bne	.LCB13777
 14268 03ba 82E0     		b	.L774	@long jump
 14269              	.LCB13777:
2570:screens.c     **** 		draw_box( adm, PAGE_X1, PAGE_Y1, PAGE_X2, PAGE_Y2, CLEAR );
 14270              		.loc 1 2570 0
 14271 03bc 6123     		mov	r3, #97
 14272 03be 0093     		str	r3, [sp]
 14273 03c0 4023     		mov	r3, #64
 14274 03c2 0193     		str	r3, [sp, #4]
 14275 03c4 C948     		ldr	r0, .L831+12
 14276 03c6 2021     		mov	r1, #32
 14277 03c8 0522     		mov	r2, #5
 14278 03ca 8323     		mov	r3, #131
 14279 03cc FFF7FEFF 		bl	draw_box
 14280              	.LVL1231:
2572:screens.c     **** 		if( page == 0 )
 14281              		.loc 1 2572 0
 14282 03d0 C44B     		ldr	r3, .L831+4
 14283 03d2 1B78     		ldrb	r3, [r3]
 14284 03d4 002B     		cmp	r3, #0
 14285 03d6 1ED1     		bne	.L775
2574:screens.c     **** 			write_bitmap( adm, ICON_DIAMETER_CORRECTION, ICON_DIAMETER_CORRECTION_X,  ICON_DIAMETER_CORRECTI
 14286              		.loc 1 2574 0
 14287 03d8 C44E     		ldr	r6, .L831+12
 14288 03da 0227     		mov	r7, #2
 14289 03dc 0097     		str	r7, [sp]
 14290 03de 301C     		mov	r0, r6
 14291 03e0 C349     		ldr	r1, .L831+16
 14292 03e2 2022     		mov	r2, #32
 14293 03e4 0523     		mov	r3, #5
 14294 03e6 FFF7FEFF 		bl	write_bitmap
 14295              	.LVL1232:
2575:screens.c     **** 			write_bitmap( adm, ICON_NET_DELAY,           ICON_NET_DELAY_X,            ICON_NET_DELAY_Y,     
 14296              		.loc 1 2575 0
 14297 03ea 0097     		str	r7, [sp]
 14298 03ec 301C     		mov	r0, r6
 14299 03ee C149     		ldr	r1, .L831+20
 14300 03f0 2022     		mov	r2, #32
 14301 03f2 2023     		mov	r3, #32
 14302 03f4 FFF7FEFF 		bl	write_bitmap
 14303              	.LVL1233:
2576:screens.c     **** 			write_bitmap( adm, ICON_NET_METRES,          ICON_NET_METRES_X,           ICON_NET_METRES_Y,    
 14304              		.loc 1 2576 0
 14305 03f8 0097     		str	r7, [sp]
 14306 03fa 301C     		mov	r0, r6
 14307 03fc BE49     		ldr	r1, .L831+24
 14308 03fe 2022     		mov	r2, #32
 14309 0400 3623     		mov	r3, #54
 14310 0402 FFF7FEFF 		bl	write_bitmap
 14311              	.LVL1234:
2577:screens.c     **** 			write_bitmap( adm, ICON_PRE_WARNING_BEEP,    ICON_PRE_WARNING_BEEP_X,     ICON_PRE_WARNING_BEEP_
 14312              		.loc 1 2577 0
 14313 0406 0097     		str	r7, [sp]
 14314 0408 301C     		mov	r0, r6
 14315 040a BC49     		ldr	r1, .L831+28
 14316 040c 2022     		mov	r2, #32
 14317 040e 4F23     		mov	r3, #79
 14318 0410 FFF7FEFF 		bl	write_bitmap
 14319              	.LVL1235:
 14320 0414 29E0     		b	.L776
 14321              	.L775:
2581:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR,      ICON_BALE_INDICATOR_X,       ICON_BALE_INDICATOR_Y,
 14322              		.loc 1 2581 0
 14323 0416 B54E     		ldr	r6, .L831+12
 14324 0418 0227     		mov	r7, #2
 14325 041a 0097     		str	r7, [sp]
 14326 041c 301C     		mov	r0, r6
 14327 041e B849     		ldr	r1, .L831+32
 14328 0420 2022     		mov	r2, #32
 14329 0422 0A23     		mov	r3, #10
 14330 0424 FFF7FEFF 		bl	write_bitmap
 14331              	.LVL1236:
2582:screens.c     **** 			write_bitmap( adm, ICON_FILL_POT_ZERO,       ICON_FILL_POT_ZERO_X,        ICON_FILL_POT_ZERO_Y, 
 14332              		.loc 1 2582 0
 14333 0428 0097     		str	r7, [sp]
 14334 042a 301C     		mov	r0, r6
 14335 042c B549     		ldr	r1, .L831+36
 14336 042e 2022     		mov	r2, #32
 14337 0430 2123     		mov	r3, #33
 14338 0432 FFF7FEFF 		bl	write_bitmap
 14339              	.LVL1237:
2584:screens.c     **** 			if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
 14340              		.loc 1 2584 0
 14341 0436 C323     		mov	r3, #195
 14342 0438 AB4A     		ldr	r2, .L831+8
 14343 043a D35C     		ldrb	r3, [r2, r3]
 14344 043c 012B     		cmp	r3, #1
 14345 043e 14D1     		bne	.L776
2586:screens.c     **** 				switch( pFac.pf.GW302_NetTwineOption )
 14346              		.loc 1 2586 0
 14347 0440 7C23     		mov	r3, #124
 14348 0442 D35C     		ldrb	r3, [r2, r3]
 14349 0444 012B     		cmp	r3, #1
 14350 0446 08D1     		bne	.L827
2589:screens.c     **** 					write_bitmap( adm, ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y
 14351              		.loc 1 2589 0
 14352 0448 0223     		mov	r3, #2
 14353 044a 0093     		str	r3, [sp]
 14354 044c A748     		ldr	r0, .L831+12
 14355 044e AE49     		ldr	r1, .L831+40
 14356 0450 2A22     		mov	r2, #42
 14357 0452 3623     		mov	r3, #54
 14358 0454 FFF7FEFF 		bl	write_bitmap
 14359              	.LVL1238:
2590:screens.c     **** 					break;
 14360              		.loc 1 2590 0
 14361 0458 07E0     		b	.L776
 14362              	.L827:
2592:screens.c     **** 					write_bitmap( adm, ICON_NET_TWINE_WITH_NET_HIGHLIGHTED, ICON_TWINE_ZERO_X, ICON_TWINE_ZERO_Y, 
 14363              		.loc 1 2592 0
 14364 045a 0223     		mov	r3, #2
 14365 045c 0093     		str	r3, [sp]
 14366 045e A348     		ldr	r0, .L831+12
 14367 0460 AA49     		ldr	r1, .L831+44
 14368 0462 2A22     		mov	r2, #42
 14369 0464 3623     		mov	r3, #54
 14370 0466 FFF7FEFF 		bl	write_bitmap
 14371              	.LVL1239:
 14372              	.L776:
2603:screens.c     **** 	if( page != old_page )
 14373              		.loc 1 2603 0
 14374 046a 9E4B     		ldr	r3, .L831+4
 14375 046c 1B78     		ldrb	r3, [r3]
 14376 046e A342     		cmp	r3, r4
 14377 0470 27D0     		beq	.L774
2605:screens.c     **** 		if( page == 0 )
 14378              		.loc 1 2605 0
 14379 0472 002B     		cmp	r3, #0
 14380 0474 08D1     		bne	.L779
2607:screens.c     **** 			write_bitmap( adm, ICON_SCROLL_BAR_PAGE_1_OF_2, ICON_SCROLL_BAR_X, ICON_SCROLL_BAR_Y, AND );
 14381              		.loc 1 2607 0
 14382 0476 0123     		mov	r3, #1
 14383 0478 0093     		str	r3, [sp]
 14384 047a 9C48     		ldr	r0, .L831+12
 14385 047c A449     		ldr	r1, .L831+48
 14386 047e 9222     		mov	r2, #146
 14387 0480 0B23     		mov	r3, #11
 14388 0482 FFF7FEFF 		bl	write_bitmap
 14389              	.LVL1240:
 14390 0486 07E0     		b	.L780
 14391              	.L779:
2611:screens.c     **** 			write_bitmap( adm, ICON_SCROLL_BAR_PAGE_2_OF_2, ICON_SCROLL_BAR_X, ICON_SCROLL_BAR_Y, AND );
 14392              		.loc 1 2611 0
 14393 0488 0123     		mov	r3, #1
 14394 048a 0093     		str	r3, [sp]
 14395 048c 9748     		ldr	r0, .L831+12
 14396 048e A149     		ldr	r1, .L831+52
 14397 0490 9222     		mov	r2, #146
 14398 0492 0B23     		mov	r3, #11
 14399 0494 FFF7FEFF 		bl	write_bitmap
 14400              	.LVL1241:
 14401              	.L780:
2614:screens.c     **** 		draw_line( adm,   0, 0,   0, 127, OR ); /* restoring left-hand frame border */
 14402              		.loc 1 2614 0
 14403 0498 944E     		ldr	r6, .L831+12
 14404 049a 7F22     		mov	r2, #127
 14405 049c 9046     		mov	r8, r2
 14406 049e 0092     		str	r2, [sp]
 14407 04a0 0227     		mov	r7, #2
 14408 04a2 0197     		str	r7, [sp, #4]
 14409 04a4 301C     		mov	r0, r6
 14410 04a6 0021     		mov	r1, #0
 14411 04a8 0022     		mov	r2, #0
 14412 04aa 0023     		mov	r3, #0
 14413 04ac FFF7FEFF 		bl	draw_line
 14414              	.LVL1242:
2615:screens.c     **** 		draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
 14415              		.loc 1 2615 0
 14416 04b0 4246     		mov	r2, r8
 14417 04b2 0092     		str	r2, [sp]
 14418 04b4 0197     		str	r7, [sp, #4]
 14419 04b6 301C     		mov	r0, r6
 14420 04b8 9F21     		mov	r1, #159
 14421 04ba 0022     		mov	r2, #0
 14422 04bc 9F23     		mov	r3, #159
 14423 04be FFF7FEFF 		bl	draw_line
 14424              	.LVL1243:
 14425              	.L774:
2622:screens.c     **** 	if( (selection != old_selection) || (page != old_page) )
 14426              		.loc 1 2622 0
 14427 04c2 874B     		ldr	r3, .L831
 14428 04c4 1B78     		ldrb	r3, [r3]
 14429 04c6 AB42     		cmp	r3, r5
 14430 04c8 04D1     		bne	.L781
2622:screens.c     **** 	if( (selection != old_selection) || (page != old_page) )
 14431              		.loc 1 2622 0 is_stmt 0 discriminator 1
 14432 04ca 864B     		ldr	r3, .L831+4
 14433 04cc 1B78     		ldrb	r3, [r3]
 14434 04ce A342     		cmp	r3, r4
 14435 04d0 00D1     		bne	.LCB13933
 14436 04d2 A5E1     		b	.L782	@long jump
 14437              	.LCB13933:
 14438              	.L781:
2625:screens.c     **** 		draw_box( adm, 1, 102, 62+36-1, 102+24-1,   CLEAR ); 
 14439              		.loc 1 2625 0 is_stmt 1
 14440 04d4 7D23     		mov	r3, #125
 14441 04d6 0093     		str	r3, [sp]
 14442 04d8 4023     		mov	r3, #64
 14443 04da 0193     		str	r3, [sp, #4]
 14444 04dc 8348     		ldr	r0, .L831+12
 14445 04de 0121     		mov	r1, #1
 14446 04e0 6622     		mov	r2, #102
 14447 04e2 6123     		mov	r3, #97
 14448 04e4 FFF7FEFF 		bl	draw_box
 14449              	.LVL1244:
2627:screens.c     **** 		if( page == 0 )
 14450              		.loc 1 2627 0
 14451 04e8 7E4B     		ldr	r3, .L831+4
 14452 04ea 1B78     		ldrb	r3, [r3]
 14453 04ec 002B     		cmp	r3, #0
 14454 04ee 53D1     		bne	.L783
2629:screens.c     **** 			switch( selection )
 14455              		.loc 1 2629 0
 14456 04f0 7B4B     		ldr	r3, .L831
 14457 04f2 1B78     		ldrb	r3, [r3]
 14458 04f4 012B     		cmp	r3, #1
 14459 04f6 1FD0     		beq	.L786
 14460 04f8 002B     		cmp	r3, #0
 14461 04fa 05D0     		beq	.L785
 14462 04fc 022B     		cmp	r3, #2
 14463 04fe 33D0     		beq	.L787
 14464 0500 032B     		cmp	r3, #3
 14465 0502 00D0     		beq	.LCB13966
 14466 0504 ACE0     		b	.L784	@long jump
 14467              	.LCB13966:
 14468 0506 17E0     		b	.L786
 14469              	.L785:
2632:screens.c     **** 				write_bitmap( adm, TABMINUS,  0, 107, OR ); // -
 14470              		.loc 1 2632 0
 14471 0508 784E     		ldr	r6, .L831+12
 14472 050a 0227     		mov	r7, #2
 14473 050c 0097     		str	r7, [sp]
 14474 050e 301C     		mov	r0, r6
 14475 0510 8149     		ldr	r1, .L831+56
 14476 0512 0022     		mov	r2, #0
 14477 0514 6B23     		mov	r3, #107
 14478 0516 FFF7FEFF 		bl	write_bitmap
 14479              	.LVL1245:
2633:screens.c     **** 				write_bitmap( adm, TABPLUS,  31, 107, OR ); // +
 14480              		.loc 1 2633 0
 14481 051a 0097     		str	r7, [sp]
 14482 051c 301C     		mov	r0, r6
 14483 051e 7F49     		ldr	r1, .L831+60
 14484 0520 1F22     		mov	r2, #31
 14485 0522 6B23     		mov	r3, #107
 14486 0524 FFF7FEFF 		bl	write_bitmap
 14487              	.LVL1246:
2634:screens.c     **** 				write_bitmap( adm, TABNAV_D, 62, 102, OR ); // NAVIGATION: Down
 14488              		.loc 1 2634 0
 14489 0528 0097     		str	r7, [sp]
 14490 052a 301C     		mov	r0, r6
 14491 052c 7C49     		ldr	r1, .L831+64
 14492 052e 3E22     		mov	r2, #62
 14493 0530 6623     		mov	r3, #102
 14494 0532 FFF7FEFF 		bl	write_bitmap
 14495              	.LVL1247:
2635:screens.c     **** 				break;
 14496              		.loc 1 2635 0
 14497 0536 93E0     		b	.L784
 14498              	.L786:
2638:screens.c     **** 				write_bitmap( adm, TABMINUS,  0, 107, OR ); // -
 14499              		.loc 1 2638 0
 14500 0538 6C4E     		ldr	r6, .L831+12
 14501 053a 0227     		mov	r7, #2
 14502 053c 0097     		str	r7, [sp]
 14503 053e 301C     		mov	r0, r6
 14504 0540 7549     		ldr	r1, .L831+56
 14505 0542 0022     		mov	r2, #0
 14506 0544 6B23     		mov	r3, #107
 14507 0546 FFF7FEFF 		bl	write_bitmap
 14508              	.LVL1248:
2639:screens.c     **** 				write_bitmap( adm, TABPLUS,  31, 107, OR ); // +
 14509              		.loc 1 2639 0
 14510 054a 0097     		str	r7, [sp]
 14511 054c 301C     		mov	r0, r6
 14512 054e 7349     		ldr	r1, .L831+60
 14513 0550 1F22     		mov	r2, #31
 14514 0552 6B23     		mov	r3, #107
 14515 0554 FFF7FEFF 		bl	write_bitmap
 14516              	.LVL1249:
2640:screens.c     **** 				write_bitmap( adm, TABNAV_UD,62, 102, OR ); // NAVIGATION: Up Down
 14517              		.loc 1 2640 0
 14518 0558 0097     		str	r7, [sp]
 14519 055a 301C     		mov	r0, r6
 14520 055c 7149     		ldr	r1, .L831+68
 14521 055e 3E22     		mov	r2, #62
 14522 0560 6623     		mov	r3, #102
 14523 0562 FFF7FEFF 		bl	write_bitmap
 14524              	.LVL1250:
2641:screens.c     **** 				break;
 14525              		.loc 1 2641 0
 14526 0566 7BE0     		b	.L784
 14527              	.L787:
2643:screens.c     **** 				write_bitmap( adm, TABRESET,   0, 107, OR ); // RESET
 14528              		.loc 1 2643 0
 14529 0568 604E     		ldr	r6, .L831+12
 14530 056a 0227     		mov	r7, #2
 14531 056c 0097     		str	r7, [sp]
 14532 056e 301C     		mov	r0, r6
 14533 0570 6D49     		ldr	r1, .L831+72
 14534 0572 0022     		mov	r2, #0
 14535 0574 6B23     		mov	r3, #107
 14536 0576 FFF7FEFF 		bl	write_bitmap
 14537              	.LVL1251:
2644:screens.c     **** 				write_bitmap( adm, TAB,       31, 107, OR );
 14538              		.loc 1 2644 0
 14539 057a 0097     		str	r7, [sp]
 14540 057c 301C     		mov	r0, r6
 14541 057e 6B49     		ldr	r1, .L831+76
 14542 0580 1F22     		mov	r2, #31
 14543 0582 6B23     		mov	r3, #107
 14544 0584 FFF7FEFF 		bl	write_bitmap
 14545              	.LVL1252:
2645:screens.c     **** 				write_bitmap( adm, TABNAV_UD, 62, 102, OR ); // NAVIGATION: Up Down
 14546              		.loc 1 2645 0
 14547 0588 0097     		str	r7, [sp]
 14548 058a 301C     		mov	r0, r6
 14549 058c 6549     		ldr	r1, .L831+68
 14550 058e 3E22     		mov	r2, #62
 14551 0590 6623     		mov	r3, #102
 14552 0592 FFF7FEFF 		bl	write_bitmap
 14553              	.LVL1253:
2646:screens.c     **** 				break;
 14554              		.loc 1 2646 0
 14555 0596 63E0     		b	.L784
 14556              	.L783:
2651:screens.c     **** 			switch( selection )
 14557              		.loc 1 2651 0
 14558 0598 514B     		ldr	r3, .L831
 14559 059a 1B78     		ldrb	r3, [r3]
 14560 059c 012B     		cmp	r3, #1
 14561 059e 1CD0     		beq	.L789
 14562 05a0 002B     		cmp	r3, #0
 14563 05a2 02D0     		beq	.L788
 14564 05a4 022B     		cmp	r3, #2
 14565 05a6 5BD1     		bne	.L784
 14566 05a8 3EE0     		b	.L790
 14567              	.L788:
2654:screens.c     **** 				write_bitmap( adm, TABLEFT,    0, 107, OR ); // <
 14568              		.loc 1 2654 0
 14569 05aa 504E     		ldr	r6, .L831+12
 14570 05ac 0227     		mov	r7, #2
 14571 05ae 0097     		str	r7, [sp]
 14572 05b0 301C     		mov	r0, r6
 14573 05b2 5F49     		ldr	r1, .L831+80
 14574 05b4 0022     		mov	r2, #0
 14575 05b6 6B23     		mov	r3, #107
 14576 05b8 FFF7FEFF 		bl	write_bitmap
 14577              	.LVL1254:
2655:screens.c     **** 				write_bitmap( adm, TABRIGHT,  31, 107, OR ); // >
 14578              		.loc 1 2655 0
 14579 05bc 0097     		str	r7, [sp]
 14580 05be 301C     		mov	r0, r6
 14581 05c0 5C49     		ldr	r1, .L831+84
 14582 05c2 1F22     		mov	r2, #31
 14583 05c4 6B23     		mov	r3, #107
 14584 05c6 FFF7FEFF 		bl	write_bitmap
 14585              	.LVL1255:
2656:screens.c     **** 				write_bitmap( adm, TABNAV_UD, 62, 102, OR ); // NAVIGATION: Up Down
 14586              		.loc 1 2656 0
 14587 05ca 0097     		str	r7, [sp]
 14588 05cc 301C     		mov	r0, r6
 14589 05ce 5549     		ldr	r1, .L831+68
 14590 05d0 3E22     		mov	r2, #62
 14591 05d2 6623     		mov	r3, #102
 14592 05d4 FFF7FEFF 		bl	write_bitmap
 14593              	.LVL1256:
2657:screens.c     **** 				break;
 14594              		.loc 1 2657 0
 14595 05d8 42E0     		b	.L784
 14596              	.L789:
2659:screens.c     **** 				write_bitmap( adm, TABRESET,   0, 107, OR ); // RESET
 14597              		.loc 1 2659 0
 14598 05da 444E     		ldr	r6, .L831+12
 14599 05dc 0227     		mov	r7, #2
 14600 05de 0097     		str	r7, [sp]
 14601 05e0 301C     		mov	r0, r6
 14602 05e2 5149     		ldr	r1, .L831+72
 14603 05e4 0022     		mov	r2, #0
 14604 05e6 6B23     		mov	r3, #107
 14605 05e8 FFF7FEFF 		bl	write_bitmap
 14606              	.LVL1257:
2660:screens.c     **** 				write_bitmap( adm, TAB,       31, 107, OR );
 14607              		.loc 1 2660 0
 14608 05ec 0097     		str	r7, [sp]
 14609 05ee 301C     		mov	r0, r6
 14610 05f0 4E49     		ldr	r1, .L831+76
 14611 05f2 1F22     		mov	r2, #31
 14612 05f4 6B23     		mov	r3, #107
 14613 05f6 FFF7FEFF 		bl	write_bitmap
 14614              	.LVL1258:
2662:screens.c     **** 				if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
 14615              		.loc 1 2662 0
 14616 05fa C323     		mov	r3, #195
 14617 05fc 3A4A     		ldr	r2, .L831+8
 14618 05fe D35C     		ldrb	r3, [r2, r3]
 14619 0600 012B     		cmp	r3, #1
 14620 0602 08D1     		bne	.L791
2663:screens.c     **** 					write_bitmap( adm, TABNAV_UD,  62, 102, OR ); // NAVIGATION: Up
 14621              		.loc 1 2663 0
 14622 0604 0223     		mov	r3, #2
 14623 0606 0093     		str	r3, [sp]
 14624 0608 3848     		ldr	r0, .L831+12
 14625 060a 4649     		ldr	r1, .L831+68
 14626 060c 3E22     		mov	r2, #62
 14627 060e 6623     		mov	r3, #102
 14628 0610 FFF7FEFF 		bl	write_bitmap
 14629              	.LVL1259:
 14630 0614 24E0     		b	.L784
 14631              	.L791:
2665:screens.c     **** 					write_bitmap( adm, TABNAV_U,  62, 102, OR );
 14632              		.loc 1 2665 0
 14633 0616 0223     		mov	r3, #2
 14634 0618 0093     		str	r3, [sp]
 14635 061a 3448     		ldr	r0, .L831+12
 14636 061c 4649     		ldr	r1, .L831+88
 14637 061e 3E22     		mov	r2, #62
 14638 0620 6623     		mov	r3, #102
 14639 0622 FFF7FEFF 		bl	write_bitmap
 14640              	.LVL1260:
 14641 0626 1BE0     		b	.L784
 14642              	.L790:
2668:screens.c     **** 				if( pFac.pf.GW302_TwineOption == TO_ON ) /* Only displayed if 'Twine Option' set to On.*/
 14643              		.loc 1 2668 0
 14644 0628 C323     		mov	r3, #195
 14645 062a 2F4A     		ldr	r2, .L831+8
 14646 062c D35C     		ldrb	r3, [r2, r3]
 14647 062e 012B     		cmp	r3, #1
 14648 0630 16D1     		bne	.L784
2670:screens.c     **** 					write_bitmap( adm, TABLEFT,    0, 107, OR ); // <
 14649              		.loc 1 2670 0
 14650 0632 2E4E     		ldr	r6, .L831+12
 14651 0634 0227     		mov	r7, #2
 14652 0636 0097     		str	r7, [sp]
 14653 0638 301C     		mov	r0, r6
 14654 063a 3D49     		ldr	r1, .L831+80
 14655 063c 0022     		mov	r2, #0
 14656 063e 6B23     		mov	r3, #107
 14657 0640 FFF7FEFF 		bl	write_bitmap
 14658              	.LVL1261:
2671:screens.c     **** 					write_bitmap( adm, TABRIGHT,  31, 107, OR ); // >
 14659              		.loc 1 2671 0
 14660 0644 0097     		str	r7, [sp]
 14661 0646 301C     		mov	r0, r6
 14662 0648 3A49     		ldr	r1, .L831+84
 14663 064a 1F22     		mov	r2, #31
 14664 064c 6B23     		mov	r3, #107
 14665 064e FFF7FEFF 		bl	write_bitmap
 14666              	.LVL1262:
2672:screens.c     **** 					write_bitmap( adm, TABNAV_U, 62, 102, OR ); // NAVIGATION: Up Down
 14667              		.loc 1 2672 0
 14668 0652 0097     		str	r7, [sp]
 14669 0654 301C     		mov	r0, r6
 14670 0656 3849     		ldr	r1, .L831+88
 14671 0658 3E22     		mov	r2, #62
 14672 065a 6623     		mov	r3, #102
 14673 065c FFF7FEFF 		bl	write_bitmap
 14674              	.LVL1263:
 14675              	.L784:
2684:screens.c     **** 	if( selection != old_selection )
 14676              		.loc 1 2684 0
 14677 0660 1F4B     		ldr	r3, .L831
 14678 0662 1B78     		ldrb	r3, [r3]
 14679 0664 AB42     		cmp	r3, r5
 14680 0666 00D1     		bne	.LCB14175
 14681 0668 DAE0     		b	.L782	@long jump
 14682              	.LCB14175:
2686:screens.c     **** 		if( page == old_page )
 14683              		.loc 1 2686 0
 14684 066a 1E4B     		ldr	r3, .L831+4
 14685 066c 1B78     		ldrb	r3, [r3]
 14686 066e A342     		cmp	r3, r4
 14687 0670 00D0     		beq	.LCB14179
 14688 0672 7FE0     		b	.L792	@long jump
 14689              	.LCB14179:
2689:screens.c     **** 			if( page == 0 )
 14690              		.loc 1 2689 0
 14691 0674 002B     		cmp	r3, #0
 14692 0676 2CD1     		bne	.L793
2691:screens.c     **** 				switch( old_selection )
 14693              		.loc 1 2691 0
 14694 0678 012D     		cmp	r5, #1
 14695 067a 0FD0     		beq	.L795
 14696 067c 002D     		cmp	r5, #0
 14697 067e 04D0     		beq	.L794
 14698 0680 022D     		cmp	r5, #2
 14699 0682 14D0     		beq	.L796
 14700 0684 032D     		cmp	r5, #3
 14701 0686 75D1     		bne	.L792
 14702 0688 1AE0     		b	.L797
 14703              	.L794:
2694:screens.c     **** 					write_bitmap( adm, ICON_DIAMETER_CORRECTION, ICON_DIAMETER_CORRECTION_OFFSET_X, ICON_DIAMETER_
 14704              		.loc 1 2694 0
 14705 068a 0123     		mov	r3, #1
 14706 068c 0093     		str	r3, [sp]
 14707 068e 1748     		ldr	r0, .L831+12
 14708 0690 1749     		ldr	r1, .L831+16
 14709 0692 2022     		mov	r2, #32
 14710 0694 0523     		mov	r3, #5
 14711 0696 FFF7FEFF 		bl	write_bitmap
 14712              	.LVL1264:
2695:screens.c     **** 					break;
 14713              		.loc 1 2695 0
 14714 069a 6BE0     		b	.L792
 14715              	.L795:
2697:screens.c     **** 					write_bitmap( adm, ICON_NET_DELAY, ICON_NET_DELAY_OFFSET_X, ICON_NET_DELAY_OFFSET_Y, AND );
 14716              		.loc 1 2697 0
 14717 069c 0123     		mov	r3, #1
 14718 069e 0093     		str	r3, [sp]
 14719 06a0 1248     		ldr	r0, .L831+12
 14720 06a2 1449     		ldr	r1, .L831+20
 14721 06a4 2022     		mov	r2, #32
 14722 06a6 2023     		mov	r3, #32
 14723 06a8 FFF7FEFF 		bl	write_bitmap
 14724              	.LVL1265:
2698:screens.c     **** 					break;
 14725              		.loc 1 2698 0
 14726 06ac 62E0     		b	.L792
 14727              	.L796:
2700:screens.c     **** 					write_bitmap( adm, ICON_NET_METRES, ICON_NET_METRES_OFFSET_X, ICON_NET_METRES_OFFSET_Y, AND );
 14728              		.loc 1 2700 0
 14729 06ae 0123     		mov	r3, #1
 14730 06b0 0093     		str	r3, [sp]
 14731 06b2 0E48     		ldr	r0, .L831+12
 14732 06b4 1049     		ldr	r1, .L831+24
 14733 06b6 2022     		mov	r2, #32
 14734 06b8 3623     		mov	r3, #54
 14735 06ba FFF7FEFF 		bl	write_bitmap
 14736              	.LVL1266:
2701:screens.c     **** 					break;
 14737              		.loc 1 2701 0
 14738 06be 59E0     		b	.L792
 14739              	.L797:
2703:screens.c     **** 					write_bitmap( adm, ICON_PRE_WARNING_BEEP, ICON_PRE_WARNING_BEEP_OFFSET_X, ICON_PRE_WARNING_BEE
 14740              		.loc 1 2703 0
 14741 06c0 0123     		mov	r3, #1
 14742 06c2 0093     		str	r3, [sp]
 14743 06c4 0948     		ldr	r0, .L831+12
 14744 06c6 0D49     		ldr	r1, .L831+28
 14745 06c8 2022     		mov	r2, #32
 14746 06ca 4F23     		mov	r3, #79
 14747 06cc FFF7FEFF 		bl	write_bitmap
 14748              	.LVL1267:
2704:screens.c     **** 					break;
 14749              		.loc 1 2704 0
 14750 06d0 50E0     		b	.L792
 14751              	.L793:
2709:screens.c     **** 				switch( old_selection )
 14752              		.loc 1 2709 0
 14753 06d2 012D     		cmp	r5, #1
 14754 06d4 3BD0     		beq	.L799
 14755 06d6 002D     		cmp	r5, #0
 14756 06d8 30D0     		beq	.L798
 14757 06da 022D     		cmp	r5, #2
 14758 06dc 4AD1     		bne	.L792
 14759 06de 3FE0     		b	.L800
 14760              	.L832:
 14761              		.align	2
 14762              	.L831:
 14763 06e0 00000000 		.word	selection
 14764 06e4 00000000 		.word	.LANCHOR8
 14765 06e8 00000000 		.word	pFac
 14766 06ec 00000000 		.word	adm
 14767 06f0 00000000 		.word	ICON_DIAMETER_CORRECTION
 14768 06f4 00000000 		.word	ICON_NET_DELAY
 14769 06f8 00000000 		.word	ICON_NET_METRES
 14770 06fc 00000000 		.word	ICON_PRE_WARNING_BEEP
 14771 0700 00000000 		.word	ICON_BALE_INDICATOR
 14772 0704 00000000 		.word	ICON_FILL_POT_ZERO
 14773 0708 00000000 		.word	ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED
 14774 070c 00000000 		.word	ICON_NET_TWINE_WITH_NET_HIGHLIGHTED
 14775 0710 00000000 		.word	ICON_SCROLL_BAR_PAGE_1_OF_2
 14776 0714 00000000 		.word	ICON_SCROLL_BAR_PAGE_2_OF_2
 14777 0718 00000000 		.word	TABMINUS
 14778 071c 00000000 		.word	TABPLUS
 14779 0720 00000000 		.word	TABNAV_D
 14780 0724 00000000 		.word	TABNAV_UD
 14781 0728 00000000 		.word	TABRESET
 14782 072c 00000000 		.word	TAB
 14783 0730 00000000 		.word	TABLEFT
 14784 0734 00000000 		.word	TABRIGHT
 14785 0738 00000000 		.word	TABNAV_U
 14786              	.L798:
2712:screens.c     **** 					write_bitmap( adm, ICON_BALE_INDICATOR, ICON_BALE_INDICATOR_OFFSET_X, ICON_BALE_INDICATOR_OFFS
 14787              		.loc 1 2712 0
 14788 073c 0123     		mov	r3, #1
 14789 073e 0093     		str	r3, [sp]
 14790 0740 C748     		ldr	r0, .L833
 14791 0742 C849     		ldr	r1, .L833+4
 14792 0744 2022     		mov	r2, #32
 14793 0746 0A23     		mov	r3, #10
 14794 0748 FFF7FEFF 		bl	write_bitmap
 14795              	.LVL1268:
2713:screens.c     **** 					break;
 14796              		.loc 1 2713 0
 14797 074c 12E0     		b	.L792
 14798              	.L799:
2715:screens.c     **** 					write_bitmap( adm, ICON_FILL_POT_ZERO, ICON_FILL_POT_ZERO_OFFSET_X, ICON_FILL_POT_ZERO_OFFSET_
 14799              		.loc 1 2715 0
 14800 074e 0123     		mov	r3, #1
 14801 0750 0093     		str	r3, [sp]
 14802 0752 C348     		ldr	r0, .L833
 14803 0754 C449     		ldr	r1, .L833+8
 14804 0756 2022     		mov	r2, #32
 14805 0758 2123     		mov	r3, #33
 14806 075a FFF7FEFF 		bl	write_bitmap
 14807              	.LVL1269:
2716:screens.c     **** 					break;
 14808              		.loc 1 2716 0
 14809 075e 09E0     		b	.L792
 14810              	.L800:
2719:screens.c     **** 					draw_box( adm, ICON_TWINE_ZERO_X - 12, ICON_TWINE_ZERO_Y + 4, ICON_TWINE_ZERO_X - 2, ICON_TWIN
 14811              		.loc 1 2719 0
 14812 0760 4A23     		mov	r3, #74
 14813 0762 0093     		str	r3, [sp]
 14814 0764 4023     		mov	r3, #64
 14815 0766 0193     		str	r3, [sp, #4]
 14816 0768 BD48     		ldr	r0, .L833
 14817 076a 1E21     		mov	r1, #30
 14818 076c 3A22     		mov	r2, #58
 14819 076e 2823     		mov	r3, #40
 14820 0770 FFF7FEFF 		bl	draw_box
 14821              	.LVL1270:
 14822              	.L792:
2726:screens.c     **** 		if( page == 0 )
 14823              		.loc 1 2726 0
 14824 0774 BD4B     		ldr	r3, .L833+12
 14825 0776 1B78     		ldrb	r3, [r3]
 14826 0778 002B     		cmp	r3, #0
 14827 077a 2ED1     		bne	.L801
2728:screens.c     **** 			switch( selection )
 14828              		.loc 1 2728 0
 14829 077c BC4B     		ldr	r3, .L833+16
 14830 077e 1B78     		ldrb	r3, [r3]
 14831 0780 012B     		cmp	r3, #1
 14832 0782 0FD0     		beq	.L803
 14833 0784 002B     		cmp	r3, #0
 14834 0786 04D0     		beq	.L802
 14835 0788 022B     		cmp	r3, #2
 14836 078a 14D0     		beq	.L804
 14837 078c 032B     		cmp	r3, #3
 14838 078e 47D1     		bne	.L782
 14839 0790 1AE0     		b	.L805
 14840              	.L802:
2731:screens.c     **** 				write_bitmap( adm, ICON_DIAMETER_CORRECTION_SELECTED, ICON_DIAMETER_CORRECTION_OFFSET_X, ICON_D
 14841              		.loc 1 2731 0
 14842 0792 0223     		mov	r3, #2
 14843 0794 0093     		str	r3, [sp]
 14844 0796 B248     		ldr	r0, .L833
 14845 0798 B649     		ldr	r1, .L833+20
 14846 079a 2022     		mov	r2, #32
 14847 079c 0523     		mov	r3, #5
 14848 079e FFF7FEFF 		bl	write_bitmap
 14849              	.LVL1271:
2732:screens.c     **** 				break;
 14850              		.loc 1 2732 0
 14851 07a2 3DE0     		b	.L782
 14852              	.L803:
2734:screens.c     **** 				write_bitmap( adm, ICON_NET_DELAY_SELECTED, ICON_NET_DELAY_OFFSET_X, ICON_NET_DELAY_OFFSET_Y, O
 14853              		.loc 1 2734 0
 14854 07a4 0223     		mov	r3, #2
 14855 07a6 0093     		str	r3, [sp]
 14856 07a8 AD48     		ldr	r0, .L833
 14857 07aa B349     		ldr	r1, .L833+24
 14858 07ac 2022     		mov	r2, #32
 14859 07ae 2023     		mov	r3, #32
 14860 07b0 FFF7FEFF 		bl	write_bitmap
 14861              	.LVL1272:
2735:screens.c     **** 				break;
 14862              		.loc 1 2735 0
 14863 07b4 34E0     		b	.L782
 14864              	.L804:
2737:screens.c     **** 				write_bitmap( adm, ICON_NET_METRES_SELECTED, ICON_NET_METRES_OFFSET_X, ICON_NET_METRES_OFFSET_Y
 14865              		.loc 1 2737 0
 14866 07b6 0223     		mov	r3, #2
 14867 07b8 0093     		str	r3, [sp]
 14868 07ba A948     		ldr	r0, .L833
 14869 07bc AF49     		ldr	r1, .L833+28
 14870 07be 2022     		mov	r2, #32
 14871 07c0 3623     		mov	r3, #54
 14872 07c2 FFF7FEFF 		bl	write_bitmap
 14873              	.LVL1273:
2738:screens.c     **** 				break;
 14874              		.loc 1 2738 0
 14875 07c6 2BE0     		b	.L782
 14876              	.L805:
2740:screens.c     **** 				write_bitmap( adm, ICON_PRE_WARNING_BEEP_SELECTED, ICON_PRE_WARNING_BEEP_OFFSET_X, ICON_PRE_WAR
 14877              		.loc 1 2740 0
 14878 07c8 0223     		mov	r3, #2
 14879 07ca 0093     		str	r3, [sp]
 14880 07cc A448     		ldr	r0, .L833
 14881 07ce AC49     		ldr	r1, .L833+32
 14882 07d0 2022     		mov	r2, #32
 14883 07d2 4F23     		mov	r3, #79
 14884 07d4 FFF7FEFF 		bl	write_bitmap
 14885              	.LVL1274:
2741:screens.c     **** 				break;
 14886              		.loc 1 2741 0
 14887 07d8 22E0     		b	.L782
 14888              	.L801:
2746:screens.c     **** 			switch( selection )
 14889              		.loc 1 2746 0
 14890 07da A54B     		ldr	r3, .L833+16
 14891 07dc 1B78     		ldrb	r3, [r3]
 14892 07de 012B     		cmp	r3, #1
 14893 07e0 0DD0     		beq	.L807
 14894 07e2 002B     		cmp	r3, #0
 14895 07e4 02D0     		beq	.L806
 14896 07e6 022B     		cmp	r3, #2
 14897 07e8 1AD1     		bne	.L782
 14898 07ea 11E0     		b	.L808
 14899              	.L806:
2749:screens.c     **** 				write_bitmap( adm, ICON_BALE_INDICATOR_SELECTED, ICON_BALE_INDICATOR_OFFSET_X, ICON_BALE_INDICA
 14900              		.loc 1 2749 0
 14901 07ec 0223     		mov	r3, #2
 14902 07ee 0093     		str	r3, [sp]
 14903 07f0 9B48     		ldr	r0, .L833
 14904 07f2 A449     		ldr	r1, .L833+36
 14905 07f4 2022     		mov	r2, #32
 14906 07f6 0A23     		mov	r3, #10
 14907 07f8 FFF7FEFF 		bl	write_bitmap
 14908              	.LVL1275:
2750:screens.c     **** 				break;
 14909              		.loc 1 2750 0
 14910 07fc 10E0     		b	.L782
 14911              	.L807:
2752:screens.c     **** 				write_bitmap( adm, ICON_FILL_POT_ZERO_SELECTED, ICON_FILL_POT_ZERO_OFFSET_X, ICON_FILL_POT_ZERO
 14912              		.loc 1 2752 0
 14913 07fe 0223     		mov	r3, #2
 14914 0800 0093     		str	r3, [sp]
 14915 0802 9748     		ldr	r0, .L833
 14916 0804 A049     		ldr	r1, .L833+40
 14917 0806 2022     		mov	r2, #32
 14918 0808 2123     		mov	r3, #33
 14919 080a FFF7FEFF 		bl	write_bitmap
 14920              	.LVL1276:
2753:screens.c     **** 				break;
 14921              		.loc 1 2753 0
 14922 080e 07E0     		b	.L782
 14923              	.L808:
2755:screens.c     **** 				write_bitmap( adm, ICON_SELECTION_POINTER, ICON_TWINE_ZERO_X - 10, ICON_TWINE_ZERO_Y + 4, OR );
 14924              		.loc 1 2755 0
 14925 0810 0223     		mov	r3, #2
 14926 0812 0093     		str	r3, [sp]
 14927 0814 9248     		ldr	r0, .L833
 14928 0816 9D49     		ldr	r1, .L833+44
 14929 0818 2022     		mov	r2, #32
 14930 081a 3A23     		mov	r3, #58
 14931 081c FFF7FEFF 		bl	write_bitmap
 14932              	.LVL1277:
 14933              	.L782:
2765:screens.c     **** 	if( page == 0 )
 14934              		.loc 1 2765 0
 14935 0820 924B     		ldr	r3, .L833+12
 14936 0822 1B78     		ldrb	r3, [r3]
 14937 0824 002B     		cmp	r3, #0
 14938 0826 76D1     		bne	.L809
2768:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterCorrection,
 14939              		.loc 1 2768 0
 14940 0828 994B     		ldr	r3, .L833+48
 14941 082a 9A46     		mov	sl, r3
 14942 082c 6823     		mov	r3, #104
 14943 082e 5246     		mov	r2, sl
 14944 0830 D056     		ldrsb	r0, [r2, r3]
 14945 0832 FFF7FEFF 		bl	__aeabi_i2f
 14946              	.LVL1278:
 14947 0836 8346     		mov	fp, r0
2769:screens.c     **** 				(float)PF_GW302_DiameterCorrection[PF_MIN], (float)PF_GW302_DiameterCorrection[PF_MAX],
 14948              		.loc 1 2769 0
 14949 0838 964C     		ldr	r4, .L833+52
 14950              	.LVL1279:
2768:screens.c     **** 		display_number( (float)pFac.pf.GW302_DiameterCorrection,
 14951              		.loc 1 2768 0
 14952 083a 0120     		mov	r0, #1
 14953 083c 2056     		ldrsb	r0, [r4, r0]
 14954 083e FFF7FEFF 		bl	__aeabi_i2f
 14955              	.LVL1280:
 14956 0842 8046     		mov	r8, r0
 14957 0844 0220     		mov	r0, #2
 14958 0846 2056     		ldrsb	r0, [r4, r0]
 14959 0848 FFF7FEFF 		bl	__aeabi_i2f
 14960              	.LVL1281:
 14961 084c 021C     		add	r2, r0, #0
 14962 084e FE25     		mov	r5, #254
 14963              	.LVL1282:
 14964 0850 AD05     		lsl	r5, r5, #22
 14965 0852 0024     		mov	r4, #0
 14966 0854 0094     		str	r4, [sp]
 14967 0856 7223     		mov	r3, #114
 14968 0858 9946     		mov	r9, r3
 14969 085a 0193     		str	r3, [sp, #4]
 14970 085c 0F23     		mov	r3, #15
 14971 085e 0293     		str	r3, [sp, #8]
 14972 0860 1227     		mov	r7, #18
 14973 0862 0397     		str	r7, [sp, #12]
 14974 0864 3023     		mov	r3, #48
 14975 0866 0493     		str	r3, [sp, #16]
 14976 0868 8B4E     		ldr	r6, .L833+56
 14977 086a 0596     		str	r6, [sp, #20]
 14978 086c 0694     		str	r4, [sp, #24]
 14979 086e 0794     		str	r4, [sp, #28]
 14980 0870 5846     		mov	r0, fp
 14981 0872 4146     		mov	r1, r8
 14982 0874 2B1C     		add	r3, r5, #0
 14983 0876 FFF7FEFF 		bl	display_number
 14984              	.LVL1283:
2774:screens.c     **** 		display_number( (float)pFac.pf.GW302_NetDelay,
 14985              		.loc 1 2774 0
 14986 087a 5246     		mov	r2, sl
 14987 087c 906F     		ldr	r0, [r2, #120]
 14988 087e 874B     		ldr	r3, .L833+60
 14989 0880 5968     		ldr	r1, [r3, #4]
 14990 0882 9A68     		ldr	r2, [r3, #8]
 14991 0884 0123     		mov	r3, #1
 14992 0886 0093     		str	r3, [sp]
 14993 0888 6323     		mov	r3, #99
 14994 088a 0193     		str	r3, [sp, #4]
 14995 088c 2623     		mov	r3, #38
 14996 088e 0293     		str	r3, [sp, #8]
 14997 0890 0397     		str	r7, [sp, #12]
 14998 0892 0494     		str	r4, [sp, #16]
 14999 0894 0596     		str	r6, [sp, #20]
 15000 0896 0694     		str	r4, [sp, #24]
 15001 0898 0794     		str	r4, [sp, #28]
 15002 089a 2B1C     		add	r3, r5, #0
 15003 089c FFF7FEFF 		bl	display_number
 15004              	.LVL1284:
2780:screens.c     **** 		display_number( (float)((unsigned int)pFac.pf.GW302_TotalNetMetres),
 15005              		.loc 1 2780 0
 15006 08a0 5346     		mov	r3, sl
 15007 08a2 186F     		ldr	r0, [r3, #112]
 15008 08a4 FFF7FEFF 		bl	__aeabi_f2uiz
 15009              	.LVL1285:
 15010 08a8 FFF7FEFF 		bl	__aeabi_ui2f
 15011              	.LVL1286:
 15012 08ac 7C4B     		ldr	r3, .L833+64
 15013 08ae 5968     		ldr	r1, [r3, #4]
 15014 08b0 9A68     		ldr	r2, [r3, #8]
 15015 08b2 0094     		str	r4, [sp]
 15016 08b4 7123     		mov	r3, #113
 15017 08b6 0193     		str	r3, [sp, #4]
 15018 08b8 3D23     		mov	r3, #61
 15019 08ba 0293     		str	r3, [sp, #8]
 15020 08bc 1823     		mov	r3, #24
 15021 08be 0393     		str	r3, [sp, #12]
 15022 08c0 1023     		mov	r3, #16
 15023 08c2 9846     		mov	r8, r3
 15024 08c4 0493     		str	r3, [sp, #16]
 15025 08c6 0596     		str	r6, [sp, #20]
 15026 08c8 0694     		str	r4, [sp, #24]
 15027 08ca 0794     		str	r4, [sp, #28]
 15028 08cc 2B1C     		add	r3, r5, #0
 15029 08ce FFF7FEFF 		bl	display_number
 15030              	.LVL1287:
2786:screens.c     **** 		display_number( (float)pFac.pf.GW302_PreWarningBeep,
 15031              		.loc 1 2786 0
 15032 08d2 7423     		mov	r3, #116
 15033 08d4 5246     		mov	r2, sl
 15034 08d6 D05C     		ldrb	r0, [r2, r3]
 15035 08d8 FFF7FEFF 		bl	__aeabi_ui2f
 15036              	.LVL1288:
 15037 08dc 8346     		mov	fp, r0
2787:screens.c     **** 				(float)PF_GW302_PreWarningBeep[PF_MIN], (float)PF_GW302_PreWarningBeep[PF_MAX],
 15038              		.loc 1 2787 0
 15039 08de 714B     		ldr	r3, .L833+68
 15040 08e0 9A46     		mov	sl, r3
2786:screens.c     **** 		display_number( (float)pFac.pf.GW302_PreWarningBeep,
 15041              		.loc 1 2786 0
 15042 08e2 5878     		ldrb	r0, [r3, #1]
 15043 08e4 FFF7FEFF 		bl	__aeabi_ui2f
 15044              	.LVL1289:
 15045 08e8 0990     		str	r0, [sp, #36]
 15046 08ea 5346     		mov	r3, sl
 15047 08ec 9878     		ldrb	r0, [r3, #2]
 15048 08ee FFF7FEFF 		bl	__aeabi_ui2f
 15049              	.LVL1290:
 15050 08f2 021C     		add	r2, r0, #0
 15051 08f4 0094     		str	r4, [sp]
 15052 08f6 4B46     		mov	r3, r9
 15053 08f8 0193     		str	r3, [sp, #4]
 15054 08fa 5523     		mov	r3, #85
 15055 08fc 0293     		str	r3, [sp, #8]
 15056 08fe 0397     		str	r7, [sp, #12]
 15057 0900 4346     		mov	r3, r8
 15058 0902 0493     		str	r3, [sp, #16]
 15059 0904 0596     		str	r6, [sp, #20]
 15060 0906 0694     		str	r4, [sp, #24]
 15061 0908 0794     		str	r4, [sp, #28]
 15062 090a 5846     		mov	r0, fp
 15063 090c 0999     		ldr	r1, [sp, #36]
 15064 090e 2B1C     		add	r3, r5, #0
 15065 0910 FFF7FEFF 		bl	display_number
 15066              	.LVL1291:
 15067 0914 49E0     		b	.L810
 15068              	.LVL1292:
 15069              	.L809:
2794:screens.c     **** 		draw_box( adm, ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_SETTING_Y, ICON_BALE_INDICATOR_
 15070              		.loc 1 2794 0
 15071 0916 1B23     		mov	r3, #27
 15072 0918 0093     		str	r3, [sp]
 15073 091a 4023     		mov	r3, #64
 15074 091c 0193     		str	r3, [sp, #4]
 15075 091e 5048     		ldr	r0, .L833
 15076 0920 7121     		mov	r1, #113
 15077 0922 0A22     		mov	r2, #10
 15078 0924 7C23     		mov	r3, #124
 15079 0926 FFF7FEFF 		bl	draw_box
 15080              	.LVL1293:
2795:screens.c     **** 		switch( pFac.pf.GW302_BaleShapeIndicator )
 15081              		.loc 1 2795 0
 15082 092a 6923     		mov	r3, #105
 15083 092c 584A     		ldr	r2, .L833+48
 15084 092e D35C     		ldrb	r3, [r2, r3]
 15085 0930 002B     		cmp	r3, #0
 15086 0932 02D0     		beq	.L812
 15087 0934 012B     		cmp	r3, #1
 15088 0936 12D1     		bne	.L828
 15089 0938 08E0     		b	.L813
 15090              	.L812:
2798:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR_OFF,  ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_
 15091              		.loc 1 2798 0
 15092 093a 0223     		mov	r3, #2
 15093 093c 0093     		str	r3, [sp]
 15094 093e 4848     		ldr	r0, .L833
 15095 0940 5949     		ldr	r1, .L833+72
 15096 0942 7122     		mov	r2, #113
 15097 0944 0A23     		mov	r3, #10
 15098 0946 FFF7FEFF 		bl	write_bitmap
 15099              	.LVL1294:
2799:screens.c     **** 			break;
 15100              		.loc 1 2799 0
 15101 094a 10E0     		b	.L814
 15102              	.L813:
2801:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR_ON,   ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_
 15103              		.loc 1 2801 0
 15104 094c 0223     		mov	r3, #2
 15105 094e 0093     		str	r3, [sp]
 15106 0950 4348     		ldr	r0, .L833
 15107 0952 5649     		ldr	r1, .L833+76
 15108 0954 7122     		mov	r2, #113
 15109 0956 0A23     		mov	r3, #10
 15110 0958 FFF7FEFF 		bl	write_bitmap
 15111              	.LVL1295:
2802:screens.c     **** 			break;
 15112              		.loc 1 2802 0
 15113 095c 07E0     		b	.L814
 15114              	.L828:
2804:screens.c     **** 			write_bitmap( adm, ICON_BALE_INDICATOR_BEEP, ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_
 15115              		.loc 1 2804 0
 15116 095e 0223     		mov	r3, #2
 15117 0960 0093     		str	r3, [sp]
 15118 0962 3F48     		ldr	r0, .L833
 15119 0964 5249     		ldr	r1, .L833+80
 15120 0966 7122     		mov	r2, #113
 15121 0968 0A23     		mov	r3, #10
 15122 096a FFF7FEFF 		bl	write_bitmap
 15123              	.LVL1296:
 15124              	.L814:
2809:screens.c     **** 		display_number( (float)pFac.pf.GW302_BaleShapeIndicatorZero,
 15125              		.loc 1 2809 0
 15126 096e 484B     		ldr	r3, .L833+48
 15127 0970 D86E     		ldr	r0, [r3, #108]
 15128 0972 504B     		ldr	r3, .L833+84
 15129 0974 5968     		ldr	r1, [r3, #4]
 15130 0976 9A68     		ldr	r2, [r3, #8]
 15131 0978 0123     		mov	r3, #1
 15132 097a 0093     		str	r3, [sp]
 15133 097c 6323     		mov	r3, #99
 15134 097e 0193     		str	r3, [sp, #4]
 15135 0980 2623     		mov	r3, #38
 15136 0982 0293     		str	r3, [sp, #8]
 15137 0984 1823     		mov	r3, #24
 15138 0986 0393     		str	r3, [sp, #12]
 15139 0988 0024     		mov	r4, #0
 15140              	.LVL1297:
 15141 098a 0494     		str	r4, [sp, #16]
 15142 098c 424B     		ldr	r3, .L833+56
 15143 098e 0593     		str	r3, [sp, #20]
 15144 0990 0694     		str	r4, [sp, #24]
 15145 0992 0794     		str	r4, [sp, #28]
 15146 0994 FE23     		mov	r3, #254
 15147 0996 9B05     		lsl	r3, r3, #22
 15148 0998 FFF7FEFF 		bl	display_number
 15149              	.LVL1298:
2813:screens.c     **** 		display_f1_text( "V", TSMAX, ICON_FILL_POT_ZERO_TEXT_X+(4*6)-2, ICON_FILL_POT_ZERO_TEXT_Y,  FIXED
 15150              		.loc 1 2813 0
 15151 099c 0094     		str	r4, [sp]
 15152 099e 4648     		ldr	r0, .L833+88
 15153 09a0 1A21     		mov	r1, #26
 15154 09a2 7922     		mov	r2, #121
 15155 09a4 2623     		mov	r3, #38
 15156 09a6 FFF7FEFF 		bl	display_f1_text
 15157              	.LVL1299:
 15158              	.L810:
2821:screens.c     **** 	if( half_second )
 15159              		.loc 1 2821 0
 15160 09aa 444B     		ldr	r3, .L833+92
 15161 09ac 1B78     		ldrb	r3, [r3]
 15162 09ae 002B     		cmp	r3, #0
 15163 09b0 4CD0     		beq	.L731
2824:screens.c     **** 		if( page == 0 )
 15164              		.loc 1 2824 0
 15165 09b2 2E4B     		ldr	r3, .L833+12
 15166 09b4 1B78     		ldrb	r3, [r3]
 15167 09b6 002B     		cmp	r3, #0
 15168 09b8 2ED1     		bne	.L816
2826:screens.c     **** 			switch( selection )
 15169              		.loc 1 2826 0
 15170 09ba 2D4B     		ldr	r3, .L833+16
 15171 09bc 1B78     		ldrb	r3, [r3]
 15172 09be 012B     		cmp	r3, #1
 15173 09c0 0FD0     		beq	.L818
 15174 09c2 002B     		cmp	r3, #0
 15175 09c4 04D0     		beq	.L817
 15176 09c6 022B     		cmp	r3, #2
 15177 09c8 14D0     		beq	.L819
 15178 09ca 032B     		cmp	r3, #3
 15179 09cc 3ED1     		bne	.L731
 15180 09ce 1AE0     		b	.L820
 15181              	.L817:
2829:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_DIAMETER_CORRECTION_TEXT_X -(3*6), ICON_DIAMETER_CORRECTION
 15182              		.loc 1 2829 0
 15183 09d0 0023     		mov	r3, #0
 15184 09d2 0093     		str	r3, [sp]
 15185 09d4 3A48     		ldr	r0, .L833+96
 15186 09d6 1A21     		mov	r1, #26
 15187 09d8 6022     		mov	r2, #96
 15188 09da 0F23     		mov	r3, #15
 15189 09dc FFF7FEFF 		bl	display_f1_text
 15190              	.LVL1300:
2830:screens.c     **** 				break;
 15191              		.loc 1 2830 0
 15192 09e0 34E0     		b	.L731
 15193              	.L818:
2832:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_NET_DELAY_TEXT_X, ICON_NET_DELAY_TEXT_Y, FIXED );
 15194              		.loc 1 2832 0
 15195 09e2 0023     		mov	r3, #0
 15196 09e4 0093     		str	r3, [sp]
 15197 09e6 3648     		ldr	r0, .L833+96
 15198 09e8 1A21     		mov	r1, #26
 15199 09ea 6322     		mov	r2, #99
 15200 09ec 2623     		mov	r3, #38
 15201 09ee FFF7FEFF 		bl	display_f1_text
 15202              	.LVL1301:
2833:screens.c     **** 				break;
 15203              		.loc 1 2833 0
 15204 09f2 2BE0     		b	.L731
 15205              	.L819:
2835:screens.c     **** 				display_f1_text( "     ", TSMAX, ICON_NET_METRES_TEXT_X -(5*6), ICON_NET_METRES_TEXT_Y, FIXED )
 15206              		.loc 1 2835 0
 15207 09f4 0023     		mov	r3, #0
 15208 09f6 0093     		str	r3, [sp]
 15209 09f8 3248     		ldr	r0, .L833+100
 15210 09fa 1A21     		mov	r1, #26
 15211 09fc 5322     		mov	r2, #83
 15212 09fe 3D23     		mov	r3, #61
 15213 0a00 FFF7FEFF 		bl	display_f1_text
 15214              	.LVL1302:
2836:screens.c     **** 				break;
 15215              		.loc 1 2836 0
 15216 0a04 22E0     		b	.L731
 15217              	.L820:
2838:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_PRE_WARNING_BEEP_TEXT_X -(3*6), ICON_PRE_WARNING_BEEP_TEXT_
 15218              		.loc 1 2838 0
 15219 0a06 0023     		mov	r3, #0
 15220 0a08 0093     		str	r3, [sp]
 15221 0a0a 2D48     		ldr	r0, .L833+96
 15222 0a0c 1A21     		mov	r1, #26
 15223 0a0e 6022     		mov	r2, #96
 15224 0a10 5523     		mov	r3, #85
 15225 0a12 FFF7FEFF 		bl	display_f1_text
 15226              	.LVL1303:
2839:screens.c     **** 				break;
 15227              		.loc 1 2839 0
 15228 0a16 19E0     		b	.L731
 15229              	.L816:
2844:screens.c     **** 			switch( selection )
 15230              		.loc 1 2844 0
 15231 0a18 154B     		ldr	r3, .L833+16
 15232 0a1a 1B78     		ldrb	r3, [r3]
 15233 0a1c 002B     		cmp	r3, #0
 15234 0a1e 02D0     		beq	.L821
 15235 0a20 012B     		cmp	r3, #1
 15236 0a22 13D1     		bne	.L731
 15237 0a24 0AE0     		b	.L822
 15238              	.L821:
2847:screens.c     **** 				draw_box( adm, ICON_BALE_INDICATOR_SETTING_X, ICON_BALE_INDICATOR_SETTING_Y, ICON_BALE_INDICATO
 15239              		.loc 1 2847 0
 15240 0a26 1B23     		mov	r3, #27
 15241 0a28 0093     		str	r3, [sp]
 15242 0a2a 4023     		mov	r3, #64
 15243 0a2c 0193     		str	r3, [sp, #4]
 15244 0a2e 0C48     		ldr	r0, .L833
 15245 0a30 7121     		mov	r1, #113
 15246 0a32 0A22     		mov	r2, #10
 15247 0a34 7C23     		mov	r3, #124
 15248 0a36 FFF7FEFF 		bl	draw_box
 15249              	.LVL1304:
2848:screens.c     **** 				break;
 15250              		.loc 1 2848 0
 15251 0a3a 07E0     		b	.L731
 15252              	.L822:
2850:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_FILL_POT_ZERO_TEXT_X, ICON_FILL_POT_ZERO_TEXT_Y, FIXED );
 15253              		.loc 1 2850 0
 15254 0a3c 0023     		mov	r3, #0
 15255 0a3e 0093     		str	r3, [sp]
 15256 0a40 1F48     		ldr	r0, .L833+96
 15257 0a42 1A21     		mov	r1, #26
 15258 0a44 6322     		mov	r2, #99
 15259 0a46 2623     		mov	r3, #38
 15260 0a48 FFF7FEFF 		bl	display_f1_text
 15261              	.LVL1305:
 15262              	.L731:
2861:screens.c     **** }
 15263              		.loc 1 2861 0
 15264 0a4c 0BB0     		add	sp, sp, #44
 15265              		@ sp needed for prologue
 15266 0a4e 3CBC     		pop	{r2, r3, r4, r5}
 15267 0a50 9046     		mov	r8, r2
 15268 0a52 9946     		mov	r9, r3
 15269 0a54 A246     		mov	sl, r4
 15270 0a56 AB46     		mov	fp, r5
 15271 0a58 F0BC     		pop	{r4, r5, r6, r7}
 15272 0a5a 01BC     		pop	{r0}
 15273 0a5c 0047     		bx	r0
 15274              	.L834:
 15275 0a5e C046     		.align	2
 15276              	.L833:
 15277 0a60 00000000 		.word	adm
 15278 0a64 00000000 		.word	ICON_BALE_INDICATOR
 15279 0a68 00000000 		.word	ICON_FILL_POT_ZERO
 15280 0a6c 00000000 		.word	.LANCHOR8
 15281 0a70 00000000 		.word	selection
 15282 0a74 00000000 		.word	ICON_DIAMETER_CORRECTION_SELECTED
 15283 0a78 00000000 		.word	ICON_NET_DELAY_SELECTED
 15284 0a7c 00000000 		.word	ICON_NET_METRES_SELECTED
 15285 0a80 00000000 		.word	ICON_PRE_WARNING_BEEP_SELECTED
 15286 0a84 00000000 		.word	ICON_BALE_INDICATOR_SELECTED
 15287 0a88 00000000 		.word	ICON_FILL_POT_ZERO_SELECTED
 15288 0a8c 00000000 		.word	ICON_SELECTION_POINTER
 15289 0a90 00000000 		.word	pFac
 15290 0a94 00000000 		.word	PF_GW302_DiameterCorrection
 15291 0a98 00000000 		.word	RDSfnt1
 15292 0a9c 00000000 		.word	PF_GW302_NetDelay
 15293 0aa0 00000000 		.word	PF_GW302_TotalNetMetres
 15294 0aa4 00000000 		.word	PF_GW302_PreWarningBeep
 15295 0aa8 00000000 		.word	ICON_BALE_INDICATOR_OFF
 15296 0aac 00000000 		.word	ICON_BALE_INDICATOR_ON
 15297 0ab0 00000000 		.word	ICON_BALE_INDICATOR_BEEP
 15298 0ab4 00000000 		.word	PF_GW302_BaleShapeIndicatorZero
 15299 0ab8 00000000 		.word	.LC64
 15300 0abc 00000000 		.word	half_second
 15301 0ac0 00040000 		.word	.LC607
 15302 0ac4 04040000 		.word	.LC609
 15303              		.cfi_endproc
 15304              	.LFE380:
 15306              		.section	.text.screen110,"ax",%progbits
 15307              		.align	2
 15308              		.global	screen110
 15309              		.code	16
 15310              		.thumb_func
 15312              	screen110:
 15313              	.LFB379:
1757:screens.c     **** {
 15314              		.loc 1 1757 0
 15315              		.cfi_startproc
 15316              	.LVL1306:
 15317 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15318              	.LCFI49:
 15319              		.cfi_def_cfa_offset 20
 15320              		.cfi_offset 4, -20
 15321              		.cfi_offset 5, -16
 15322              		.cfi_offset 6, -12
 15323              		.cfi_offset 7, -8
 15324              		.cfi_offset 14, -4
 15325 0002 4F46     		mov	r7, r9
 15326 0004 4646     		mov	r6, r8
 15327 0006 C0B4     		push	{r6, r7}
 15328              	.LCFI50:
 15329              		.cfi_def_cfa_offset 28
 15330              		.cfi_offset 8, -28
 15331              		.cfi_offset 9, -24
 15332 0008 A3B0     		sub	sp, sp, #140
 15333              	.LCFI51:
 15334              		.cfi_def_cfa_offset 168
 15335 000a 061C     		mov	r6, r0
1765:screens.c     **** 	if( startup != 1 )
 15336              		.loc 1 1765 0
 15337 000c D34B     		ldr	r3, .L927
 15338 000e 1B78     		ldrb	r3, [r3]
 15339 0010 012B     		cmp	r3, #1
 15340 0012 37D0     		beq	.L836
1767:screens.c     **** 		startup = 1;
 15341              		.loc 1 1767 0
 15342 0014 0122     		mov	r2, #1
 15343 0016 D14B     		ldr	r3, .L927
 15344 0018 1A70     		strb	r2, [r3]
1769:screens.c     **** 		draw_frame( adm );
 15345              		.loc 1 1769 0
 15346 001a D14C     		ldr	r4, .L927+4
 15347 001c 201C     		mov	r0, r4
 15348              	.LVL1307:
 15349 001e FFF7FEFF 		bl	draw_frame
 15350              	.LVL1308:
1775:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETER
 15351              		.loc 1 1775 0
 15352 0022 0225     		mov	r5, #2
 15353 0024 0095     		str	r5, [sp]
 15354 0026 201C     		mov	r0, r4
 15355 0028 CE49     		ldr	r1, .L927+8
 15356 002a 0A22     		mov	r2, #10
 15357 002c 0A23     		mov	r3, #10
 15358 002e FFF7FEFF 		bl	write_bitmap
 15359              	.LVL1309:
1776:screens.c     **** 		write_bitmap( adm, ICON_CORE_DENSITY,   ICON_CORE_DENSITY_X,  ICON_CORE_DENSITY_Y,  OR );
 15360              		.loc 1 1776 0
 15361 0032 0095     		str	r5, [sp]
 15362 0034 201C     		mov	r0, r4
 15363 0036 CC49     		ldr	r1, .L927+12
 15364 0038 0A22     		mov	r2, #10
 15365 003a 3B23     		mov	r3, #59
 15366 003c FFF7FEFF 		bl	write_bitmap
 15367              	.LVL1310:
1777:screens.c     **** 		write_bitmap( adm, ICON_BALE_DENSITY,   ICON_BALE_DENSITY_X,  ICON_BALE_DENSITY_Y,  OR );
 15368              		.loc 1 1777 0
 15369 0040 0095     		str	r5, [sp]
 15370 0042 201C     		mov	r0, r4
 15371 0044 C949     		ldr	r1, .L927+16
 15372 0046 5122     		mov	r2, #81
 15373 0048 3B23     		mov	r3, #59
 15374 004a FFF7FEFF 		bl	write_bitmap
 15375              	.LVL1311:
1778:screens.c     **** 		write_bitmap( adm, ICON_NET_LAYERS,     ICON_NET_LAYERS_X,    ICON_NET_LAYERS_Y,    OR );
 15376              		.loc 1 1778 0
 15377 004e 0095     		str	r5, [sp]
 15378 0050 201C     		mov	r0, r4
 15379 0052 C749     		ldr	r1, .L927+20
 15380 0054 0A22     		mov	r2, #10
 15381 0056 5623     		mov	r3, #86
 15382 0058 FFF7FEFF 		bl	write_bitmap
 15383              	.LVL1312:
1784:screens.c     **** 		write_bitmap( adm, TAB,     99, 107, OR );
 15384              		.loc 1 1784 0
 15385 005c 0095     		str	r5, [sp]
 15386 005e 201C     		mov	r0, r4
 15387 0060 C449     		ldr	r1, .L927+24
 15388 0062 6322     		mov	r2, #99
 15389 0064 6B23     		mov	r3, #107
 15390 0066 FFF7FEFF 		bl	write_bitmap
 15391              	.LVL1313:
1785:screens.c     **** 		write_bitmap( adm, TABESC, 130, 107, OR ); // ESC
 15392              		.loc 1 1785 0
 15393 006a 0095     		str	r5, [sp]
 15394 006c 201C     		mov	r0, r4
 15395 006e C249     		ldr	r1, .L927+28
 15396 0070 8222     		mov	r2, #130
 15397 0072 6B23     		mov	r3, #107
 15398 0074 FFF7FEFF 		bl	write_bitmap
 15399              	.LVL1314:
1788:screens.c     **** 		TryingToSetBaleDiaBelowCore = 0;
 15400              		.loc 1 1788 0
 15401 0078 0022     		mov	r2, #0
 15402 007a C04B     		ldr	r3, .L927+32
 15403 007c 1A70     		strb	r2, [r3]
 15404              	.LVL1315:
1790:screens.c     **** 		old_selection = 0xff;
 15405              		.loc 1 1790 0
 15406 007e FF22     		mov	r2, #255
 15407 0080 9046     		mov	r8, r2
 15408 0082 02E0     		b	.L837
 15409              	.LVL1316:
 15410              	.L836:
1794:screens.c     **** 		old_selection = selection;
 15411              		.loc 1 1794 0
 15412 0084 BE4B     		ldr	r3, .L927+36
 15413 0086 1B78     		ldrb	r3, [r3]
 15414 0088 9846     		mov	r8, r3
 15415              	.LVL1317:
 15416              	.L837:
1798:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 15417              		.loc 1 1798 0
 15418 008a 0020     		mov	r0, #0
 15419 008c FFF7FEFF 		bl	ClockDisplay
 15420              	.LVL1318:
1804:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 15421              		.loc 1 1804 0
 15422 0090 B30F     		lsr	r3, r6, #30
1806:screens.c     **** 	if( key_status )
 15423              		.loc 1 1806 0
 15424 0092 00D1     		bne	.LCB14934
 15425 0094 A9E1     		b	.L838	@long jump
 15426              	.LCB14934:
1808:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 15427              		.loc 1 1808 0
 15428 0096 B600     		lsl	r6, r6, #2
 15429              	.LVL1319:
 15430 0098 B608     		lsr	r6, r6, #2
 15431              	.LVL1320:
1810:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
 15432              		.loc 1 1810 0
 15433 009a 8023     		mov	r3, #128
 15434 009c 5B00     		lsl	r3, r3, #1
 15435 009e 9E42     		cmp	r6, r3
 15436 00a0 03D1     		bne	.L839
1812:screens.c     **** 			escape = 1;
 15437              		.loc 1 1812 0
 15438 00a2 0122     		mov	r2, #1
 15439 00a4 B74B     		ldr	r3, .L927+40
 15440 00a6 1A70     		strb	r2, [r3]
 15441 00a8 9FE1     		b	.L838
 15442              	.L839:
1814:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey -)
 15443              		.loc 1 1814 0
 15444 00aa 8023     		mov	r3, #128
 15445 00ac 9B00     		lsl	r3, r3, #2
 15446 00ae 9E42     		cmp	r6, r3
 15447 00b0 7FD1     		bne	.L840
1816:screens.c     **** 			TryingToSetBaleDiaBelowCore = 0;
 15448              		.loc 1 1816 0
 15449 00b2 0022     		mov	r2, #0
 15450 00b4 B14B     		ldr	r3, .L927+32
 15451 00b6 1A70     		strb	r2, [r3]
1818:screens.c     **** 			switch( selection )
 15452              		.loc 1 1818 0
 15453 00b8 B14B     		ldr	r3, .L927+36
 15454 00ba 1A78     		ldrb	r2, [r3]
 15455 00bc 052A     		cmp	r2, #5
 15456 00be 74D8     		bhi	.L841
 15457 00c0 9300     		lsl	r3, r2, #2
 15458 00c2 B14A     		ldr	r2, .L927+44
 15459 00c4 D358     		ldr	r3, [r2, r3]
 15460 00c6 9F46     		mov	pc, r3
 15461              		.section	.rodata.screen110,"a",%progbits
 15462              		.align	2
 15463              	.L848:
 15464 0000 C8000000 		.word	.L842
 15465 0004 F0000000 		.word	.L843
 15466 0008 12010000 		.word	.L844
 15467 000c 3E010000 		.word	.L845
 15468 0010 60010000 		.word	.L846
 15469 0014 82010000 		.word	.L847
 15470              		.section	.text.screen110
 15471              	.L842:
1821:screens.c     **** 				if( pFac.pf.GW302_BaleProfile > PF_GW302_BaleProfile[PF_MIN] )
 15472              		.loc 1 1821 0
 15473 00c8 3A23     		mov	r3, #58
 15474 00ca B04A     		ldr	r2, .L927+48
 15475 00cc D35C     		ldrb	r3, [r2, r3]
 15476 00ce B04A     		ldr	r2, .L927+52
 15477 00d0 5278     		ldrb	r2, [r2, #1]
 15478 00d2 9A42     		cmp	r2, r3
 15479 00d4 06D2     		bcs	.L849
1822:screens.c     **** 					pFac.pf.GW302_BaleProfile -= PF_GW302_BaleProfile[PF_STEP];
 15480              		.loc 1 1822 0
 15481 00d6 AE4A     		ldr	r2, .L927+52
 15482 00d8 1278     		ldrb	r2, [r2]
 15483 00da 9B1A     		sub	r3, r3, r2
 15484 00dc 3A22     		mov	r2, #58
 15485 00de AB49     		ldr	r1, .L927+48
 15486 00e0 8B54     		strb	r3, [r1, r2]
 15487 00e2 62E0     		b	.L841
 15488              	.L849:
1824:screens.c     **** 					pFac.pf.GW302_BaleProfile = PF_GW302_BaleProfile[PF_MAX];  // Cycling round presets A-E
 15489              		.loc 1 1824 0
 15490 00e4 AA4B     		ldr	r3, .L927+52
 15491 00e6 9978     		ldrb	r1, [r3, #2]
 15492 00e8 3A23     		mov	r3, #58
 15493 00ea A84A     		ldr	r2, .L927+48
 15494 00ec D154     		strb	r1, [r2, r3]
 15495 00ee 5CE0     		b	.L841
 15496              	.L843:
1828:screens.c     **** 				pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_CoreDiameter[PF_STEP];
 15497              		.loc 1 1828 0
 15498 00f0 A649     		ldr	r1, .L927+48
 15499 00f2 3A23     		mov	r3, #58
 15500 00f4 C85C     		ldrb	r0, [r1, r3]
 15501 00f6 0918     		add	r1, r1, r0
 15502 00f8 4031     		add	r1, r1, #64
 15503 00fa A64A     		ldr	r2, .L927+56
 15504 00fc 0C78     		ldrb	r4, [r1]
 15505 00fe 1378     		ldrb	r3, [r2]
 15506 0100 E31A     		sub	r3, r4, r3
 15507 0102 1B06     		lsl	r3, r3, #24
 15508 0104 1B0E     		lsr	r3, r3, #24
 15509 0106 0B70     		strb	r3, [r1]
1829:screens.c     **** 				if( pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] < PF_GW302_CoreDiameter[PF_MIN] )
 15510              		.loc 1 1829 0
 15511 0108 5278     		ldrb	r2, [r2, #1]
 15512 010a 9342     		cmp	r3, r2
 15513 010c 4DD2     		bcs	.L841
1830:screens.c     **** 					pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDiameter[PF_MIN];  // Lim
 15514              		.loc 1 1830 0
 15515 010e 0A70     		strb	r2, [r1]
 15516 0110 4BE0     		b	.L841
 15517              	.L844:
1834:screens.c     **** 				pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] -= PF_GW302_BaleDiameter[PF_STEP];
 15518              		.loc 1 1834 0
 15519 0112 9E4A     		ldr	r2, .L927+48
 15520 0114 3A23     		mov	r3, #58
 15521 0116 D05C     		ldrb	r0, [r2, r3]
 15522 0118 1218     		add	r2, r2, r0
 15523 011a 111C     		mov	r1, r2
 15524 011c 3831     		add	r1, r1, #56
 15525 011e CC78     		ldrb	r4, [r1, #3]
 15526 0120 9D4B     		ldr	r3, .L927+60
 15527 0122 1B78     		ldrb	r3, [r3]
 15528 0124 E31A     		sub	r3, r4, r3
 15529 0126 1B06     		lsl	r3, r3, #24
 15530 0128 1B0E     		lsr	r3, r3, #24
 15531 012a CB70     		strb	r3, [r1, #3]
1835:screens.c     **** 				if( pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] < pFac.pf.GW302_CoreDiameter[pFac.pf.
 15532              		.loc 1 1835 0
 15533 012c 4032     		add	r2, r2, #64
 15534 012e 1278     		ldrb	r2, [r2]
 15535 0130 9342     		cmp	r3, r2
 15536 0132 3AD2     		bcs	.L841
1837:screens.c     **** 					pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] = pFac.pf.GW302_CoreDiameter[pFac.pf.GW3
 15537              		.loc 1 1837 0
 15538 0134 CA70     		strb	r2, [r1, #3]
1838:screens.c     **** 					TryingToSetBaleDiaBelowCore = 1;
 15539              		.loc 1 1838 0
 15540 0136 0122     		mov	r2, #1
 15541 0138 904B     		ldr	r3, .L927+32
 15542 013a 1A70     		strb	r2, [r3]
 15543 013c 35E0     		b	.L841
 15544              	.L845:
1843:screens.c     **** 				pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] -= PF_GW302_CoreDensity[PF_STEP];
 15545              		.loc 1 1843 0
 15546 013e 9349     		ldr	r1, .L927+48
 15547 0140 3A23     		mov	r3, #58
 15548 0142 C85C     		ldrb	r0, [r1, r3]
 15549 0144 0918     		add	r1, r1, r0
 15550 0146 4831     		add	r1, r1, #72
 15551 0148 944A     		ldr	r2, .L927+64
 15552 014a 8C78     		ldrb	r4, [r1, #2]
 15553 014c 1378     		ldrb	r3, [r2]
 15554 014e E31A     		sub	r3, r4, r3
 15555 0150 1B06     		lsl	r3, r3, #24
 15556 0152 1B0E     		lsr	r3, r3, #24
 15557 0154 8B70     		strb	r3, [r1, #2]
1844:screens.c     **** 				if( pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] < PF_GW302_CoreDensity[PF_MIN] )
 15558              		.loc 1 1844 0
 15559 0156 5278     		ldrb	r2, [r2, #1]
 15560 0158 9342     		cmp	r3, r2
 15561 015a 26D2     		bcs	.L841
1845:screens.c     **** 					pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDensity[PF_MIN];   // Limi
 15562              		.loc 1 1845 0
 15563 015c 8A70     		strb	r2, [r1, #2]
 15564 015e 24E0     		b	.L841
 15565              	.L846:
1849:screens.c     **** 				pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] -= PF_GW302_BaleDensity[PF_STEP];
 15566              		.loc 1 1849 0
 15567 0160 8A49     		ldr	r1, .L927+48
 15568 0162 3A23     		mov	r3, #58
 15569 0164 C85C     		ldrb	r0, [r1, r3]
 15570 0166 0918     		add	r1, r1, r0
 15571 0168 4031     		add	r1, r1, #64
 15572 016a 8D4A     		ldr	r2, .L927+68
 15573 016c 4C79     		ldrb	r4, [r1, #5]
 15574 016e 1378     		ldrb	r3, [r2]
 15575 0170 E31A     		sub	r3, r4, r3
 15576 0172 1B06     		lsl	r3, r3, #24
 15577 0174 1B0E     		lsr	r3, r3, #24
 15578 0176 4B71     		strb	r3, [r1, #5]
1850:screens.c     **** 				if( pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] < PF_GW302_BaleDensity[PF_MIN] )
 15579              		.loc 1 1850 0
 15580 0178 5278     		ldrb	r2, [r2, #1]
 15581 017a 9342     		cmp	r3, r2
 15582 017c 15D2     		bcs	.L841
1851:screens.c     **** 					pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_BaleDensity[PF_MIN];   // Limi
 15583              		.loc 1 1851 0
 15584 017e 4A71     		strb	r2, [r1, #5]
 15585 0180 13E0     		b	.L841
 15586              	.L847:
1855:screens.c     **** 				pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] -= PF_GW302_NetLayers[PF_STEP];
 15587              		.loc 1 1855 0
 15588 0182 824C     		ldr	r4, .L927+48
 15589 0184 3A23     		mov	r3, #58
 15590 0186 E75C     		ldrb	r7, [r4, r3]
 15591 0188 3E1C     		mov	r6, r7
 15592              	.LVL1321:
 15593 018a 1436     		add	r6, r6, #20
 15594 018c B600     		lsl	r6, r6, #2
 15595 018e 854D     		ldr	r5, .L927+72
 15596 0190 3059     		ldr	r0, [r6, r4]
 15597 0192 2968     		ldr	r1, [r5]
 15598 0194 FFF7FEFF 		bl	__aeabi_fsub
 15599              	.LVL1322:
 15600 0198 3051     		str	r0, [r6, r4]
1856:screens.c     **** 				if( pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] < PF_GW302_NetLayers[PF_MIN] )
 15601              		.loc 1 1856 0
 15602 019a 6C68     		ldr	r4, [r5, #4]
 15603 019c 211C     		add	r1, r4, #0
 15604 019e FFF7FEFF 		bl	__aeabi_fcmplt
 15605              	.LVL1323:
 15606 01a2 0028     		cmp	r0, #0
 15607 01a4 01D0     		beq	.L841
1857:screens.c     **** 					pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] = PF_GW302_NetLayers[PF_MIN];  // Limiting 
 15608              		.loc 1 1857 0
 15609 01a6 794B     		ldr	r3, .L927+48
 15610 01a8 F450     		str	r4, [r6, r3]
 15611              	.L841:
1860:screens.c     **** 			SavecalDelayWithinMenus = 1;
 15612              		.loc 1 1860 0
 15613 01aa 0122     		mov	r2, #1
 15614 01ac 7E4B     		ldr	r3, .L927+76
 15615 01ae 1A70     		strb	r2, [r3]
 15616 01b0 1BE1     		b	.L838
 15617              	.LVL1324:
 15618              	.L840:
1862:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey +)
 15619              		.loc 1 1862 0
 15620 01b2 042E     		cmp	r6, #4
 15621 01b4 74D1     		bne	.L851
1864:screens.c     **** 			switch( selection )
 15622              		.loc 1 1864 0
 15623 01b6 724B     		ldr	r3, .L927+36
 15624 01b8 1A78     		ldrb	r2, [r3]
 15625 01ba 052A     		cmp	r2, #5
 15626 01bc 6CD8     		bhi	.L852
 15627 01be 9300     		lsl	r3, r2, #2
 15628 01c0 7A4A     		ldr	r2, .L927+80
 15629 01c2 D358     		ldr	r3, [r2, r3]
 15630 01c4 9F46     		mov	pc, r3
 15631              		.section	.rodata.screen110
 15632              		.align	2
 15633              	.L859:
 15634 0018 C6010000 		.word	.L853
 15635 001c E8010000 		.word	.L854
 15636 0020 0A020000 		.word	.L855
 15637 0024 2C020000 		.word	.L856
 15638 0028 4E020000 		.word	.L857
 15639 002c 70020000 		.word	.L858
 15640              		.section	.text.screen110
 15641              	.L853:
1867:screens.c     **** 				pFac.pf.GW302_BaleProfile += PF_GW302_BaleProfile[PF_STEP];
 15642              		.loc 1 1867 0
 15643 01c6 724A     		ldr	r2, .L927+52
 15644 01c8 7048     		ldr	r0, .L927+48
 15645 01ca 3A21     		mov	r1, #58
 15646 01cc 1478     		ldrb	r4, [r2]
 15647 01ce 435C     		ldrb	r3, [r0, r1]
 15648 01d0 E318     		add	r3, r4, r3
 15649 01d2 1B06     		lsl	r3, r3, #24
 15650 01d4 1B0E     		lsr	r3, r3, #24
 15651 01d6 4354     		strb	r3, [r0, r1]
1868:screens.c     **** 				if( pFac.pf.GW302_BaleProfile > PF_GW302_BaleProfile[PF_MAX] )
 15652              		.loc 1 1868 0
 15653 01d8 9278     		ldrb	r2, [r2, #2]
 15654 01da 9A42     		cmp	r2, r3
 15655 01dc 5CD2     		bcs	.L852
1869:screens.c     **** 					pFac.pf.GW302_BaleProfile = PF_GW302_BaleProfile[PF_MIN];  // Cycling round presets A-E
 15656              		.loc 1 1869 0
 15657 01de 6C4B     		ldr	r3, .L927+52
 15658 01e0 5978     		ldrb	r1, [r3, #1]
 15659 01e2 3A23     		mov	r3, #58
 15660 01e4 C154     		strb	r1, [r0, r3]
 15661 01e6 57E0     		b	.L852
 15662              	.L854:
1873:screens.c     **** 				pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] += PF_GW302_CoreDiameter[PF_STEP];
 15663              		.loc 1 1873 0
 15664 01e8 6849     		ldr	r1, .L927+48
 15665 01ea 3A23     		mov	r3, #58
 15666 01ec C85C     		ldrb	r0, [r1, r3]
 15667 01ee 0918     		add	r1, r1, r0
 15668 01f0 4031     		add	r1, r1, #64
 15669 01f2 684A     		ldr	r2, .L927+56
 15670 01f4 0C78     		ldrb	r4, [r1]
 15671 01f6 1378     		ldrb	r3, [r2]
 15672 01f8 E318     		add	r3, r4, r3
 15673 01fa 1B06     		lsl	r3, r3, #24
 15674 01fc 1B0E     		lsr	r3, r3, #24
 15675 01fe 0B70     		strb	r3, [r1]
1874:screens.c     **** 				if( pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_CoreDiameter[PF_MAX] )
 15676              		.loc 1 1874 0
 15677 0200 9278     		ldrb	r2, [r2, #2]
 15678 0202 9342     		cmp	r3, r2
 15679 0204 48D9     		bls	.L852
1875:screens.c     **** 					pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDiameter[PF_MAX];  // Lim
 15680              		.loc 1 1875 0
 15681 0206 0A70     		strb	r2, [r1]
 15682 0208 46E0     		b	.L852
 15683              	.L855:
1879:screens.c     **** 				pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] += PF_GW302_BaleDiameter[PF_STEP];
 15684              		.loc 1 1879 0
 15685 020a 6049     		ldr	r1, .L927+48
 15686 020c 3A23     		mov	r3, #58
 15687 020e C85C     		ldrb	r0, [r1, r3]
 15688 0210 0918     		add	r1, r1, r0
 15689 0212 3831     		add	r1, r1, #56
 15690 0214 604A     		ldr	r2, .L927+60
 15691 0216 CC78     		ldrb	r4, [r1, #3]
 15692 0218 1378     		ldrb	r3, [r2]
 15693 021a E318     		add	r3, r4, r3
 15694 021c 1B06     		lsl	r3, r3, #24
 15695 021e 1B0E     		lsr	r3, r3, #24
 15696 0220 CB70     		strb	r3, [r1, #3]
1880:screens.c     **** 				if( pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] > PF_GW302_BaleDiameter[PF_MAX] )
 15697              		.loc 1 1880 0
 15698 0222 9278     		ldrb	r2, [r2, #2]
 15699 0224 9342     		cmp	r3, r2
 15700 0226 37D9     		bls	.L852
1881:screens.c     **** 					pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] = PF_GW302_BaleDiameter[PF_MAX];  // Lim
 15701              		.loc 1 1881 0
 15702 0228 CA70     		strb	r2, [r1, #3]
 15703 022a 35E0     		b	.L852
 15704              	.L856:
1885:screens.c     **** 				pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] += PF_GW302_CoreDensity[PF_STEP];
 15705              		.loc 1 1885 0
 15706 022c 5749     		ldr	r1, .L927+48
 15707 022e 3A23     		mov	r3, #58
 15708 0230 C85C     		ldrb	r0, [r1, r3]
 15709 0232 0918     		add	r1, r1, r0
 15710 0234 4831     		add	r1, r1, #72
 15711 0236 594A     		ldr	r2, .L927+64
 15712 0238 8C78     		ldrb	r4, [r1, #2]
 15713 023a 1378     		ldrb	r3, [r2]
 15714 023c E318     		add	r3, r4, r3
 15715 023e 1B06     		lsl	r3, r3, #24
 15716 0240 1B0E     		lsr	r3, r3, #24
 15717 0242 8B70     		strb	r3, [r1, #2]
1886:screens.c     **** 				if( pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] > PF_GW302_CoreDensity[PF_MAX] )
 15718              		.loc 1 1886 0
 15719 0244 9278     		ldrb	r2, [r2, #2]
 15720 0246 9342     		cmp	r3, r2
 15721 0248 26D9     		bls	.L852
1887:screens.c     **** 					pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_CoreDensity[PF_MAX];   // Limi
 15722              		.loc 1 1887 0
 15723 024a 8A70     		strb	r2, [r1, #2]
 15724 024c 24E0     		b	.L852
 15725              	.L857:
1891:screens.c     **** 				pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] += PF_GW302_BaleDensity[PF_STEP];
 15726              		.loc 1 1891 0
 15727 024e 4F49     		ldr	r1, .L927+48
 15728 0250 3A23     		mov	r3, #58
 15729 0252 C85C     		ldrb	r0, [r1, r3]
 15730 0254 0918     		add	r1, r1, r0
 15731 0256 4031     		add	r1, r1, #64
 15732 0258 514A     		ldr	r2, .L927+68
 15733 025a 4C79     		ldrb	r4, [r1, #5]
 15734 025c 1378     		ldrb	r3, [r2]
 15735 025e E318     		add	r3, r4, r3
 15736 0260 1B06     		lsl	r3, r3, #24
 15737 0262 1B0E     		lsr	r3, r3, #24
 15738 0264 4B71     		strb	r3, [r1, #5]
1892:screens.c     **** 				if( pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] > PF_GW302_BaleDensity[PF_MAX] )
 15739              		.loc 1 1892 0
 15740 0266 9278     		ldrb	r2, [r2, #2]
 15741 0268 9342     		cmp	r3, r2
 15742 026a 15D9     		bls	.L852
1893:screens.c     **** 					pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] = PF_GW302_BaleDensity[PF_MAX];   // Limi
 15743              		.loc 1 1893 0
 15744 026c 4A71     		strb	r2, [r1, #5]
 15745 026e 13E0     		b	.L852
 15746              	.L858:
1897:screens.c     **** 				pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] += PF_GW302_NetLayers[PF_STEP];
 15747              		.loc 1 1897 0
 15748 0270 464C     		ldr	r4, .L927+48
 15749 0272 3A23     		mov	r3, #58
 15750 0274 E75C     		ldrb	r7, [r4, r3]
 15751 0276 3E1C     		mov	r6, r7
 15752              	.LVL1325:
 15753 0278 1436     		add	r6, r6, #20
 15754 027a B600     		lsl	r6, r6, #2
 15755 027c 494D     		ldr	r5, .L927+72
 15756 027e 3059     		ldr	r0, [r6, r4]
 15757 0280 2968     		ldr	r1, [r5]
 15758 0282 FFF7FEFF 		bl	__aeabi_fadd
 15759              	.LVL1326:
 15760 0286 3051     		str	r0, [r6, r4]
1898:screens.c     **** 				if( pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] > PF_GW302_NetLayers[PF_MAX] )
 15761              		.loc 1 1898 0
 15762 0288 AC68     		ldr	r4, [r5, #8]
 15763 028a 211C     		add	r1, r4, #0
 15764 028c FFF7FEFF 		bl	__aeabi_fcmpgt
 15765              	.LVL1327:
 15766 0290 0028     		cmp	r0, #0
 15767 0292 01D0     		beq	.L852
1899:screens.c     **** 					pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] = PF_GW302_NetLayers[PF_MAX];  // Limiting 
 15768              		.loc 1 1899 0
 15769 0294 3D4B     		ldr	r3, .L927+48
 15770 0296 F450     		str	r4, [r6, r3]
 15771              	.L852:
1902:screens.c     **** 			SavecalDelayWithinMenus = 1;
 15772              		.loc 1 1902 0
 15773 0298 0122     		mov	r2, #1
 15774 029a 434B     		ldr	r3, .L927+76
 15775 029c 1A70     		strb	r2, [r3]
 15776 029e A4E0     		b	.L838
 15777              	.LVL1328:
 15778              	.L851:
1904:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
 15779              		.loc 1 1904 0
 15780 02a0 202E     		cmp	r6, #32
 15781 02a2 14D1     		bne	.L861
1906:screens.c     **** 			switch( selection )
 15782              		.loc 1 1906 0
 15783 02a4 364B     		ldr	r3, .L927+36
 15784 02a6 1B78     		ldrb	r3, [r3]
 15785 02a8 042B     		cmp	r3, #4
 15786 02aa 08D0     		beq	.L863
 15787 02ac 052B     		cmp	r3, #5
 15788 02ae 0AD0     		beq	.L864
 15789 02b0 032B     		cmp	r3, #3
 15790 02b2 00D0     		beq	.LCB15278
 15791 02b4 99E0     		b	.L838	@long jump
 15792              	.LCB15278:
1915:screens.c     **** 				selection = 0; /* (1,1) Bale Profile */
 15793              		.loc 1 1915 0
 15794 02b6 0022     		mov	r2, #0
 15795 02b8 314B     		ldr	r3, .L927+36
 15796 02ba 1A70     		strb	r2, [r3]
1916:screens.c     **** 				break;
 15797              		.loc 1 1916 0
 15798 02bc 95E0     		b	.L838
 15799              	.L863:
1918:screens.c     **** 				selection = 1; /* (2,1) Core Diameter */
 15800              		.loc 1 1918 0
 15801 02be 0122     		mov	r2, #1
 15802 02c0 2F4B     		ldr	r3, .L927+36
 15803 02c2 1A70     		strb	r2, [r3]
1919:screens.c     **** 				break;
 15804              		.loc 1 1919 0
 15805 02c4 91E0     		b	.L838
 15806              	.L864:
1921:screens.c     **** 				selection = 3; /* (1,2) Core Density */
 15807              		.loc 1 1921 0
 15808 02c6 0322     		mov	r2, #3
 15809 02c8 2D4B     		ldr	r3, .L927+36
 15810 02ca 1A70     		strb	r2, [r3]
1922:screens.c     **** 				break;
 15811              		.loc 1 1922 0
 15812 02cc 8DE0     		b	.L838
 15813              	.L861:
1925:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
 15814              		.loc 1 1925 0
 15815 02ce 402E     		cmp	r6, #64
 15816 02d0 1CD1     		bne	.L865
1927:screens.c     **** 			switch( selection )
 15817              		.loc 1 1927 0
 15818 02d2 2B4B     		ldr	r3, .L927+36
 15819 02d4 1A78     		ldrb	r2, [r3]
 15820 02d6 042A     		cmp	r2, #4
 15821 02d8 00D9     		bls	.LCB15305
 15822 02da 86E0     		b	.L838	@long jump
 15823              	.LCB15305:
 15824 02dc 9300     		lsl	r3, r2, #2
 15825 02de 344A     		ldr	r2, .L927+84
 15826 02e0 D358     		ldr	r3, [r2, r3]
 15827 02e2 9F46     		mov	pc, r3
 15828              		.section	.rodata.screen110
 15829              		.align	2
 15830              	.L871:
 15831 0030 E4020000 		.word	.L866
 15832 0034 EC020000 		.word	.L867
 15833 0038 F4020000 		.word	.L868
 15834 003c FC020000 		.word	.L869
 15835 0040 04030000 		.word	.L870
 15836              		.section	.text.screen110
 15837              	.L866:
1930:screens.c     **** 				selection = 3; /* (1,2) Core Density */
 15838              		.loc 1 1930 0
 15839 02e4 0322     		mov	r2, #3
 15840 02e6 264B     		ldr	r3, .L927+36
 15841 02e8 1A70     		strb	r2, [r3]
1931:screens.c     **** 				break;
 15842              		.loc 1 1931 0
 15843 02ea 7EE0     		b	.L838
 15844              	.L867:
1933:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
 15845              		.loc 1 1933 0
 15846 02ec 0422     		mov	r2, #4
 15847 02ee 244B     		ldr	r3, .L927+36
 15848 02f0 1A70     		strb	r2, [r3]
1934:screens.c     **** 				break;
 15849              		.loc 1 1934 0
 15850 02f2 7AE0     		b	.L838
 15851              	.L868:
1936:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
 15852              		.loc 1 1936 0
 15853 02f4 0422     		mov	r2, #4
 15854 02f6 224B     		ldr	r3, .L927+36
 15855 02f8 1A70     		strb	r2, [r3]
1937:screens.c     **** 				break;
 15856              		.loc 1 1937 0
 15857 02fa 76E0     		b	.L838
 15858              	.L869:
1939:screens.c     **** 				selection = 5; /* (1,3) Net Layers */
 15859              		.loc 1 1939 0
 15860 02fc 0522     		mov	r2, #5
 15861 02fe 204B     		ldr	r3, .L927+36
 15862 0300 1A70     		strb	r2, [r3]
1940:screens.c     **** 				break;
 15863              		.loc 1 1940 0
 15864 0302 72E0     		b	.L838
 15865              	.L870:
1942:screens.c     **** 				selection = 5; /* (1,3) Net Layers */
 15866              		.loc 1 1942 0
 15867 0304 0522     		mov	r2, #5
 15868 0306 1E4B     		ldr	r3, .L927+36
 15869 0308 1A70     		strb	r2, [r3]
1943:screens.c     **** 				break;
 15870              		.loc 1 1943 0
 15871 030a 6EE0     		b	.L838
 15872              	.L865:
1948:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
 15873              		.loc 1 1948 0
 15874 030c 102E     		cmp	r6, #16
 15875 030e 1BD1     		bne	.L872
1950:screens.c     **** 			switch( selection )
 15876              		.loc 1 1950 0
 15877 0310 1B4B     		ldr	r3, .L927+36
 15878 0312 1A78     		ldrb	r2, [r3]
 15879 0314 052A     		cmp	r2, #5
 15880 0316 68D8     		bhi	.L838
 15881 0318 9300     		lsl	r3, r2, #2
 15882 031a 264A     		ldr	r2, .L927+88
 15883 031c D358     		ldr	r3, [r2, r3]
 15884 031e 9F46     		mov	pc, r3
 15885              		.section	.rodata.screen110
 15886              		.align	2
 15887              	.L878:
 15888 0044 EA030000 		.word	.L838
 15889 0048 20030000 		.word	.L873
 15890 004c 28030000 		.word	.L874
 15891 0050 30030000 		.word	.L875
 15892 0054 38030000 		.word	.L876
 15893 0058 40030000 		.word	.L877
 15894              		.section	.text.screen110
 15895              	.L873:
1955:screens.c     **** 				selection = 0; /* (1,1) Bale Profile */
 15896              		.loc 1 1955 0
 15897 0320 0022     		mov	r2, #0
 15898 0322 174B     		ldr	r3, .L927+36
 15899 0324 1A70     		strb	r2, [r3]
1956:screens.c     **** 				break;
 15900              		.loc 1 1956 0
 15901 0326 60E0     		b	.L838
 15902              	.L874:
1958:screens.c     **** 				selection = 1; /* (2,1) Core Diameter */
 15903              		.loc 1 1958 0
 15904 0328 0122     		mov	r2, #1
 15905 032a 154B     		ldr	r3, .L927+36
 15906 032c 1A70     		strb	r2, [r3]
1959:screens.c     **** 				break;
 15907              		.loc 1 1959 0
 15908 032e 5CE0     		b	.L838
 15909              	.L875:
1961:screens.c     **** 				selection = 2; /* (3,1) Bale Diameter */
 15910              		.loc 1 1961 0
 15911 0330 0222     		mov	r2, #2
 15912 0332 134B     		ldr	r3, .L927+36
 15913 0334 1A70     		strb	r2, [r3]
1962:screens.c     **** 				break;
 15914              		.loc 1 1962 0
 15915 0336 58E0     		b	.L838
 15916              	.L876:
1964:screens.c     **** 				selection = 3; /* (1,2) Core Density */
 15917              		.loc 1 1964 0
 15918 0338 0322     		mov	r2, #3
 15919 033a 114B     		ldr	r3, .L927+36
 15920 033c 1A70     		strb	r2, [r3]
1965:screens.c     **** 				break;
 15921              		.loc 1 1965 0
 15922 033e 54E0     		b	.L838
 15923              	.L877:
1967:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
 15924              		.loc 1 1967 0
 15925 0340 0422     		mov	r2, #4
 15926 0342 0F4B     		ldr	r3, .L927+36
 15927 0344 1A70     		strb	r2, [r3]
1968:screens.c     **** 				break;
 15928              		.loc 1 1968 0
 15929 0346 50E0     		b	.L838
 15930              	.L872:
1971:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
 15931              		.loc 1 1971 0
 15932 0348 802E     		cmp	r6, #128
 15933 034a 4BD1     		bne	.L879
1973:screens.c     **** 			switch( selection )
 15934              		.loc 1 1973 0
 15935 034c 0C4B     		ldr	r3, .L927+36
 15936 034e 1A78     		ldrb	r2, [r3]
 15937 0350 042A     		cmp	r2, #4
 15938 0352 4AD8     		bhi	.L838
 15939 0354 9300     		lsl	r3, r2, #2
 15940 0356 184A     		ldr	r2, .L927+92
 15941 0358 D358     		ldr	r3, [r2, r3]
 15942 035a 9F46     		mov	pc, r3
 15943              		.section	.rodata.screen110
 15944              		.align	2
 15945              	.L885:
 15946 005c BC030000 		.word	.L880
 15947 0060 C4030000 		.word	.L881
 15948 0064 CC030000 		.word	.L882
 15949 0068 D4030000 		.word	.L883
 15950 006c DC030000 		.word	.L884
 15951              		.section	.text.screen110
 15952              	.L928:
 15953              		.align	2
 15954              	.L927:
 15955 035c 00000000 		.word	startup
 15956 0360 00000000 		.word	adm
 15957 0364 00000000 		.word	ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER
 15958 0368 00000000 		.word	ICON_CORE_DENSITY
 15959 036c 00000000 		.word	ICON_BALE_DENSITY
 15960 0370 00000000 		.word	ICON_NET_LAYERS
 15961 0374 00000000 		.word	TAB
 15962 0378 00000000 		.word	TABESC
 15963 037c 00000000 		.word	.LANCHOR9
 15964 0380 00000000 		.word	selection
 15965 0384 00000000 		.word	escape
 15966 0388 00000000 		.word	.L848
 15967 038c 00000000 		.word	pFac
 15968 0390 00000000 		.word	PF_GW302_BaleProfile
 15969 0394 00000000 		.word	PF_GW302_CoreDiameter
 15970 0398 00000000 		.word	PF_GW302_BaleDiameter
 15971 039c 00000000 		.word	PF_GW302_CoreDensity
 15972 03a0 00000000 		.word	PF_GW302_BaleDensity
 15973 03a4 00000000 		.word	PF_GW302_NetLayers
 15974 03a8 00000000 		.word	SavecalDelayWithinMenus
 15975 03ac 18000000 		.word	.L859
 15976 03b0 30000000 		.word	.L871
 15977 03b4 44000000 		.word	.L878
 15978 03b8 5C000000 		.word	.L885
 15979              	.L880:
1976:screens.c     **** 				selection = 1; /* (2,1) Core Diameter */
 15980              		.loc 1 1976 0
 15981 03bc 0122     		mov	r2, #1
 15982 03be E24B     		ldr	r3, .L929
 15983 03c0 1A70     		strb	r2, [r3]
1977:screens.c     **** 				break;
 15984              		.loc 1 1977 0
 15985 03c2 12E0     		b	.L838
 15986              	.L881:
1979:screens.c     **** 				selection = 2; /* (3,1) Bale Diameter */
 15987              		.loc 1 1979 0
 15988 03c4 0222     		mov	r2, #2
 15989 03c6 E04B     		ldr	r3, .L929
 15990 03c8 1A70     		strb	r2, [r3]
1980:screens.c     **** 				break;
 15991              		.loc 1 1980 0
 15992 03ca 0EE0     		b	.L838
 15993              	.L882:
1982:screens.c     **** 				selection = 3; /* (1,2) Core Density */
 15994              		.loc 1 1982 0
 15995 03cc 0322     		mov	r2, #3
 15996 03ce DE4B     		ldr	r3, .L929
 15997 03d0 1A70     		strb	r2, [r3]
1983:screens.c     **** 				break;
 15998              		.loc 1 1983 0
 15999 03d2 0AE0     		b	.L838
 16000              	.L883:
1985:screens.c     **** 				selection = 4; /* (2,2) Bale Density */
 16001              		.loc 1 1985 0
 16002 03d4 0422     		mov	r2, #4
 16003 03d6 DC4B     		ldr	r3, .L929
 16004 03d8 1A70     		strb	r2, [r3]
1986:screens.c     **** 				break;
 16005              		.loc 1 1986 0
 16006 03da 06E0     		b	.L838
 16007              	.L884:
1988:screens.c     **** 				selection = 5; /* (1,3) Net Layers */
 16008              		.loc 1 1988 0
 16009 03dc 0522     		mov	r2, #5
 16010 03de DA4B     		ldr	r3, .L929
 16011 03e0 1A70     		strb	r2, [r3]
1989:screens.c     **** 				break;
 16012              		.loc 1 1989 0
 16013 03e2 02E0     		b	.L838
 16014              	.L879:
1996:screens.c     **** 			TryingToSetBaleDiaBelowCore = 0;
 16015              		.loc 1 1996 0
 16016 03e4 0022     		mov	r2, #0
 16017 03e6 D94B     		ldr	r3, .L929+4
 16018 03e8 1A70     		strb	r2, [r3]
 16019              	.LVL1329:
 16020              	.L838:
2005:screens.c     **** 	if( selection != old_selection )
 16021              		.loc 1 2005 0
 16022 03ea D74B     		ldr	r3, .L929
 16023 03ec 1B78     		ldrb	r3, [r3]
 16024 03ee 4345     		cmp	r3, r8
 16025 03f0 00D1     		bne	.LCB15494
 16026 03f2 A4E0     		b	.L886	@long jump
 16027              	.LCB15494:
2008:screens.c     **** 		switch( old_selection )
 16028              		.loc 1 2008 0
 16029 03f4 4346     		mov	r3, r8
 16030 03f6 052B     		cmp	r3, #5
 16031 03f8 64D8     		bhi	.L887
 16032              	.LVL1330:
 16033 03fa 9B00     		lsl	r3, r3, #2
 16034              	.LVL1331:
 16035 03fc D44A     		ldr	r2, .L929+8
 16036 03fe D358     		ldr	r3, [r2, r3]
 16037 0400 9F46     		mov	pc, r3
 16038              		.section	.rodata.screen110
 16039              		.align	2
 16040              	.L894:
 16041 0070 02040000 		.word	.L888
 16042 0074 2A040000 		.word	.L889
 16043 0078 52040000 		.word	.L890
 16044 007c 7A040000 		.word	.L891
 16045 0080 8C040000 		.word	.L892
 16046 0084 B4040000 		.word	.L893
 16047              		.section	.text.screen110
 16048              	.L888:
2011:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETE
 16049              		.loc 1 2011 0
 16050 0402 D44C     		ldr	r4, .L929+12
 16051 0404 0123     		mov	r3, #1
 16052 0406 0093     		str	r3, [sp]
 16053 0408 201C     		mov	r0, r4
 16054 040a D349     		ldr	r1, .L929+16
 16055 040c 0A22     		mov	r2, #10
 16056 040e 0A23     		mov	r3, #10
 16057 0410 FFF7FEFF 		bl	write_bitmap
 16058              	.LVL1332:
2012:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
 16059              		.loc 1 2012 0
 16060 0414 7F23     		mov	r3, #127
 16061 0416 0093     		str	r3, [sp]
 16062 0418 0223     		mov	r3, #2
 16063 041a 0193     		str	r3, [sp, #4]
 16064 041c 201C     		mov	r0, r4
 16065 041e 9F21     		mov	r1, #159
 16066 0420 0022     		mov	r2, #0
 16067 0422 9F23     		mov	r3, #159
 16068 0424 FFF7FEFF 		bl	draw_line
 16069              	.LVL1333:
2013:screens.c     **** 			break;
 16070              		.loc 1 2013 0
 16071 0428 4CE0     		b	.L887
 16072              	.L889:
2015:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETE
 16073              		.loc 1 2015 0
 16074 042a CA4C     		ldr	r4, .L929+12
 16075 042c 0123     		mov	r3, #1
 16076 042e 0093     		str	r3, [sp]
 16077 0430 201C     		mov	r0, r4
 16078 0432 C949     		ldr	r1, .L929+16
 16079 0434 0A22     		mov	r2, #10
 16080 0436 0A23     		mov	r3, #10
 16081 0438 FFF7FEFF 		bl	write_bitmap
 16082              	.LVL1334:
2016:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
 16083              		.loc 1 2016 0
 16084 043c 7F23     		mov	r3, #127
 16085 043e 0093     		str	r3, [sp]
 16086 0440 0223     		mov	r3, #2
 16087 0442 0193     		str	r3, [sp, #4]
 16088 0444 201C     		mov	r0, r4
 16089 0446 9F21     		mov	r1, #159
 16090 0448 0022     		mov	r2, #0
 16091 044a 9F23     		mov	r3, #159
 16092 044c FFF7FEFF 		bl	draw_line
 16093              	.LVL1335:
2017:screens.c     **** 			break;
 16094              		.loc 1 2017 0
 16095 0450 38E0     		b	.L887
 16096              	.L890:
2019:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER, ICON_BALE_PROFILE_CORE_DIAMETE
 16097              		.loc 1 2019 0
 16098 0452 C04C     		ldr	r4, .L929+12
 16099 0454 0123     		mov	r3, #1
 16100 0456 0093     		str	r3, [sp]
 16101 0458 201C     		mov	r0, r4
 16102 045a BF49     		ldr	r1, .L929+16
 16103 045c 0A22     		mov	r2, #10
 16104 045e 0A23     		mov	r3, #10
 16105 0460 FFF7FEFF 		bl	write_bitmap
 16106              	.LVL1336:
2020:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
 16107              		.loc 1 2020 0
 16108 0464 7F23     		mov	r3, #127
 16109 0466 0093     		str	r3, [sp]
 16110 0468 0223     		mov	r3, #2
 16111 046a 0193     		str	r3, [sp, #4]
 16112 046c 201C     		mov	r0, r4
 16113 046e 9F21     		mov	r1, #159
 16114 0470 0022     		mov	r2, #0
 16115 0472 9F23     		mov	r3, #159
 16116 0474 FFF7FEFF 		bl	draw_line
 16117              	.LVL1337:
2021:screens.c     **** 			break;
 16118              		.loc 1 2021 0
 16119 0478 24E0     		b	.L887
 16120              	.L891:
2023:screens.c     **** 			write_bitmap( adm, ICON_CORE_DENSITY, ICON_CORE_DENSITY_X, ICON_CORE_DENSITY_Y, AND );
 16121              		.loc 1 2023 0
 16122 047a 0123     		mov	r3, #1
 16123 047c 0093     		str	r3, [sp]
 16124 047e B548     		ldr	r0, .L929+12
 16125 0480 B649     		ldr	r1, .L929+20
 16126 0482 0A22     		mov	r2, #10
 16127 0484 3B23     		mov	r3, #59
 16128 0486 FFF7FEFF 		bl	write_bitmap
 16129              	.LVL1338:
2024:screens.c     **** 			break;
 16130              		.loc 1 2024 0
 16131 048a 1BE0     		b	.L887
 16132              	.L892:
2026:screens.c     **** 			write_bitmap( adm, ICON_BALE_DENSITY, ICON_BALE_DENSITY_X, ICON_BALE_DENSITY_Y, AND );
 16133              		.loc 1 2026 0
 16134 048c B14C     		ldr	r4, .L929+12
 16135 048e 0123     		mov	r3, #1
 16136 0490 0093     		str	r3, [sp]
 16137 0492 201C     		mov	r0, r4
 16138 0494 B249     		ldr	r1, .L929+24
 16139 0496 5122     		mov	r2, #81
 16140 0498 3B23     		mov	r3, #59
 16141 049a FFF7FEFF 		bl	write_bitmap
 16142              	.LVL1339:
2027:screens.c     **** 			draw_line( adm, 159, 0, 159, 127, OR ); /* restoring right-hand frame border */
 16143              		.loc 1 2027 0
 16144 049e 7F23     		mov	r3, #127
 16145 04a0 0093     		str	r3, [sp]
 16146 04a2 0223     		mov	r3, #2
 16147 04a4 0193     		str	r3, [sp, #4]
 16148 04a6 201C     		mov	r0, r4
 16149 04a8 9F21     		mov	r1, #159
 16150 04aa 0022     		mov	r2, #0
 16151 04ac 9F23     		mov	r3, #159
 16152 04ae FFF7FEFF 		bl	draw_line
 16153              	.LVL1340:
2028:screens.c     **** 			break;
 16154              		.loc 1 2028 0
 16155 04b2 07E0     		b	.L887
 16156              	.L893:
2030:screens.c     **** 			write_bitmap( adm, ICON_NET_LAYERS, ICON_NET_LAYERS_X, ICON_NET_LAYERS_Y, AND );
 16157              		.loc 1 2030 0
 16158 04b4 0123     		mov	r3, #1
 16159 04b6 0093     		str	r3, [sp]
 16160 04b8 A648     		ldr	r0, .L929+12
 16161 04ba AA49     		ldr	r1, .L929+28
 16162 04bc 0A22     		mov	r2, #10
 16163 04be 5623     		mov	r3, #86
 16164 04c0 FFF7FEFF 		bl	write_bitmap
 16165              	.LVL1341:
 16166              	.L887:
2035:screens.c     **** 		switch( selection )
 16167              		.loc 1 2035 0
 16168 04c4 A04B     		ldr	r3, .L929
 16169 04c6 1A78     		ldrb	r2, [r3]
 16170 04c8 052A     		cmp	r2, #5
 16171 04ca 38D8     		bhi	.L886
 16172 04cc 9300     		lsl	r3, r2, #2
 16173 04ce A64A     		ldr	r2, .L929+32
 16174 04d0 D358     		ldr	r3, [r2, r3]
 16175 04d2 9F46     		mov	pc, r3
 16176              		.section	.rodata.screen110
 16177              		.align	2
 16178              	.L901:
 16179 0088 D4040000 		.word	.L895
 16180 008c E6040000 		.word	.L896
 16181 0090 F8040000 		.word	.L897
 16182 0094 0A050000 		.word	.L898
 16183 0098 1C050000 		.word	.L899
 16184 009c 2E050000 		.word	.L900
 16185              		.section	.text.screen110
 16186              	.L895:
2038:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_SELECTED,  ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X,
 16187              		.loc 1 2038 0
 16188 04d4 0223     		mov	r3, #2
 16189 04d6 0093     		str	r3, [sp]
 16190 04d8 9E48     		ldr	r0, .L929+12
 16191 04da A449     		ldr	r1, .L929+36
 16192 04dc 0A22     		mov	r2, #10
 16193 04de 0A23     		mov	r3, #10
 16194 04e0 FFF7FEFF 		bl	write_bitmap
 16195              	.LVL1342:
2039:screens.c     **** 			break;
 16196              		.loc 1 2039 0
 16197 04e4 2BE0     		b	.L886
 16198              	.L896:
2041:screens.c     **** 			write_bitmap( adm, ICON_CORE_DIAMETER_SELECTED, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X,
 16199              		.loc 1 2041 0
 16200 04e6 0223     		mov	r3, #2
 16201 04e8 0093     		str	r3, [sp]
 16202 04ea 9A48     		ldr	r0, .L929+12
 16203 04ec A049     		ldr	r1, .L929+40
 16204 04ee 0A22     		mov	r2, #10
 16205 04f0 0A23     		mov	r3, #10
 16206 04f2 FFF7FEFF 		bl	write_bitmap
 16207              	.LVL1343:
2042:screens.c     **** 			break;
 16208              		.loc 1 2042 0
 16209 04f6 22E0     		b	.L886
 16210              	.L897:
2044:screens.c     **** 			write_bitmap( adm, ICON_BALE_DIAMETER_SELECTED, ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER_X,
 16211              		.loc 1 2044 0
 16212 04f8 0223     		mov	r3, #2
 16213 04fa 0093     		str	r3, [sp]
 16214 04fc 9548     		ldr	r0, .L929+12
 16215 04fe 9D49     		ldr	r1, .L929+44
 16216 0500 0A22     		mov	r2, #10
 16217 0502 0A23     		mov	r3, #10
 16218 0504 FFF7FEFF 		bl	write_bitmap
 16219              	.LVL1344:
2045:screens.c     **** 			break;
 16220              		.loc 1 2045 0
 16221 0508 19E0     		b	.L886
 16222              	.L898:
2047:screens.c     **** 			write_bitmap( adm, ICON_CORE_DENSITY_SELECTED, ICON_CORE_DENSITY_X, ICON_CORE_DENSITY_Y, OR );
 16223              		.loc 1 2047 0
 16224 050a 0223     		mov	r3, #2
 16225 050c 0093     		str	r3, [sp]
 16226 050e 9148     		ldr	r0, .L929+12
 16227 0510 9949     		ldr	r1, .L929+48
 16228 0512 0A22     		mov	r2, #10
 16229 0514 3B23     		mov	r3, #59
 16230 0516 FFF7FEFF 		bl	write_bitmap
 16231              	.LVL1345:
2048:screens.c     **** 			break;
 16232              		.loc 1 2048 0
 16233 051a 10E0     		b	.L886
 16234              	.L899:
2050:screens.c     **** 			write_bitmap( adm, ICON_BALE_DENSITY_SELECTED, ICON_BALE_DENSITY_X, ICON_BALE_DENSITY_Y, OR );
 16235              		.loc 1 2050 0
 16236 051c 0223     		mov	r3, #2
 16237 051e 0093     		str	r3, [sp]
 16238 0520 8C48     		ldr	r0, .L929+12
 16239 0522 9649     		ldr	r1, .L929+52
 16240 0524 5122     		mov	r2, #81
 16241 0526 3B23     		mov	r3, #59
 16242 0528 FFF7FEFF 		bl	write_bitmap
 16243              	.LVL1346:
2051:screens.c     **** 			break;
 16244              		.loc 1 2051 0
 16245 052c 07E0     		b	.L886
 16246              	.L900:
2053:screens.c     **** 			write_bitmap( adm, ICON_NET_LAYERS_SELECTED, ICON_NET_LAYERS_X, ICON_NET_LAYERS_Y, OR );
 16247              		.loc 1 2053 0
 16248 052e 0223     		mov	r3, #2
 16249 0530 0093     		str	r3, [sp]
 16250 0532 8848     		ldr	r0, .L929+12
 16251 0534 9249     		ldr	r1, .L929+56
 16252 0536 0A22     		mov	r2, #10
 16253 0538 5623     		mov	r3, #86
 16254 053a FFF7FEFF 		bl	write_bitmap
 16255              	.LVL1347:
 16256              	.L886:
2063:screens.c     **** 	draw_box( adm, ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y, ICON_BALE_PROFILE_SETTING
 16257              		.loc 1 2063 0
 16258 053e 2623     		mov	r3, #38
 16259 0540 0093     		str	r3, [sp]
 16260 0542 4023     		mov	r3, #64
 16261 0544 0193     		str	r3, [sp, #4]
 16262 0546 8348     		ldr	r0, .L929+12
 16263 0548 2421     		mov	r1, #36
 16264 054a 1622     		mov	r2, #22
 16265 054c 3023     		mov	r3, #48
 16266 054e FFF7FEFF 		bl	draw_box
 16267              	.LVL1348:
2064:screens.c     **** 	switch( pFac.pf.GW302_BaleProfile )
 16268              		.loc 1 2064 0
 16269 0552 3A23     		mov	r3, #58
 16270 0554 8B4A     		ldr	r2, .L929+60
 16271 0556 D35C     		ldrb	r3, [r2, r3]
 16272 0558 012B     		cmp	r3, #1
 16273 055a 0FD0     		beq	.L904
 16274 055c 002B     		cmp	r3, #0
 16275 055e 04D0     		beq	.L903
 16276 0560 022B     		cmp	r3, #2
 16277 0562 14D0     		beq	.L905
 16278 0564 032B     		cmp	r3, #3
 16279 0566 24D1     		bne	.L926
 16280 0568 1AE0     		b	.L906
 16281              	.L903:
2067:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_A,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
 16282              		.loc 1 2067 0
 16283 056a 0223     		mov	r3, #2
 16284 056c 0093     		str	r3, [sp]
 16285 056e 7948     		ldr	r0, .L929+12
 16286 0570 8549     		ldr	r1, .L929+64
 16287 0572 2422     		mov	r2, #36
 16288 0574 1623     		mov	r3, #22
 16289 0576 FFF7FEFF 		bl	write_bitmap
 16290              	.LVL1349:
2068:screens.c     **** 		break;
 16291              		.loc 1 2068 0
 16292 057a 22E0     		b	.L907
 16293              	.L904:
2070:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_B,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
 16294              		.loc 1 2070 0
 16295 057c 0223     		mov	r3, #2
 16296 057e 0093     		str	r3, [sp]
 16297 0580 7448     		ldr	r0, .L929+12
 16298 0582 8249     		ldr	r1, .L929+68
 16299 0584 2422     		mov	r2, #36
 16300 0586 1623     		mov	r3, #22
 16301 0588 FFF7FEFF 		bl	write_bitmap
 16302              	.LVL1350:
2071:screens.c     **** 		break;
 16303              		.loc 1 2071 0
 16304 058c 19E0     		b	.L907
 16305              	.L905:
2073:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_C,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
 16306              		.loc 1 2073 0
 16307 058e 0223     		mov	r3, #2
 16308 0590 0093     		str	r3, [sp]
 16309 0592 7048     		ldr	r0, .L929+12
 16310 0594 7E49     		ldr	r1, .L929+72
 16311 0596 2422     		mov	r2, #36
 16312 0598 1623     		mov	r3, #22
 16313 059a FFF7FEFF 		bl	write_bitmap
 16314              	.LVL1351:
2074:screens.c     **** 		break;
 16315              		.loc 1 2074 0
 16316 059e 10E0     		b	.L907
 16317              	.L906:
2076:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_D,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
 16318              		.loc 1 2076 0
 16319 05a0 0223     		mov	r3, #2
 16320 05a2 0093     		str	r3, [sp]
 16321 05a4 6B48     		ldr	r0, .L929+12
 16322 05a6 7B49     		ldr	r1, .L929+76
 16323 05a8 2422     		mov	r2, #36
 16324 05aa 1623     		mov	r3, #22
 16325 05ac FFF7FEFF 		bl	write_bitmap
 16326              	.LVL1352:
2077:screens.c     **** 		break;
 16327              		.loc 1 2077 0
 16328 05b0 07E0     		b	.L907
 16329              	.L926:
2079:screens.c     **** 		write_bitmap( adm, ICON_BALE_PROFILE_E,  ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y
 16330              		.loc 1 2079 0
 16331 05b2 0223     		mov	r3, #2
 16332 05b4 0093     		str	r3, [sp]
 16333 05b6 6748     		ldr	r0, .L929+12
 16334 05b8 7749     		ldr	r1, .L929+80
 16335 05ba 2422     		mov	r2, #36
 16336 05bc 1623     		mov	r3, #22
 16337 05be FFF7FEFF 		bl	write_bitmap
 16338              	.LVL1353:
 16339              	.L907:
2083:screens.c     **** 	sprintf( tstring, "%3u", pFac.pf.GW302_CoreDiameter[pFac.pf.GW302_BaleProfile] );
 16340              		.loc 1 2083 0
 16341 05c2 764F     		ldr	r7, .L929+84
 16342 05c4 6F4C     		ldr	r4, .L929+60
 16343 05c6 3A26     		mov	r6, #58
 16344 05c8 A35D     		ldrb	r3, [r4, r6]
 16345 05ca E318     		add	r3, r4, r3
 16346 05cc 4033     		add	r3, r3, #64
 16347 05ce 1A78     		ldrb	r2, [r3]
 16348 05d0 02A8     		add	r0, sp, #8
 16349 05d2 391C     		mov	r1, r7
 16350 05d4 FFF7FEFF 		bl	sprintf
 16351              	.LVL1354:
2084:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_CORE_DIAMETER_TEXT_X, ICON_CORE_DIAMETER_TEXT_Y, FIXED );
 16352              		.loc 1 2084 0
 16353 05d8 0025     		mov	r5, #0
 16354 05da 0095     		str	r5, [sp]
 16355 05dc 02A8     		add	r0, sp, #8
 16356 05de 1A21     		mov	r1, #26
 16357 05e0 4D22     		mov	r2, #77
 16358 05e2 1A23     		mov	r3, #26
 16359 05e4 FFF7FEFF 		bl	display_f1_text
 16360              	.LVL1355:
2086:screens.c     **** 	sprintf( tstring, "%3u", pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] );
 16361              		.loc 1 2086 0
 16362 05e8 A35D     		ldrb	r3, [r4, r6]
 16363 05ea E318     		add	r3, r4, r3
 16364 05ec 3833     		add	r3, r3, #56
 16365 05ee DA78     		ldrb	r2, [r3, #3]
 16366 05f0 02A8     		add	r0, sp, #8
 16367 05f2 391C     		mov	r1, r7
 16368 05f4 FFF7FEFF 		bl	sprintf
 16369              	.LVL1356:
2087:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_BALE_DIAMETER_TEXT_X, ICON_BALE_DIAMETER_TEXT_Y, FIXED );
 16370              		.loc 1 2087 0
 16371 05f8 0095     		str	r5, [sp]
 16372 05fa 02A8     		add	r0, sp, #8
 16373 05fc 1A21     		mov	r1, #26
 16374 05fe 7322     		mov	r2, #115
 16375 0600 1A23     		mov	r3, #26
 16376 0602 FFF7FEFF 		bl	display_f1_text
 16377              	.LVL1357:
2089:screens.c     **** 	sprintf( tstring, "%3u", Bar[pFac.pf.GW302_CoreDensity[pFac.pf.GW302_BaleProfile] - 1] );
 16378              		.loc 1 2089 0
 16379 0606 664A     		ldr	r2, .L929+88
 16380 0608 9146     		mov	r9, r2
 16381 060a A35D     		ldrb	r3, [r4, r6]
 16382 060c E318     		add	r3, r4, r3
 16383 060e 4833     		add	r3, r3, #72
 16384 0610 9B78     		ldrb	r3, [r3, #2]
 16385 0612 4B44     		add	r3, r3, r9
 16386 0614 013B     		sub	r3, r3, #1
 16387 0616 1A78     		ldrb	r2, [r3]
 16388 0618 02A8     		add	r0, sp, #8
 16389 061a 391C     		mov	r1, r7
 16390 061c FFF7FEFF 		bl	sprintf
 16391              	.LVL1358:
2090:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_CORE_DENSITY_TEXT_X, ICON_CORE_DENSITY_TEXT_Y, FIXED );
 16392              		.loc 1 2090 0
 16393 0620 0095     		str	r5, [sp]
 16394 0622 02A8     		add	r0, sp, #8
 16395 0624 1A21     		mov	r1, #26
 16396 0626 3222     		mov	r2, #50
 16397 0628 3D23     		mov	r3, #61
 16398 062a FFF7FEFF 		bl	display_f1_text
 16399              	.LVL1359:
2092:screens.c     **** 	sprintf( tstring, "%3u", Bar[pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] - 1] );
 16400              		.loc 1 2092 0
 16401 062e A35D     		ldrb	r3, [r4, r6]
 16402 0630 E318     		add	r3, r4, r3
 16403 0632 4033     		add	r3, r3, #64
 16404 0634 5B79     		ldrb	r3, [r3, #5]
 16405 0636 4B44     		add	r3, r3, r9
 16406 0638 013B     		sub	r3, r3, #1
 16407 063a 1A78     		ldrb	r2, [r3]
 16408 063c 02A8     		add	r0, sp, #8
 16409 063e 391C     		mov	r1, r7
 16410 0640 FFF7FEFF 		bl	sprintf
 16411              	.LVL1360:
2093:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_BALE_DENSITY_TEXT_X, ICON_BALE_DENSITY_TEXT_Y, FIXED );
 16412              		.loc 1 2093 0
 16413 0644 0095     		str	r5, [sp]
 16414 0646 02A8     		add	r0, sp, #8
 16415 0648 1A21     		mov	r1, #26
 16416 064a 8222     		mov	r2, #130
 16417 064c 3D23     		mov	r3, #61
 16418 064e FFF7FEFF 		bl	display_f1_text
 16419              	.LVL1361:
2095:screens.c     **** 	sprintf( tstring, "%2.1f", pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile] );
 16420              		.loc 1 2095 0
 16421 0652 A35D     		ldrb	r3, [r4, r6]
 16422 0654 1433     		add	r3, r3, #20
 16423 0656 9B00     		lsl	r3, r3, #2
 16424 0658 1859     		ldr	r0, [r3, r4]
 16425 065a FFF7FEFF 		bl	__aeabi_f2d
 16426              	.LVL1362:
 16427 065e 021C     		mov	r2, r0
 16428 0660 0B1C     		mov	r3, r1
 16429 0662 02A8     		add	r0, sp, #8
 16430 0664 4F49     		ldr	r1, .L929+92
 16431 0666 FFF7FEFF 		bl	sprintf
 16432              	.LVL1363:
2096:screens.c     **** 	display_f1_text( tstring, TSMAX, ICON_NET_LAYERS_TEXT_X, ICON_NET_LAYERS_TEXT_Y, FIXED );
 16433              		.loc 1 2096 0
 16434 066a 0095     		str	r5, [sp]
 16435 066c 02A8     		add	r0, sp, #8
 16436 066e 1A21     		mov	r1, #26
 16437 0670 3322     		mov	r2, #51
 16438 0672 5823     		mov	r3, #88
 16439 0674 FFF7FEFF 		bl	display_f1_text
 16440              	.LVL1364:
2102:screens.c     **** 	if( half_second )
 16441              		.loc 1 2102 0
 16442 0678 4B4B     		ldr	r3, .L929+96
 16443 067a 1B78     		ldrb	r3, [r3]
 16444 067c 002B     		cmp	r3, #0
 16445 067e 4AD0     		beq	.L908
2105:screens.c     **** 		switch( selection )
 16446              		.loc 1 2105 0
 16447 0680 314B     		ldr	r3, .L929
 16448 0682 1A78     		ldrb	r2, [r3]
 16449 0684 052A     		cmp	r2, #5
 16450 0686 46D8     		bhi	.L908
 16451 0688 9300     		lsl	r3, r2, #2
 16452 068a 484A     		ldr	r2, .L929+100
 16453 068c D358     		ldr	r3, [r2, r3]
 16454 068e 9F46     		mov	pc, r3
 16455              		.section	.rodata.screen110
 16456              		.align	2
 16457              	.L915:
 16458 00a0 90060000 		.word	.L909
 16459 00a4 A6060000 		.word	.L910
 16460 00a8 B8060000 		.word	.L911
 16461 00ac E2060000 		.word	.L912
 16462 00b0 F4060000 		.word	.L913
 16463 00b4 06070000 		.word	.L914
 16464              		.section	.text.screen110
 16465              	.L909:
2108:screens.c     **** 			draw_box( adm, ICON_BALE_PROFILE_SETTING_X, ICON_BALE_PROFILE_SETTING_Y, ICON_BALE_PROFILE_SETTI
 16466              		.loc 1 2108 0
 16467 0690 2623     		mov	r3, #38
 16468 0692 0093     		str	r3, [sp]
 16469 0694 4023     		mov	r3, #64
 16470 0696 0193     		str	r3, [sp, #4]
 16471 0698 2E48     		ldr	r0, .L929+12
 16472 069a 2421     		mov	r1, #36
 16473 069c 1622     		mov	r2, #22
 16474 069e 3023     		mov	r3, #48
 16475 06a0 FFF7FEFF 		bl	draw_box
 16476              	.LVL1365:
2109:screens.c     **** 			break;
 16477              		.loc 1 2109 0
 16478 06a4 37E0     		b	.L908
 16479              	.L910:
2111:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_CORE_DIAMETER_TEXT_X, ICON_CORE_DIAMETER_TEXT_Y, FIXED );
 16480              		.loc 1 2111 0
 16481 06a6 0023     		mov	r3, #0
 16482 06a8 0093     		str	r3, [sp]
 16483 06aa 4148     		ldr	r0, .L929+104
 16484 06ac 1A21     		mov	r1, #26
 16485 06ae 4D22     		mov	r2, #77
 16486 06b0 1A23     		mov	r3, #26
 16487 06b2 FFF7FEFF 		bl	display_f1_text
 16488              	.LVL1366:
2112:screens.c     **** 			break;
 16489              		.loc 1 2112 0
 16490 06b6 2EE0     		b	.L908
 16491              	.L911:
2114:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_BALE_DIAMETER_TEXT_X, ICON_BALE_DIAMETER_TEXT_Y, FIXED );
 16492              		.loc 1 2114 0
 16493 06b8 0023     		mov	r3, #0
 16494 06ba 0093     		str	r3, [sp]
 16495 06bc 3C48     		ldr	r0, .L929+104
 16496 06be 1A21     		mov	r1, #26
 16497 06c0 7322     		mov	r2, #115
 16498 06c2 1A23     		mov	r3, #26
 16499 06c4 FFF7FEFF 		bl	display_f1_text
 16500              	.LVL1367:
2115:screens.c     **** 			if( TryingToSetBaleDiaBelowCore )
 16501              		.loc 1 2115 0
 16502 06c8 204B     		ldr	r3, .L929+4
 16503 06ca 1B78     		ldrb	r3, [r3]
 16504 06cc 002B     		cmp	r3, #0
 16505 06ce 22D0     		beq	.L908
2117:screens.c     **** 				display_f1_text( "   ", TSMAX, ICON_CORE_DIAMETER_TEXT_X, ICON_CORE_DIAMETER_TEXT_Y, FIXED ); /
 16506              		.loc 1 2117 0
 16507 06d0 0023     		mov	r3, #0
 16508 06d2 0093     		str	r3, [sp]
 16509 06d4 3648     		ldr	r0, .L929+104
 16510 06d6 1A21     		mov	r1, #26
 16511 06d8 4D22     		mov	r2, #77
 16512 06da 1A23     		mov	r3, #26
 16513 06dc FFF7FEFF 		bl	display_f1_text
 16514              	.LVL1368:
 16515 06e0 19E0     		b	.L908
 16516              	.L912:
2121:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_CORE_DENSITY_TEXT_X, ICON_CORE_DENSITY_TEXT_Y, FIXED );
 16517              		.loc 1 2121 0
 16518 06e2 0023     		mov	r3, #0
 16519 06e4 0093     		str	r3, [sp]
 16520 06e6 3248     		ldr	r0, .L929+104
 16521 06e8 1A21     		mov	r1, #26
 16522 06ea 3222     		mov	r2, #50
 16523 06ec 3D23     		mov	r3, #61
 16524 06ee FFF7FEFF 		bl	display_f1_text
 16525              	.LVL1369:
2122:screens.c     **** 			break;
 16526              		.loc 1 2122 0
 16527 06f2 10E0     		b	.L908
 16528              	.L913:
2124:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_BALE_DENSITY_TEXT_X, ICON_BALE_DENSITY_TEXT_Y, FIXED );
 16529              		.loc 1 2124 0
 16530 06f4 0023     		mov	r3, #0
 16531 06f6 0093     		str	r3, [sp]
 16532 06f8 2D48     		ldr	r0, .L929+104
 16533 06fa 1A21     		mov	r1, #26
 16534 06fc 8222     		mov	r2, #130
 16535 06fe 3D23     		mov	r3, #61
 16536 0700 FFF7FEFF 		bl	display_f1_text
 16537              	.LVL1370:
2125:screens.c     **** 			break;
 16538              		.loc 1 2125 0
 16539 0704 07E0     		b	.L908
 16540              	.L914:
2127:screens.c     **** 			display_f1_text( "   ", TSMAX, ICON_NET_LAYERS_TEXT_X, ICON_NET_LAYERS_TEXT_Y, FIXED );
 16541              		.loc 1 2127 0
 16542 0706 0023     		mov	r3, #0
 16543 0708 0093     		str	r3, [sp]
 16544 070a 2948     		ldr	r0, .L929+104
 16545 070c 1A21     		mov	r1, #26
 16546 070e 3322     		mov	r2, #51
 16547 0710 5823     		mov	r3, #88
 16548 0712 FFF7FEFF 		bl	display_f1_text
 16549              	.LVL1371:
 16550              	.L908:
2136:screens.c     **** 	if( selection != old_selection )
 16551              		.loc 1 2136 0
 16552 0716 0C4B     		ldr	r3, .L929
 16553 0718 1B78     		ldrb	r3, [r3]
 16554 071a 4345     		cmp	r3, r8
 16555 071c 00D1     		bne	.LCB16000
 16556 071e DAE0     		b	.L835	@long jump
 16557              	.LCB16000:
2139:screens.c     **** 		draw_box( adm, 1, 102, 62+36-1, 102+24-1,   CLEAR ); 
 16558              		.loc 1 2139 0
 16559 0720 7D23     		mov	r3, #125
 16560 0722 0093     		str	r3, [sp]
 16561 0724 4023     		mov	r3, #64
 16562 0726 0193     		str	r3, [sp, #4]
 16563 0728 0A48     		ldr	r0, .L929+12
 16564 072a 0121     		mov	r1, #1
 16565 072c 6622     		mov	r2, #102
 16566 072e 6123     		mov	r3, #97
 16567 0730 FFF7FEFF 		bl	draw_box
 16568              	.LVL1372:
2141:screens.c     **** 		switch( selection )
 16569              		.loc 1 2141 0
 16570 0734 044B     		ldr	r3, .L929
 16571 0736 1A78     		ldrb	r2, [r3]
 16572 0738 052A     		cmp	r2, #5
 16573 073a 00D9     		bls	.LCB16014
 16574 073c CBE0     		b	.L835	@long jump
 16575              	.LCB16014:
 16576 073e 9300     		lsl	r3, r2, #2
 16577 0740 1C4A     		ldr	r2, .L929+108
 16578 0742 D358     		ldr	r3, [r2, r3]
 16579 0744 9F46     		mov	pc, r3
 16580              		.section	.rodata.screen110
 16581              		.align	2
 16582              	.L923:
 16583 00b8 B8070000 		.word	.L917
 16584 00bc E8070000 		.word	.L918
 16585 00c0 18080000 		.word	.L919
 16586 00c4 48080000 		.word	.L920
 16587 00c8 78080000 		.word	.L921
 16588 00cc A8080000 		.word	.L922
 16589              		.section	.text.screen110
 16590              	.L930:
 16591 0746 C046     		.align	2
 16592              	.L929:
 16593 0748 00000000 		.word	selection
 16594 074c 00000000 		.word	.LANCHOR9
 16595 0750 70000000 		.word	.L894
 16596 0754 00000000 		.word	adm
 16597 0758 00000000 		.word	ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER
 16598 075c 00000000 		.word	ICON_CORE_DENSITY
 16599 0760 00000000 		.word	ICON_BALE_DENSITY
 16600 0764 00000000 		.word	ICON_NET_LAYERS
 16601 0768 88000000 		.word	.L901
 16602 076c 00000000 		.word	ICON_BALE_PROFILE_SELECTED
 16603 0770 00000000 		.word	ICON_CORE_DIAMETER_SELECTED
 16604 0774 00000000 		.word	ICON_BALE_DIAMETER_SELECTED
 16605 0778 00000000 		.word	ICON_CORE_DENSITY_SELECTED
 16606 077c 00000000 		.word	ICON_BALE_DENSITY_SELECTED
 16607 0780 00000000 		.word	ICON_NET_LAYERS_SELECTED
 16608 0784 00000000 		.word	pFac
 16609 0788 00000000 		.word	ICON_BALE_PROFILE_A
 16610 078c 00000000 		.word	ICON_BALE_PROFILE_B
 16611 0790 00000000 		.word	ICON_BALE_PROFILE_C
 16612 0794 00000000 		.word	ICON_BALE_PROFILE_D
 16613 0798 00000000 		.word	ICON_BALE_PROFILE_E
 16614 079c B8030000 		.word	.LC465
 16615 07a0 00000000 		.word	Bar
 16616 07a4 0C040000 		.word	.LC650
 16617 07a8 00000000 		.word	half_second
 16618 07ac A0000000 		.word	.L915
 16619 07b0 00040000 		.word	.LC607
 16620 07b4 B8000000 		.word	.L923
 16621              	.L917:
2144:screens.c     **** 			write_bitmap( adm, TABLEFT,    0, 107, OR ); // <
 16622              		.loc 1 2144 0
 16623 07b8 4A4C     		ldr	r4, .L931
 16624 07ba 0225     		mov	r5, #2
 16625 07bc 0095     		str	r5, [sp]
 16626 07be 201C     		mov	r0, r4
 16627 07c0 4949     		ldr	r1, .L931+4
 16628 07c2 0022     		mov	r2, #0
 16629 07c4 6B23     		mov	r3, #107
 16630 07c6 FFF7FEFF 		bl	write_bitmap
 16631              	.LVL1373:
2145:screens.c     **** 			write_bitmap( adm, TABRIGHT,  31, 107, OR ); // >
 16632              		.loc 1 2145 0
 16633 07ca 0095     		str	r5, [sp]
 16634 07cc 201C     		mov	r0, r4
 16635 07ce 4749     		ldr	r1, .L931+8
 16636 07d0 1F22     		mov	r2, #31
 16637 07d2 6B23     		mov	r3, #107
 16638 07d4 FFF7FEFF 		bl	write_bitmap
 16639              	.LVL1374:
2146:screens.c     **** 			write_bitmap( adm, TABNAV_DR, 62, 102, OR ); // NAVIGATION: Down Right
 16640              		.loc 1 2146 0
 16641 07d8 0095     		str	r5, [sp]
 16642 07da 201C     		mov	r0, r4
 16643 07dc 4449     		ldr	r1, .L931+12
 16644 07de 3E22     		mov	r2, #62
 16645 07e0 6623     		mov	r3, #102
 16646 07e2 FFF7FEFF 		bl	write_bitmap
 16647              	.LVL1375:
2147:screens.c     **** 			break;
 16648              		.loc 1 2147 0
 16649 07e6 76E0     		b	.L835
 16650              	.L918:
2149:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR ); // -
 16651              		.loc 1 2149 0
 16652 07e8 3E4C     		ldr	r4, .L931
 16653 07ea 0225     		mov	r5, #2
 16654 07ec 0095     		str	r5, [sp]
 16655 07ee 201C     		mov	r0, r4
 16656 07f0 4049     		ldr	r1, .L931+16
 16657 07f2 0022     		mov	r2, #0
 16658 07f4 6B23     		mov	r3, #107
 16659 07f6 FFF7FEFF 		bl	write_bitmap
 16660              	.LVL1376:
2150:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR ); // +
 16661              		.loc 1 2150 0
 16662 07fa 0095     		str	r5, [sp]
 16663 07fc 201C     		mov	r0, r4
 16664 07fe 3E49     		ldr	r1, .L931+20
 16665 0800 1F22     		mov	r2, #31
 16666 0802 6B23     		mov	r3, #107
 16667 0804 FFF7FEFF 		bl	write_bitmap
 16668              	.LVL1377:
2151:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
 16669              		.loc 1 2151 0
 16670 0808 0095     		str	r5, [sp]
 16671 080a 201C     		mov	r0, r4
 16672 080c 3B49     		ldr	r1, .L931+24
 16673 080e 3E22     		mov	r2, #62
 16674 0810 6623     		mov	r3, #102
 16675 0812 FFF7FEFF 		bl	write_bitmap
 16676              	.LVL1378:
2152:screens.c     **** 			break;
 16677              		.loc 1 2152 0
 16678 0816 5EE0     		b	.L835
 16679              	.L919:
2154:screens.c     **** 			write_bitmap( adm, TABMINUS,    0, 107, OR ); // -
 16680              		.loc 1 2154 0
 16681 0818 324C     		ldr	r4, .L931
 16682 081a 0225     		mov	r5, #2
 16683 081c 0095     		str	r5, [sp]
 16684 081e 201C     		mov	r0, r4
 16685 0820 3449     		ldr	r1, .L931+16
 16686 0822 0022     		mov	r2, #0
 16687 0824 6B23     		mov	r3, #107
 16688 0826 FFF7FEFF 		bl	write_bitmap
 16689              	.LVL1379:
2155:screens.c     **** 			write_bitmap( adm, TABPLUS,    31, 107, OR ); // +
 16690              		.loc 1 2155 0
 16691 082a 0095     		str	r5, [sp]
 16692 082c 201C     		mov	r0, r4
 16693 082e 3249     		ldr	r1, .L931+20
 16694 0830 1F22     		mov	r2, #31
 16695 0832 6B23     		mov	r3, #107
 16696 0834 FFF7FEFF 		bl	write_bitmap
 16697              	.LVL1380:
2156:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
 16698              		.loc 1 2156 0
 16699 0838 0095     		str	r5, [sp]
 16700 083a 201C     		mov	r0, r4
 16701 083c 2F49     		ldr	r1, .L931+24
 16702 083e 3E22     		mov	r2, #62
 16703 0840 6623     		mov	r3, #102
 16704 0842 FFF7FEFF 		bl	write_bitmap
 16705              	.LVL1381:
2157:screens.c     **** 			break;
 16706              		.loc 1 2157 0
 16707 0846 46E0     		b	.L835
 16708              	.L920:
2159:screens.c     **** 			write_bitmap( adm, TABMINUS,     0, 107, OR ); // -
 16709              		.loc 1 2159 0
 16710 0848 264C     		ldr	r4, .L931
 16711 084a 0225     		mov	r5, #2
 16712 084c 0095     		str	r5, [sp]
 16713 084e 201C     		mov	r0, r4
 16714 0850 2849     		ldr	r1, .L931+16
 16715 0852 0022     		mov	r2, #0
 16716 0854 6B23     		mov	r3, #107
 16717 0856 FFF7FEFF 		bl	write_bitmap
 16718              	.LVL1382:
2160:screens.c     **** 			write_bitmap( adm, TABPLUS,     31, 107, OR ); // +
 16719              		.loc 1 2160 0
 16720 085a 0095     		str	r5, [sp]
 16721 085c 201C     		mov	r0, r4
 16722 085e 2649     		ldr	r1, .L931+20
 16723 0860 1F22     		mov	r2, #31
 16724 0862 6B23     		mov	r3, #107
 16725 0864 FFF7FEFF 		bl	write_bitmap
 16726              	.LVL1383:
2161:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
 16727              		.loc 1 2161 0
 16728 0868 0095     		str	r5, [sp]
 16729 086a 201C     		mov	r0, r4
 16730 086c 2449     		ldr	r1, .L931+28
 16731 086e 3E22     		mov	r2, #62
 16732 0870 6623     		mov	r3, #102
 16733 0872 FFF7FEFF 		bl	write_bitmap
 16734              	.LVL1384:
2162:screens.c     **** 			break;
 16735              		.loc 1 2162 0
 16736 0876 2EE0     		b	.L835
 16737              	.L921:
2164:screens.c     **** 			write_bitmap( adm, TABMINUS,     0, 107, OR ); // -
 16738              		.loc 1 2164 0
 16739 0878 1A4C     		ldr	r4, .L931
 16740 087a 0225     		mov	r5, #2
 16741 087c 0095     		str	r5, [sp]
 16742 087e 201C     		mov	r0, r4
 16743 0880 1C49     		ldr	r1, .L931+16
 16744 0882 0022     		mov	r2, #0
 16745 0884 6B23     		mov	r3, #107
 16746 0886 FFF7FEFF 		bl	write_bitmap
 16747              	.LVL1385:
2165:screens.c     **** 			write_bitmap( adm, TABPLUS,     31, 107, OR ); // +
 16748              		.loc 1 2165 0
 16749 088a 0095     		str	r5, [sp]
 16750 088c 201C     		mov	r0, r4
 16751 088e 1A49     		ldr	r1, .L931+20
 16752 0890 1F22     		mov	r2, #31
 16753 0892 6B23     		mov	r3, #107
 16754 0894 FFF7FEFF 		bl	write_bitmap
 16755              	.LVL1386:
2166:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
 16756              		.loc 1 2166 0
 16757 0898 0095     		str	r5, [sp]
 16758 089a 201C     		mov	r0, r4
 16759 089c 1849     		ldr	r1, .L931+28
 16760 089e 3E22     		mov	r2, #62
 16761 08a0 6623     		mov	r3, #102
 16762 08a2 FFF7FEFF 		bl	write_bitmap
 16763              	.LVL1387:
2167:screens.c     **** 			break;
 16764              		.loc 1 2167 0
 16765 08a6 16E0     		b	.L835
 16766              	.L922:
2169:screens.c     **** 			write_bitmap( adm, TABMINUS,   0, 107, OR ); // -
 16767              		.loc 1 2169 0
 16768 08a8 0E4C     		ldr	r4, .L931
 16769 08aa 0225     		mov	r5, #2
 16770 08ac 0095     		str	r5, [sp]
 16771 08ae 201C     		mov	r0, r4
 16772 08b0 1049     		ldr	r1, .L931+16
 16773 08b2 0022     		mov	r2, #0
 16774 08b4 6B23     		mov	r3, #107
 16775 08b6 FFF7FEFF 		bl	write_bitmap
 16776              	.LVL1388:
2170:screens.c     **** 			write_bitmap( adm, TABPLUS,   31, 107, OR ); // +
 16777              		.loc 1 2170 0
 16778 08ba 0095     		str	r5, [sp]
 16779 08bc 201C     		mov	r0, r4
 16780 08be 0E49     		ldr	r1, .L931+20
 16781 08c0 1F22     		mov	r2, #31
 16782 08c2 6B23     		mov	r3, #107
 16783 08c4 FFF7FEFF 		bl	write_bitmap
 16784              	.LVL1389:
2171:screens.c     **** 			write_bitmap( adm, TABNAV_UL, 62, 102, OR ); // NAVIGATION: Up Left
 16785              		.loc 1 2171 0
 16786 08c8 0095     		str	r5, [sp]
 16787 08ca 201C     		mov	r0, r4
 16788 08cc 0D49     		ldr	r1, .L931+32
 16789 08ce 3E22     		mov	r2, #62
 16790 08d0 6623     		mov	r3, #102
 16791 08d2 FFF7FEFF 		bl	write_bitmap
 16792              	.LVL1390:
 16793              	.L835:
2176:screens.c     **** }
 16794              		.loc 1 2176 0
 16795 08d6 23B0     		add	sp, sp, #140
 16796              		@ sp needed for prologue
 16797              	.LVL1391:
 16798 08d8 0CBC     		pop	{r2, r3}
 16799 08da 9046     		mov	r8, r2
 16800 08dc 9946     		mov	r9, r3
 16801 08de F0BC     		pop	{r4, r5, r6, r7}
 16802 08e0 01BC     		pop	{r0}
 16803 08e2 0047     		bx	r0
 16804              	.L932:
 16805              		.align	2
 16806              	.L931:
 16807 08e4 00000000 		.word	adm
 16808 08e8 00000000 		.word	TABLEFT
 16809 08ec 00000000 		.word	TABRIGHT
 16810 08f0 00000000 		.word	TABNAV_DR
 16811 08f4 00000000 		.word	TABMINUS
 16812 08f8 00000000 		.word	TABPLUS
 16813 08fc 00000000 		.word	TABNAV_DLR
 16814 0900 00000000 		.word	TABNAV_UDLR
 16815 0904 00000000 		.word	TABNAV_UL
 16816              		.cfi_endproc
 16817              	.LFE379:
 16819              		.section	.text.screen132,"ax",%progbits
 16820              		.align	2
 16821              		.global	screen132
 16822              		.code	16
 16823              		.thumb_func
 16825              	screen132:
 16826              	.LFB388:
4189:screens.c     **** {
 16827              		.loc 1 4189 0
 16828              		.cfi_startproc
 16829              	.LVL1392:
 16830 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16831              	.LCFI52:
 16832              		.cfi_def_cfa_offset 20
 16833              		.cfi_offset 4, -20
 16834              		.cfi_offset 5, -16
 16835              		.cfi_offset 6, -12
 16836              		.cfi_offset 7, -8
 16837              		.cfi_offset 14, -4
 16838 0002 8BB0     		sub	sp, sp, #44
 16839              	.LCFI53:
 16840              		.cfi_def_cfa_offset 64
 16841 0004 071C     		mov	r7, r0
4198:screens.c     **** 	if( !startup )
 16842              		.loc 1 4198 0
 16843 0006 B94B     		ldr	r3, .L1030
 16844 0008 1B78     		ldrb	r3, [r3]
 16845 000a 002B     		cmp	r3, #0
 16846 000c 2ED1     		bne	.L934
4200:screens.c     **** 		startup = 1;
 16847              		.loc 1 4200 0
 16848 000e 0126     		mov	r6, #1
 16849 0010 B64B     		ldr	r3, .L1030
 16850 0012 1E70     		strb	r6, [r3]
4202:screens.c     **** 		draw_frame( adm );
 16851              		.loc 1 4202 0
 16852 0014 B64C     		ldr	r4, .L1030+4
 16853 0016 201C     		mov	r0, r4
 16854              	.LVL1393:
 16855 0018 FFF7FEFF 		bl	draw_frame
 16856              	.LVL1394:
4208:screens.c     **** 		write_bitmap( adm, TABMINUS,  0, 107, OR ); // -
 16857              		.loc 1 4208 0
 16858 001c 0225     		mov	r5, #2
 16859 001e 0095     		str	r5, [sp]
 16860 0020 201C     		mov	r0, r4
 16861 0022 B449     		ldr	r1, .L1030+8
 16862 0024 0022     		mov	r2, #0
 16863 0026 6B23     		mov	r3, #107
 16864 0028 FFF7FEFF 		bl	write_bitmap
 16865              	.LVL1395:
4209:screens.c     **** 		write_bitmap( adm, TABPLUS,  31, 107, OR ); // +
 16866              		.loc 1 4209 0
 16867 002c 0095     		str	r5, [sp]
 16868 002e 201C     		mov	r0, r4
 16869 0030 B149     		ldr	r1, .L1030+12
 16870 0032 1F22     		mov	r2, #31
 16871 0034 6B23     		mov	r3, #107
 16872 0036 FFF7FEFF 		bl	write_bitmap
 16873              	.LVL1396:
4211:screens.c     **** 		write_bitmap( adm, TAB,      99, 107, OR );
 16874              		.loc 1 4211 0
 16875 003a 0095     		str	r5, [sp]
 16876 003c 201C     		mov	r0, r4
 16877 003e AF49     		ldr	r1, .L1030+16
 16878 0040 6322     		mov	r2, #99
 16879 0042 6B23     		mov	r3, #107
 16880 0044 FFF7FEFF 		bl	write_bitmap
 16881              	.LVL1397:
4212:screens.c     **** 		write_bitmap( adm, TABESC,  130, 107, OR ); // ESC
 16882              		.loc 1 4212 0
 16883 0048 0095     		str	r5, [sp]
 16884 004a 201C     		mov	r0, r4
 16885 004c AC49     		ldr	r1, .L1030+20
 16886 004e 8222     		mov	r2, #130
 16887 0050 6B23     		mov	r3, #107
 16888 0052 FFF7FEFF 		bl	write_bitmap
 16889              	.LVL1398:
4218:screens.c     **** 		write_bitmap( adm, ICON_CLOCK_AT_TEN_TO_TWO, CLOCK_PICTURE_X, CLOCK_PICTURE_Y, OR );
 16890              		.loc 1 4218 0
 16891 0056 0095     		str	r5, [sp]
 16892 0058 201C     		mov	r0, r4
 16893 005a AA49     		ldr	r1, .L1030+24
 16894 005c 1F22     		mov	r2, #31
 16895 005e 2623     		mov	r3, #38
 16896 0060 FFF7FEFF 		bl	write_bitmap
 16897              	.LVL1399:
4221:screens.c     **** 		leaf = 1;
 16898              		.loc 1 4221 0
 16899 0064 A84B     		ldr	r3, .L1030+28
 16900 0066 1E70     		strb	r6, [r3]
 16901              	.LVL1400:
4224:screens.c     **** 		old_selection = 0xff;
 16902              		.loc 1 4224 0
 16903 0068 FF25     		mov	r5, #255
 16904 006a 01E0     		b	.L935
 16905              	.LVL1401:
 16906              	.L934:
4228:screens.c     **** 		old_selection = selection;
 16907              		.loc 1 4228 0
 16908 006c A74B     		ldr	r3, .L1030+32
 16909 006e 1D78     		ldrb	r5, [r3]
 16910              	.LVL1402:
 16911              	.L935:
4232:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 16912              		.loc 1 4232 0
 16913 0070 0020     		mov	r0, #0
 16914 0072 FFF7FEFF 		bl	ClockDisplay
 16915              	.LVL1403:
4238:screens.c     **** 	t_sec = bcdtob( ClockRam[0] );
 16916              		.loc 1 4238 0
 16917 0076 A64C     		ldr	r4, .L1030+36
 16918 0078 2078     		ldrb	r0, [r4]
 16919 007a FFF7FEFF 		bl	bcdtob
 16920              	.LVL1404:
 16921 007e A54B     		ldr	r3, .L1030+40
 16922 0080 1870     		strb	r0, [r3]
4239:screens.c     **** 	t_min = bcdtob( ClockRam[1] );
 16923              		.loc 1 4239 0
 16924 0082 6078     		ldrb	r0, [r4, #1]
 16925 0084 FFF7FEFF 		bl	bcdtob
 16926              	.LVL1405:
 16927 0088 A34B     		ldr	r3, .L1030+44
 16928 008a 1870     		strb	r0, [r3]
4240:screens.c     **** 	t_hrs = bcdtob( ClockRam[2] );
 16929              		.loc 1 4240 0
 16930 008c A078     		ldrb	r0, [r4, #2]
 16931 008e FFF7FEFF 		bl	bcdtob
 16932              	.LVL1406:
 16933 0092 A24B     		ldr	r3, .L1030+48
 16934 0094 1870     		strb	r0, [r3]
4241:screens.c     **** 	t_day = bcdtob( ClockRam[3] );
 16935              		.loc 1 4241 0
 16936 0096 E078     		ldrb	r0, [r4, #3]
 16937 0098 FFF7FEFF 		bl	bcdtob
 16938              	.LVL1407:
 16939 009c A04B     		ldr	r3, .L1030+52
 16940 009e 1870     		strb	r0, [r3]
4242:screens.c     **** 	t_date = bcdtob( ClockRam[4] );
 16941              		.loc 1 4242 0
 16942 00a0 2079     		ldrb	r0, [r4, #4]
 16943 00a2 FFF7FEFF 		bl	bcdtob
 16944              	.LVL1408:
 16945 00a6 9F4B     		ldr	r3, .L1030+56
 16946 00a8 1870     		strb	r0, [r3]
4243:screens.c     **** 	t_month = bcdtob( ClockRam[5] & 0x1f );
 16947              		.loc 1 4243 0
 16948 00aa 6379     		ldrb	r3, [r4, #5]
 16949 00ac 1F20     		mov	r0, #31
 16950 00ae 1840     		and	r0, r3
 16951 00b0 FFF7FEFF 		bl	bcdtob
 16952              	.LVL1409:
 16953 00b4 9C4B     		ldr	r3, .L1030+60
 16954 00b6 1870     		strb	r0, [r3]
4244:screens.c     **** 	t_year = ((ClockRam[5] & 0x80) ? 2000 : 2100) + bcdtob( ClockRam[6] );
 16955              		.loc 1 4244 0
 16956 00b8 6379     		ldrb	r3, [r4, #5]
 16957 00ba 7F2B     		cmp	r3, #127
 16958 00bc 02D9     		bls	.L1005
 16959 00be FA24     		mov	r4, #250
 16960 00c0 E400     		lsl	r4, r4, #3
 16961 00c2 00E0     		b	.L936
 16962              	.L1005:
 16963 00c4 994C     		ldr	r4, .L1030+64
 16964              	.L936:
4244:screens.c     **** 	t_year = ((ClockRam[5] & 0x80) ? 2000 : 2100) + bcdtob( ClockRam[6] );
 16965              		.loc 1 4244 0 is_stmt 0 discriminator 3
 16966 00c6 924A     		ldr	r2, .L1030+36
 16967 00c8 9079     		ldrb	r0, [r2, #6]
 16968 00ca FFF7FEFF 		bl	bcdtob
 16969              	.LVL1410:
 16970 00ce 0319     		add	r3, r0, r4
 16971 00d0 1B04     		lsl	r3, r3, #16
 16972 00d2 1B0C     		lsr	r3, r3, #16
 16973 00d4 964A     		ldr	r2, .L1030+68
 16974 00d6 1380     		strh	r3, [r2]
4250:screens.c     **** 	key_status = !editing && (lkey & (SW_NEW | SW_REP));
 16975              		.loc 1 4250 0 is_stmt 1 discriminator 3
 16976 00d8 964A     		ldr	r2, .L1030+72
 16977 00da 1278     		ldrb	r2, [r2]
 16978 00dc 0026     		mov	r6, #0
 16979 00de 002A     		cmp	r2, #0
 16980 00e0 00D0     		beq	.LCB16396
 16981 00e2 33E1     		b	.L937	@long jump
 16982              	.LCB16396:
4250:screens.c     **** 	key_status = !editing && (lkey & (SW_NEW | SW_REP));
 16983              		.loc 1 4250 0 is_stmt 0 discriminator 1
 16984 00e4 BA0F     		lsr	r2, r7, #30
 16985 00e6 00D0     		beq	.LCB16400
 16986 00e8 B7E2     		b	.L938	@long jump
 16987              	.LCB16400:
 16988 00ea 2FE1     		b	.L937
 16989              	.LVL1411:
 16990              	.L1003:
4258:screens.c     **** 			escape = 1;
 16991              		.loc 1 4258 0 is_stmt 1
 16992 00ec 0122     		mov	r2, #1
 16993 00ee 924B     		ldr	r3, .L1030+76
 16994 00f0 1A70     		strb	r2, [r3]
 16995 00f2 0026     		mov	r6, #0
 16996 00f4 2AE1     		b	.L937
 16997              	.L1029:
4260:screens.c     **** 		else if( lkey == SW_OL ) // outer-left button (softkey -)
 16998              		.loc 1 4260 0
 16999 00f6 8022     		mov	r2, #128
 17000 00f8 9200     		lsl	r2, r2, #2
 17001 00fa 9742     		cmp	r7, r2
 17002 00fc 3FD1     		bne	.L939
4262:screens.c     **** 			switch( selection )
 17003              		.loc 1 4262 0
 17004 00fe 834A     		ldr	r2, .L1030+32
 17005 0100 1178     		ldrb	r1, [r2]
 17006 0102 0026     		mov	r6, #0
 17007 0104 0429     		cmp	r1, #4
 17008 0106 36D8     		bhi	.L940
 17009 0108 8A00     		lsl	r2, r1, #2
 17010 010a 8C49     		ldr	r1, .L1030+80
 17011 010c 8A58     		ldr	r2, [r1, r2]
 17012 010e 9746     		mov	pc, r2
 17013              		.section	.rodata.screen132,"a",%progbits
 17014              		.align	2
 17015              	.L946:
 17016 0000 10010000 		.word	.L941
 17017 0004 24010000 		.word	.L942
 17018 0008 38010000 		.word	.L943
 17019 000c 4A010000 		.word	.L944
 17020 0010 5C010000 		.word	.L945
 17021              		.section	.text.screen132
 17022              	.L941:
4265:screens.c     **** 				if( t_hrs )
 17023              		.loc 1 4265 0
 17024 0110 824B     		ldr	r3, .L1030+48
 17025 0112 1B78     		ldrb	r3, [r3]
 17026 0114 0026     		mov	r6, #0
 17027 0116 002B     		cmp	r3, #0
 17028 0118 2DD0     		beq	.L940
4267:screens.c     **** 					t_hrs--; 
 17029              		.loc 1 4267 0
 17030 011a 013B     		sub	r3, r3, #1
 17031 011c 7F4A     		ldr	r2, .L1030+48
 17032 011e 1370     		strb	r3, [r2]
 17033              	.LVL1412:
4268:screens.c     **** 					ChangeTime = 1;
 17034              		.loc 1 4268 0
 17035 0120 0126     		mov	r6, #1
 17036 0122 28E0     		b	.L940
 17037              	.LVL1413:
 17038              	.L942:
4273:screens.c     **** 				if( t_min )
 17039              		.loc 1 4273 0
 17040 0124 7C4B     		ldr	r3, .L1030+44
 17041 0126 1B78     		ldrb	r3, [r3]
 17042 0128 0026     		mov	r6, #0
 17043 012a 002B     		cmp	r3, #0
 17044 012c 23D0     		beq	.L940
4275:screens.c     **** 					t_min--; 
 17045              		.loc 1 4275 0
 17046 012e 013B     		sub	r3, r3, #1
 17047 0130 794A     		ldr	r2, .L1030+44
 17048 0132 1370     		strb	r3, [r2]
 17049              	.LVL1414:
4276:screens.c     **** 					ChangeTime = 1;
 17050              		.loc 1 4276 0
 17051 0134 0126     		mov	r6, #1
 17052 0136 1EE0     		b	.L940
 17053              	.LVL1415:
 17054              	.L943:
4281:screens.c     **** 				if( t_date > 1 )
 17055              		.loc 1 4281 0
 17056 0138 7A4B     		ldr	r3, .L1030+56
 17057 013a 1B78     		ldrb	r3, [r3]
 17058 013c 012B     		cmp	r3, #1
 17059 013e 17D9     		bls	.L1010
4283:screens.c     **** 					t_date--; 
 17060              		.loc 1 4283 0
 17061 0140 013B     		sub	r3, r3, #1
 17062 0142 784A     		ldr	r2, .L1030+56
 17063 0144 1370     		strb	r3, [r2]
 17064              	.LVL1416:
4284:screens.c     **** 					ChangeTime = 1;
 17065              		.loc 1 4284 0
 17066 0146 0126     		mov	r6, #1
 17067 0148 15E0     		b	.L940
 17068              	.LVL1417:
 17069              	.L944:
4289:screens.c     **** 				if( t_month > 1 )
 17070              		.loc 1 4289 0
 17071 014a 774B     		ldr	r3, .L1030+60
 17072 014c 1B78     		ldrb	r3, [r3]
 17073 014e 012B     		cmp	r3, #1
 17074 0150 10D9     		bls	.L1011
4291:screens.c     **** 					t_month--; 
 17075              		.loc 1 4291 0
 17076 0152 013B     		sub	r3, r3, #1
 17077 0154 744A     		ldr	r2, .L1030+60
 17078 0156 1370     		strb	r3, [r2]
 17079              	.LVL1418:
4292:screens.c     **** 					ChangeTime = 1;
 17080              		.loc 1 4292 0
 17081 0158 0126     		mov	r6, #1
 17082 015a 0CE0     		b	.L940
 17083              	.LVL1419:
 17084              	.L945:
4297:screens.c     **** 				if( t_year > 2000 )
 17085              		.loc 1 4297 0
 17086 015c 0026     		mov	r6, #0
 17087 015e FA22     		mov	r2, #250
 17088 0160 D200     		lsl	r2, r2, #3
 17089 0162 9342     		cmp	r3, r2
 17090 0164 07D9     		bls	.L940
4299:screens.c     **** 					t_year--; 
 17091              		.loc 1 4299 0
 17092 0166 013B     		sub	r3, r3, #1
 17093 0168 714A     		ldr	r2, .L1030+68
 17094 016a 1380     		strh	r3, [r2]
 17095              	.LVL1420:
4300:screens.c     **** 					ChangeTime = 1;
 17096              		.loc 1 4300 0
 17097 016c 0126     		mov	r6, #1
 17098 016e 02E0     		b	.L940
 17099              	.LVL1421:
 17100              	.L1010:
4281:screens.c     **** 				if( t_date > 1 )
 17101              		.loc 1 4281 0
 17102 0170 0026     		mov	r6, #0
 17103 0172 00E0     		b	.L940
 17104              	.L1011:
4289:screens.c     **** 				if( t_month > 1 )
 17105              		.loc 1 4289 0
 17106 0174 0026     		mov	r6, #0
 17107              	.LVL1422:
 17108              	.L940:
4304:screens.c     **** 			savecal = 1;
 17109              		.loc 1 4304 0
 17110 0176 0122     		mov	r2, #1
 17111 0178 714B     		ldr	r3, .L1030+84
 17112 017a 1A70     		strb	r2, [r3]
 17113 017c E6E0     		b	.L937
 17114              	.LVL1423:
 17115              	.L939:
4306:screens.c     **** 		else if( lkey == SW_IL ) // inner-left button (softkey +)
 17116              		.loc 1 4306 0
 17117 017e 042F     		cmp	r7, #4
 17118 0180 3CD1     		bne	.L947
4308:screens.c     **** 			switch( selection )
 17119              		.loc 1 4308 0
 17120 0182 624A     		ldr	r2, .L1030+32
 17121 0184 1178     		ldrb	r1, [r2]
 17122 0186 0026     		mov	r6, #0
 17123 0188 0429     		cmp	r1, #4
 17124 018a 33D8     		bhi	.L948
 17125 018c 8A00     		lsl	r2, r1, #2
 17126 018e 6D49     		ldr	r1, .L1030+88
 17127 0190 8A58     		ldr	r2, [r1, r2]
 17128 0192 9746     		mov	pc, r2
 17129              		.section	.rodata.screen132
 17130              		.align	2
 17131              	.L954:
 17132 0014 94010000 		.word	.L949
 17133 0018 A8010000 		.word	.L950
 17134 001c BC010000 		.word	.L951
 17135 0020 D0010000 		.word	.L952
 17136 0024 E4010000 		.word	.L953
 17137              		.section	.text.screen132
 17138              	.L949:
4311:screens.c     **** 				if( t_hrs < 23 )
 17139              		.loc 1 4311 0
 17140 0194 614B     		ldr	r3, .L1030+48
 17141 0196 1B78     		ldrb	r3, [r3]
 17142 0198 0026     		mov	r6, #0
 17143 019a 162B     		cmp	r3, #22
 17144 019c 2AD8     		bhi	.L948
4313:screens.c     **** 					t_hrs++; 
 17145              		.loc 1 4313 0
 17146 019e 0133     		add	r3, r3, #1
 17147 01a0 5E4A     		ldr	r2, .L1030+48
 17148 01a2 1370     		strb	r3, [r2]
 17149              	.LVL1424:
4314:screens.c     **** 					ChangeTime = 1;
 17150              		.loc 1 4314 0
 17151 01a4 0126     		mov	r6, #1
 17152 01a6 25E0     		b	.L948
 17153              	.LVL1425:
 17154              	.L950:
4319:screens.c     **** 				if( t_min < 59 )
 17155              		.loc 1 4319 0
 17156 01a8 5B4B     		ldr	r3, .L1030+44
 17157 01aa 1B78     		ldrb	r3, [r3]
 17158 01ac 0026     		mov	r6, #0
 17159 01ae 3A2B     		cmp	r3, #58
 17160 01b0 20D8     		bhi	.L948
4321:screens.c     **** 					t_min++; 
 17161              		.loc 1 4321 0
 17162 01b2 0133     		add	r3, r3, #1
 17163 01b4 584A     		ldr	r2, .L1030+44
 17164 01b6 1370     		strb	r3, [r2]
 17165              	.LVL1426:
4322:screens.c     **** 					ChangeTime = 1;
 17166              		.loc 1 4322 0
 17167 01b8 0126     		mov	r6, #1
 17168 01ba 1BE0     		b	.L948
 17169              	.LVL1427:
 17170              	.L951:
4327:screens.c     **** 				if( t_date < 31 )
 17171              		.loc 1 4327 0
 17172 01bc 594B     		ldr	r3, .L1030+56
 17173 01be 1B78     		ldrb	r3, [r3]
 17174 01c0 0026     		mov	r6, #0
 17175 01c2 1E2B     		cmp	r3, #30
 17176 01c4 16D8     		bhi	.L948
4329:screens.c     **** 					t_date++; 
 17177              		.loc 1 4329 0
 17178 01c6 0133     		add	r3, r3, #1
 17179 01c8 564A     		ldr	r2, .L1030+56
 17180 01ca 1370     		strb	r3, [r2]
 17181              	.LVL1428:
4330:screens.c     **** 					ChangeTime = 1;
 17182              		.loc 1 4330 0
 17183 01cc 0126     		mov	r6, #1
 17184 01ce 11E0     		b	.L948
 17185              	.LVL1429:
 17186              	.L952:
4335:screens.c     **** 				if( t_month < 12 )
 17187              		.loc 1 4335 0
 17188 01d0 554B     		ldr	r3, .L1030+60
 17189 01d2 1B78     		ldrb	r3, [r3]
 17190 01d4 0026     		mov	r6, #0
 17191 01d6 0B2B     		cmp	r3, #11
 17192 01d8 0CD8     		bhi	.L948
4337:screens.c     **** 					t_month++; 
 17193              		.loc 1 4337 0
 17194 01da 0133     		add	r3, r3, #1
 17195 01dc 524A     		ldr	r2, .L1030+60
 17196 01de 1370     		strb	r3, [r2]
 17197              	.LVL1430:
4338:screens.c     **** 					ChangeTime = 1;
 17198              		.loc 1 4338 0
 17199 01e0 0126     		mov	r6, #1
 17200 01e2 07E0     		b	.L948
 17201              	.LVL1431:
 17202              	.L953:
4343:screens.c     **** 				if( t_year < 2099 )
 17203              		.loc 1 4343 0
 17204 01e4 0026     		mov	r6, #0
 17205 01e6 584A     		ldr	r2, .L1030+92
 17206 01e8 9342     		cmp	r3, r2
 17207 01ea 03D8     		bhi	.L948
4345:screens.c     **** 					t_year++; 
 17208              		.loc 1 4345 0
 17209 01ec 0133     		add	r3, r3, #1
 17210 01ee 504A     		ldr	r2, .L1030+68
 17211 01f0 1380     		strh	r3, [r2]
 17212              	.LVL1432:
4346:screens.c     **** 					ChangeTime = 1;
 17213              		.loc 1 4346 0
 17214 01f2 0126     		mov	r6, #1
 17215              	.LVL1433:
 17216              	.L948:
4350:screens.c     **** 			savecal = 1;
 17217              		.loc 1 4350 0
 17218 01f4 0122     		mov	r2, #1
 17219 01f6 524B     		ldr	r3, .L1030+84
 17220 01f8 1A70     		strb	r2, [r3]
 17221 01fa A7E0     		b	.L937
 17222              	.LVL1434:
 17223              	.L947:
4352:screens.c     **** 		else if( lkey == SW_CU ) // navigation-up button (softkey ^)
 17224              		.loc 1 4352 0
 17225 01fc 202F     		cmp	r7, #32
 17226 01fe 18D1     		bne	.L955
4354:screens.c     **** 			switch( selection )
 17227              		.loc 1 4354 0
 17228 0200 424B     		ldr	r3, .L1030+32
 17229 0202 1B78     		ldrb	r3, [r3]
 17230 0204 032B     		cmp	r3, #3
 17231 0206 0AD0     		beq	.L957
 17232 0208 042B     		cmp	r3, #4
 17233 020a 0DD0     		beq	.L958
 17234 020c 0026     		mov	r6, #0
 17235 020e 022B     		cmp	r3, #2
 17236 0210 00D0     		beq	.LCB16641
 17237 0212 9BE0     		b	.L937	@long jump
 17238              	.LCB16641:
4361:screens.c     **** 				selection = 0; /* hours (t_hrs) */
 17239              		.loc 1 4361 0
 17240 0214 0022     		mov	r2, #0
 17241 0216 3D4B     		ldr	r3, .L1030+32
 17242 0218 1A70     		strb	r2, [r3]
4362:screens.c     **** 				break;
 17243              		.loc 1 4362 0
 17244 021a 0026     		mov	r6, #0
 17245 021c 96E0     		b	.L937
 17246              	.L957:
4364:screens.c     **** 				selection = 1; /* minutes (t_min) */
 17247              		.loc 1 4364 0
 17248 021e 0122     		mov	r2, #1
 17249 0220 3A4B     		ldr	r3, .L1030+32
 17250 0222 1A70     		strb	r2, [r3]
4365:screens.c     **** 				break;
 17251              		.loc 1 4365 0
 17252 0224 0026     		mov	r6, #0
 17253 0226 91E0     		b	.L937
 17254              	.L958:
4367:screens.c     **** 				selection = 1; /* minutes (t_min) */
 17255              		.loc 1 4367 0
 17256 0228 0122     		mov	r2, #1
 17257 022a 384B     		ldr	r3, .L1030+32
 17258 022c 1A70     		strb	r2, [r3]
4368:screens.c     **** 				break;
 17259              		.loc 1 4368 0
 17260 022e 0026     		mov	r6, #0
 17261 0230 8CE0     		b	.L937
 17262              	.L955:
4371:screens.c     **** 		else if( lkey == SW_CD ) // navigation-up button (softkey V)
 17263              		.loc 1 4371 0
 17264 0232 402F     		cmp	r7, #64
 17265 0234 12D1     		bne	.L959
4373:screens.c     **** 			switch( selection )
 17266              		.loc 1 4373 0
 17267 0236 354B     		ldr	r3, .L1030+32
 17268 0238 1B78     		ldrb	r3, [r3]
 17269 023a 002B     		cmp	r3, #0
 17270 023c 04D0     		beq	.L960
 17271 023e 0026     		mov	r6, #0
 17272 0240 012B     		cmp	r3, #1
 17273 0242 00D0     		beq	.LCB16678
 17274 0244 82E0     		b	.L937	@long jump
 17275              	.LCB16678:
 17276 0246 04E0     		b	.L961
 17277              	.L960:
4376:screens.c     **** 				selection = 2; /* _date (t_date) */
 17278              		.loc 1 4376 0
 17279 0248 0222     		mov	r2, #2
 17280 024a 304B     		ldr	r3, .L1030+32
 17281 024c 1A70     		strb	r2, [r3]
4377:screens.c     **** 				break;
 17282              		.loc 1 4377 0
 17283 024e 0026     		mov	r6, #0
 17284 0250 7CE0     		b	.L937
 17285              	.L961:
4379:screens.c     **** 				selection = 3; /* month (t_month) */
 17286              		.loc 1 4379 0
 17287 0252 0322     		mov	r2, #3
 17288 0254 2D4B     		ldr	r3, .L1030+32
 17289 0256 1A70     		strb	r2, [r3]
4380:screens.c     **** 				break;
 17290              		.loc 1 4380 0
 17291 0258 0026     		mov	r6, #0
 17292 025a 77E0     		b	.L937
 17293              	.L959:
4389:screens.c     **** 		else if( lkey == SW_CL ) // navigation-up button (softkey <)
 17294              		.loc 1 4389 0
 17295 025c 102F     		cmp	r7, #16
 17296 025e 20D1     		bne	.L962
4391:screens.c     **** 			switch( selection )
 17297              		.loc 1 4391 0
 17298 0260 2A4B     		ldr	r3, .L1030+32
 17299 0262 1B78     		ldrb	r3, [r3]
 17300 0264 022B     		cmp	r3, #2
 17301 0266 0DD0     		beq	.L964
 17302 0268 02D8     		bhi	.L967
 17303 026a 012B     		cmp	r3, #1
 17304 026c 3CD1     		bne	.L1021
 17305 026e 04E0     		b	.L963
 17306              	.L967:
 17307 0270 032B     		cmp	r3, #3
 17308 0272 0CD0     		beq	.L965
 17309 0274 042B     		cmp	r3, #4
 17310 0276 37D1     		bne	.L1021
 17311 0278 0EE0     		b	.L966
 17312              	.L963:
4396:screens.c     **** 				selection = 0; /* hours (t_hrs) */
 17313              		.loc 1 4396 0
 17314 027a 0022     		mov	r2, #0
 17315 027c 234B     		ldr	r3, .L1030+32
 17316 027e 1A70     		strb	r2, [r3]
4397:screens.c     **** 				break;
 17317              		.loc 1 4397 0
 17318 0280 0026     		mov	r6, #0
 17319 0282 63E0     		b	.L937
 17320              	.L964:
4399:screens.c     **** 				selection = 1; /* minutes (t_min) */
 17321              		.loc 1 4399 0
 17322 0284 0122     		mov	r2, #1
 17323 0286 214B     		ldr	r3, .L1030+32
 17324 0288 1A70     		strb	r2, [r3]
4400:screens.c     **** 				break;
 17325              		.loc 1 4400 0
 17326 028a 0026     		mov	r6, #0
 17327 028c 5EE0     		b	.L937
 17328              	.L965:
4402:screens.c     **** 				selection = 2; /* _date (t_date) */
 17329              		.loc 1 4402 0
 17330 028e 0222     		mov	r2, #2
 17331 0290 1E4B     		ldr	r3, .L1030+32
 17332 0292 1A70     		strb	r2, [r3]
4403:screens.c     **** 				break;
 17333              		.loc 1 4403 0
 17334 0294 0026     		mov	r6, #0
 17335 0296 59E0     		b	.L937
 17336              	.L966:
4405:screens.c     **** 				selection = 3; /* month (t_month) */
 17337              		.loc 1 4405 0
 17338 0298 0322     		mov	r2, #3
 17339 029a 1C4B     		ldr	r3, .L1030+32
 17340 029c 1A70     		strb	r2, [r3]
4406:screens.c     **** 				break;
 17341              		.loc 1 4406 0
 17342 029e 0026     		mov	r6, #0
 17343 02a0 54E0     		b	.L937
 17344              	.L962:
4409:screens.c     **** 		else if( lkey == SW_CR ) // navigation-up button (softkey >)
 17345              		.loc 1 4409 0
 17346 02a2 0026     		mov	r6, #0
 17347 02a4 802F     		cmp	r7, #128
 17348 02a6 51D1     		bne	.L937
4411:screens.c     **** 			switch( selection )
 17349              		.loc 1 4411 0
 17350 02a8 184B     		ldr	r3, .L1030+32
 17351 02aa 1B78     		ldrb	r3, [r3]
 17352 02ac 012B     		cmp	r3, #1
 17353 02ae 0CD0     		beq	.L969
 17354 02b0 002B     		cmp	r3, #0
 17355 02b2 05D0     		beq	.L968
 17356 02b4 022B     		cmp	r3, #2
 17357 02b6 0DD0     		beq	.L970
 17358 02b8 0026     		mov	r6, #0
 17359 02ba 032B     		cmp	r3, #3
 17360 02bc 46D1     		bne	.L937
 17361 02be 0EE0     		b	.L971
 17362              	.L968:
4414:screens.c     **** 				selection = 1; /* minutes (t_min) */
 17363              		.loc 1 4414 0
 17364 02c0 0122     		mov	r2, #1
 17365 02c2 124B     		ldr	r3, .L1030+32
 17366 02c4 1A70     		strb	r2, [r3]
4415:screens.c     **** 				break;
 17367              		.loc 1 4415 0
 17368 02c6 0026     		mov	r6, #0
 17369 02c8 40E0     		b	.L937
 17370              	.L969:
4417:screens.c     **** 				selection = 2; /* _date (t_date) */
 17371              		.loc 1 4417 0
 17372 02ca 0222     		mov	r2, #2
 17373 02cc 0F4B     		ldr	r3, .L1030+32
 17374 02ce 1A70     		strb	r2, [r3]
4418:screens.c     **** 				break;
 17375              		.loc 1 4418 0
 17376 02d0 0026     		mov	r6, #0
 17377 02d2 3BE0     		b	.L937
 17378              	.L970:
4420:screens.c     **** 				selection = 3; /* month (t_month) */
 17379              		.loc 1 4420 0
 17380 02d4 0322     		mov	r2, #3
 17381 02d6 0D4B     		ldr	r3, .L1030+32
 17382 02d8 1A70     		strb	r2, [r3]
4421:screens.c     **** 				break;
 17383              		.loc 1 4421 0
 17384 02da 0026     		mov	r6, #0
 17385 02dc 36E0     		b	.L937
 17386              	.L971:
4423:screens.c     **** 				selection = 4; /* year (t_year) */
 17387              		.loc 1 4423 0
 17388 02de 0422     		mov	r2, #4
 17389 02e0 0A4B     		ldr	r3, .L1030+32
 17390 02e2 1A70     		strb	r2, [r3]
4424:screens.c     **** 				break;
 17391              		.loc 1 4424 0
 17392 02e4 0026     		mov	r6, #0
 17393 02e6 31E0     		b	.L937
 17394              	.L1021:
4391:screens.c     **** 			switch( selection )
 17395              		.loc 1 4391 0
 17396 02e8 0026     		mov	r6, #0
 17397 02ea 2FE0     		b	.L937
 17398              	.L1031:
 17399              		.align	2
 17400              	.L1030:
 17401 02ec 00000000 		.word	startup
 17402 02f0 00000000 		.word	adm
 17403 02f4 00000000 		.word	TABMINUS
 17404 02f8 00000000 		.word	TABPLUS
 17405 02fc 00000000 		.word	TAB
 17406 0300 00000000 		.word	TABESC
 17407 0304 00000000 		.word	ICON_CLOCK_AT_TEN_TO_TWO
 17408 0308 00000000 		.word	leaf
 17409 030c 00000000 		.word	selection
 17410 0310 00000000 		.word	ClockRam
 17411 0314 00000000 		.word	.LANCHOR10
 17412 0318 00000000 		.word	.LANCHOR11
 17413 031c 00000000 		.word	.LANCHOR12
 17414 0320 00000000 		.word	.LANCHOR13
 17415 0324 00000000 		.word	.LANCHOR14
 17416 0328 00000000 		.word	.LANCHOR15
 17417 032c 34080000 		.word	2100
 17418 0330 00000000 		.word	.LANCHOR16
 17419 0334 00000000 		.word	editing
 17420 0338 00000000 		.word	escape
 17421 033c 00000000 		.word	.L946
 17422 0340 00000000 		.word	savecal
 17423 0344 14000000 		.word	.L954
 17424 0348 32080000 		.word	2098
 17425              	.LVL1435:
 17426              	.L937:
4435:screens.c     **** 	sprintf( tstring, "%02u:%02u", t_hrs, t_min ); /* '%02u:%02u' */
 17427              		.loc 1 4435 0
 17428 034c C94B     		ldr	r3, .L1032
 17429 034e 1A78     		ldrb	r2, [r3]
 17430 0350 C94B     		ldr	r3, .L1032+4
 17431 0352 1B78     		ldrb	r3, [r3]
 17432 0354 02A8     		add	r0, sp, #8
 17433 0356 C949     		ldr	r1, .L1032+8
 17434 0358 FFF7FEFF 		bl	sprintf
 17435              	.LVL1436:
4436:screens.c     **** 	display_f1_text( tstring, TSMAX, HOURS_MINUTES_TEXT_X, HOURS_MINUTES_TEXT_Y, FIXED | LEFT );
 17436              		.loc 1 4436 0
 17437 035c 0024     		mov	r4, #0
 17438 035e 0094     		str	r4, [sp]
 17439 0360 02A8     		add	r0, sp, #8
 17440 0362 1A21     		mov	r1, #26
 17441 0364 3C22     		mov	r2, #60
 17442 0366 2C23     		mov	r3, #44
 17443 0368 FFF7FEFF 		bl	display_f1_text
 17444              	.LVL1437:
4437:screens.c     **** 	sprintf( tstring, "%02u/%02u/%04u", t_date, t_month, t_year ); /* '%02u/%02u/%04u' */
 17445              		.loc 1 4437 0
 17446 036c C44B     		ldr	r3, .L1032+12
 17447 036e 1A78     		ldrb	r2, [r3]
 17448 0370 C44B     		ldr	r3, .L1032+16
 17449 0372 1B78     		ldrb	r3, [r3]
 17450 0374 C449     		ldr	r1, .L1032+20
 17451 0376 0988     		ldrh	r1, [r1]
 17452 0378 0091     		str	r1, [sp]
 17453 037a 02A8     		add	r0, sp, #8
 17454 037c C349     		ldr	r1, .L1032+24
 17455 037e FFF7FEFF 		bl	sprintf
 17456              	.LVL1438:
4438:screens.c     **** 	display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
 17457              		.loc 1 4438 0
 17458 0382 0094     		str	r4, [sp]
 17459 0384 02A8     		add	r0, sp, #8
 17460 0386 1A21     		mov	r1, #26
 17461 0388 3C22     		mov	r2, #60
 17462 038a 3F23     		mov	r3, #63
 17463 038c FFF7FEFF 		bl	display_f1_text
 17464              	.LVL1439:
4444:screens.c     **** 	if( half_second )
 17465              		.loc 1 4444 0
 17466 0390 BF4B     		ldr	r3, .L1032+28
 17467 0392 1B78     		ldrb	r3, [r3]
 17468 0394 002B     		cmp	r3, #0
 17469 0396 57D0     		beq	.L972
4447:screens.c     **** 		switch( selection )
 17470              		.loc 1 4447 0
 17471 0398 BE4B     		ldr	r3, .L1032+32
 17472 039a 1A78     		ldrb	r2, [r3]
 17473 039c 042A     		cmp	r2, #4
 17474 039e 53D8     		bhi	.L972
 17475 03a0 9300     		lsl	r3, r2, #2
 17476 03a2 BD4A     		ldr	r2, .L1032+36
 17477 03a4 D358     		ldr	r3, [r2, r3]
 17478 03a6 9F46     		mov	pc, r3
 17479              		.section	.rodata.screen132
 17480              		.align	2
 17481              	.L978:
 17482 0028 A8030000 		.word	.L973
 17483 002c C6030000 		.word	.L974
 17484 0030 E4030000 		.word	.L975
 17485 0034 06040000 		.word	.L976
 17486 0038 28040000 		.word	.L977
 17487              		.section	.text.screen132
 17488              	.L973:
4450:screens.c     **** 			sprintf( tstring, "  :%02u", t_min ); /* '  :%02u' */
 17489              		.loc 1 4450 0
 17490 03a8 B34B     		ldr	r3, .L1032+4
 17491 03aa 1A78     		ldrb	r2, [r3]
 17492 03ac 02A8     		add	r0, sp, #8
 17493 03ae BB49     		ldr	r1, .L1032+40
 17494 03b0 FFF7FEFF 		bl	sprintf
 17495              	.LVL1440:
4451:screens.c     **** 			display_f1_text( tstring, TSMAX, HOURS_MINUTES_TEXT_X, HOURS_MINUTES_TEXT_Y, FIXED | LEFT );
 17496              		.loc 1 4451 0
 17497 03b4 0023     		mov	r3, #0
 17498 03b6 0093     		str	r3, [sp]
 17499 03b8 02A8     		add	r0, sp, #8
 17500 03ba 1A21     		mov	r1, #26
 17501 03bc 3C22     		mov	r2, #60
 17502 03be 2C23     		mov	r3, #44
 17503 03c0 FFF7FEFF 		bl	display_f1_text
 17504              	.LVL1441:
4452:screens.c     **** 			break;
 17505              		.loc 1 4452 0
 17506 03c4 40E0     		b	.L972
 17507              	.L974:
4454:screens.c     **** 			sprintf( tstring, "%02u:  ", t_hrs ); /* '%02u:  ' */
 17508              		.loc 1 4454 0
 17509 03c6 AB4B     		ldr	r3, .L1032
 17510 03c8 1A78     		ldrb	r2, [r3]
 17511 03ca 02A8     		add	r0, sp, #8
 17512 03cc B449     		ldr	r1, .L1032+44
 17513 03ce FFF7FEFF 		bl	sprintf
 17514              	.LVL1442:
4455:screens.c     **** 			display_f1_text( tstring, TSMAX, HOURS_MINUTES_TEXT_X, HOURS_MINUTES_TEXT_Y, FIXED | LEFT );
 17515              		.loc 1 4455 0
 17516 03d2 0023     		mov	r3, #0
 17517 03d4 0093     		str	r3, [sp]
 17518 03d6 02A8     		add	r0, sp, #8
 17519 03d8 1A21     		mov	r1, #26
 17520 03da 3C22     		mov	r2, #60
 17521 03dc 2C23     		mov	r3, #44
 17522 03de FFF7FEFF 		bl	display_f1_text
 17523              	.LVL1443:
4456:screens.c     **** 			break;
 17524              		.loc 1 4456 0
 17525 03e2 31E0     		b	.L972
 17526              	.L975:
4458:screens.c     **** 			sprintf( tstring, "  /%02u/%04u", t_month, t_year ); /* '  /%02u/%04u' */
 17527              		.loc 1 4458 0
 17528 03e4 A74B     		ldr	r3, .L1032+16
 17529 03e6 1A78     		ldrb	r2, [r3]
 17530 03e8 A74B     		ldr	r3, .L1032+20
 17531 03ea 1B88     		ldrh	r3, [r3]
 17532 03ec 02A8     		add	r0, sp, #8
 17533 03ee AD49     		ldr	r1, .L1032+48
 17534 03f0 FFF7FEFF 		bl	sprintf
 17535              	.LVL1444:
4459:screens.c     **** 			display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
 17536              		.loc 1 4459 0
 17537 03f4 0023     		mov	r3, #0
 17538 03f6 0093     		str	r3, [sp]
 17539 03f8 02A8     		add	r0, sp, #8
 17540 03fa 1A21     		mov	r1, #26
 17541 03fc 3C22     		mov	r2, #60
 17542 03fe 3F23     		mov	r3, #63
 17543 0400 FFF7FEFF 		bl	display_f1_text
 17544              	.LVL1445:
4460:screens.c     **** 			break;
 17545              		.loc 1 4460 0
 17546 0404 20E0     		b	.L972
 17547              	.L976:
4462:screens.c     **** 			sprintf( tstring, "%02u/  /%04u", t_date, t_year ); /* '%02u/  /%04u' */
 17548              		.loc 1 4462 0
 17549 0406 9E4B     		ldr	r3, .L1032+12
 17550 0408 1A78     		ldrb	r2, [r3]
 17551 040a 9F4B     		ldr	r3, .L1032+20
 17552 040c 1B88     		ldrh	r3, [r3]
 17553 040e 02A8     		add	r0, sp, #8
 17554 0410 A549     		ldr	r1, .L1032+52
 17555 0412 FFF7FEFF 		bl	sprintf
 17556              	.LVL1446:
4463:screens.c     **** 			display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
 17557              		.loc 1 4463 0
 17558 0416 0023     		mov	r3, #0
 17559 0418 0093     		str	r3, [sp]
 17560 041a 02A8     		add	r0, sp, #8
 17561 041c 1A21     		mov	r1, #26
 17562 041e 3C22     		mov	r2, #60
 17563 0420 3F23     		mov	r3, #63
 17564 0422 FFF7FEFF 		bl	display_f1_text
 17565              	.LVL1447:
4464:screens.c     **** 			break;
 17566              		.loc 1 4464 0
 17567 0426 0FE0     		b	.L972
 17568              	.L977:
4466:screens.c     **** 			sprintf( tstring, "%02u/%02u/    ", t_date, t_month ); /* '%02u/%02u/    ' */
 17569              		.loc 1 4466 0
 17570 0428 954B     		ldr	r3, .L1032+12
 17571 042a 1A78     		ldrb	r2, [r3]
 17572 042c 954B     		ldr	r3, .L1032+16
 17573 042e 1B78     		ldrb	r3, [r3]
 17574 0430 02A8     		add	r0, sp, #8
 17575 0432 9E49     		ldr	r1, .L1032+56
 17576 0434 FFF7FEFF 		bl	sprintf
 17577              	.LVL1448:
4467:screens.c     **** 			display_f1_text( tstring, TSMAX, DATE_MONTH_YEAR_TEXT_X, DATE_MONTH_YEAR_TEXT_Y, FIXED | LEFT );
 17578              		.loc 1 4467 0
 17579 0438 0023     		mov	r3, #0
 17580 043a 0093     		str	r3, [sp]
 17581 043c 02A8     		add	r0, sp, #8
 17582 043e 1A21     		mov	r1, #26
 17583 0440 3C22     		mov	r2, #60
 17584 0442 3F23     		mov	r3, #63
 17585 0444 FFF7FEFF 		bl	display_f1_text
 17586              	.LVL1449:
 17587              	.L972:
4476:screens.c     **** 	if( selection != old_selection )
 17588              		.loc 1 4476 0
 17589 0448 924B     		ldr	r3, .L1032+32
 17590 044a 1B78     		ldrb	r3, [r3]
 17591 044c AB42     		cmp	r3, r5
 17592 044e 00D1     		bne	.LCB17015
 17593 0450 A9E0     		b	.L979	@long jump
 17594              	.LCB17015:
4478:screens.c     **** 		if( old_selection != 0xff ) /* not starting up */
 17595              		.loc 1 4478 0
 17596 0452 FF2D     		cmp	r5, #255
 17597 0454 31D0     		beq	.L980
4481:screens.c     **** 			switch( old_selection )
 17598              		.loc 1 4481 0
 17599 0456 042D     		cmp	r5, #4
 17600 0458 2FD8     		bhi	.L980
 17601 045a AB00     		lsl	r3, r5, #2
 17602 045c 944A     		ldr	r2, .L1032+60
 17603 045e D358     		ldr	r3, [r2, r3]
 17604 0460 9F46     		mov	pc, r3
 17605              		.section	.rodata.screen132
 17606              		.align	2
 17607              	.L986:
 17608 003c 62040000 		.word	.L981
 17609 0040 74040000 		.word	.L982
 17610 0044 86040000 		.word	.L983
 17611 0048 98040000 		.word	.L984
 17612 004c AA040000 		.word	.L985
 17613              		.section	.text.screen132
 17614              	.L981:
4484:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, HOURS_UNDERLINE_X, HOURS_UNDERLINE_Y, INV );
 17615              		.loc 1 4484 0
 17616 0462 0423     		mov	r3, #4
 17617 0464 0093     		str	r3, [sp]
 17618 0466 9348     		ldr	r0, .L1032+64
 17619 0468 9349     		ldr	r1, .L1032+68
 17620 046a 3C22     		mov	r2, #60
 17621 046c 3523     		mov	r3, #53
 17622 046e FFF7FEFF 		bl	write_bitmap
 17623              	.LVL1450:
4485:screens.c     **** 				break;
 17624              		.loc 1 4485 0
 17625 0472 22E0     		b	.L980
 17626              	.L982:
4487:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, MINUTES_UNDERLINE_X, MINUTES_UNDERLINE_Y, INV );
 17627              		.loc 1 4487 0
 17628 0474 0423     		mov	r3, #4
 17629 0476 0093     		str	r3, [sp]
 17630 0478 8E48     		ldr	r0, .L1032+64
 17631 047a 8F49     		ldr	r1, .L1032+68
 17632 047c 4B22     		mov	r2, #75
 17633 047e 3523     		mov	r3, #53
 17634 0480 FFF7FEFF 		bl	write_bitmap
 17635              	.LVL1451:
4488:screens.c     **** 				break;
 17636              		.loc 1 4488 0
 17637 0484 19E0     		b	.L980
 17638              	.L983:
4490:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, DATE_UNDERLINE_X, DATE_UNDERLINE_Y, INV );
 17639              		.loc 1 4490 0
 17640 0486 0423     		mov	r3, #4
 17641 0488 0093     		str	r3, [sp]
 17642 048a 8A48     		ldr	r0, .L1032+64
 17643 048c 8A49     		ldr	r1, .L1032+68
 17644 048e 3C22     		mov	r2, #60
 17645 0490 4823     		mov	r3, #72
 17646 0492 FFF7FEFF 		bl	write_bitmap
 17647              	.LVL1452:
4491:screens.c     **** 				break;
 17648              		.loc 1 4491 0
 17649 0496 10E0     		b	.L980
 17650              	.L984:
4493:screens.c     **** 				write_bitmap( adm, UNDERLINE_TWO_DIGIT, MONTH_UNDERLINE_X, MONTH_UNDERLINE_Y, INV );
 17651              		.loc 1 4493 0
 17652 0498 0423     		mov	r3, #4
 17653 049a 0093     		str	r3, [sp]
 17654 049c 8548     		ldr	r0, .L1032+64
 17655 049e 8649     		ldr	r1, .L1032+68
 17656 04a0 4E22     		mov	r2, #78
 17657 04a2 4823     		mov	r3, #72
 17658 04a4 FFF7FEFF 		bl	write_bitmap
 17659              	.LVL1453:
4494:screens.c     **** 				break;
 17660              		.loc 1 4494 0
 17661 04a8 07E0     		b	.L980
 17662              	.L985:
4496:screens.c     **** 				write_bitmap( adm, UNDERLINE_FOUR_DIGIT, YEAR_UNDERLINE_X, YEAR_UNDERLINE_Y, INV );
 17663              		.loc 1 4496 0
 17664 04aa 0423     		mov	r3, #4
 17665 04ac 0093     		str	r3, [sp]
 17666 04ae 8148     		ldr	r0, .L1032+64
 17667 04b0 8249     		ldr	r1, .L1032+72
 17668 04b2 6022     		mov	r2, #96
 17669 04b4 4823     		mov	r3, #72
 17670 04b6 FFF7FEFF 		bl	write_bitmap
 17671              	.LVL1454:
 17672              	.L980:
4502:screens.c     **** 		switch( selection )
 17673              		.loc 1 4502 0
 17674 04ba 764B     		ldr	r3, .L1032+32
 17675 04bc 1A78     		ldrb	r2, [r3]
 17676 04be 042A     		cmp	r2, #4
 17677 04c0 2FD8     		bhi	.L987
 17678 04c2 9300     		lsl	r3, r2, #2
 17679 04c4 7E4A     		ldr	r2, .L1032+76
 17680 04c6 D358     		ldr	r3, [r2, r3]
 17681 04c8 9F46     		mov	pc, r3
 17682              		.section	.rodata.screen132
 17683              		.align	2
 17684              	.L993:
 17685 0050 CA040000 		.word	.L988
 17686 0054 DC040000 		.word	.L989
 17687 0058 EE040000 		.word	.L990
 17688 005c 00050000 		.word	.L991
 17689 0060 12050000 		.word	.L992
 17690              		.section	.text.screen132
 17691              	.L988:
4505:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, HOURS_UNDERLINE_X, HOURS_UNDERLINE_Y, OR );
 17692              		.loc 1 4505 0
 17693 04ca 0223     		mov	r3, #2
 17694 04cc 0093     		str	r3, [sp]
 17695 04ce 7948     		ldr	r0, .L1032+64
 17696 04d0 7949     		ldr	r1, .L1032+68
 17697 04d2 3C22     		mov	r2, #60
 17698 04d4 3523     		mov	r3, #53
 17699 04d6 FFF7FEFF 		bl	write_bitmap
 17700              	.LVL1455:
4506:screens.c     **** 			break;
 17701              		.loc 1 4506 0
 17702 04da 22E0     		b	.L987
 17703              	.L989:
4508:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, MINUTES_UNDERLINE_X, MINUTES_UNDERLINE_Y, OR );
 17704              		.loc 1 4508 0
 17705 04dc 0223     		mov	r3, #2
 17706 04de 0093     		str	r3, [sp]
 17707 04e0 7448     		ldr	r0, .L1032+64
 17708 04e2 7549     		ldr	r1, .L1032+68
 17709 04e4 4B22     		mov	r2, #75
 17710 04e6 3523     		mov	r3, #53
 17711 04e8 FFF7FEFF 		bl	write_bitmap
 17712              	.LVL1456:
4509:screens.c     **** 			break;
 17713              		.loc 1 4509 0
 17714 04ec 19E0     		b	.L987
 17715              	.L990:
4511:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, DATE_UNDERLINE_X, DATE_UNDERLINE_Y, OR );
 17716              		.loc 1 4511 0
 17717 04ee 0223     		mov	r3, #2
 17718 04f0 0093     		str	r3, [sp]
 17719 04f2 7048     		ldr	r0, .L1032+64
 17720 04f4 7049     		ldr	r1, .L1032+68
 17721 04f6 3C22     		mov	r2, #60
 17722 04f8 4823     		mov	r3, #72
 17723 04fa FFF7FEFF 		bl	write_bitmap
 17724              	.LVL1457:
4512:screens.c     **** 			break;
 17725              		.loc 1 4512 0
 17726 04fe 10E0     		b	.L987
 17727              	.L991:
4514:screens.c     **** 			write_bitmap( adm, UNDERLINE_TWO_DIGIT, MONTH_UNDERLINE_X, MONTH_UNDERLINE_Y, OR );
 17728              		.loc 1 4514 0
 17729 0500 0223     		mov	r3, #2
 17730 0502 0093     		str	r3, [sp]
 17731 0504 6B48     		ldr	r0, .L1032+64
 17732 0506 6C49     		ldr	r1, .L1032+68
 17733 0508 4E22     		mov	r2, #78
 17734 050a 4823     		mov	r3, #72
 17735 050c FFF7FEFF 		bl	write_bitmap
 17736              	.LVL1458:
4515:screens.c     **** 			break;
 17737              		.loc 1 4515 0
 17738 0510 07E0     		b	.L987
 17739              	.L992:
4517:screens.c     **** 			write_bitmap( adm, UNDERLINE_FOUR_DIGIT, YEAR_UNDERLINE_X, YEAR_UNDERLINE_Y, OR );
 17740              		.loc 1 4517 0
 17741 0512 0223     		mov	r3, #2
 17742 0514 0093     		str	r3, [sp]
 17743 0516 6748     		ldr	r0, .L1032+64
 17744 0518 6849     		ldr	r1, .L1032+72
 17745 051a 6022     		mov	r2, #96
 17746 051c 4823     		mov	r3, #72
 17747 051e FFF7FEFF 		bl	write_bitmap
 17748              	.LVL1459:
 17749              	.L987:
4526:screens.c     **** 	if( selection != old_selection )
 17750              		.loc 1 4526 0
 17751 0522 5C4B     		ldr	r3, .L1032+32
 17752 0524 1B78     		ldrb	r3, [r3]
 17753 0526 AB42     		cmp	r3, r5
 17754 0528 3DD0     		beq	.L979
4528:screens.c     **** 		draw_box( adm, 62, 102, 62+36-1, 102+24-1, CLEAR ); // Clear NAVIGATION tab area
 17755              		.loc 1 4528 0
 17756 052a 7D23     		mov	r3, #125
 17757 052c 0093     		str	r3, [sp]
 17758 052e 4023     		mov	r3, #64
 17759 0530 0193     		str	r3, [sp, #4]
 17760 0532 6048     		ldr	r0, .L1032+64
 17761 0534 3E21     		mov	r1, #62
 17762 0536 6622     		mov	r2, #102
 17763 0538 6123     		mov	r3, #97
 17764 053a FFF7FEFF 		bl	draw_box
 17765              	.LVL1460:
4530:screens.c     **** 		switch( selection )
 17766              		.loc 1 4530 0
 17767 053e 554B     		ldr	r3, .L1032+32
 17768 0540 1A78     		ldrb	r2, [r3]
 17769 0542 042A     		cmp	r2, #4
 17770 0544 2FD8     		bhi	.L979
 17771 0546 9300     		lsl	r3, r2, #2
 17772 0548 5E4A     		ldr	r2, .L1032+80
 17773 054a D358     		ldr	r3, [r2, r3]
 17774 054c 9F46     		mov	pc, r3
 17775              		.section	.rodata.screen132
 17776              		.align	2
 17777              	.L999:
 17778 0064 4E050000 		.word	.L994
 17779 0068 60050000 		.word	.L995
 17780 006c 72050000 		.word	.L996
 17781 0070 84050000 		.word	.L997
 17782 0074 96050000 		.word	.L998
 17783              		.section	.text.screen132
 17784              	.L994:
4533:screens.c     **** 			write_bitmap( adm, TABNAV_DR,  62, 102, OR ); // NAVIGATION: Down Right
 17785              		.loc 1 4533 0
 17786 054e 0223     		mov	r3, #2
 17787 0550 0093     		str	r3, [sp]
 17788 0552 5848     		ldr	r0, .L1032+64
 17789 0554 5C49     		ldr	r1, .L1032+84
 17790 0556 3E22     		mov	r2, #62
 17791 0558 6623     		mov	r3, #102
 17792 055a FFF7FEFF 		bl	write_bitmap
 17793              	.LVL1461:
4534:screens.c     **** 			break;
 17794              		.loc 1 4534 0
 17795 055e 22E0     		b	.L979
 17796              	.L995:
4536:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
 17797              		.loc 1 4536 0
 17798 0560 0223     		mov	r3, #2
 17799 0562 0093     		str	r3, [sp]
 17800 0564 5348     		ldr	r0, .L1032+64
 17801 0566 5949     		ldr	r1, .L1032+88
 17802 0568 3E22     		mov	r2, #62
 17803 056a 6623     		mov	r3, #102
 17804 056c FFF7FEFF 		bl	write_bitmap
 17805              	.LVL1462:
4537:screens.c     **** 			break;
 17806              		.loc 1 4537 0
 17807 0570 19E0     		b	.L979
 17808              	.L996:
4539:screens.c     **** 			write_bitmap( adm, TABNAV_ULR, 62, 102, OR ); // NAVIGATION: Up Left Right
 17809              		.loc 1 4539 0
 17810 0572 0223     		mov	r3, #2
 17811 0574 0093     		str	r3, [sp]
 17812 0576 4F48     		ldr	r0, .L1032+64
 17813 0578 5549     		ldr	r1, .L1032+92
 17814 057a 3E22     		mov	r2, #62
 17815 057c 6623     		mov	r3, #102
 17816 057e FFF7FEFF 		bl	write_bitmap
 17817              	.LVL1463:
4540:screens.c     **** 			break;
 17818              		.loc 1 4540 0
 17819 0582 10E0     		b	.L979
 17820              	.L997:
4542:screens.c     **** 			write_bitmap( adm, TABNAV_ULR, 62, 102, OR ); // NAVIGATION: Up Left Right		
 17821              		.loc 1 4542 0
 17822 0584 0223     		mov	r3, #2
 17823 0586 0093     		str	r3, [sp]
 17824 0588 4A48     		ldr	r0, .L1032+64
 17825 058a 5149     		ldr	r1, .L1032+92
 17826 058c 3E22     		mov	r2, #62
 17827 058e 6623     		mov	r3, #102
 17828 0590 FFF7FEFF 		bl	write_bitmap
 17829              	.LVL1464:
4543:screens.c     **** 			break;
 17830              		.loc 1 4543 0
 17831 0594 07E0     		b	.L979
 17832              	.L998:
4545:screens.c     **** 			write_bitmap( adm, TABNAV_UL,  62, 102, OR ); // NAVIGATION: Up Left
 17833              		.loc 1 4545 0
 17834 0596 0223     		mov	r3, #2
 17835 0598 0093     		str	r3, [sp]
 17836 059a 4648     		ldr	r0, .L1032+64
 17837 059c 4D49     		ldr	r1, .L1032+96
 17838 059e 3E22     		mov	r2, #62
 17839 05a0 6623     		mov	r3, #102
 17840 05a2 FFF7FEFF 		bl	write_bitmap
 17841              	.LVL1465:
 17842              	.L979:
4554:screens.c     **** 	if(	ChangeTime )
 17843              		.loc 1 4554 0
 17844 05a6 002E     		cmp	r6, #0
 17845 05a8 5FD0     		beq	.L933
 17846              	.LVL1466:
4558:screens.c     **** 		if( xSemaphoreTake( SetTime, (portTickType)(2 / portTICK_RATE_MS) ) == pdTRUE ) // 2ms wait
 17847              		.loc 1 4558 0
 17848 05aa 4B4B     		ldr	r3, .L1032+100
 17849 05ac 1868     		ldr	r0, [r3]
 17850 05ae 0021     		mov	r1, #0
 17851 05b0 0222     		mov	r2, #2
 17852 05b2 0023     		mov	r3, #0
 17853 05b4 FFF7FEFF 		bl	xQueueGenericReceive
 17854              	.LVL1467:
 17855 05b8 0128     		cmp	r0, #1
 17856 05ba 56D1     		bne	.L933
4561:screens.c     **** 			vTaskSuspend( TWItaskhandle );
 17857              		.loc 1 4561 0
 17858 05bc 474B     		ldr	r3, .L1032+104
 17859 05be 1868     		ldr	r0, [r3]
 17860 05c0 FFF7FEFF 		bl	vTaskSuspend
 17861              	.LVL1468:
4564:screens.c     **** 			ClockRam[0] = (selection == 1) ? 0x00 : btobcd( t_sec ); // seconds
 17862              		.loc 1 4564 0
 17863 05c4 334B     		ldr	r3, .L1032+32
 17864 05c6 1B78     		ldrb	r3, [r3]
 17865 05c8 0020     		mov	r0, #0
 17866 05ca 012B     		cmp	r3, #1
 17867 05cc 03D0     		beq	.L1001
4564:screens.c     **** 			ClockRam[0] = (selection == 1) ? 0x00 : btobcd( t_sec ); // seconds
 17868              		.loc 1 4564 0 is_stmt 0 discriminator 1
 17869 05ce 444B     		ldr	r3, .L1032+108
 17870 05d0 1878     		ldrb	r0, [r3]
 17871 05d2 FFF7FEFF 		bl	btobcd
 17872              	.LVL1469:
 17873              	.L1001:
4564:screens.c     **** 			ClockRam[0] = (selection == 1) ? 0x00 : btobcd( t_sec ); // seconds
 17874              		.loc 1 4564 0 discriminator 3
 17875 05d6 434C     		ldr	r4, .L1032+112
 17876 05d8 2070     		strb	r0, [r4]
4565:screens.c     **** 			ClockRam[1] = btobcd( t_min ); // minutes
 17877              		.loc 1 4565 0 is_stmt 1 discriminator 3
 17878 05da 274B     		ldr	r3, .L1032+4
 17879 05dc 1878     		ldrb	r0, [r3]
 17880 05de FFF7FEFF 		bl	btobcd
 17881              	.LVL1470:
 17882 05e2 6070     		strb	r0, [r4, #1]
4566:screens.c     **** 			ClockRam[2] = btobcd( t_hrs ); // hours
 17883              		.loc 1 4566 0 discriminator 3
 17884 05e4 234B     		ldr	r3, .L1032
 17885 05e6 1878     		ldrb	r0, [r3]
 17886 05e8 FFF7FEFF 		bl	btobcd
 17887              	.LVL1471:
 17888 05ec A070     		strb	r0, [r4, #2]
4567:screens.c     **** 			ClockRam[3] = btobcd( t_day ); // day of week
 17889              		.loc 1 4567 0 discriminator 3
 17890 05ee 3E4B     		ldr	r3, .L1032+116
 17891 05f0 1878     		ldrb	r0, [r3]
 17892 05f2 FFF7FEFF 		bl	btobcd
 17893              	.LVL1472:
 17894 05f6 E070     		strb	r0, [r4, #3]
4568:screens.c     **** 			ClockRam[4] = btobcd( t_date ); // day of month
 17895              		.loc 1 4568 0 discriminator 3
 17896 05f8 214B     		ldr	r3, .L1032+12
 17897 05fa 1878     		ldrb	r0, [r3]
 17898 05fc FFF7FEFF 		bl	btobcd
 17899              	.LVL1473:
 17900 0600 2071     		strb	r0, [r4, #4]
4569:screens.c     **** 			ClockRam[5] = ((t_year > 2099) ? 0x00 : 0x80) | btobcd( t_month ); // century & month
 17901              		.loc 1 4569 0 discriminator 3
 17902 0602 214B     		ldr	r3, .L1032+20
 17903 0604 1B88     		ldrh	r3, [r3]
 17904 0606 0020     		mov	r0, #0
 17905 0608 384A     		ldr	r2, .L1032+120
 17906 060a 9A42     		cmp	r2, r3
 17907 060c 4041     		adc	r0, r0, r0
 17908 060e C501     		lsl	r5, r0, #7
 17909              	.LVL1474:
 17910 0610 1C4B     		ldr	r3, .L1032+16
 17911 0612 1878     		ldrb	r0, [r3]
 17912 0614 FFF7FEFF 		bl	btobcd
 17913              	.LVL1475:
 17914 0618 324C     		ldr	r4, .L1032+112
 17915 061a 0543     		orr	r5, r0
 17916 061c 6571     		strb	r5, [r4, #5]
4570:screens.c     **** 			ClockRam[6]  = btobcd( (unsigned char)(t_year % 100) ); // year   
 17917              		.loc 1 4570 0 discriminator 3
 17918 061e 1A4B     		ldr	r3, .L1032+20
 17919 0620 1888     		ldrh	r0, [r3]
 17920 0622 6421     		mov	r1, #100
 17921 0624 FFF7FEFF 		bl	__aeabi_uidivmod
 17922              	.LVL1476:
 17923 0628 0806     		lsl	r0, r1, #24
 17924 062a 000E     		lsr	r0, r0, #24
 17925 062c FFF7FEFF 		bl	btobcd
 17926              	.LVL1477:
 17927 0630 A071     		strb	r0, [r4, #6]
4571:screens.c     **** 			ClockRam[7] = 0x00; // Oscillation Adjust
 17928              		.loc 1 4571 0 discriminator 3
 17929 0632 0023     		mov	r3, #0
 17930 0634 E371     		strb	r3, [r4, #7]
4572:screens.c     **** 			ClockRam[8] = 0x00; // Weekly Alarm minutes
 17931              		.loc 1 4572 0 discriminator 3
 17932 0636 2372     		strb	r3, [r4, #8]
4573:screens.c     **** 			ClockRam[9] = 0x00; // Weekly Alarm hours
 17933              		.loc 1 4573 0 discriminator 3
 17934 0638 6372     		strb	r3, [r4, #9]
4574:screens.c     **** 			ClockRam[10] = 0x00; // Weekly Alarm day of week
 17935              		.loc 1 4574 0 discriminator 3
 17936 063a A372     		strb	r3, [r4, #10]
4575:screens.c     **** 			ClockRam[11] = 0x00; // Daily Alarm minutes
 17937              		.loc 1 4575 0 discriminator 3
 17938 063c E372     		strb	r3, [r4, #11]
4576:screens.c     **** 			ClockRam[12] = 0x00; // Daily Alarm hours
 17939              		.loc 1 4576 0 discriminator 3
 17940 063e 2373     		strb	r3, [r4, #12]
4577:screens.c     **** 			ClockRam[13] = 0x00; // Undefined
 17941              		.loc 1 4577 0 discriminator 3
 17942 0640 6373     		strb	r3, [r4, #13]
4578:screens.c     **** 			ClockRam[14] = 0x20; // Control register 1 
 17943              		.loc 1 4578 0 discriminator 3
 17944 0642 2023     		mov	r3, #32
 17945 0644 A373     		strb	r3, [r4, #14]
4579:screens.c     **** 			ClockRam[15] = 0x20; // Control register 2
 17946              		.loc 1 4579 0 discriminator 3
 17947 0646 E373     		strb	r3, [r4, #15]
4583:screens.c     **** 			vTaskPrioritySet( TWItaskhandle, mainTWI_TASK_SET_PRIORITY );
 17948              		.loc 1 4583 0 discriminator 3
 17949 0648 244C     		ldr	r4, .L1032+104
 17950 064a 2068     		ldr	r0, [r4]
 17951 064c 0321     		mov	r1, #3
 17952 064e FFF7FEFF 		bl	vTaskPrioritySet
 17953              	.LVL1478:
4585:screens.c     **** 			vTaskResume( TWItaskhandle );
 17954              		.loc 1 4585 0 discriminator 3
 17955 0652 2068     		ldr	r0, [r4]
 17956 0654 FFF7FEFF 		bl	vTaskResume
 17957              	.LVL1479:
 17958 0658 07E0     		b	.L933
 17959              	.LVL1480:
 17960              	.L938:
4254:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 17961              		.loc 1 4254 0
 17962 065a BF00     		lsl	r7, r7, #2
 17963              	.LVL1481:
 17964 065c BF08     		lsr	r7, r7, #2
 17965              	.LVL1482:
4256:screens.c     **** 		if( lkey == SW_OR ) // outer-right button (softkey ESC)
 17966              		.loc 1 4256 0
 17967 065e 8022     		mov	r2, #128
 17968 0660 5200     		lsl	r2, r2, #1
 17969 0662 9742     		cmp	r7, r2
 17970 0664 00D0     		beq	.LCB17357
 17971 0666 46E5     		b	.L1029	@long jump
 17972              	.LCB17357:
 17973 0668 40E5     		b	.L1003
 17974              	.LVL1483:
 17975              	.L933:
4592:screens.c     **** }
 17976              		.loc 1 4592 0
 17977 066a 0BB0     		add	sp, sp, #44
 17978              		@ sp needed for prologue
 17979              	.LVL1484:
 17980 066c F0BC     		pop	{r4, r5, r6, r7}
 17981 066e 01BC     		pop	{r0}
 17982 0670 0047     		bx	r0
 17983              	.L1033:
 17984 0672 C046     		.align	2
 17985              	.L1032:
 17986 0674 00000000 		.word	.LANCHOR12
 17987 0678 00000000 		.word	.LANCHOR11
 17988 067c 14040000 		.word	.LC686
 17989 0680 00000000 		.word	.LANCHOR14
 17990 0684 00000000 		.word	.LANCHOR15
 17991 0688 00000000 		.word	.LANCHOR16
 17992 068c 20040000 		.word	.LC688
 17993 0690 00000000 		.word	half_second
 17994 0694 00000000 		.word	selection
 17995 0698 28000000 		.word	.L978
 17996 069c 30040000 		.word	.LC692
 17997 06a0 38040000 		.word	.LC694
 17998 06a4 40040000 		.word	.LC696
 17999 06a8 50040000 		.word	.LC698
 18000 06ac 60040000 		.word	.LC700
 18001 06b0 3C000000 		.word	.L986
 18002 06b4 00000000 		.word	adm
 18003 06b8 00000000 		.word	UNDERLINE_TWO_DIGIT
 18004 06bc 00000000 		.word	UNDERLINE_FOUR_DIGIT
 18005 06c0 50000000 		.word	.L993
 18006 06c4 64000000 		.word	.L999
 18007 06c8 00000000 		.word	TABNAV_DR
 18008 06cc 00000000 		.word	TABNAV_DLR
 18009 06d0 00000000 		.word	TABNAV_ULR
 18010 06d4 00000000 		.word	TABNAV_UL
 18011 06d8 00000000 		.word	SetTime
 18012 06dc 00000000 		.word	TWItaskhandle
 18013 06e0 00000000 		.word	.LANCHOR10
 18014 06e4 00000000 		.word	ClockRam
 18015 06e8 00000000 		.word	.LANCHOR13
 18016 06ec 33080000 		.word	2099
 18017              		.cfi_endproc
 18018              	.LFE388:
 18020              		.section	.text.screen131,"ax",%progbits
 18021              		.align	2
 18022              		.global	screen131
 18023              		.code	16
 18024              		.thumb_func
 18026              	screen131:
 18027              	.LFB387:
3873:screens.c     **** {
 18028              		.loc 1 3873 0
 18029              		.cfi_startproc
 18030              	.LVL1485:
 18031 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 18032              	.LCFI54:
 18033              		.cfi_def_cfa_offset 20
 18034              		.cfi_offset 4, -20
 18035              		.cfi_offset 5, -16
 18036              		.cfi_offset 6, -12
 18037              		.cfi_offset 7, -8
 18038              		.cfi_offset 14, -4
 18039 0002 5746     		mov	r7, sl
 18040 0004 4E46     		mov	r6, r9
 18041 0006 4546     		mov	r5, r8
 18042 0008 E0B4     		push	{r5, r6, r7}
 18043              	.LCFI55:
 18044              		.cfi_def_cfa_offset 32
 18045              		.cfi_offset 8, -32
 18046              		.cfi_offset 9, -28
 18047              		.cfi_offset 10, -24
 18048 000a 84B0     		sub	sp, sp, #16
 18049              	.LCFI56:
 18050              		.cfi_def_cfa_offset 48
 18051 000c 041C     		mov	r4, r0
3878:screens.c     **** 	if( !startup )
 18052              		.loc 1 3878 0
 18053 000e CC4B     		ldr	r3, .L1070
 18054 0010 1B78     		ldrb	r3, [r3]
3892:screens.c     **** 		change = 0;
 18055              		.loc 1 3892 0
 18056 0012 0025     		mov	r5, #0
3878:screens.c     **** 	if( !startup )
 18057              		.loc 1 3878 0
 18058 0014 002B     		cmp	r3, #0
 18059 0016 18D1     		bne	.L1035
3880:screens.c     **** 		startup = 1;
 18060              		.loc 1 3880 0
 18061 0018 0126     		mov	r6, #1
 18062 001a C94B     		ldr	r3, .L1070
 18063 001c 1E70     		strb	r6, [r3]
3882:screens.c     **** 		draw_frame( adm );
 18064              		.loc 1 3882 0
 18065 001e C94D     		ldr	r5, .L1070+4
 18066 0020 281C     		mov	r0, r5
 18067              	.LVL1486:
 18068 0022 FFF7FEFF 		bl	draw_frame
 18069              	.LVL1487:
3884:screens.c     **** 		write_bitmap( adm, CONTRST1, 25, YPOS2+2, OR );
 18070              		.loc 1 3884 0
 18071 0026 0227     		mov	r7, #2
 18072 0028 0097     		str	r7, [sp]
 18073 002a 281C     		mov	r0, r5
 18074 002c C649     		ldr	r1, .L1070+8
 18075 002e 1922     		mov	r2, #25
 18076 0030 3D23     		mov	r3, #61
 18077 0032 FFF7FEFF 		bl	write_bitmap
 18078              	.LVL1488:
3885:screens.c     **** 		write_bitmap( adm, BRIGHTN1, 25, YPOS3, OR );
 18079              		.loc 1 3885 0
 18080 0036 0097     		str	r7, [sp]
 18081 0038 281C     		mov	r0, r5
 18082 003a C449     		ldr	r1, .L1070+12
 18083 003c 1922     		mov	r2, #25
 18084 003e 4F23     		mov	r3, #79
 18085 0040 FFF7FEFF 		bl	write_bitmap
 18086              	.LVL1489:
3887:screens.c     **** 		leaf = 1;
 18087              		.loc 1 3887 0
 18088 0044 C24B     		ldr	r3, .L1070+16
 18089 0046 1E70     		strb	r6, [r3]
 18090              	.LVL1490:
3888:screens.c     **** 		change = 1;
 18091              		.loc 1 3888 0
 18092 0048 0125     		mov	r5, #1
 18093              	.LVL1491:
 18094              	.L1035:
3896:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 18095              		.loc 1 3896 0
 18096 004a 0020     		mov	r0, #0
 18097 004c FFF7FEFF 		bl	ClockDisplay
 18098              	.LVL1492:
3899:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP);
 18099              		.loc 1 3899 0
 18100 0050 A30F     		lsr	r3, r4, #30
3900:screens.c     **** 	if( key_status )
 18101              		.loc 1 3900 0
 18102 0052 73D0     		beq	.L1036
3902:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 18103              		.loc 1 3902 0
 18104 0054 A400     		lsl	r4, r4, #2
 18105              	.LVL1493:
 18106 0056 A408     		lsr	r4, r4, #2
 18107              	.LVL1494:
3903:screens.c     **** 		if( lkey == SW_OR )
 18108              		.loc 1 3903 0
 18109 0058 8023     		mov	r3, #128
 18110 005a 5B00     		lsl	r3, r3, #1
 18111 005c 9C42     		cmp	r4, r3
 18112 005e 03D1     		bne	.L1037
3905:screens.c     **** 			escape = 1;
 18113              		.loc 1 3905 0
 18114 0060 0122     		mov	r2, #1
 18115 0062 BC4B     		ldr	r3, .L1070+20
 18116 0064 1A70     		strb	r2, [r3]
 18117 0066 69E0     		b	.L1036
 18118              	.L1037:
3907:screens.c     **** 		else if( lkey == SW_CR )
 18119              		.loc 1 3907 0
 18120 0068 802C     		cmp	r4, #128
 18121 006a 27D1     		bne	.L1038
3909:screens.c     **** 			switch( selection )
 18122              		.loc 1 3909 0
 18123 006c BA4B     		ldr	r3, .L1070+24
 18124 006e 1B78     		ldrb	r3, [r3]
 18125 0070 012B     		cmp	r3, #1
 18126 0072 0AD0     		beq	.L1040
 18127 0074 002B     		cmp	r3, #0
 18128 0076 02D0     		beq	.L1039
 18129 0078 022B     		cmp	r3, #2
 18130 007a 5FD1     		bne	.L1036
 18131 007c 11E0     		b	.L1041
 18132              	.L1039:
3912:screens.c     **** 				pRun.pr.DayNight = pRun.pr.DayNight ? 0 : 1;
 18133              		.loc 1 3912 0
 18134 007e B74B     		ldr	r3, .L1070+28
 18135 0080 1A79     		ldrb	r2, [r3, #4]
 18136 0082 5142     		neg	r1, r2
 18137 0084 4A41     		adc	r2, r2, r1
 18138 0086 1A71     		strb	r2, [r3, #4]
 18139              	.LVL1495:
3914:screens.c     **** 				break;
 18140              		.loc 1 3914 0
 18141 0088 08E2     		b	.L1042
 18142              	.LVL1496:
 18143              	.L1040:
3917:screens.c     **** 				if( pRun.pr.Contrast[pRun.pr.DayNight] < DISPLAY_CONTRAST_MAX )
 18144              		.loc 1 3917 0
 18145 008a B44B     		ldr	r3, .L1070+28
 18146 008c 1A79     		ldrb	r2, [r3, #4]
 18147 008e 9B18     		add	r3, r3, r2
 18148 0090 9B78     		ldrb	r3, [r3, #2]
 18149 0092 3E2B     		cmp	r3, #62
 18150 0094 00D9     		bls	.LCB17535
 18151 0096 01E2     		b	.L1042	@long jump
 18152              	.LCB17535:
3919:screens.c     **** 					pRun.pr.Contrast[pRun.pr.DayNight]++;
 18153              		.loc 1 3919 0
 18154 0098 0133     		add	r3, r3, #1
 18155 009a B049     		ldr	r1, .L1070+28
 18156 009c 8A18     		add	r2, r1, r2
 18157 009e 9370     		strb	r3, [r2, #2]
 18158 00a0 FCE1     		b	.L1042
 18159              	.L1041:
3926:screens.c     **** 				if( pRun.pr.Brightness[pRun.pr.DayNight] <= 96 )
 18160              		.loc 1 3926 0
 18161 00a2 AE4B     		ldr	r3, .L1070+28
 18162 00a4 1A79     		ldrb	r2, [r3, #4]
 18163 00a6 9B5C     		ldrb	r3, [r3, r2]
 18164 00a8 602B     		cmp	r3, #96
 18165 00aa 03D8     		bhi	.L1043
3928:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] += 4;
 18166              		.loc 1 3928 0
 18167 00ac 0433     		add	r3, r3, #4
 18168 00ae AB49     		ldr	r1, .L1070+28
 18169 00b0 8B54     		strb	r3, [r1, r2]
 18170 00b2 F3E1     		b	.L1042
 18171              	.L1043:
3932:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] = 100;
 18172              		.loc 1 3932 0
 18173 00b4 6421     		mov	r1, #100
 18174 00b6 A94B     		ldr	r3, .L1070+28
 18175 00b8 9954     		strb	r1, [r3, r2]
 18176 00ba EFE1     		b	.L1042
 18177              	.L1038:
3938:screens.c     **** 		else if( lkey == SW_CL )
 18178              		.loc 1 3938 0
 18179 00bc 102C     		cmp	r4, #16
 18180 00be 27D1     		bne	.L1044
3940:screens.c     **** 			switch( selection )
 18181              		.loc 1 3940 0
 18182 00c0 A54B     		ldr	r3, .L1070+24
 18183 00c2 1B78     		ldrb	r3, [r3]
 18184 00c4 012B     		cmp	r3, #1
 18185 00c6 0AD0     		beq	.L1046
 18186 00c8 002B     		cmp	r3, #0
 18187 00ca 02D0     		beq	.L1045
 18188 00cc 022B     		cmp	r3, #2
 18189 00ce 35D1     		bne	.L1036
 18190 00d0 11E0     		b	.L1047
 18191              	.L1045:
3948:screens.c     **** 				pRun.pr.DayNight =   pRun.pr.DayNight ? 0 : 1;
 18192              		.loc 1 3948 0
 18193 00d2 A24B     		ldr	r3, .L1070+28
 18194 00d4 1A79     		ldrb	r2, [r3, #4]
 18195 00d6 5142     		neg	r1, r2
 18196 00d8 4A41     		adc	r2, r2, r1
 18197 00da 1A71     		strb	r2, [r3, #4]
 18198              	.LVL1497:
3950:screens.c     **** 				break;
 18199              		.loc 1 3950 0
 18200 00dc DEE1     		b	.L1042
 18201              	.LVL1498:
 18202              	.L1046:
3953:screens.c     **** 				if( pRun.pr.Contrast[pRun.pr.DayNight] > DISPLAY_CONTRAST_MIN )
 18203              		.loc 1 3953 0
 18204 00de 9F4B     		ldr	r3, .L1070+28
 18205 00e0 1A79     		ldrb	r2, [r3, #4]
 18206 00e2 9B18     		add	r3, r3, r2
 18207 00e4 9B78     		ldrb	r3, [r3, #2]
 18208 00e6 002B     		cmp	r3, #0
 18209 00e8 00D1     		bne	.LCB17598
 18210 00ea D7E1     		b	.L1042	@long jump
 18211              	.LCB17598:
3955:screens.c     **** 					pRun.pr.Contrast[pRun.pr.DayNight]--;
 18212              		.loc 1 3955 0
 18213 00ec 013B     		sub	r3, r3, #1
 18214 00ee 9B49     		ldr	r1, .L1070+28
 18215 00f0 8A18     		add	r2, r1, r2
 18216 00f2 9370     		strb	r3, [r2, #2]
 18217 00f4 D2E1     		b	.L1042
 18218              	.L1047:
3961:screens.c     **** 				if( pRun.pr.Brightness[pRun.pr.DayNight] >= 4 )
 18219              		.loc 1 3961 0
 18220 00f6 994A     		ldr	r2, .L1070+28
 18221 00f8 1379     		ldrb	r3, [r2, #4]
 18222 00fa D25C     		ldrb	r2, [r2, r3]
 18223 00fc 032A     		cmp	r2, #3
 18224 00fe 03D9     		bls	.L1048
3963:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] -= 4;
 18225              		.loc 1 3963 0
 18226 0100 043A     		sub	r2, r2, #4
 18227 0102 9649     		ldr	r1, .L1070+28
 18228 0104 CA54     		strb	r2, [r1, r3]
 18229 0106 C9E1     		b	.L1042
 18230              	.L1048:
3967:screens.c     **** 					pRun.pr.Brightness[pRun.pr.DayNight] = 0;
 18231              		.loc 1 3967 0
 18232 0108 0021     		mov	r1, #0
 18233 010a 944A     		ldr	r2, .L1070+28
 18234 010c D154     		strb	r1, [r2, r3]
 18235 010e C5E1     		b	.L1042
 18236              	.L1044:
3973:screens.c     **** 		else if( lkey == SW_CU )
 18237              		.loc 1 3973 0
 18238 0110 202C     		cmp	r4, #32
 18239 0112 08D1     		bne	.L1049
3975:screens.c     **** 			if( selection )
 18240              		.loc 1 3975 0
 18241 0114 904B     		ldr	r3, .L1070+24
 18242 0116 1B78     		ldrb	r3, [r3]
 18243 0118 002B     		cmp	r3, #0
 18244 011a 00D1     		bne	.LCB17631
 18245 011c BEE1     		b	.L1042	@long jump
 18246              	.LCB17631:
3977:screens.c     **** 				selection--;
 18247              		.loc 1 3977 0
 18248 011e 013B     		sub	r3, r3, #1
 18249 0120 8D4A     		ldr	r2, .L1070+24
 18250 0122 1370     		strb	r3, [r2]
 18251 0124 BAE1     		b	.L1042
 18252              	.L1049:
3981:screens.c     **** 		else if( lkey == SW_CD )
 18253              		.loc 1 3981 0
 18254 0126 402C     		cmp	r4, #64
 18255 0128 08D1     		bne	.L1036
3983:screens.c     **** 			if( selection < 2 )
 18256              		.loc 1 3983 0
 18257 012a 8B4B     		ldr	r3, .L1070+24
 18258 012c 1B78     		ldrb	r3, [r3]
 18259 012e 012B     		cmp	r3, #1
 18260 0130 00D9     		bls	.LCB17644
 18261 0132 B3E1     		b	.L1042	@long jump
 18262              	.LCB17644:
3984:screens.c     **** 				selection++;
 18263              		.loc 1 3984 0
 18264 0134 0133     		add	r3, r3, #1
 18265 0136 884A     		ldr	r2, .L1070+24
 18266 0138 1370     		strb	r3, [r2]
 18267 013a AFE1     		b	.L1042
 18268              	.L1036:
3991:screens.c     **** 	if( change == 1 )
 18269              		.loc 1 3991 0
 18270 013c 012D     		cmp	r5, #1
 18271 013e 00D0     		beq	.LCB17655
 18272 0140 A5E0     		b	.L1050	@long jump
 18273              	.LCB17655:
 18274              	.LVL1499:
 18275              	.L1063:
3994:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR );
 18276              		.loc 1 3994 0
 18277 0142 7E23     		mov	r3, #126
 18278 0144 0093     		str	r3, [sp]
 18279 0146 4023     		mov	r3, #64
 18280 0148 0193     		str	r3, [sp, #4]
 18281 014a 7E48     		ldr	r0, .L1070+4
 18282 014c 0121     		mov	r1, #1
 18283 014e 6622     		mov	r2, #102
 18284 0150 9E23     		mov	r3, #158
 18285 0152 FFF7FEFF 		bl	draw_box
 18286              	.LVL1500:
3997:screens.c     **** 		switch( selection )
 18287              		.loc 1 3997 0
 18288 0156 804B     		ldr	r3, .L1070+24
 18289 0158 1B78     		ldrb	r3, [r3]
 18290 015a 012B     		cmp	r3, #1
 18291 015c 2BD0     		beq	.L1053
 18292 015e 002B     		cmp	r3, #0
 18293 0160 02D0     		beq	.L1052
 18294 0162 022B     		cmp	r3, #2
 18295 0164 75D1     		bne	.L1067
 18296 0166 4DE0     		b	.L1054
 18297              	.L1052:
4000:screens.c     **** 			write_bitmap( adm, TAB,         0, 107, OR );
 18298              		.loc 1 4000 0
 18299 0168 764C     		ldr	r4, .L1070+4
 18300              	.LVL1501:
 18301 016a 7D4E     		ldr	r6, .L1070+32
 18302 016c 0225     		mov	r5, #2
 18303 016e 0095     		str	r5, [sp]
 18304 0170 201C     		mov	r0, r4
 18305 0172 311C     		mov	r1, r6
 18306 0174 0022     		mov	r2, #0
 18307 0176 6B23     		mov	r3, #107
 18308 0178 FFF7FEFF 		bl	write_bitmap
 18309              	.LVL1502:
4001:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
 18310              		.loc 1 4001 0
 18311 017c 0095     		str	r5, [sp]
 18312 017e 201C     		mov	r0, r4
 18313 0180 311C     		mov	r1, r6
 18314 0182 1F22     		mov	r2, #31
 18315 0184 6B23     		mov	r3, #107
 18316 0186 FFF7FEFF 		bl	write_bitmap
 18317              	.LVL1503:
4002:screens.c     **** 			write_bitmap( adm, TABNAV_DLR, 62, 102, OR ); // NAVIGATION: Down Left Right
 18318              		.loc 1 4002 0
 18319 018a 0095     		str	r5, [sp]
 18320 018c 201C     		mov	r0, r4
 18321 018e 7549     		ldr	r1, .L1070+36
 18322 0190 3E22     		mov	r2, #62
 18323 0192 6623     		mov	r3, #102
 18324 0194 FFF7FEFF 		bl	write_bitmap
 18325              	.LVL1504:
4003:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 18326              		.loc 1 4003 0
 18327 0198 0095     		str	r5, [sp]
 18328 019a 201C     		mov	r0, r4
 18329 019c 311C     		mov	r1, r6
 18330 019e 6322     		mov	r2, #99
 18331 01a0 6B23     		mov	r3, #107
 18332 01a2 FFF7FEFF 		bl	write_bitmap
 18333              	.LVL1505:
4004:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR ); // ESC
 18334              		.loc 1 4004 0
 18335 01a6 0095     		str	r5, [sp]
 18336 01a8 201C     		mov	r0, r4
 18337 01aa 6F49     		ldr	r1, .L1070+40
 18338 01ac 8222     		mov	r2, #130
 18339 01ae 6B23     		mov	r3, #107
 18340 01b0 FFF7FEFF 		bl	write_bitmap
 18341              	.LVL1506:
4005:screens.c     **** 			break;
 18342              		.loc 1 4005 0
 18343 01b4 4FE0     		b	.L1064
 18344              	.LVL1507:
 18345              	.L1053:
4007:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
 18346              		.loc 1 4007 0
 18347 01b6 634C     		ldr	r4, .L1070+4
 18348              	.LVL1508:
 18349 01b8 694E     		ldr	r6, .L1070+32
 18350 01ba 0225     		mov	r5, #2
 18351 01bc 0095     		str	r5, [sp]
 18352 01be 201C     		mov	r0, r4
 18353 01c0 311C     		mov	r1, r6
 18354 01c2 0022     		mov	r2, #0
 18355 01c4 6B23     		mov	r3, #107
 18356 01c6 FFF7FEFF 		bl	write_bitmap
 18357              	.LVL1509:
4008:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
 18358              		.loc 1 4008 0
 18359 01ca 0095     		str	r5, [sp]
 18360 01cc 201C     		mov	r0, r4
 18361 01ce 311C     		mov	r1, r6
 18362 01d0 1F22     		mov	r2, #31
 18363 01d2 6B23     		mov	r3, #107
 18364 01d4 FFF7FEFF 		bl	write_bitmap
 18365              	.LVL1510:
4009:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
 18366              		.loc 1 4009 0
 18367 01d8 0095     		str	r5, [sp]
 18368 01da 201C     		mov	r0, r4
 18369 01dc 6349     		ldr	r1, .L1070+44
 18370 01de 3E22     		mov	r2, #62
 18371 01e0 6623     		mov	r3, #102
 18372 01e2 FFF7FEFF 		bl	write_bitmap
 18373              	.LVL1511:
4010:screens.c     **** 			write_bitmap( adm, TAB,         99, 107, OR );
 18374              		.loc 1 4010 0
 18375 01e6 0095     		str	r5, [sp]
 18376 01e8 201C     		mov	r0, r4
 18377 01ea 311C     		mov	r1, r6
 18378 01ec 6322     		mov	r2, #99
 18379 01ee 6B23     		mov	r3, #107
 18380 01f0 FFF7FEFF 		bl	write_bitmap
 18381              	.LVL1512:
4011:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
 18382              		.loc 1 4011 0
 18383 01f4 0095     		str	r5, [sp]
 18384 01f6 201C     		mov	r0, r4
 18385 01f8 5B49     		ldr	r1, .L1070+40
 18386 01fa 8222     		mov	r2, #130
 18387 01fc 6B23     		mov	r3, #107
 18388 01fe FFF7FEFF 		bl	write_bitmap
 18389              	.LVL1513:
4012:screens.c     **** 			break;
 18390              		.loc 1 4012 0
 18391 0202 28E0     		b	.L1064
 18392              	.LVL1514:
 18393              	.L1054:
4014:screens.c     **** 			write_bitmap( adm, TAB,         0, 107, OR );
 18394              		.loc 1 4014 0
 18395 0204 4F4C     		ldr	r4, .L1070+4
 18396              	.LVL1515:
 18397 0206 564E     		ldr	r6, .L1070+32
 18398 0208 0225     		mov	r5, #2
 18399 020a 0095     		str	r5, [sp]
 18400 020c 201C     		mov	r0, r4
 18401 020e 311C     		mov	r1, r6
 18402 0210 0022     		mov	r2, #0
 18403 0212 6B23     		mov	r3, #107
 18404 0214 FFF7FEFF 		bl	write_bitmap
 18405              	.LVL1516:
4015:screens.c     **** 			write_bitmap( adm, TAB,        31, 107, OR );
 18406              		.loc 1 4015 0
 18407 0218 0095     		str	r5, [sp]
 18408 021a 201C     		mov	r0, r4
 18409 021c 311C     		mov	r1, r6
 18410 021e 1F22     		mov	r2, #31
 18411 0220 6B23     		mov	r3, #107
 18412 0222 FFF7FEFF 		bl	write_bitmap
 18413              	.LVL1517:
4016:screens.c     **** 			write_bitmap( adm, TABNAV_ULR, 62, 102, OR ); // NAVIGATION: Up Left Right
 18414              		.loc 1 4016 0
 18415 0226 0095     		str	r5, [sp]
 18416 0228 201C     		mov	r0, r4
 18417 022a 5149     		ldr	r1, .L1070+48
 18418 022c 3E22     		mov	r2, #62
 18419 022e 6623     		mov	r3, #102
 18420 0230 FFF7FEFF 		bl	write_bitmap
 18421              	.LVL1518:
4017:screens.c     **** 			write_bitmap( adm, TAB,        99, 107, OR );
 18422              		.loc 1 4017 0
 18423 0234 0095     		str	r5, [sp]
 18424 0236 201C     		mov	r0, r4
 18425 0238 311C     		mov	r1, r6
 18426 023a 6322     		mov	r2, #99
 18427 023c 6B23     		mov	r3, #107
 18428 023e FFF7FEFF 		bl	write_bitmap
 18429              	.LVL1519:
4018:screens.c     **** 			write_bitmap( adm, TABESC,    130, 107, OR ); // ESC
 18430              		.loc 1 4018 0
 18431 0242 0095     		str	r5, [sp]
 18432 0244 201C     		mov	r0, r4
 18433 0246 4849     		ldr	r1, .L1070+40
 18434 0248 8222     		mov	r2, #130
 18435 024a 6B23     		mov	r3, #107
 18436 024c FFF7FEFF 		bl	write_bitmap
 18437              	.LVL1520:
4019:screens.c     **** 			break;
 18438              		.loc 1 4019 0
 18439 0250 01E0     		b	.L1064
 18440              	.LVL1521:
 18441              	.L1067:
4023:screens.c     **** 	if( change == 1 )
 18442              		.loc 1 4023 0
 18443 0252 012D     		cmp	r5, #1
 18444 0254 1BD1     		bne	.L1050
 18445              	.LVL1522:
 18446              	.L1064:
4029:screens.c     **** 		SetOutputPWM( BACK, 500, pRun.pr.Brightness[pRun.pr.DayNight] );
 18447              		.loc 1 4029 0
 18448 0256 414B     		ldr	r3, .L1070+28
 18449 0258 1A79     		ldrb	r2, [r3, #4]
 18450 025a 9A5C     		ldrb	r2, [r3, r2]
 18451 025c 0020     		mov	r0, #0
 18452 025e FA21     		mov	r1, #250
 18453 0260 4900     		lsl	r1, r1, #1
 18454 0262 FFF7FEFF 		bl	SetOutputPWM
 18455              	.LVL1523:
4032:screens.c     **** 		while( !(AT91C_BASE_SPI0->SPI_SR & AT91C_SPI_TXBUFE) )
 18456              		.loc 1 4032 0
 18457 0266 4349     		ldr	r1, .L1070+52
 18458 0268 8022     		mov	r2, #128
 18459              	.L1056:
4032:screens.c     **** 		while( !(AT91C_BASE_SPI0->SPI_SR & AT91C_SPI_TXBUFE) )
 18460              		.loc 1 4032 0 is_stmt 0 discriminator 1
 18461 026a 0B69     		ldr	r3, [r1, #16]
 18462 026c 1A42     		tst	r2, r3
 18463 026e FCD0     		beq	.L1056
4037:screens.c     **** 		command[0] = 0x81;
 18464              		.loc 1 4037 0 is_stmt 1
 18465 0270 02A8     		add	r0, sp, #8
 18466 0272 8123     		mov	r3, #129
 18467 0274 0370     		strb	r3, [r0]
4038:screens.c     **** 		command[1] = DISPLAY_DEFAULT_GAIN | pRun.pr.Contrast[pRun.pr.DayNight];
 18468              		.loc 1 4038 0
 18469 0276 394B     		ldr	r3, .L1070+28
 18470 0278 1A79     		ldrb	r2, [r3, #4]
 18471 027a 9B18     		add	r3, r3, r2
 18472 027c 9A78     		ldrb	r2, [r3, #2]
 18473 027e 8023     		mov	r3, #128
 18474 0280 5B42     		neg	r3, r3
 18475 0282 1343     		orr	r3, r2
 18476 0284 4370     		strb	r3, [r0, #1]
4040:screens.c     **** 		SendToDisplay( command, 2, DM_COMMAND );
 18477              		.loc 1 4040 0
 18478 0286 0221     		mov	r1, #2
 18479 0288 0122     		mov	r2, #1
 18480 028a FFF7FEFF 		bl	SendToDisplay
 18481              	.LVL1524:
 18482              	.L1050:
4046:screens.c     **** 	draw_box( adm, 9, (YPOS1-3 - 6), 13, (YPOS3+9), CLEAR );
 18483              		.loc 1 4046 0
 18484 028e 5823     		mov	r3, #88
 18485 0290 0093     		str	r3, [sp]
 18486 0292 4023     		mov	r3, #64
 18487 0294 0193     		str	r3, [sp, #4]
 18488 0296 2B48     		ldr	r0, .L1070+4
 18489 0298 0921     		mov	r1, #9
 18490 029a 1922     		mov	r2, #25
 18491 029c 0D23     		mov	r3, #13
 18492 029e FFF7FEFF 		bl	draw_box
 18493              	.LVL1525:
4047:screens.c     **** 	switch( selection )
 18494              		.loc 1 4047 0
 18495 02a2 2D4B     		ldr	r3, .L1070+24
 18496 02a4 1B78     		ldrb	r3, [r3]
 18497 02a6 002B     		cmp	r3, #0
 18498 02a8 02D0     		beq	.L1058
 18499 02aa 012B     		cmp	r3, #1
 18500 02ac 12D1     		bne	.L1068
 18501 02ae 08E0     		b	.L1059
 18502              	.L1058:
4050:screens.c     **** 		write_bitmap( adm, F1_POINT, 9, (YPOS1+6 - 10), OR );
 18503              		.loc 1 4050 0
 18504 02b0 0223     		mov	r3, #2
 18505 02b2 0093     		str	r3, [sp]
 18506 02b4 2348     		ldr	r0, .L1070+4
 18507 02b6 3049     		ldr	r1, .L1070+56
 18508 02b8 0922     		mov	r2, #9
 18509 02ba 1E23     		mov	r3, #30
 18510 02bc FFF7FEFF 		bl	write_bitmap
 18511              	.LVL1526:
4051:screens.c     **** 		break;
 18512              		.loc 1 4051 0
 18513 02c0 10E0     		b	.L1060
 18514              	.L1059:
4054:screens.c     **** 		write_bitmap( adm, F1_POINT, 9, (YPOS1+6 + 21), OR );
 18515              		.loc 1 4054 0
 18516 02c2 0223     		mov	r3, #2
 18517 02c4 0093     		str	r3, [sp]
 18518 02c6 1F48     		ldr	r0, .L1070+4
 18519 02c8 2B49     		ldr	r1, .L1070+56
 18520 02ca 0922     		mov	r2, #9
 18521 02cc 3D23     		mov	r3, #61
 18522 02ce FFF7FEFF 		bl	write_bitmap
 18523              	.LVL1527:
4055:screens.c     **** 		break;
 18524              		.loc 1 4055 0
 18525 02d2 07E0     		b	.L1060
 18526              	.L1068:
4058:screens.c     **** 		write_bitmap( adm, F1_POINT, 9, (YPOS1+6 + 41), OR );
 18527              		.loc 1 4058 0
 18528 02d4 0223     		mov	r3, #2
 18529 02d6 0093     		str	r3, [sp]
 18530 02d8 1A48     		ldr	r0, .L1070+4
 18531 02da 2749     		ldr	r1, .L1070+56
 18532 02dc 0922     		mov	r2, #9
 18533 02de 5123     		mov	r3, #81
 18534 02e0 FFF7FEFF 		bl	write_bitmap
 18535              	.LVL1528:
 18536              	.L1060:
4063:screens.c     **** 	draw_box( adm, XPOS1, YPOS1-(DAYSYM[1]/2)-2,
 18537              		.loc 1 4063 0
 18538 02e4 254B     		ldr	r3, .L1070+60
 18539 02e6 5E78     		ldrb	r6, [r3, #1]
 18540 02e8 7508     		lsr	r5, r6, #1
 18541 02ea 2024     		mov	r4, #32
 18542 02ec 641B     		sub	r4, r4, r5
 18543 02ee 2406     		lsl	r4, r4, #24
 18544 02f0 240E     		lsr	r4, r4, #24
 18545 02f2 331C     		mov	r3, r6
 18546 02f4 6633     		add	r3, r3, #102
 18547 02f6 1B06     		lsl	r3, r3, #24
 18548 02f8 1B0E     		lsr	r3, r3, #24
 18549 02fa 2A1C     		mov	r2, r5
 18550 02fc 2432     		add	r2, r2, #36
 18551 02fe 0092     		str	r2, [sp]
 18552 0300 4022     		mov	r2, #64
 18553 0302 0192     		str	r2, [sp, #4]
 18554 0304 0F48     		ldr	r0, .L1070+4
 18555 0306 2821     		mov	r1, #40
 18556 0308 221C     		mov	r2, r4
 18557 030a FFF7FEFF 		bl	draw_box
 18558              	.LVL1529:
4065:screens.c     **** 	if( pRun.pr.DayNight )
 18559              		.loc 1 4065 0
 18560 030e 134B     		ldr	r3, .L1070+28
 18561 0310 1B79     		ldrb	r3, [r3, #4]
 18562 0312 002B     		cmp	r3, #0
 18563 0314 34D0     		beq	.L1061
4067:screens.c     **** 		draw_box( adm, XPOS2-3, YPOS1-(DAYSYM[1]/2)-2,
 18564              		.loc 1 4067 0
 18565 0316 6536     		add	r6, r6, #101
 18566 0318 3606     		lsl	r6, r6, #24
 18567 031a 360E     		lsr	r6, r6, #24
 18568 031c 2335     		add	r5, r5, #35
 18569 031e 0095     		str	r5, [sp]
 18570 0320 1023     		mov	r3, #16
 18571 0322 0193     		str	r3, [sp, #4]
 18572 0324 0748     		ldr	r0, .L1070+4
 18573 0326 6121     		mov	r1, #97
 18574 0328 221C     		mov	r2, r4
 18575 032a 331C     		mov	r3, r6
 18576 032c FFF7FEFF 		bl	draw_box
 18577              	.LVL1530:
4069:screens.c     **** 		clip_box( XPOS2-3, YPOS1-(DAYSYM[1]/2)-2,
 18578              		.loc 1 4069 0
 18579 0330 6120     		mov	r0, #97
 18580 0332 211C     		mov	r1, r4
 18581 0334 321C     		mov	r2, r6
 18582 0336 2B1C     		mov	r3, r5
 18583 0338 FFF7FEFF 		bl	clip_box
 18584              	.LVL1531:
 18585 033c 33E0     		b	.L1062
 18586              	.L1071:
 18587 033e C046     		.align	2
 18588              	.L1070:
 18589 0340 00000000 		.word	startup
 18590 0344 00000000 		.word	adm
 18591 0348 00000000 		.word	CONTRST1
 18592 034c 00000000 		.word	BRIGHTN1
 18593 0350 00000000 		.word	leaf
 18594 0354 00000000 		.word	escape
 18595 0358 00000000 		.word	selection
 18596 035c 00000000 		.word	pRun
 18597 0360 00000000 		.word	TAB
 18598 0364 00000000 		.word	TABNAV_DLR
 18599 0368 00000000 		.word	TABESC
 18600 036c 00000000 		.word	TABNAV_UDLR
 18601 0370 00000000 		.word	TABNAV_ULR
 18602 0374 0000FEFF 		.word	-131072
 18603 0378 00000000 		.word	F1_POINT
 18604 037c 00000000 		.word	DAYSYM
 18605              	.L1061:
4074:screens.c     **** 		draw_box( adm, XPOS1, YPOS1-(DAYSYM[1]/2)-2,
 18606              		.loc 1 4074 0
 18607 0380 2B36     		add	r6, r6, #43
 18608 0382 3606     		lsl	r6, r6, #24
 18609 0384 360E     		lsr	r6, r6, #24
 18610 0386 2335     		add	r5, r5, #35
 18611 0388 0095     		str	r5, [sp]
 18612 038a 1023     		mov	r3, #16
 18613 038c 0193     		str	r3, [sp, #4]
 18614 038e 4848     		ldr	r0, .L1072
 18615 0390 2821     		mov	r1, #40
 18616 0392 221C     		mov	r2, r4
 18617 0394 331C     		mov	r3, r6
 18618 0396 FFF7FEFF 		bl	draw_box
 18619              	.LVL1532:
4076:screens.c     **** 		clip_box( XPOS1, YPOS1-(DAYSYM[1]/2)-2,
 18620              		.loc 1 4076 0
 18621 039a 2820     		mov	r0, #40
 18622 039c 211C     		mov	r1, r4
 18623 039e 321C     		mov	r2, r6
 18624 03a0 2B1C     		mov	r3, r5
 18625 03a2 FFF7FEFF 		bl	clip_box
 18626              	.LVL1533:
 18627              	.L1062:
4080:screens.c     **** 	write_bitmap( adm, DAYSYM, XPOS1+2, YPOS1-(DAYSYM[1]/2), OR );
 18628              		.loc 1 4080 0
 18629 03a6 424C     		ldr	r4, .L1072
 18630 03a8 4249     		ldr	r1, .L1072+4
 18631 03aa 4B78     		ldrb	r3, [r1, #1]
 18632 03ac 5B08     		lsr	r3, r3, #1
 18633 03ae 2226     		mov	r6, #34
 18634 03b0 F31A     		sub	r3, r6, r3
 18635 03b2 1B06     		lsl	r3, r3, #24
 18636 03b4 1B0E     		lsr	r3, r3, #24
 18637 03b6 0225     		mov	r5, #2
 18638 03b8 0095     		str	r5, [sp]
 18639 03ba 201C     		mov	r0, r4
 18640 03bc 2A22     		mov	r2, #42
 18641 03be FFF7FEFF 		bl	write_bitmap
 18642              	.LVL1534:
4081:screens.c     **** 	write_bitmap( adm, NIGHTSYM, XPOS2+2, YPOS1-(NIGHTSYM[1]/2), OR );
 18643              		.loc 1 4081 0
 18644 03c2 3D49     		ldr	r1, .L1072+8
 18645 03c4 4B78     		ldrb	r3, [r1, #1]
 18646 03c6 5B08     		lsr	r3, r3, #1
 18647 03c8 F31A     		sub	r3, r6, r3
 18648 03ca 1B06     		lsl	r3, r3, #24
 18649 03cc 1B0E     		lsr	r3, r3, #24
 18650 03ce 0095     		str	r5, [sp]
 18651 03d0 201C     		mov	r0, r4
 18652 03d2 6622     		mov	r2, #102
 18653 03d4 FFF7FEFF 		bl	write_bitmap
 18654              	.LVL1535:
4084:screens.c     **** 	xp = (unsigned char)((((unsigned int)pRun.pr.Contrast[pRun.pr.DayNight] - DISPLAY_CONTRAST_MIN) * 
 18655              		.loc 1 4084 0
 18656 03d8 384D     		ldr	r5, .L1072+12
 18657 03da 2B79     		ldrb	r3, [r5, #4]
 18658 03dc EB18     		add	r3, r5, r3
 18659 03de 9B78     		ldrb	r3, [r3, #2]
 18660 03e0 5800     		lsl	r0, r3, #1
 18661 03e2 C018     		add	r0, r0, r3
 18662 03e4 4001     		lsl	r0, r0, #5
 18663 03e6 C018     		add	r0, r0, r3
 18664 03e8 3F21     		mov	r1, #63
 18665 03ea FFF7FEFF 		bl	__aeabi_uidiv
 18666              	.LVL1536:
 18667 03ee 2A30     		add	r0, r0, #42
 18668 03f0 0006     		lsl	r0, r0, #24
 18669 03f2 000E     		lsr	r0, r0, #24
 18670 03f4 8246     		mov	sl, r0
 18671              	.LVL1537:
4085:screens.c     **** 	draw_box( adm, 42, 68-6, 139, 68-6 + 7, CLEAR );
 18672              		.loc 1 4085 0
 18673 03f6 4526     		mov	r6, #69
 18674 03f8 0096     		str	r6, [sp]
 18675 03fa 4023     		mov	r3, #64
 18676 03fc 9846     		mov	r8, r3
 18677 03fe 0193     		str	r3, [sp, #4]
 18678 0400 201C     		mov	r0, r4
 18679              	.LVL1538:
 18680 0402 2A21     		mov	r1, #42
 18681 0404 3E22     		mov	r2, #62
 18682 0406 8B23     		mov	r3, #139
 18683 0408 FFF7FEFF 		bl	draw_box
 18684              	.LVL1539:
4086:screens.c     **** 	draw_box( adm, 42, 68-6,  xp, 68-6 + 7, FULL );
 18685              		.loc 1 4086 0
 18686 040c 0096     		str	r6, [sp]
 18687 040e 2027     		mov	r7, #32
 18688 0410 0197     		str	r7, [sp, #4]
 18689 0412 201C     		mov	r0, r4
 18690 0414 2A21     		mov	r1, #42
 18691 0416 3E22     		mov	r2, #62
 18692 0418 5346     		mov	r3, sl
 18693 041a FFF7FEFF 		bl	draw_box
 18694              	.LVL1540:
4087:screens.c     **** 	draw_box( adm, xp, 68-6, 139, 68-6 + 7, EMPTY );
 18695              		.loc 1 4087 0
 18696 041e 0096     		str	r6, [sp]
 18697 0420 1023     		mov	r3, #16
 18698 0422 9946     		mov	r9, r3
 18699 0424 0193     		str	r3, [sp, #4]
 18700 0426 201C     		mov	r0, r4
 18701 0428 5146     		mov	r1, sl
 18702 042a 3E22     		mov	r2, #62
 18703 042c 8B23     		mov	r3, #139
 18704 042e FFF7FEFF 		bl	draw_box
 18705              	.LVL1541:
4088:screens.c     **** 	clip_box(      42, 68-6, 139, 68-6 + 7 );
 18706              		.loc 1 4088 0
 18707 0432 2A20     		mov	r0, #42
 18708 0434 3E21     		mov	r1, #62
 18709 0436 8B22     		mov	r2, #139
 18710 0438 4523     		mov	r3, #69
 18711 043a FFF7FEFF 		bl	clip_box
 18712              	.LVL1542:
4091:screens.c     **** 	xp = (unsigned char)((((unsigned int)pRun.pr.Brightness[pRun.pr.DayNight] - 0) * (139 - 42)) / 100
 18713              		.loc 1 4091 0
 18714 043e 2B79     		ldrb	r3, [r5, #4]
 18715 0440 EB5C     		ldrb	r3, [r5, r3]
 18716 0442 5800     		lsl	r0, r3, #1
 18717 0444 C018     		add	r0, r0, r3
 18718 0446 4001     		lsl	r0, r0, #5
 18719 0448 C018     		add	r0, r0, r3
 18720 044a 6421     		mov	r1, #100
 18721 044c FFF7FEFF 		bl	__aeabi_uidiv
 18722              	.LVL1543:
 18723 0450 061C     		mov	r6, r0
 18724 0452 2A36     		add	r6, r6, #42
 18725 0454 3606     		lsl	r6, r6, #24
 18726 0456 360E     		lsr	r6, r6, #24
 18727              	.LVL1544:
4092:screens.c     **** 	draw_box( adm, 42, 87-6, 139, 87-6 + 7, CLEAR );
 18728              		.loc 1 4092 0
 18729 0458 5825     		mov	r5, #88
 18730 045a 0095     		str	r5, [sp]
 18731 045c 4346     		mov	r3, r8
 18732 045e 0193     		str	r3, [sp, #4]
 18733 0460 201C     		mov	r0, r4
 18734 0462 2A21     		mov	r1, #42
 18735 0464 5122     		mov	r2, #81
 18736 0466 8B23     		mov	r3, #139
 18737 0468 FFF7FEFF 		bl	draw_box
 18738              	.LVL1545:
4093:screens.c     **** 	draw_box( adm, 42, 87-6,  xp, 87-6 + 7, FULL );
 18739              		.loc 1 4093 0
 18740 046c 0095     		str	r5, [sp]
 18741 046e 0197     		str	r7, [sp, #4]
 18742 0470 201C     		mov	r0, r4
 18743 0472 2A21     		mov	r1, #42
 18744 0474 5122     		mov	r2, #81
 18745 0476 331C     		mov	r3, r6
 18746 0478 FFF7FEFF 		bl	draw_box
 18747              	.LVL1546:
4094:screens.c     **** 	draw_box( adm, xp, 87-6, 139, 87-6 + 7, EMPTY );
 18748              		.loc 1 4094 0
 18749 047c 0095     		str	r5, [sp]
 18750 047e 4B46     		mov	r3, r9
 18751 0480 0193     		str	r3, [sp, #4]
 18752 0482 201C     		mov	r0, r4
 18753 0484 311C     		mov	r1, r6
 18754 0486 5122     		mov	r2, #81
 18755 0488 8B23     		mov	r3, #139
 18756 048a FFF7FEFF 		bl	draw_box
 18757              	.LVL1547:
4095:screens.c     **** 	clip_box(      42, 87-6, 139, 87-6 + 7 );
 18758              		.loc 1 4095 0
 18759 048e 2A20     		mov	r0, #42
 18760 0490 5121     		mov	r1, #81
 18761 0492 8B22     		mov	r2, #139
 18762 0494 5823     		mov	r3, #88
 18763 0496 FFF7FEFF 		bl	clip_box
 18764              	.LVL1548:
 18765 049a 01E0     		b	.L1069
 18766              	.LVL1549:
 18767              	.L1042:
3892:screens.c     **** 		change = 0;
 18768              		.loc 1 3892 0
 18769 049c 0125     		mov	r5, #1
 18770 049e 50E6     		b	.L1063
 18771              	.LVL1550:
 18772              	.L1069:
4097:screens.c     **** }
 18773              		.loc 1 4097 0
 18774 04a0 04B0     		add	sp, sp, #16
 18775              		@ sp needed for prologue
 18776              	.LVL1551:
 18777 04a2 1CBC     		pop	{r2, r3, r4}
 18778 04a4 9046     		mov	r8, r2
 18779 04a6 9946     		mov	r9, r3
 18780 04a8 A246     		mov	sl, r4
 18781 04aa F0BC     		pop	{r4, r5, r6, r7}
 18782 04ac 01BC     		pop	{r0}
 18783 04ae 0047     		bx	r0
 18784              	.L1073:
 18785              		.align	2
 18786              	.L1072:
 18787 04b0 00000000 		.word	adm
 18788 04b4 00000000 		.word	DAYSYM
 18789 04b8 00000000 		.word	NIGHTSYM
 18790 04bc 00000000 		.word	pRun
 18791              		.cfi_endproc
 18792              	.LFE387:
 18794              		.global	__aeabi_d2uiz
 18795              		.global	__aeabi_fcmple
 18796              		.global	__aeabi_dcmpgt
 18797              		.global	__aeabi_fdiv
 18798              		.global	__aeabi_dsub
 18799              		.global	__aeabi_dcmplt
 18800              		.section	.text.mainscreen,"ax",%progbits
 18801              		.align	2
 18802              		.global	mainscreen
 18803              		.code	16
 18804              		.thumb_func
 18806              	mainscreen:
 18807              	.LFB377:
  67:screens.c     **** {
 18808              		.loc 1 67 0
 18809              		.cfi_startproc
 18810              	.LVL1552:
 18811 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 18812              	.LCFI57:
 18813              		.cfi_def_cfa_offset 20
 18814              		.cfi_offset 4, -20
 18815              		.cfi_offset 5, -16
 18816              		.cfi_offset 6, -12
 18817              		.cfi_offset 7, -8
 18818              		.cfi_offset 14, -4
 18819 0002 5F46     		mov	r7, fp
 18820 0004 5646     		mov	r6, sl
 18821 0006 4D46     		mov	r5, r9
 18822 0008 4446     		mov	r4, r8
 18823 000a F0B4     		push	{r4, r5, r6, r7}
 18824              	.LCFI58:
 18825              		.cfi_def_cfa_offset 36
 18826              		.cfi_offset 8, -36
 18827              		.cfi_offset 9, -32
 18828              		.cfi_offset 10, -28
 18829              		.cfi_offset 11, -24
 18830 000c 95B0     		sub	sp, sp, #84
 18831              	.LCFI59:
 18832              		.cfi_def_cfa_offset 120
 18833 000e 051C     		mov	r5, r0
  88:screens.c     **** 	if( !startup )
 18834              		.loc 1 88 0
 18835 0010 C54B     		ldr	r3, .L1301+8
 18836 0012 1B78     		ldrb	r3, [r3]
  98:screens.c     **** 		changed = 0;
 18837              		.loc 1 98 0
 18838 0014 0024     		mov	r4, #0
  88:screens.c     **** 	if( !startup )
 18839              		.loc 1 88 0
 18840 0016 002B     		cmp	r3, #0
 18841 0018 0BD1     		bne	.L1075
  90:screens.c     **** 		startup = 1;
 18842              		.loc 1 90 0
 18843 001a 0122     		mov	r2, #1
 18844 001c C24B     		ldr	r3, .L1301+8
 18845 001e 1A70     		strb	r2, [r3]
  91:screens.c     **** 		draw_frame( adm );
 18846              		.loc 1 91 0
 18847 0020 C248     		ldr	r0, .L1301+12
 18848              	.LVL1553:
 18849 0022 FFF7FEFF 		bl	draw_frame
 18850              	.LVL1554:
  92:screens.c     **** 		windowdepth = 0;
 18851              		.loc 1 92 0
 18852 0026 0023     		mov	r3, #0
 18853 0028 C14A     		ldr	r2, .L1301+16
 18854 002a 1370     		strb	r3, [r2]
 18855              	.LVL1555:
  94:screens.c     **** 		SecondScreen = 0;
 18856              		.loc 1 94 0
 18857 002c C14A     		ldr	r2, .L1301+20
 18858 002e 1370     		strb	r3, [r2]
  93:screens.c     **** 		changed = 1;
 18859              		.loc 1 93 0
 18860 0030 0124     		mov	r4, #1
 18861              	.LVL1556:
 18862              	.L1075:
 102:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 18863              		.loc 1 102 0
 18864 0032 0020     		mov	r0, #0
 18865 0034 FFF7FEFF 		bl	ClockDisplay
 18866              	.LVL1557:
 105:screens.c     **** 	key_status = lkey & (SW_NEW | SW_REP); 
 18867              		.loc 1 105 0
 18868 0038 AB0F     		lsr	r3, r5, #30
 18869 003a 9B07     		lsl	r3, r3, #30
 18870              	.LVL1558:
 106:screens.c     **** 	if( key_status ) // New key pressed or previous key repeated
 18871              		.loc 1 106 0
 18872 003c 00D1     		bne	.LCB18237
 18873 003e 0BE2     		b	.L1076	@long jump
 18874              	.LCB18237:
 108:screens.c     **** 		KeyOpOff = OUT1 | OUT2 | OUT3 | OUT4 | OUT5 | OUT7 | OUT8;
 18875              		.loc 1 108 0
 18876 0040 BD49     		ldr	r1, .L1301+24
 18877 0042 BE4A     		ldr	r2, .L1301+28
 18878 0044 1160     		str	r1, [r2]
 110:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 18879              		.loc 1 110 0
 18880 0046 AD00     		lsl	r5, r5, #2
 18881              	.LVL1559:
 18882 0048 AD08     		lsr	r5, r5, #2
 18883              	.LVL1560:
 116:screens.c     **** 		if( lkey == SW_CD )
 18884              		.loc 1 116 0
 18885 004a 402D     		cmp	r5, #64
 18886 004c 06D1     		bne	.L1077
 118:screens.c     **** 			window = screen100; // Goto Machine Menu
 18887              		.loc 1 118 0
 18888 004e BC4A     		ldr	r2, .L1301+32
 18889 0050 BC4B     		ldr	r3, .L1301+36
 18890              	.LVL1561:
 18891 0052 1A60     		str	r2, [r3]
 119:screens.c     **** 			Screen100Page = 0;
 18892              		.loc 1 119 0
 18893 0054 0022     		mov	r2, #0
 18894 0056 BC4B     		ldr	r3, .L1301+40
 18895 0058 1A70     		strb	r2, [r3]
 18896 005a FDE1     		b	.L1076
 18897              	.LVL1562:
 18898              	.L1077:
 126:screens.c     **** 		else if( lkey == SW_CL )
 18899              		.loc 1 126 0
 18900 005c 102D     		cmp	r5, #16
 18901 005e 08D1     		bne	.L1078
 128:screens.c     **** 			if( SecondScreen )
 18902              		.loc 1 128 0
 18903 0060 B44B     		ldr	r3, .L1301+20
 18904              	.LVL1563:
 18905 0062 1B78     		ldrb	r3, [r3]
 18906 0064 002B     		cmp	r3, #0
 18907 0066 00D1     		bne	.LCB18265
 18908 0068 F6E1     		b	.L1076	@long jump
 18909              	.LCB18265:
 130:screens.c     **** 				SecondScreen = 0; // Return to First Screen
 18910              		.loc 1 130 0
 18911 006a 0022     		mov	r2, #0
 18912 006c B14B     		ldr	r3, .L1301+20
 18913 006e 1A70     		strb	r2, [r3]
 18914 0070 F2E1     		b	.L1076
 18915              	.LVL1564:
 18916              	.L1078:
 138:screens.c     **** 		else if( lkey == SW_CR )
 18917              		.loc 1 138 0
 18918 0072 802D     		cmp	r5, #128
 18919 0074 08D1     		bne	.L1079
 140:screens.c     **** 			if( !SecondScreen )
 18920              		.loc 1 140 0
 18921 0076 AF4B     		ldr	r3, .L1301+20
 18922              	.LVL1565:
 18923 0078 1B78     		ldrb	r3, [r3]
 18924 007a 002B     		cmp	r3, #0
 18925 007c 00D0     		beq	.LCB18280
 18926 007e EBE1     		b	.L1076	@long jump
 18927              	.LCB18280:
 141:screens.c     **** 				SecondScreen = 1; // Goto Second Screen  
 18928              		.loc 1 141 0
 18929 0080 0122     		mov	r2, #1
 18930 0082 AC4B     		ldr	r3, .L1301+20
 18931 0084 1A70     		strb	r2, [r3]
 18932 0086 E7E1     		b	.L1076
 18933              	.LVL1566:
 18934              	.L1079:
 148:screens.c     **** 		else if( lkey == SW_OR )
 18935              		.loc 1 148 0
 18936 0088 8022     		mov	r2, #128
 18937 008a 5200     		lsl	r2, r2, #1
 18938 008c 9542     		cmp	r5, r2
 18939 008e 30D1     		bne	.L1080
 150:screens.c     **** 			if( !SecondScreen )  // First Screen
 18940              		.loc 1 150 0
 18941 0090 A84B     		ldr	r3, .L1301+20
 18942              	.LVL1567:
 18943 0092 1B78     		ldrb	r3, [r3]
 18944 0094 002B     		cmp	r3, #0
 18945 0096 15D1     		bne	.L1081
 152:screens.c     **** 				if( ResetLube )
 18946              		.loc 1 152 0
 18947 0098 AC4B     		ldr	r3, .L1301+44
 18948 009a 1B78     		ldrb	r3, [r3]
 18949 009c 002B     		cmp	r3, #0
 18950 009e 04D0     		beq	.L1082
 154:screens.c     **** 					ResetLube = 0; // Cancel Reset Lube Counter
 18951              		.loc 1 154 0
 18952 00a0 0022     		mov	r2, #0
 18953 00a2 AA4B     		ldr	r3, .L1301+44
 18954 00a4 1A70     		strb	r2, [r3]
 18955              	.LVL1568:
 155:screens.c     **** 					changed = 1;			    
 18956              		.loc 1 155 0
 18957 00a6 0124     		mov	r4, #1
 18958 00a8 D6E1     		b	.L1076
 18959              	.LVL1569:
 18960              	.L1082:
 159:screens.c     **** 					KeyOpOn = OP_MASTER_DIV;  // OP1 ON: Master Diverter
 18961              		.loc 1 159 0
 18962 00aa 8022     		mov	r2, #128
 18963 00ac 5203     		lsl	r2, r2, #13
 18964 00ae A84B     		ldr	r3, .L1301+48
 18965 00b0 1A60     		str	r2, [r3]
 164:screens.c     **** 					FloorKeyPressed = 1;
 18966              		.loc 1 164 0
 18967 00b2 0123     		mov	r3, #1
 18968 00b4 A74A     		ldr	r2, .L1301+52
 18969 00b6 1370     		strb	r3, [r2]
 167:screens.c     **** 					DisableChoppingKnivesWarnings = 1;					
 18970              		.loc 1 167 0
 18971 00b8 A74A     		ldr	r2, .L1301+56
 18972 00ba 1370     		strb	r3, [r2]
 168:screens.c     **** 					Kniv1_IPClosed = 0;
 18973              		.loc 1 168 0
 18974 00bc 0022     		mov	r2, #0
 18975 00be A74B     		ldr	r3, .L1301+60
 18976 00c0 1A70     		strb	r2, [r3]
 18977 00c2 C9E1     		b	.L1076
 18978              	.L1081:
 173:screens.c     **** 				if( pFac.pf.BaleStore < PF_GW302_BaleStore[PF_MAX] )
 18979              		.loc 1 173 0
 18980 00c4 3823     		mov	r3, #56
 18981 00c6 A64A     		ldr	r2, .L1301+64
 18982 00c8 D35C     		ldrb	r3, [r2, r3]
 18983 00ca A64A     		ldr	r2, .L1301+68
 18984 00cc 9278     		ldrb	r2, [r2, #2]
 18985 00ce 9A42     		cmp	r2, r3
 18986 00d0 06D9     		bls	.L1083
 175:screens.c     **** 					pFac.pf.BaleStore += PF_GW302_BaleStore[PF_STEP];				  
 18987              		.loc 1 175 0
 18988 00d2 A44A     		ldr	r2, .L1301+68
 18989 00d4 1278     		ldrb	r2, [r2]
 18990 00d6 9B18     		add	r3, r3, r2
 18991 00d8 3822     		mov	r2, #56
 18992 00da A149     		ldr	r1, .L1301+64
 18993 00dc 8B54     		strb	r3, [r1, r2]
 18994 00de 04E0     		b	.L1084
 18995              	.L1083:
 179:screens.c     **** 					pFac.pf.BaleStore = PF_GW302_BaleStore[PF_MIN];					
 18996              		.loc 1 179 0
 18997 00e0 A04B     		ldr	r3, .L1301+68
 18998 00e2 5978     		ldrb	r1, [r3, #1]
 18999 00e4 3823     		mov	r3, #56
 19000 00e6 9E4A     		ldr	r2, .L1301+64
 19001 00e8 D154     		strb	r1, [r2, r3]
 19002              	.L1084:
 181:screens.c     **** 				SavecalDelayOnMainDisplay = 1;
 19003              		.loc 1 181 0
 19004 00ea 0122     		mov	r2, #1
 19005 00ec 9E4B     		ldr	r3, .L1301+72
 19006 00ee 1A70     		strb	r2, [r3]
 19007 00f0 B2E1     		b	.L1076
 19008              	.LVL1570:
 19009              	.L1080:
 189:screens.c     **** 		else if( lkey == SW_OL )
 19010              		.loc 1 189 0
 19011 00f2 8022     		mov	r2, #128
 19012 00f4 9200     		lsl	r2, r2, #2
 19013 00f6 9542     		cmp	r5, r2
 19014 00f8 1BD1     		bne	.L1085
 191:screens.c     **** 			if( !SecondScreen )  // First Screen
 19015              		.loc 1 191 0
 19016 00fa 8E4B     		ldr	r3, .L1301+20
 19017              	.LVL1571:
 19018 00fc 1B78     		ldrb	r3, [r3]
 19019 00fe 002B     		cmp	r3, #0
 19020 0100 10D1     		bne	.L1086
 194:screens.c     **** 				if( AutoMan || CHAMBER_CLOSED ) // inhibiting unless in AUTO mode or in MAN mode with chamber c
 19021              		.loc 1 194 0
 19022 0102 9A4B     		ldr	r3, .L1301+76
 19023 0104 1B78     		ldrb	r3, [r3]
 19024 0106 002B     		cmp	r3, #0
 19025 0108 04D1     		bne	.L1087
 194:screens.c     **** 				if( AutoMan || CHAMBER_CLOSED ) // inhibiting unless in AUTO mode or in MAN mode with chamber c
 19026              		.loc 1 194 0 is_stmt 0 discriminator 1
 19027 010a 994A     		ldr	r2, .L1301+80
 19028 010c D26B     		ldr	r2, [r2, #60]
 19029 010e 5102     		lsl	r1, r2, #9
 19030 0110 00D4     		bmi	.LCB18378
 19031 0112 A1E1     		b	.L1076	@long jump
 19032              	.LCB18378:
 19033              	.L1087:
 196:screens.c     **** 					AutoMan = AutoMan? 0:1;
 19034              		.loc 1 196 0 is_stmt 1
 19035 0114 5A42     		neg	r2, r3
 19036 0116 5341     		adc	r3, r3, r2
 19037 0118 944A     		ldr	r2, .L1301+76
 19038 011a 1370     		strb	r3, [r2]
 197:screens.c     **** 					ResetSequenceFactors( SEQ_ALL );
 19039              		.loc 1 197 0
 19040 011c FF20     		mov	r0, #255
 19041 011e FFF7FEFF 		bl	ResetSequenceFactors
 19042              	.LVL1572:
 19043 0122 99E1     		b	.L1076
 19044              	.L1086:
 206:screens.c     **** 				KeyOpOn |= OP_DENSITY_REL; // OP8 ON: Density Release Solenoid (AKA Density Control)
 19045              		.loc 1 206 0
 19046 0124 8A4B     		ldr	r3, .L1301+48
 19047 0126 8022     		mov	r2, #128
 19048 0128 1202     		lsl	r2, r2, #8
 19049 012a 1968     		ldr	r1, [r3]
 19050 012c 0A43     		orr	r2, r1
 19051 012e 1A60     		str	r2, [r3]
 19052 0130 92E1     		b	.L1076
 19053              	.LVL1573:
 19054              	.L1085:
 214:screens.c     **** 		else if( lkey == SW_IL )
 19055              		.loc 1 214 0
 19056 0132 042D     		cmp	r5, #4
 19057 0134 00D0     		beq	.LCB18403
 19058 0136 DFE0     		b	.L1088	@long jump
 19059              	.LCB18403:
 216:screens.c     **** 			if( !SecondScreen )  // First Screen
 19060              		.loc 1 216 0
 19061 0138 7E4B     		ldr	r3, .L1301+20
 19062              	.LVL1574:
 19063 013a 1B78     		ldrb	r3, [r3]
 19064 013c 002B     		cmp	r3, #0
 19065 013e 00D0     		beq	.LCB18408
 19066 0140 BAE0     		b	.L1089	@long jump
 19067              	.LCB18408:
 218:screens.c     **** 				if( ChoppingKnives1WarningOn ) // Chopping knives position Warning on & button pressed when tab
 19068              		.loc 1 218 0
 19069 0142 8C4B     		ldr	r3, .L1301+84
 19070 0144 1B78     		ldrb	r3, [r3]
 19071 0146 002B     		cmp	r3, #0
 19072 0148 06D0     		beq	.L1090
 221:screens.c     **** 					DisableChoppingKnivesWarnings = 1;
 19073              		.loc 1 221 0
 19074 014a 0122     		mov	r2, #1
 19075 014c 824B     		ldr	r3, .L1301+56
 19076 014e 1A70     		strb	r2, [r3]
 222:screens.c     **** 					Kniv1_IPClosed = 0;
 19077              		.loc 1 222 0
 19078 0150 0022     		mov	r2, #0
 19079 0152 824B     		ldr	r3, .L1301+60
 19080 0154 1A70     		strb	r2, [r3]
 19081 0156 7FE1     		b	.L1076
 19082              	.L1090:
 224:screens.c     **** 				else if( pRun.pr.LubeCounter <= 0 ) // Lube Count warning shown & button pressed when tab marke
 19083              		.loc 1 224 0
 19084 0158 874B     		ldr	r3, .L1301+88
 19085 015a 0622     		mov	r2, #6
 19086 015c 9B5E     		ldrsh	r3, [r3, r2]
 19087 015e 002B     		cmp	r3, #0
 19088 0160 0DDC     		bgt	.L1091
 226:screens.c     **** 					if( !MWarn && !ResetLube )
 19089              		.loc 1 226 0
 19090 0162 864B     		ldr	r3, .L1301+92
 19091 0164 1B78     		ldrb	r3, [r3]
 19092 0166 002B     		cmp	r3, #0
 19093 0168 00D0     		beq	.LCB18430
 19094 016a 75E1     		b	.L1076	@long jump
 19095              	.LCB18430:
 226:screens.c     **** 					if( !MWarn && !ResetLube )
 19096              		.loc 1 226 0 is_stmt 0 discriminator 1
 19097 016c 774B     		ldr	r3, .L1301+44
 19098 016e 1B78     		ldrb	r3, [r3]
 19099 0170 002B     		cmp	r3, #0
 19100 0172 00D0     		beq	.LCB18434
 19101 0174 70E1     		b	.L1076	@long jump
 19102              	.LCB18434:
 228:screens.c     **** 						ResetLube = 1; // Goto 'Reset Lube Counter to Lube Alarm Confirm/Cancel' Display -- Message b
 19103              		.loc 1 228 0 is_stmt 1
 19104 0176 0122     		mov	r2, #1
 19105 0178 744B     		ldr	r3, .L1301+44
 19106 017a 1A70     		strb	r2, [r3]
 19107 017c 6CE1     		b	.L1076
 19108              	.L1091:
 233:screens.c     **** 					if( !AutoMan ) // MAN mode
 19109              		.loc 1 233 0
 19110 017e 7B4B     		ldr	r3, .L1301+76
 19111 0180 1B78     		ldrb	r3, [r3]
 19112 0182 002B     		cmp	r3, #0
 19113 0184 3FD1     		bne	.L1092
 235:screens.c     **** 						if( pFac.pf.GW302_NetSystem == NS_ROLLER )
 19114              		.loc 1 235 0
 19115 0186 C123     		mov	r3, #193
 19116 0188 754A     		ldr	r2, .L1301+64
 19117 018a D35C     		ldrb	r3, [r2, r3]
 19118 018c 012B     		cmp	r3, #1
 19119 018e 19D1     		bne	.L1093
 237:screens.c     **** 							KeyOpOn = OP_ROLL_ENGAGE; // OP5 ON: Roller Engage Solenoid (AKA Pre Net Position)
 19120              		.loc 1 237 0
 19121 0190 8022     		mov	r2, #128
 19122 0192 5204     		lsl	r2, r2, #17
 19123 0194 6E4B     		ldr	r3, .L1301+48
 19124 0196 1A60     		str	r2, [r3]
 239:screens.c     **** 							if( looptime >= ( (unsigned char)(pFac.pf.GW302_RollerDelay * 10.0) ) )
 19125              		.loc 1 239 0
 19126 0198 A023     		mov	r3, #160
 19127 019a 714A     		ldr	r2, .L1301+64
 19128 019c D058     		ldr	r0, [r2, r3]
 19129 019e FFF7FEFF 		bl	__aeabi_f2d
 19130              	.LVL1575:
 19131 01a2 604B     		ldr	r3, .L1301+4
 19132 01a4 5E4A     		ldr	r2, .L1301
 19133 01a6 FFF7FEFF 		bl	__aeabi_dmul
 19134              	.LVL1576:
 19135 01aa FFF7FEFF 		bl	__aeabi_d2uiz
 19136              	.LVL1577:
 19137 01ae 0006     		lsl	r0, r0, #24
 19138 01b0 000E     		lsr	r0, r0, #24
 19139 01b2 734B     		ldr	r3, .L1301+96
 19140 01b4 1B78     		ldrb	r3, [r3]
 19141 01b6 9842     		cmp	r0, r3
 19142 01b8 1DD8     		bhi	.L1094
 241:screens.c     **** 								KeyOpOn |= OP_NET_ON; // OP2 ON: Net Clutch (AKA Net On)
 19143              		.loc 1 241 0
 19144 01ba 9022     		mov	r2, #144
 19145 01bc 5204     		lsl	r2, r2, #17
 19146 01be 644B     		ldr	r3, .L1301+48
 19147 01c0 1A60     		str	r2, [r3]
 19148 01c2 18E0     		b	.L1094
 19149              	.L1093:
 246:screens.c     **** 							KeyOpOn = OP_NET_ON; // OP2 ON: Net Clutch (AKA Net On)
 19150              		.loc 1 246 0
 19151 01c4 8022     		mov	r2, #128
 19152 01c6 9203     		lsl	r2, r2, #14
 19153 01c8 614B     		ldr	r3, .L1301+48
 19154 01ca 1A60     		str	r2, [r3]
 248:screens.c     **** 							if( !NetOnKeyPressed ) // Not previously set
 19155              		.loc 1 248 0
 19156 01cc 6D4B     		ldr	r3, .L1301+100
 19157 01ce 1B78     		ldrb	r3, [r3]
 19158 01d0 002B     		cmp	r3, #0
 19159 01d2 05D1     		bne	.L1095
 250:screens.c     **** 								NetOnKeyPressed = 1; // Set
 19160              		.loc 1 250 0
 19161 01d4 0122     		mov	r2, #1
 19162 01d6 6B4B     		ldr	r3, .L1301+100
 19163 01d8 1A70     		strb	r2, [r3]
 252:screens.c     **** 								BeakEngagePulseCount = 0UL; // Resetting IP4 'Beak Engage' pulse count
 19164              		.loc 1 252 0
 19165 01da 0022     		mov	r2, #0
 19166 01dc 6A4B     		ldr	r3, .L1301+104
 19167 01de 1A60     		str	r2, [r3]
 19168              	.L1095:
 255:screens.c     **** 							if( BeakEngagePulseCount >= (unsigned long int)pFac.pf.GW302_BeakEngage ) // 'Beak Engage' P
 19169              		.loc 1 255 0
 19170 01e0 C223     		mov	r3, #194
 19171 01e2 5F4A     		ldr	r2, .L1301+64
 19172 01e4 D25C     		ldrb	r2, [r2, r3]
 19173 01e6 684B     		ldr	r3, .L1301+104
 19174 01e8 1B68     		ldr	r3, [r3]
 19175 01ea 9A42     		cmp	r2, r3
 19176 01ec 03D8     		bhi	.L1094
 257:screens.c     **** 								KeyOpOn |= OP_ROLL_ENGAGE; // OP5 ON: Roller Engage Solenoid (AKA Pre Net Position)
 19177              		.loc 1 257 0
 19178 01ee 9022     		mov	r2, #144
 19179 01f0 5204     		lsl	r2, r2, #17
 19180 01f2 574B     		ldr	r3, .L1301+48
 19181 01f4 1A60     		str	r2, [r3]
 19182              	.L1094:
 261:screens.c     **** 						stagecomp &= ~(NETCUTON | CHAMBOP | CHAMBCLO); // These stages are to be completed next
 19183              		.loc 1 261 0
 19184 01f6 654B     		ldr	r3, .L1301+108
 19185 01f8 1978     		ldrb	r1, [r3]
 19186 01fa 0E22     		mov	r2, #14
 19187 01fc 9143     		bic	r1, r2
 19188 01fe 0122     		mov	r2, #1
 19189 0200 0A43     		orr	r2, r1
 19190 0202 1A70     		strb	r2, [r3]
 19191 0204 28E1     		b	.L1076
 19192              	.L1092:
 265:screens.c     **** 						switch( Stage )
 19193              		.loc 1 265 0
 19194 0206 624B     		ldr	r3, .L1301+112
 19195 0208 1A78     		ldrb	r2, [r3]
 19196 020a 082A     		cmp	r2, #8
 19197 020c 00D9     		bls	.LCB18523
 19198 020e 23E1     		b	.L1076	@long jump
 19199              	.LCB18523:
 19200 0210 9300     		lsl	r3, r2, #2
 19201 0212 604A     		ldr	r2, .L1301+116
 19202 0214 D358     		ldr	r3, [r2, r3]
 19203 0216 9F46     		mov	pc, r3
 19204              		.section	.rodata.mainscreen,"a",%progbits
 19205              		.align	2
 19206              	.L1100:
 19207 0000 18020000 		.word	.L1096
 19208 0004 18020000 		.word	.L1096
 19209 0008 18020000 		.word	.L1096
 19210 000c 18020000 		.word	.L1096
 19211 0010 18020000 		.word	.L1096
 19212 0014 58040000 		.word	.L1076
 19213 0018 40020000 		.word	.L1097
 19214 001c 64020000 		.word	.L1098
 19215 0020 88020000 		.word	.L1099
 19216              		.section	.text.mainscreen
 19217              	.L1096:
 272:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 19218              		.loc 1 272 0
 19219 0218 554B     		ldr	r3, .L1301+80
 19220 021a DB6B     		ldr	r3, [r3, #60]
 19221 021c 5902     		lsl	r1, r3, #9
 19222 021e 00D4     		bmi	.LCB18540
 19223 0220 1AE1     		b	.L1076	@long jump
 19224              	.LCB18540:
 274:screens.c     **** 								if( SequenceInProgress )
 19225              		.loc 1 274 0
 19226 0222 5D4B     		ldr	r3, .L1301+120
 19227 0224 1B78     		ldrb	r3, [r3]
 19228 0226 002B     		cmp	r3, #0
 19229 0228 04D0     		beq	.L1101
 276:screens.c     **** 									SequenceInProgress = 0;								
 19230              		.loc 1 276 0
 19231 022a 0022     		mov	r2, #0
 19232 022c 5A4B     		ldr	r3, .L1301+120
 19233 022e 1A70     		strb	r2, [r3]
 277:screens.c     **** 									AllSeqOpOff();  // All OPs turned off (& remain off while button held down)
 19234              		.loc 1 277 0
 19235 0230 FFF7FEFF 		bl	AllSeqOpOff
 19236              	.LVL1578:
 19237              	.L1101:
 279:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 19238              		.loc 1 279 0
 19239 0234 0123     		mov	r3, #1
 19240 0236 594A     		ldr	r2, .L1301+124
 19241 0238 1370     		strb	r3, [r2]
 280:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 19242              		.loc 1 280 0
 19243 023a 594A     		ldr	r2, .L1301+128
 19244 023c 1370     		strb	r3, [r2]
 19245 023e 0BE1     		b	.L1076
 19246              	.L1097:
 288:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 19247              		.loc 1 288 0
 19248 0240 4B4B     		ldr	r3, .L1301+80
 19249 0242 DB6B     		ldr	r3, [r3, #60]
 19250 0244 5A02     		lsl	r2, r3, #9
 19251 0246 00D4     		bmi	.LCB18566
 19252 0248 06E1     		b	.L1076	@long jump
 19253              	.LCB18566:
 290:screens.c     **** 								if( SequenceInProgress )
 19254              		.loc 1 290 0
 19255 024a 534B     		ldr	r3, .L1301+120
 19256 024c 1B78     		ldrb	r3, [r3]
 19257 024e 002B     		cmp	r3, #0
 19258 0250 02D0     		beq	.L1102
 292:screens.c     **** 									SequenceInProgress = 0;
 19259              		.loc 1 292 0
 19260 0252 0022     		mov	r2, #0
 19261 0254 504B     		ldr	r3, .L1301+120
 19262 0256 1A70     		strb	r2, [r3]
 19263              	.L1102:
 295:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 19264              		.loc 1 295 0
 19265 0258 0123     		mov	r3, #1
 19266 025a 504A     		ldr	r2, .L1301+124
 19267 025c 1370     		strb	r3, [r2]
 296:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 19268              		.loc 1 296 0
 19269 025e 504A     		ldr	r2, .L1301+128
 19270 0260 1370     		strb	r3, [r2]
 19271 0262 F9E0     		b	.L1076
 19272              	.L1098:
 301:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 19273              		.loc 1 301 0
 19274 0264 424B     		ldr	r3, .L1301+80
 19275 0266 DB6B     		ldr	r3, [r3, #60]
 19276 0268 5902     		lsl	r1, r3, #9
 19277 026a 00D4     		bmi	.LCB18590
 19278 026c F4E0     		b	.L1076	@long jump
 19279              	.LCB18590:
 303:screens.c     **** 								if( SequenceInProgress )
 19280              		.loc 1 303 0
 19281 026e 4A4B     		ldr	r3, .L1301+120
 19282 0270 1B78     		ldrb	r3, [r3]
 19283 0272 002B     		cmp	r3, #0
 19284 0274 02D0     		beq	.L1103
 305:screens.c     **** 									SequenceInProgress = 0;								
 19285              		.loc 1 305 0
 19286 0276 0022     		mov	r2, #0
 19287 0278 474B     		ldr	r3, .L1301+120
 19288 027a 1A70     		strb	r2, [r3]
 19289              	.L1103:
 308:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 19290              		.loc 1 308 0
 19291 027c 0123     		mov	r3, #1
 19292 027e 474A     		ldr	r2, .L1301+124
 19293 0280 1370     		strb	r3, [r2]
 309:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 19294              		.loc 1 309 0
 19295 0282 474A     		ldr	r2, .L1301+128
 19296 0284 1370     		strb	r3, [r2]
 19297 0286 E7E0     		b	.L1076
 19298              	.L1099:
 314:screens.c     **** 							if( CHAMBER_CLOSED ) // only enabled if chamber closed
 19299              		.loc 1 314 0
 19300 0288 394B     		ldr	r3, .L1301+80
 19301 028a DB6B     		ldr	r3, [r3, #60]
 19302 028c 5A02     		lsl	r2, r3, #9
 19303 028e 00D4     		bmi	.LCB18614
 19304 0290 E2E0     		b	.L1076	@long jump
 19305              	.LCB18614:
 316:screens.c     **** 								if( SequenceInProgress )
 19306              		.loc 1 316 0
 19307 0292 414B     		ldr	r3, .L1301+120
 19308 0294 1B78     		ldrb	r3, [r3]
 19309 0296 002B     		cmp	r3, #0
 19310 0298 08D0     		beq	.L1104
 318:screens.c     **** 									SequenceInProgress = 0;								
 19311              		.loc 1 318 0
 19312 029a 0022     		mov	r2, #0
 19313 029c 3E4B     		ldr	r3, .L1301+120
 19314 029e 1A70     		strb	r2, [r3]
 320:screens.c     **** 									KeyOpOn |= OP_NET_ON;   // OP2 ON: Net Clutch (AKA Net On)
 19315              		.loc 1 320 0
 19316 02a0 2B4B     		ldr	r3, .L1301+48
 19317 02a2 8022     		mov	r2, #128
 19318 02a4 9203     		lsl	r2, r2, #14
 19319 02a6 1968     		ldr	r1, [r3]
 19320 02a8 0A43     		orr	r2, r1
 19321 02aa 1A60     		str	r2, [r3]
 19322              	.L1104:
 322:screens.c     **** 								StartAutoNet = 1;         // Freeze while key held down
 19323              		.loc 1 322 0
 19324 02ac 0123     		mov	r3, #1
 19325 02ae 3B4A     		ldr	r2, .L1301+124
 19326 02b0 1370     		strb	r3, [r2]
 323:screens.c     **** 								ContinueOnKeyRelease = 1; // Continue when key released 
 19327              		.loc 1 323 0
 19328 02b2 3B4A     		ldr	r2, .L1301+128
 19329 02b4 1370     		strb	r3, [r2]
 19330 02b6 CFE0     		b	.L1076
 19331              	.L1089:
 332:screens.c     **** 				if( ChoppingKnives1WarningOn ) // Chopping knives position Warning on & button pressed when tab
 19332              		.loc 1 332 0
 19333 02b8 2E4B     		ldr	r3, .L1301+84
 19334 02ba 1B78     		ldrb	r3, [r3]
 19335 02bc 002B     		cmp	r3, #0
 19336 02be 06D0     		beq	.L1105
 335:screens.c     **** 					DisableChoppingKnivesWarnings = 1;
 19337              		.loc 1 335 0
 19338 02c0 0122     		mov	r2, #1
 19339 02c2 254B     		ldr	r3, .L1301+56
 19340 02c4 1A70     		strb	r2, [r3]
 336:screens.c     **** 					Kniv1_IPClosed = 0;
 19341              		.loc 1 336 0
 19342 02c6 0022     		mov	r2, #0
 19343 02c8 244B     		ldr	r3, .L1301+60
 19344 02ca 1A70     		strb	r2, [r3]
 19345 02cc C4E0     		b	.L1076
 19346              	.L1105:
 340:screens.c     **** 					RollEngageTurnedOnInManMode = 0; // OP5 OFF: Roller Engage Solenoid (AKA Pre Net Position) -- 
 19347              		.loc 1 340 0
 19348 02ce 0022     		mov	r2, #0
 19349 02d0 344B     		ldr	r3, .L1301+132
 19350 02d2 1A70     		strb	r2, [r3]
 342:screens.c     **** 					KeyOpOn |= OP_NET_CUT;  // OP7 ON: Net Cut Motor (AKA Net Cut Trip)
 19351              		.loc 1 342 0
 19352 02d4 1E4B     		ldr	r3, .L1301+48
 19353 02d6 8022     		mov	r2, #128
 19354 02d8 9201     		lsl	r2, r2, #6
 19355 02da 1968     		ldr	r1, [r3]
 19356 02dc 0A43     		orr	r2, r1
 19357 02de 1A60     		str	r2, [r3]
 344:screens.c     **** 					if( stagecomp == NETFEEDON ) // Only set stage completed flag if previous stage has been compl
 19358              		.loc 1 344 0
 19359 02e0 2A4B     		ldr	r3, .L1301+108
 19360 02e2 1B78     		ldrb	r3, [r3]
 19361 02e4 012B     		cmp	r3, #1
 19362 02e6 00D0     		beq	.LCB18667
 19363 02e8 B6E0     		b	.L1076	@long jump
 19364              	.LCB18667:
 346:screens.c     **** 						stagecomp |= NETCUTON; // Set NET CUT ON stage completed
 19365              		.loc 1 346 0
 19366 02ea 0322     		mov	r2, #3
 19367 02ec 274B     		ldr	r3, .L1301+108
 19368 02ee 1A70     		strb	r2, [r3]
 348:screens.c     **** 						ChamberOpenDelayTime = CODT_CHAMBER_OPEN_TIME; // Setting Chamber open delay for the next sta
 19369              		.loc 1 348 0
 19370 02f0 1422     		mov	r2, #20
 19371 02f2 2D4B     		ldr	r3, .L1301+136
 19372 02f4 1A70     		strb	r2, [r3]
 19373 02f6 AFE0     		b	.L1076
 19374              	.LVL1579:
 19375              	.L1088:
 358:screens.c     **** 		else if( lkey == SW_IR )
 19376              		.loc 1 358 0
 19377 02f8 082D     		cmp	r5, #8
 19378 02fa 00D0     		beq	.LCB18680
 19379 02fc ACE0     		b	.L1076	@long jump
 19380              	.LCB18680:
 360:screens.c     **** 			if( !SecondScreen )  // First Screen
 19381              		.loc 1 360 0
 19382 02fe 0D4A     		ldr	r2, .L1301+20
 19383 0300 1278     		ldrb	r2, [r2]
 19384 0302 002A     		cmp	r2, #0
 19385 0304 7AD1     		bne	.L1106
 362:screens.c     **** 				if( ResetLube )
 19386              		.loc 1 362 0
 19387 0306 114B     		ldr	r3, .L1301+44
 19388              	.LVL1580:
 19389 0308 1B78     		ldrb	r3, [r3]
 19390 030a 002B     		cmp	r3, #0
 19391 030c 4ED0     		beq	.L1107
 364:screens.c     **** 					ResetLubeCount(); // Reset Lube Counter to Lube Alarm (in bales) taking account of bales since
 19392              		.loc 1 364 0
 19393 030e FFF7FEFF 		bl	ResetLubeCount
 19394              	.LVL1581:
 365:screens.c     **** 					ResetLube = 0;
 19395              		.loc 1 365 0
 19396 0312 0022     		mov	r2, #0
 19397 0314 0D4B     		ldr	r3, .L1301+44
 19398 0316 1A70     		strb	r2, [r3]
 19399              	.LVL1582:
 366:screens.c     **** 					changed = 1;
 19400              		.loc 1 366 0
 19401 0318 0124     		mov	r4, #1
 19402 031a 9DE0     		b	.L1076
 19403              	.L1302:
 19404 031c C046C046 		.align	3
 19405              	.L1301:
 19406 0320 00000000 		.word	0
 19407 0324 00002440 		.word	1076101120
 19408 0328 00000000 		.word	startup
 19409 032c 00000000 		.word	adm
 19410 0330 00000000 		.word	windowdepth
 19411 0334 00000000 		.word	SecondScreen
 19412 0338 00A0F001 		.word	32546816
 19413 033c 00000000 		.word	KeyOpOff
 19414 0340 00000000 		.word	screen100
 19415 0344 00000000 		.word	window
 19416 0348 00000000 		.word	Screen100Page
 19417 034c 00000000 		.word	.LANCHOR17
 19418 0350 00000000 		.word	KeyOpOn
 19419 0354 00000000 		.word	.LANCHOR18
 19420 0358 00000000 		.word	DisableChoppingKnivesWarnings
 19421 035c 00000000 		.word	Kniv1_IPClosed
 19422 0360 00000000 		.word	pFac
 19423 0364 00000000 		.word	PF_GW302_BaleStore
 19424 0368 00000000 		.word	SavecalDelayOnMainDisplay
 19425 036c 00000000 		.word	AutoMan
 19426 0370 00F6FFFF 		.word	-2560
 19427 0374 00000000 		.word	ChoppingKnives1WarningOn
 19428 0378 00000000 		.word	pRun
 19429 037c 00000000 		.word	MWarn
 19430 0380 00000000 		.word	looptime
 19431 0384 00000000 		.word	.LANCHOR19
 19432 0388 00000000 		.word	BeakEngagePulseCount
 19433 038c 00000000 		.word	stagecomp
 19434 0390 00000000 		.word	Stage
 19435 0394 00000000 		.word	.L1100
 19436 0398 00000000 		.word	SequenceInProgress
 19437 039c 00000000 		.word	StartAutoNet
 19438 03a0 00000000 		.word	ContinueOnKeyRelease
 19439 03a4 00000000 		.word	RollEngageTurnedOnInManMode
 19440 03a8 00000000 		.word	ChamberOpenDelayTime
 19441              	.LVL1583:
 19442              	.L1107:
 370:screens.c     **** 					if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED ) // 'Chopping Knives Fitted' set to ena
 19443              		.loc 1 370 0
 19444 03ac 8C23     		mov	r3, #140
 19445 03ae 5B00     		lsl	r3, r3, #1
 19446 03b0 D14A     		ldr	r2, .L1303+16
 19447 03b2 D35C     		ldrb	r3, [r2, r3]
 19448 03b4 012B     		cmp	r3, #1
 19449 03b6 4FD1     		bne	.L1076
 372:screens.c     **** 						KeyOpOn = OP_MASTER_DIV;  // OP1 ON: Master Diverter
 19450              		.loc 1 372 0
 19451 03b8 8022     		mov	r2, #128
 19452 03ba 5203     		lsl	r2, r2, #13
 19453 03bc CF4B     		ldr	r3, .L1303+20
 19454 03be 1A60     		str	r2, [r3]
 377:screens.c     **** 						KnivKeyPressed = 1; // Set
 19455              		.loc 1 377 0
 19456 03c0 0122     		mov	r2, #1
 19457 03c2 CF4B     		ldr	r3, .L1303+24
 19458 03c4 1A70     		strb	r2, [r3]
 379:screens.c     **** 						if( KnifePresVolts >= pFac.pf.GW302_KnifePressure )
 19459              		.loc 1 379 0
 19460 03c6 F823     		mov	r3, #248
 19461 03c8 CB4A     		ldr	r2, .L1303+16
 19462 03ca D058     		ldr	r0, [r2, r3]
 19463 03cc CD4B     		ldr	r3, .L1303+28
 19464 03ce 1968     		ldr	r1, [r3]
 19465 03d0 FFF7FEFF 		bl	__aeabi_fcmple
 19466              	.LVL1584:
 19467 03d4 0028     		cmp	r0, #0
 19468 03d6 07D0     		beq	.L1282
 381:screens.c     **** 							if( !KnifePresWasHigh )
 19469              		.loc 1 381 0
 19470 03d8 CB4B     		ldr	r3, .L1303+32
 19471 03da 1B78     		ldrb	r3, [r3]
 19472 03dc 002B     		cmp	r3, #0
 19473 03de 06D1     		bne	.L1110
 384:screens.c     **** 								KnivKeyPressed = 0; // Reset
 19474              		.loc 1 384 0
 19475 03e0 0022     		mov	r2, #0
 19476 03e2 C74B     		ldr	r3, .L1303+24
 19477 03e4 1A70     		strb	r2, [r3]
 19478 03e6 02E0     		b	.L1110
 19479              	.L1282:
 389:screens.c     **** 							KnifePresWasHigh = 0;
 19480              		.loc 1 389 0
 19481 03e8 0022     		mov	r2, #0
 19482 03ea C74B     		ldr	r3, .L1303+32
 19483 03ec 1A70     		strb	r2, [r3]
 19484              	.L1110:
 393:screens.c     **** 						DisableChoppingKnivesWarnings = 1;
 19485              		.loc 1 393 0
 19486 03ee 0122     		mov	r2, #1
 19487 03f0 C64B     		ldr	r3, .L1303+36
 19488 03f2 1A70     		strb	r2, [r3]
 394:screens.c     **** 						Kniv1_IPClosed = 0;					
 19489              		.loc 1 394 0
 19490 03f4 0022     		mov	r2, #0
 19491 03f6 C64B     		ldr	r3, .L1303+40
 19492 03f8 1A70     		strb	r2, [r3]
 19493 03fa 2DE0     		b	.L1076
 19494              	.LVL1585:
 19495              	.L1106:
 400:screens.c     **** 				if( key_status & SW_NEW )
 19496              		.loc 1 400 0
 19497 03fc 002B     		cmp	r3, #0
 19498 03fe 02DA     		bge	.L1111
 402:screens.c     **** 					keytime = 0;
 19499              		.loc 1 402 0
 19500 0400 0022     		mov	r2, #0
 19501 0402 C44B     		ldr	r3, .L1303+44
 19502              	.LVL1586:
 19503 0404 1A70     		strb	r2, [r3]
 19504              	.L1111:
 405:screens.c     **** 				keytime++;
 19505              		.loc 1 405 0
 19506 0406 C34A     		ldr	r2, .L1303+44
 19507 0408 1378     		ldrb	r3, [r2]
 19508 040a 0133     		add	r3, r3, #1
 19509 040c 1B06     		lsl	r3, r3, #24
 19510 040e 1B0E     		lsr	r3, r3, #24
 19511 0410 1370     		strb	r3, [r2]
 407:screens.c     **** 				if( !half_second ) // Flashing bale amount off in side panel 2 every half second
 19512              		.loc 1 407 0
 19513 0412 C14A     		ldr	r2, .L1303+48
 19514 0414 1278     		ldrb	r2, [r2]
 19515 0416 002A     		cmp	r2, #0
 19516 0418 03D1     		bne	.L1112
 409:screens.c     **** 					BaleTotalFlashedOff = 1;
 19517              		.loc 1 409 0
 19518 041a 0121     		mov	r1, #1
 19519 041c BF4A     		ldr	r2, .L1303+52
 19520 041e 1170     		strb	r1, [r2]
 19521 0420 02E0     		b	.L1113
 19522              	.L1112:
 413:screens.c     **** 					BaleTotalFlashedOff = 0;
 19523              		.loc 1 413 0
 19524 0422 0021     		mov	r1, #0
 19525 0424 BD4A     		ldr	r2, .L1303+52
 19526 0426 1170     		strb	r1, [r2]
 19527              	.L1113:
 416:screens.c     **** 				if( keytime >= 12 )
 19528              		.loc 1 416 0
 19529 0428 0B2B     		cmp	r3, #11
 19530 042a 15D9     		bls	.L1076
 418:screens.c     **** 					keytime = 0;
 19531              		.loc 1 418 0
 19532 042c 0022     		mov	r2, #0
 19533 042e B94B     		ldr	r3, .L1303+44
 19534 0430 1A70     		strb	r2, [r3]
 419:screens.c     **** 					if( pFac.pf.BaleTotal[pFac.pf.BaleStore] != PF_GW302_BaleTotal[PF_MIN] )
 19535              		.loc 1 419 0
 19536 0432 B14B     		ldr	r3, .L1303+16
 19537 0434 3822     		mov	r2, #56
 19538 0436 995C     		ldrb	r1, [r3, r2]
 19539 0438 B94A     		ldr	r2, .L1303+56
 19540 043a 5268     		ldr	r2, [r2, #4]
 19541 043c 081D     		add	r0, r1, #4
 19542 043e 8000     		lsl	r0, r0, #2
 19543 0440 C358     		ldr	r3, [r0, r3]
 19544 0442 9342     		cmp	r3, r2
 19545 0444 08D0     		beq	.L1076
 421:screens.c     **** 						pFac.pf.BaleTotal[pFac.pf.BaleStore] = PF_GW302_BaleTotal[PF_MIN]; // 0UL
 19546              		.loc 1 421 0
 19547 0446 AC4B     		ldr	r3, .L1303+16
 19548 0448 C250     		str	r2, [r0, r3]
 422:screens.c     **** 						SavecalDelayOnMainDisplay = 1;
 19549              		.loc 1 422 0
 19550 044a 0122     		mov	r2, #1
 19551 044c B54B     		ldr	r3, .L1303+60
 19552 044e 1A70     		strb	r2, [r3]
 423:screens.c     **** 						buzz_length = 500;
 19553              		.loc 1 423 0
 19554 0450 FA22     		mov	r2, #250
 19555 0452 5200     		lsl	r2, r2, #1
 19556 0454 B44B     		ldr	r3, .L1303+64
 19557 0456 1A60     		str	r2, [r3]
 19558              	.LVL1587:
 19559              	.L1076:
 435:screens.c     **** 	if( !key )
 19560              		.loc 1 435 0
 19561 0458 B44B     		ldr	r3, .L1303+68
 19562 045a 1B68     		ldr	r3, [r3]
 19563 045c 002B     		cmp	r3, #0
 19564 045e 5ED1     		bne	.L1114
 441:screens.c     **** 		KeyOpOff = KeyOpOn; // switch off OPs that were on
 19565              		.loc 1 441 0
 19566 0460 A64B     		ldr	r3, .L1303+20
 19567 0462 B34A     		ldr	r2, .L1303+72
 19568 0464 1968     		ldr	r1, [r3]
 19569 0466 1160     		str	r1, [r2]
 442:screens.c     **** 		KeyOpOn = 0UL;
 19570              		.loc 1 442 0
 19571 0468 0022     		mov	r2, #0
 19572 046a 1A60     		str	r2, [r3]
 448:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 19573              		.loc 1 448 0
 19574 046c AD4B     		ldr	r3, .L1303+60
 19575 046e 1B78     		ldrb	r3, [r3]
 19576 0470 002B     		cmp	r3, #0
 19577 0472 03D1     		bne	.L1115
 448:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 19578              		.loc 1 448 0 is_stmt 0 discriminator 1
 19579 0474 AF4B     		ldr	r3, .L1303+76
 19580 0476 1B78     		ldrb	r3, [r3]
 19581 0478 002B     		cmp	r3, #0
 19582 047a 0BD0     		beq	.L1116
 19583              	.L1115:
 450:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 19584              		.loc 1 450 0 is_stmt 1
 19585 047c AE4B     		ldr	r3, .L1303+80
 19586 047e 1B78     		ldrb	r3, [r3]
 19587 0480 032B     		cmp	r3, #3
 19588 0482 07D9     		bls	.L1116
 452:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 19589              		.loc 1 452 0
 19590 0484 0023     		mov	r3, #0
 19591 0486 A74A     		ldr	r2, .L1303+60
 19592 0488 1370     		strb	r3, [r2]
 453:screens.c     **** 				SavecalDelayWithinMenus = 0;
 19593              		.loc 1 453 0
 19594 048a AA4A     		ldr	r2, .L1303+76
 19595 048c 1370     		strb	r3, [r2]
 454:screens.c     **** 				savecal = 1;
 19596              		.loc 1 454 0
 19597 048e 0122     		mov	r2, #1
 19598 0490 AA4B     		ldr	r3, .L1303+84
 19599 0492 1A70     		strb	r2, [r3]
 19600              	.L1116:
 462:screens.c     **** 		if( ContinueOnKeyRelease )
 19601              		.loc 1 462 0
 19602 0494 AA4B     		ldr	r3, .L1303+88
 19603 0496 1B78     		ldrb	r3, [r3]
 19604 0498 002B     		cmp	r3, #0
 19605 049a 04D0     		beq	.L1117
 464:screens.c     **** 			ContinueOnKeyRelease = 0;
 19606              		.loc 1 464 0
 19607 049c 0023     		mov	r3, #0
 19608 049e A84A     		ldr	r2, .L1303+88
 19609 04a0 1370     		strb	r3, [r2]
 466:screens.c     **** 			StartAutoNet = 0; // Continue 
 19610              		.loc 1 466 0
 19611 04a2 A84A     		ldr	r2, .L1303+92
 19612 04a4 1370     		strb	r3, [r2]
 19613              	.L1117:
 474:screens.c     **** 		NetOnKeyPressed = 0; // Reset as soon as key released
 19614              		.loc 1 474 0
 19615 04a6 0023     		mov	r3, #0
 19616 04a8 A74A     		ldr	r2, .L1303+96
 19617 04aa 1370     		strb	r3, [r2]
 481:screens.c     **** 		DisableChoppingKnivesWarnings = 0; // keeps the warning on the screen after IP2 or IP6 closes
 19618              		.loc 1 481 0
 19619 04ac 974A     		ldr	r2, .L1303+36
 19620 04ae 1370     		strb	r3, [r2]
 483:screens.c     **** 		KnivKeyPressed = 0; // reset as soon as key released		
 19621              		.loc 1 483 0
 19622 04b0 934A     		ldr	r2, .L1303+24
 19623 04b2 1370     		strb	r3, [r2]
 484:screens.c     **** 		if( KnivKeyPressedAndOutputTurnedOn ) // if key (now released) was pressed for more than Diverter
 19624              		.loc 1 484 0
 19625 04b4 A54B     		ldr	r3, .L1303+100
 19626 04b6 1B78     		ldrb	r3, [r3]
 19627 04b8 002B     		cmp	r3, #0
 19628 04ba 0AD0     		beq	.L1118
 486:screens.c     **** 			KeyOpOn |= OP_MASTER_DIV;
 19629              		.loc 1 486 0
 19630 04bc 8022     		mov	r2, #128
 19631 04be 5203     		lsl	r2, r2, #13
 19632 04c0 8E4B     		ldr	r3, .L1303+20
 19633 04c2 1A60     		str	r2, [r3]
 487:screens.c     **** 			if( swrel > 4 ) // fixed period of 0.5s
 19634              		.loc 1 487 0
 19635 04c4 9C4B     		ldr	r3, .L1303+80
 19636 04c6 1B78     		ldrb	r3, [r3]
 19637 04c8 042B     		cmp	r3, #4
 19638 04ca 02D9     		bls	.L1118
 489:screens.c     **** 				KnivKeyPressedAndOutputTurnedOn = 0; // reset after fixed period to turn Master OP off
 19639              		.loc 1 489 0
 19640 04cc 0022     		mov	r2, #0
 19641 04ce 9F4B     		ldr	r3, .L1303+100
 19642 04d0 1A70     		strb	r2, [r3]
 19643              	.L1118:
 500:screens.c     **** 		BaleTotalFlashedOff = 0;
 19644              		.loc 1 500 0
 19645 04d2 0023     		mov	r3, #0
 19646 04d4 914A     		ldr	r2, .L1303+52
 19647 04d6 1370     		strb	r3, [r2]
 506:screens.c     **** 		FloorKeyPressed = 0; // reset as soon as key released 
 19648              		.loc 1 506 0
 19649 04d8 9D4A     		ldr	r2, .L1303+104
 19650 04da 1370     		strb	r3, [r2]
 507:screens.c     **** 		if( FloorKeyPressedAndOutputTurnedOn ) // if key (now released) was pressed for more than Diverte
 19651              		.loc 1 507 0
 19652 04dc 9D4B     		ldr	r3, .L1303+108
 19653 04de 1B78     		ldrb	r3, [r3]
 19654 04e0 002B     		cmp	r3, #0
 19655 04e2 0CD0     		beq	.L1119
 509:screens.c     **** 			KeyOpOn |= OP_MASTER_DIV;
 19656              		.loc 1 509 0
 19657 04e4 854B     		ldr	r3, .L1303+20
 19658 04e6 8022     		mov	r2, #128
 19659 04e8 5203     		lsl	r2, r2, #13
 19660 04ea 1968     		ldr	r1, [r3]
 19661 04ec 0A43     		orr	r2, r1
 19662 04ee 1A60     		str	r2, [r3]
 510:screens.c     **** 			if( swrel > 4 ) // fixed period of 0.5s
 19663              		.loc 1 510 0
 19664 04f0 914B     		ldr	r3, .L1303+80
 19665 04f2 1B78     		ldrb	r3, [r3]
 19666 04f4 042B     		cmp	r3, #4
 19667 04f6 02D9     		bls	.L1119
 512:screens.c     **** 				FloorKeyPressedAndOutputTurnedOn = 0; // reset after fixed period to turn Master OP off
 19668              		.loc 1 512 0
 19669 04f8 0022     		mov	r2, #0
 19670 04fa 964B     		ldr	r3, .L1303+108
 19671 04fc 1A70     		strb	r2, [r3]
 19672              	.L1119:
 520:screens.c     **** 		if( KnifePresVolts >= pFac.pf.GW302_KnifePressure )
 19673              		.loc 1 520 0
 19674 04fe F823     		mov	r3, #248
 19675 0500 7D4A     		ldr	r2, .L1303+16
 19676 0502 D058     		ldr	r0, [r2, r3]
 19677 0504 7F4B     		ldr	r3, .L1303+28
 19678 0506 1968     		ldr	r1, [r3]
 19679 0508 FFF7FEFF 		bl	__aeabi_fcmple
 19680              	.LVL1588:
 19681 050c 0028     		cmp	r0, #0
 19682 050e 03D0     		beq	.L1283
 522:screens.c     **** 			KnifePresWasHigh = 1;
 19683              		.loc 1 522 0
 19684 0510 0122     		mov	r2, #1
 19685 0512 7D4B     		ldr	r3, .L1303+32
 19686 0514 1A70     		strb	r2, [r3]
 19687 0516 02E0     		b	.L1114
 19688              	.L1283:
 526:screens.c     **** 			KnifePresWasHigh = 0;
 19689              		.loc 1 526 0
 19690 0518 0022     		mov	r2, #0
 19691 051a 7B4B     		ldr	r3, .L1303+32
 19692 051c 1A70     		strb	r2, [r3]
 19693              	.L1114:
 535:screens.c     **** 	if( KnivKeyPressed && ( looptime >= ( (unsigned char)(pFac.pf.GW302_DiverterDelay * 10.0) ) ) )
 19694              		.loc 1 535 0
 19695 051e 784B     		ldr	r3, .L1303+24
 19696 0520 1B78     		ldrb	r3, [r3]
 19697 0522 002B     		cmp	r3, #0
 19698 0524 1AD0     		beq	.L1122
 535:screens.c     **** 	if( KnivKeyPressed && ( looptime >= ( (unsigned char)(pFac.pf.GW302_DiverterDelay * 10.0) ) ) )
 19699              		.loc 1 535 0 is_stmt 0 discriminator 1
 19700 0526 8023     		mov	r3, #128
 19701 0528 5B00     		lsl	r3, r3, #1
 19702 052a 734A     		ldr	r2, .L1303+16
 19703 052c D058     		ldr	r0, [r2, r3]
 19704 052e FFF7FEFF 		bl	__aeabi_f2d
 19705              	.LVL1589:
 19706 0532 6E4B     		ldr	r3, .L1303+4
 19707 0534 6C4A     		ldr	r2, .L1303
 19708 0536 FFF7FEFF 		bl	__aeabi_dmul
 19709              	.LVL1590:
 19710 053a FFF7FEFF 		bl	__aeabi_d2uiz
 19711              	.LVL1591:
 19712 053e 0006     		lsl	r0, r0, #24
 19713 0540 000E     		lsr	r0, r0, #24
 19714 0542 854B     		ldr	r3, .L1303+112
 19715 0544 1B78     		ldrb	r3, [r3]
 19716 0546 9842     		cmp	r0, r3
 19717 0548 08D8     		bhi	.L1122
 537:screens.c     **** 		KeyOpOn |= OP_KNIV_DIV; // OP3 ON: Knife Diverter (AKA Knives Diverter)
 19718              		.loc 1 537 0 is_stmt 1
 19719 054a 6C4B     		ldr	r3, .L1303+20
 19720 054c 8022     		mov	r2, #128
 19721 054e D203     		lsl	r2, r2, #15
 19722 0550 1968     		ldr	r1, [r3]
 19723 0552 0A43     		orr	r2, r1
 19724 0554 1A60     		str	r2, [r3]
 538:screens.c     **** 		KnivKeyPressedAndOutputTurnedOn = 1;
 19725              		.loc 1 538 0
 19726 0556 0122     		mov	r2, #1
 19727 0558 7C4B     		ldr	r3, .L1303+100
 19728 055a 1A70     		strb	r2, [r3]
 19729              	.L1122:
 545:screens.c     **** 	if( FloorKeyPressed && ( looptime >= ( (unsigned char)(pFac.pf.GW302_DiverterDelay * 10.0) ) ) )
 19730              		.loc 1 545 0
 19731 055c 7C4B     		ldr	r3, .L1303+104
 19732 055e 1B78     		ldrb	r3, [r3]
 19733 0560 002B     		cmp	r3, #0
 19734 0562 1AD0     		beq	.L1123
 545:screens.c     **** 	if( FloorKeyPressed && ( looptime >= ( (unsigned char)(pFac.pf.GW302_DiverterDelay * 10.0) ) ) )
 19735              		.loc 1 545 0 is_stmt 0 discriminator 1
 19736 0564 8023     		mov	r3, #128
 19737 0566 5B00     		lsl	r3, r3, #1
 19738 0568 634A     		ldr	r2, .L1303+16
 19739 056a D058     		ldr	r0, [r2, r3]
 19740 056c FFF7FEFF 		bl	__aeabi_f2d
 19741              	.LVL1592:
 19742 0570 5E4B     		ldr	r3, .L1303+4
 19743 0572 5D4A     		ldr	r2, .L1303
 19744 0574 FFF7FEFF 		bl	__aeabi_dmul
 19745              	.LVL1593:
 19746 0578 FFF7FEFF 		bl	__aeabi_d2uiz
 19747              	.LVL1594:
 19748 057c 0006     		lsl	r0, r0, #24
 19749 057e 000E     		lsr	r0, r0, #24
 19750 0580 754B     		ldr	r3, .L1303+112
 19751 0582 1B78     		ldrb	r3, [r3]
 19752 0584 9842     		cmp	r0, r3
 19753 0586 08D8     		bhi	.L1123
 547:screens.c     **** 		KeyOpOn |= OP_FLOOR_DIV; // OP4 ON: Floor Diverter
 19754              		.loc 1 547 0 is_stmt 1
 19755 0588 5C4B     		ldr	r3, .L1303+20
 19756 058a 8022     		mov	r2, #128
 19757 058c 1204     		lsl	r2, r2, #16
 19758 058e 1968     		ldr	r1, [r3]
 19759 0590 0A43     		orr	r2, r1
 19760 0592 1A60     		str	r2, [r3]
 548:screens.c     **** 		FloorKeyPressedAndOutputTurnedOn = 1;
 19761              		.loc 1 548 0
 19762 0594 0122     		mov	r2, #1
 19763 0596 6F4B     		ldr	r3, .L1303+108
 19764 0598 1A70     		strb	r2, [r3]
 19765              	.L1123:
 555:screens.c     **** 	KeyOpOff &= ~KeyOpOn; // do not switch OFF the ops that are to turned ON
 19766              		.loc 1 555 0
 19767 059a 654B     		ldr	r3, .L1303+72
 19768 059c 574A     		ldr	r2, .L1303+20
 19769 059e 1268     		ldr	r2, [r2]
 19770 05a0 1968     		ldr	r1, [r3]
 19771 05a2 9143     		bic	r1, r2
 19772 05a4 1960     		str	r1, [r3]
 565:screens.c     **** 	draw_box( adm, 113, 1, 158, 4+9, CLEAR );  // Clearing area on right & top  
 19773              		.loc 1 565 0
 19774 05a6 0D23     		mov	r3, #13
 19775 05a8 0093     		str	r3, [sp]
 19776 05aa 4023     		mov	r3, #64
 19777 05ac 0193     		str	r3, [sp, #4]
 19778 05ae 6B48     		ldr	r0, .L1303+116
 19779 05b0 7121     		mov	r1, #113
 19780 05b2 0122     		mov	r2, #1
 19781 05b4 9E23     		mov	r3, #158
 19782 05b6 FFF7FEFF 		bl	draw_box
 19783              	.LVL1595:
 566:screens.c     **** 	write_bitmap( adm, AutoMan? MODEAUTO:MODEMAN, 113, 4, OR );
 19784              		.loc 1 566 0
 19785 05ba 694B     		ldr	r3, .L1303+120
 19786 05bc 1B78     		ldrb	r3, [r3]
 19787 05be 002B     		cmp	r3, #0
 19788 05c0 01D0     		beq	.L1254
 19789 05c2 6849     		ldr	r1, .L1303+124
 19790 05c4 00E0     		b	.L1124
 19791              	.L1254:
 19792 05c6 6849     		ldr	r1, .L1303+128
 19793              	.L1124:
 566:screens.c     **** 	write_bitmap( adm, AutoMan? MODEAUTO:MODEMAN, 113, 4, OR );
 19794              		.loc 1 566 0 is_stmt 0 discriminator 3
 19795 05c8 0223     		mov	r3, #2
 19796 05ca 0093     		str	r3, [sp]
 19797 05cc 6348     		ldr	r0, .L1303+116
 19798 05ce 7122     		mov	r2, #113
 19799 05d0 0423     		mov	r3, #4
 19800 05d2 FFF7FEFF 		bl	write_bitmap
 19801              	.LVL1596:
 574:screens.c     **** 	if( (SecondScreen && (pRun.pr.LubeCounter > 0)) ||      // ( Second Screen AND if Lube Count Alarm
 19802              		.loc 1 574 0 is_stmt 1 discriminator 3
 19803 05d6 654B     		ldr	r3, .L1303+132
 19804 05d8 1B78     		ldrb	r3, [r3]
 19805 05da 002B     		cmp	r3, #0
 19806 05dc 04D0     		beq	.L1125
 574:screens.c     **** 	if( (SecondScreen && (pRun.pr.LubeCounter > 0)) ||      // ( Second Screen AND if Lube Count Alarm
 19807              		.loc 1 574 0 is_stmt 0 discriminator 1
 19808 05de 644B     		ldr	r3, .L1303+136
 19809 05e0 0622     		mov	r2, #6
 19810 05e2 9B5E     		ldrsh	r3, [r3, r2]
 19811 05e4 002B     		cmp	r3, #0
 19812 05e6 03DC     		bgt	.L1126
 19813              	.L1125:
 575:screens.c     **** 			(MWarn & MW_DENSITYPRESS)                       )   // Density Pressure Too High Warning present
 19814              		.loc 1 575 0 is_stmt 1 discriminator 2
 19815 05e8 624B     		ldr	r3, .L1303+140
 19816 05ea 1B78     		ldrb	r3, [r3]
 574:screens.c     **** 	if( (SecondScreen && (pRun.pr.LubeCounter > 0)) ||      // ( Second Screen AND if Lube Count Alarm
 19817              		.loc 1 574 0 discriminator 2
 19818 05ec D907     		lsl	r1, r3, #31
 19819 05ee 12D5     		bpl	.L1127
 19820              	.L1126:
 577:screens.c     **** 		if( !(looptime % 5) )
 19821              		.loc 1 577 0
 19822 05f0 594B     		ldr	r3, .L1303+112
 19823 05f2 1878     		ldrb	r0, [r3]
 19824 05f4 0521     		mov	r1, #5
 19825 05f6 FFF7FEFF 		bl	__aeabi_uidivmod
 19826              	.LVL1597:
 19827 05fa 0906     		lsl	r1, r1, #24
 19828 05fc 0BD1     		bne	.L1127
 579:screens.c     **** 			TempIntDPV = (unsigned int)(DensityPresVolts * 50.0); // 1 V equivalent to 50 bar
 19829              		.loc 1 579 0
 19830 05fe 5E4B     		ldr	r3, .L1303+144
 19831 0600 1868     		ldr	r0, [r3]
 19832 0602 FFF7FEFF 		bl	__aeabi_f2d
 19833              	.LVL1598:
 19834 0606 3A4A     		ldr	r2, .L1303+8
 19835 0608 3A4B     		ldr	r3, .L1303+12
 19836 060a FFF7FEFF 		bl	__aeabi_dmul
 19837              	.LVL1599:
 19838 060e FFF7FEFF 		bl	__aeabi_d2uiz
 19839              	.LVL1600:
 19840 0612 5A4B     		ldr	r3, .L1303+148
 19841 0614 1860     		str	r0, [r3]
 19842              	.L1127:
 584:screens.c     **** 	draw_box( adm, 3, 13, 35, 23, CLEAR ); // Clearing -- needs to be done for both Screen 1 & 2
 19843              		.loc 1 584 0
 19844 0616 1723     		mov	r3, #23
 19845 0618 0093     		str	r3, [sp]
 19846 061a 4023     		mov	r3, #64
 19847 061c 0193     		str	r3, [sp, #4]
 19848 061e 4F48     		ldr	r0, .L1303+116
 19849 0620 0321     		mov	r1, #3
 19850 0622 0D22     		mov	r2, #13
 19851 0624 2323     		mov	r3, #35
 19852 0626 FFF7FEFF 		bl	draw_box
 19853              	.LVL1601:
 587:screens.c     **** 	if( SecondScreen && (pRun.pr.LubeCounter > 0) ) // Second screen & Lube Count Alarm is NOT present
 19854              		.loc 1 587 0
 19855 062a 504B     		ldr	r3, .L1303+132
 19856 062c 1B78     		ldrb	r3, [r3]
 19857 062e 002B     		cmp	r3, #0
 19858 0630 1AD0     		beq	.L1128
 587:screens.c     **** 	if( SecondScreen && (pRun.pr.LubeCounter > 0) ) // Second screen & Lube Count Alarm is NOT present
 19859              		.loc 1 587 0 is_stmt 0 discriminator 1
 19860 0632 4F4B     		ldr	r3, .L1303+136
 19861 0634 0622     		mov	r2, #6
 19862 0636 9B5E     		ldrsh	r3, [r3, r2]
 19863 0638 002B     		cmp	r3, #0
 19864 063a 15DD     		ble	.L1128
 589:screens.c     **** 		sprintf( tstring, "%3u", TempIntDPV );
 19865              		.loc 1 589 0 is_stmt 1
 19866 063c 4F4B     		ldr	r3, .L1303+148
 19867 063e 1A68     		ldr	r2, [r3]
 19868 0640 0CA8     		add	r0, sp, #48
 19869 0642 4F49     		ldr	r1, .L1303+152
 19870 0644 FFF7FEFF 		bl	sprintf
 19871              	.LVL1602:
 590:screens.c     **** 		display_f1_text( tstring, TSMAX, 3, 9+6, FIXED );
 19872              		.loc 1 590 0
 19873 0648 0023     		mov	r3, #0
 19874 064a 0093     		str	r3, [sp]
 19875 064c 0CA8     		add	r0, sp, #48
 19876 064e 1A21     		mov	r1, #26
 19877 0650 0322     		mov	r2, #3
 19878 0652 0F23     		mov	r3, #15
 19879 0654 FFF7FEFF 		bl	display_f1_text
 19880              	.LVL1603:
 591:screens.c     **** 		write_bitmap( adm, BAR_UNIT,  3+(6*3)+2, 9+6, OR );
 19881              		.loc 1 591 0
 19882 0658 0223     		mov	r3, #2
 19883 065a 0093     		str	r3, [sp]
 19884 065c 3F48     		ldr	r0, .L1303+116
 19885 065e 4949     		ldr	r1, .L1303+156
 19886 0660 1722     		mov	r2, #23
 19887 0662 0F23     		mov	r3, #15
 19888 0664 FFF7FEFF 		bl	write_bitmap
 19889              	.LVL1604:
 19890              	.L1128:
 598:screens.c     **** 	draw_box( adm, 129, 18, (129+(28-1)), 106, CLEAR ); // Clearing info boxes area
 19891              		.loc 1 598 0
 19892 0668 6A23     		mov	r3, #106
 19893 066a 0093     		str	r3, [sp]
 19894 066c 4023     		mov	r3, #64
 19895 066e 0193     		str	r3, [sp, #4]
 19896 0670 3A48     		ldr	r0, .L1303+116
 19897 0672 8121     		mov	r1, #129
 19898 0674 1222     		mov	r2, #18
 19899 0676 9C23     		mov	r3, #156
 19900 0678 FFF7FEFF 		bl	draw_box
 19901              	.LVL1605:
 600:screens.c     **** 	if( !SecondScreen )  // First Screen
 19902              		.loc 1 600 0
 19903 067c 3B4B     		ldr	r3, .L1303+132
 19904 067e 1B78     		ldrb	r3, [r3]
 19905 0680 002B     		cmp	r3, #0
 19906 0682 08D1     		bne	.L1129
 602:screens.c     **** 		write_bitmap( adm, SIDEDISPLAY_1,  129, 18, OR ); // Info box icons: Net layers; Bale diameter; K
 19907              		.loc 1 602 0
 19908 0684 0223     		mov	r3, #2
 19909 0686 0093     		str	r3, [sp]
 19910 0688 3448     		ldr	r0, .L1303+116
 19911 068a 3F49     		ldr	r1, .L1303+160
 19912 068c 8122     		mov	r2, #129
 19913 068e 1223     		mov	r3, #18
 19914 0690 FFF7FEFF 		bl	write_bitmap
 19915              	.LVL1606:
 19916 0694 07E0     		b	.L1130
 19917              	.L1129:
 606:screens.c     **** 		write_bitmap( adm, SIDEDISPLAY_2,  129, 18, OR ); // Info box icons: Sub-total bale count; Supply
 19918              		.loc 1 606 0
 19919 0696 0223     		mov	r3, #2
 19920 0698 0093     		str	r3, [sp]
 19921 069a 3048     		ldr	r0, .L1303+116
 19922 069c 3B49     		ldr	r1, .L1303+164
 19923 069e 8122     		mov	r2, #129
 19924 06a0 1223     		mov	r3, #18
 19925 06a2 FFF7FEFF 		bl	write_bitmap
 19926              	.LVL1607:
 19927              	.L1130:
 610:screens.c     **** 	if( !SecondScreen )  // First Screen
 19928              		.loc 1 610 0
 19929 06a6 314B     		ldr	r3, .L1303+132
 19930 06a8 1B78     		ldrb	r3, [r3]
 19931 06aa 002B     		cmp	r3, #0
 19932 06ac 74D1     		bne	.L1131
 613:screens.c     **** 		display_number( (float)pFac.pf.GW302_NetLayers[pFac.pf.GW302_BaleProfile], 
 19933              		.loc 1 613 0
 19934 06ae 124B     		ldr	r3, .L1303+16
 19935 06b0 3A22     		mov	r2, #58
 19936 06b2 9A5C     		ldrb	r2, [r3, r2]
 19937 06b4 1432     		add	r2, r2, #20
 19938 06b6 9200     		lsl	r2, r2, #2
 19939 06b8 D058     		ldr	r0, [r2, r3]
 19940 06ba 354B     		ldr	r3, .L1303+168
 19941 06bc 5968     		ldr	r1, [r3, #4]
 19942 06be 9A68     		ldr	r2, [r3, #8]
 19943 06c0 0123     		mov	r3, #1
 19944 06c2 0093     		str	r3, [sp]
 19945 06c4 9623     		mov	r3, #150
 19946 06c6 0193     		str	r3, [sp, #4]
 19947 06c8 2323     		mov	r3, #35
 19948 06ca 0293     		str	r3, [sp, #8]
 19949 06cc 1223     		mov	r3, #18
 19950 06ce 0393     		str	r3, [sp, #12]
 19951 06d0 1023     		mov	r3, #16
 19952 06d2 0493     		str	r3, [sp, #16]
 19953 06d4 2F4B     		ldr	r3, .L1303+172
 19954 06d6 0593     		str	r3, [sp, #20]
 19955 06d8 0023     		mov	r3, #0
 19956 06da 0693     		str	r3, [sp, #24]
 19957 06dc 0793     		str	r3, [sp, #28]
 19958 06de FE23     		mov	r3, #254
 19959 06e0 9B05     		lsl	r3, r3, #22
 19960 06e2 FFF7FEFF 		bl	display_number
 19961              	.LVL1608:
 19962 06e6 87E0     		b	.L1132
 19963              	.L1304:
 19964              		.align	3
 19965              	.L1303:
 19966 06e8 00000000 		.word	0
 19967 06ec 00002440 		.word	1076101120
 19968 06f0 00000000 		.word	0
 19969 06f4 00004940 		.word	1078525952
 19970 06f8 00000000 		.word	pFac
 19971 06fc 00000000 		.word	KeyOpOn
 19972 0700 00000000 		.word	.LANCHOR20
 19973 0704 00000000 		.word	KnifePresVolts
 19974 0708 00000000 		.word	KnifePresWasHigh
 19975 070c 00000000 		.word	DisableChoppingKnivesWarnings
 19976 0710 00000000 		.word	Kniv1_IPClosed
 19977 0714 00000000 		.word	keytime
 19978 0718 00000000 		.word	half_second
 19979 071c 00000000 		.word	.LANCHOR21
 19980 0720 00000000 		.word	PF_GW302_BaleTotal
 19981 0724 00000000 		.word	SavecalDelayOnMainDisplay
 19982 0728 00000000 		.word	buzz_length
 19983 072c 00000000 		.word	key
 19984 0730 00000000 		.word	KeyOpOff
 19985 0734 00000000 		.word	SavecalDelayWithinMenus
 19986 0738 00000000 		.word	swrel
 19987 073c 00000000 		.word	savecal
 19988 0740 00000000 		.word	ContinueOnKeyRelease
 19989 0744 00000000 		.word	StartAutoNet
 19990 0748 00000000 		.word	.LANCHOR19
 19991 074c 00000000 		.word	.LANCHOR22
 19992 0750 00000000 		.word	.LANCHOR18
 19993 0754 00000000 		.word	.LANCHOR23
 19994 0758 00000000 		.word	looptime
 19995 075c 00000000 		.word	adm
 19996 0760 00000000 		.word	AutoMan
 19997 0764 00000000 		.word	MODEAUTO
 19998 0768 00000000 		.word	MODEMAN
 19999 076c 00000000 		.word	SecondScreen
 20000 0770 00000000 		.word	pRun
 20001 0774 00000000 		.word	MWarn
 20002 0778 00000000 		.word	DensityPresVolts
 20003 077c 00000000 		.word	.LANCHOR24
 20004 0780 B8030000 		.word	.LC465
 20005 0784 00000000 		.word	BAR_UNIT
 20006 0788 00000000 		.word	SIDEDISPLAY_1
 20007 078c 00000000 		.word	SIDEDISPLAY_2
 20008 0790 00000000 		.word	PF_GW302_NetLayers
 20009 0794 00000000 		.word	RDSfnt1
 20010              	.L1131:
 622:screens.c     **** 		sprintf( tstring, "%1c", Store[pFac.pf.BaleStore]);
 20011              		.loc 1 622 0
 20012 0798 3823     		mov	r3, #56
 20013 079a DD4A     		ldr	r2, .L1305+32
 20014 079c D35C     		ldrb	r3, [r2, r3]
 20015 079e DD4A     		ldr	r2, .L1305+36
 20016 07a0 D25C     		ldrb	r2, [r2, r3]
 20017 07a2 0CA8     		add	r0, sp, #48
 20018 07a4 DC49     		ldr	r1, .L1305+40
 20019 07a6 FFF7FEFF 		bl	sprintf
 20020              	.LVL1609:
 623:screens.c     **** 		display_f1_text( tstring, TSMAX, 148, 22, FIXED );
 20021              		.loc 1 623 0
 20022 07aa 0023     		mov	r3, #0
 20023 07ac 0093     		str	r3, [sp]
 20024 07ae 0CA8     		add	r0, sp, #48
 20025 07b0 1A21     		mov	r1, #26
 20026 07b2 9422     		mov	r2, #148
 20027 07b4 1623     		mov	r3, #22
 20028 07b6 FFF7FEFF 		bl	display_f1_text
 20029              	.LVL1610:
 626:screens.c     **** 		if( BaleTotalFlashedOff )
 20030              		.loc 1 626 0
 20031 07ba D84B     		ldr	r3, .L1305+44
 20032 07bc 1B78     		ldrb	r3, [r3]
 20033 07be 002B     		cmp	r3, #0
 20034 07c0 08D0     		beq	.L1133
 628:screens.c     **** 			display_f1_text( " ", TSMAX, 143, 34, FIXED | CENTER ); // Flashing off
 20035              		.loc 1 628 0
 20036 07c2 0223     		mov	r3, #2
 20037 07c4 0093     		str	r3, [sp]
 20038 07c6 D648     		ldr	r0, .L1305+48
 20039 07c8 1A21     		mov	r1, #26
 20040 07ca 8F22     		mov	r2, #143
 20041 07cc 2223     		mov	r3, #34
 20042 07ce FFF7FEFF 		bl	display_f1_text
 20043              	.LVL1611:
 20044 07d2 11E0     		b	.L1132
 20045              	.L1133:
 632:screens.c     **** 			sprintf ( tstring, "%lu", pFac.pf.BaleTotal[pFac.pf.BaleStore] );
 20046              		.loc 1 632 0
 20047 07d4 CE4B     		ldr	r3, .L1305+32
 20048 07d6 3822     		mov	r2, #56
 20049 07d8 9A5C     		ldrb	r2, [r3, r2]
 20050 07da 0432     		add	r2, r2, #4
 20051 07dc 9200     		lsl	r2, r2, #2
 20052 07de D258     		ldr	r2, [r2, r3]
 20053 07e0 0CA8     		add	r0, sp, #48
 20054 07e2 D049     		ldr	r1, .L1305+52
 20055 07e4 FFF7FEFF 		bl	sprintf
 20056              	.LVL1612:
 633:screens.c     **** 			display_f1_text( tstring, TSMAX, 143, 34, FIXED | CENTER );
 20057              		.loc 1 633 0
 20058 07e8 0223     		mov	r3, #2
 20059 07ea 0093     		str	r3, [sp]
 20060 07ec 0CA8     		add	r0, sp, #48
 20061 07ee 1A21     		mov	r1, #26
 20062 07f0 8F22     		mov	r2, #143
 20063 07f2 2223     		mov	r3, #34
 20064 07f4 FFF7FEFF 		bl	display_f1_text
 20065              	.LVL1613:
 20066              	.L1132:
 638:screens.c     **** 	if( !SecondScreen )  // First Screen
 20067              		.loc 1 638 0
 20068 07f8 CB4B     		ldr	r3, .L1305+56
 20069 07fa 1B78     		ldrb	r3, [r3]
 20070 07fc 002B     		cmp	r3, #0
 20071 07fe 4CD1     		bne	.L1134
 641:screens.c     **** 		if( (float)pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile] > 99.9 ) // Value of the form XX
 20072              		.loc 1 641 0
 20073 0800 C34B     		ldr	r3, .L1305+32
 20074 0802 3A22     		mov	r2, #58
 20075 0804 9A5C     		ldrb	r2, [r3, r2]
 20076 0806 9B18     		add	r3, r3, r2
 20077 0808 3833     		add	r3, r3, #56
 20078 080a D878     		ldrb	r0, [r3, #3]
 20079 080c FFF7FEFF 		bl	__aeabi_ui2f
 20080              	.LVL1614:
 20081 0810 051C     		add	r5, r0, #0
 20082              	.LVL1615:
 20083 0812 FFF7FEFF 		bl	__aeabi_f2d
 20084              	.LVL1616:
 20085 0816 B74B     		ldr	r3, .L1305+4
 20086 0818 B54A     		ldr	r2, .L1305
 20087 081a FFF7FEFF 		bl	__aeabi_dcmpgt
 20088              	.LVL1617:
 20089 081e 0028     		cmp	r0, #0
 20090 0820 1DD0     		beq	.L1284
 644:screens.c     **** 					(float)PF_GW302_BaleDiameter[PF_MIN], (float)PF_GW302_BaleDiameter[PF_MAX],
 20091              		.loc 1 644 0
 20092 0822 C24E     		ldr	r6, .L1305+60
 643:screens.c     **** 			display_number( (float)pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile],
 20093              		.loc 1 643 0
 20094 0824 7078     		ldrb	r0, [r6, #1]
 20095 0826 FFF7FEFF 		bl	__aeabi_ui2f
 20096              	.LVL1618:
 20097 082a 071C     		add	r7, r0, #0
 20098 082c B078     		ldrb	r0, [r6, #2]
 20099 082e FFF7FEFF 		bl	__aeabi_ui2f
 20100              	.LVL1619:
 20101 0832 021C     		add	r2, r0, #0
 20102 0834 0023     		mov	r3, #0
 20103 0836 0093     		str	r3, [sp]
 20104 0838 9221     		mov	r1, #146
 20105 083a 0191     		str	r1, [sp, #4]
 20106 083c 3721     		mov	r1, #55
 20107 083e 0291     		str	r1, [sp, #8]
 20108 0840 1221     		mov	r1, #18
 20109 0842 0391     		str	r1, [sp, #12]
 20110 0844 1021     		mov	r1, #16
 20111 0846 0491     		str	r1, [sp, #16]
 20112 0848 B949     		ldr	r1, .L1305+64
 20113 084a 0591     		str	r1, [sp, #20]
 20114 084c 0693     		str	r3, [sp, #24]
 20115 084e 0793     		str	r3, [sp, #28]
 20116 0850 281C     		add	r0, r5, #0
 20117 0852 391C     		add	r1, r7, #0
 20118 0854 FE23     		mov	r3, #254
 20119 0856 9B05     		lsl	r3, r3, #22
 20120 0858 FFF7FEFF 		bl	display_number
 20121              	.LVL1620:
 20122 085c 6EE0     		b	.L1137
 20123              	.L1284:
 650:screens.c     **** 					(float)PF_GW302_BaleDiameter[PF_MIN], (float)PF_GW302_BaleDiameter[PF_MAX],
 20124              		.loc 1 650 0
 20125 085e B34E     		ldr	r6, .L1305+60
 649:screens.c     **** 			display_number( (float)pFac.pf.GW302_BaleDiameter[pFac.pf.GW302_BaleProfile],
 20126              		.loc 1 649 0
 20127 0860 7078     		ldrb	r0, [r6, #1]
 20128 0862 FFF7FEFF 		bl	__aeabi_ui2f
 20129              	.LVL1621:
 20130 0866 071C     		add	r7, r0, #0
 20131 0868 B078     		ldrb	r0, [r6, #2]
 20132 086a FFF7FEFF 		bl	__aeabi_ui2f
 20133              	.LVL1622:
 20134 086e 021C     		add	r2, r0, #0
 20135 0870 0023     		mov	r3, #0
 20136 0872 0093     		str	r3, [sp]
 20137 0874 9221     		mov	r1, #146
 20138 0876 0191     		str	r1, [sp, #4]
 20139 0878 3721     		mov	r1, #55
 20140 087a 0291     		str	r1, [sp, #8]
 20141 087c 0C21     		mov	r1, #12
 20142 087e 0391     		str	r1, [sp, #12]
 20143 0880 1021     		mov	r1, #16
 20144 0882 0491     		str	r1, [sp, #16]
 20145 0884 AA49     		ldr	r1, .L1305+64
 20146 0886 0591     		str	r1, [sp, #20]
 20147 0888 0693     		str	r3, [sp, #24]
 20148 088a 0793     		str	r3, [sp, #28]
 20149 088c 281C     		add	r0, r5, #0
 20150 088e 391C     		add	r1, r7, #0
 20151 0890 FE23     		mov	r3, #254
 20152 0892 9B05     		lsl	r3, r3, #22
 20153 0894 FFF7FEFF 		bl	display_number
 20154              	.LVL1623:
 20155 0898 50E0     		b	.L1137
 20156              	.LVL1624:
 20157              	.L1134:
 657:screens.c     **** 		if( !(looptime % 5) )
 20158              		.loc 1 657 0
 20159 089a A64B     		ldr	r3, .L1305+68
 20160 089c 1878     		ldrb	r0, [r3]
 20161 089e 0521     		mov	r1, #5
 20162 08a0 FFF7FEFF 		bl	__aeabi_uidivmod
 20163              	.LVL1625:
 20164 08a4 0906     		lsl	r1, r1, #24
 20165 08a6 11D1     		bne	.L1138
 659:screens.c     **** 			TempFloatSV = ((float)AT91C_BASE_ADC0->ADC_CDR7 * ATODIPVOUTSCALE) + ATODIPVOUTDROP;
 20166              		.loc 1 659 0
 20167 08a8 A34B     		ldr	r3, .L1305+72
 20168 08aa D86C     		ldr	r0, [r3, #76]
 20169 08ac FFF7FEFF 		bl	__aeabi_ui2f
 20170              	.LVL1626:
 20171 08b0 FFF7FEFF 		bl	__aeabi_f2d
 20172              	.LVL1627:
 20173 08b4 904A     		ldr	r2, .L1305+8
 20174 08b6 914B     		ldr	r3, .L1305+12
 20175 08b8 FFF7FEFF 		bl	__aeabi_dmul
 20176              	.LVL1628:
 20177 08bc 904A     		ldr	r2, .L1305+16
 20178 08be 914B     		ldr	r3, .L1305+20
 20179 08c0 FFF7FEFF 		bl	__aeabi_dadd
 20180              	.LVL1629:
 20181 08c4 FFF7FEFF 		bl	__aeabi_d2f
 20182              	.LVL1630:
 20183 08c8 9C4B     		ldr	r3, .L1305+76
 20184 08ca 1860     		str	r0, [r3]
 20185              	.L1138:
 663:screens.c     **** 		if( TempFloatSV <= 99.9 )
 20186              		.loc 1 663 0
 20187 08cc 9B4B     		ldr	r3, .L1305+76
 20188 08ce 1D68     		ldr	r5, [r3]
 20189              	.LVL1631:
 20190 08d0 281C     		add	r0, r5, #0
 20191 08d2 FFF7FEFF 		bl	__aeabi_f2d
 20192              	.LVL1632:
 20193 08d6 874B     		ldr	r3, .L1305+4
 20194 08d8 854A     		ldr	r2, .L1305
 20195 08da FFF7FEFF 		bl	__aeabi_dcmple
 20196              	.LVL1633:
 20197 08de 0028     		cmp	r0, #0
 20198 08e0 16D0     		beq	.L1285
 665:screens.c     **** 			display_number( TempFloatSV, 0.0, 0.0, 1.0, DP1, (153-4), (61-1), DW4, RIGHT, &RDSfnt1, NULL, PN
 20199              		.loc 1 665 0
 20200 08e2 0022     		mov	r2, #0
 20201 08e4 0123     		mov	r3, #1
 20202 08e6 0093     		str	r3, [sp]
 20203 08e8 9523     		mov	r3, #149
 20204 08ea 0193     		str	r3, [sp, #4]
 20205 08ec 3C23     		mov	r3, #60
 20206 08ee 0293     		str	r3, [sp, #8]
 20207 08f0 1823     		mov	r3, #24
 20208 08f2 0393     		str	r3, [sp, #12]
 20209 08f4 1023     		mov	r3, #16
 20210 08f6 0493     		str	r3, [sp, #16]
 20211 08f8 8D4B     		ldr	r3, .L1305+64
 20212 08fa 0593     		str	r3, [sp, #20]
 20213 08fc 0023     		mov	r3, #0
 20214 08fe 0693     		str	r3, [sp, #24]
 20215 0900 0793     		str	r3, [sp, #28]
 20216 0902 281C     		add	r0, r5, #0
 20217 0904 111C     		add	r1, r2, #0
 20218 0906 FE23     		mov	r3, #254
 20219 0908 9B05     		lsl	r3, r3, #22
 20220 090a FFF7FEFF 		bl	display_number
 20221              	.LVL1634:
 20222 090e 15E0     		b	.L1137
 20223              	.L1285:
 669:screens.c     **** 			display_number( 99.9, 0.0, 0.0, 1.0, DP1, (153-4), (61-1), DW4, RIGHT, &RDSfnt1, NULL, PNULL );
 20224              		.loc 1 669 0
 20225 0910 0022     		mov	r2, #0
 20226 0912 0123     		mov	r3, #1
 20227 0914 0093     		str	r3, [sp]
 20228 0916 9523     		mov	r3, #149
 20229 0918 0193     		str	r3, [sp, #4]
 20230 091a 3C23     		mov	r3, #60
 20231 091c 0293     		str	r3, [sp, #8]
 20232 091e 1823     		mov	r3, #24
 20233 0920 0393     		str	r3, [sp, #12]
 20234 0922 1023     		mov	r3, #16
 20235 0924 0493     		str	r3, [sp, #16]
 20236 0926 824B     		ldr	r3, .L1305+64
 20237 0928 0593     		str	r3, [sp, #20]
 20238 092a 0023     		mov	r3, #0
 20239 092c 0693     		str	r3, [sp, #24]
 20240 092e 0793     		str	r3, [sp, #28]
 20241 0930 8348     		ldr	r0, .L1305+80
 20242 0932 111C     		add	r1, r2, #0
 20243 0934 FE23     		mov	r3, #254
 20244 0936 9B05     		lsl	r3, r3, #22
 20245 0938 FFF7FEFF 		bl	display_number
 20246              	.LVL1635:
 20247              	.L1137:
 674:screens.c     **** 	if( !SecondScreen )  // First Screen
 20248              		.loc 1 674 0
 20249 093c 7A4B     		ldr	r3, .L1305+56
 20250 093e 1B78     		ldrb	r3, [r3]
 20251 0940 002B     		cmp	r3, #0
 20252 0942 3AD1     		bne	.L1141
 677:screens.c     **** 		if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED )
 20253              		.loc 1 677 0
 20254 0944 8C23     		mov	r3, #140
 20255 0946 5B00     		lsl	r3, r3, #1
 20256 0948 714A     		ldr	r2, .L1305+32
 20257 094a D35C     		ldrb	r3, [r2, r3]
 20258 094c 012B     		cmp	r3, #1
 20259 094e 29D1     		bne	.L1142
 679:screens.c     **** 			if( !(looptime % 5) )
 20260              		.loc 1 679 0
 20261 0950 784B     		ldr	r3, .L1305+68
 20262 0952 1878     		ldrb	r0, [r3]
 20263 0954 0521     		mov	r1, #5
 20264 0956 FFF7FEFF 		bl	__aeabi_uidivmod
 20265              	.LVL1636:
 20266 095a 0906     		lsl	r1, r1, #24
 20267 095c 0BD1     		bne	.L1143
 681:screens.c     **** 				TempIntKPV = (unsigned int)(KnifePresVolts * 50.0); // 1 V equivalent to 50 bar
 20268              		.loc 1 681 0
 20269 095e 794B     		ldr	r3, .L1305+84
 20270 0960 1868     		ldr	r0, [r3]
 20271 0962 FFF7FEFF 		bl	__aeabi_f2d
 20272              	.LVL1637:
 20273 0966 684A     		ldr	r2, .L1305+24
 20274 0968 684B     		ldr	r3, .L1305+28
 20275 096a FFF7FEFF 		bl	__aeabi_dmul
 20276              	.LVL1638:
 20277 096e FFF7FEFF 		bl	__aeabi_d2uiz
 20278              	.LVL1639:
 20279 0972 754B     		ldr	r3, .L1305+88
 20280 0974 1860     		str	r0, [r3]
 20281              	.L1143:
 683:screens.c     **** 			sprintf( tstring, "%3u", TempIntKPV );			 
 20282              		.loc 1 683 0
 20283 0976 744B     		ldr	r3, .L1305+88
 20284 0978 1A68     		ldr	r2, [r3]
 20285 097a 0CA8     		add	r0, sp, #48
 20286 097c 7349     		ldr	r1, .L1305+92
 20287 097e FFF7FEFF 		bl	sprintf
 20288              	.LVL1640:
 684:screens.c     **** 			display_f1_text( tstring, TSMAX, 134, 85, FIXED );
 20289              		.loc 1 684 0
 20290 0982 0023     		mov	r3, #0
 20291 0984 0093     		str	r3, [sp]
 20292 0986 0CA8     		add	r0, sp, #48
 20293 0988 1A21     		mov	r1, #26
 20294 098a 8622     		mov	r2, #134
 20295 098c 5523     		mov	r3, #85
 20296 098e FFF7FEFF 		bl	display_f1_text
 20297              	.LVL1641:
 686:screens.c     **** 			write_bitmap( adm, BAR_UNIT,  138, 94, OR );
 20298              		.loc 1 686 0
 20299 0992 0223     		mov	r3, #2
 20300 0994 0093     		str	r3, [sp]
 20301 0996 6E48     		ldr	r0, .L1305+96
 20302 0998 6E49     		ldr	r1, .L1305+100
 20303 099a 8A22     		mov	r2, #138
 20304 099c 5E23     		mov	r3, #94
 20305 099e FFF7FEFF 		bl	write_bitmap
 20306              	.LVL1642:
 20307 09a2 34E0     		b	.L1144
 20308              	.L1142:
 691:screens.c     **** 			draw_box( adm, (129+2), 72, (129+2)+(28-4), 94, CLEAR );
 20309              		.loc 1 691 0
 20310 09a4 5E23     		mov	r3, #94
 20311 09a6 0093     		str	r3, [sp]
 20312 09a8 4023     		mov	r3, #64
 20313 09aa 0193     		str	r3, [sp, #4]
 20314 09ac 6848     		ldr	r0, .L1305+96
 20315 09ae 8321     		mov	r1, #131
 20316 09b0 4822     		mov	r2, #72
 20317 09b2 9B23     		mov	r3, #155
 20318 09b4 FFF7FEFF 		bl	draw_box
 20319              	.LVL1643:
 20320 09b8 29E0     		b	.L1144
 20321              	.L1141:
 697:screens.c     **** 		display_number( (float)Bar[pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] - 1], 
 20322              		.loc 1 697 0
 20323 09ba 554B     		ldr	r3, .L1305+32
 20324 09bc 3A22     		mov	r2, #58
 20325 09be 9A5C     		ldrb	r2, [r3, r2]
 20326 09c0 9B18     		add	r3, r3, r2
 20327 09c2 4033     		add	r3, r3, #64
 20328 09c4 5B79     		ldrb	r3, [r3, #5]
 20329 09c6 644A     		ldr	r2, .L1305+104
 20330 09c8 D318     		add	r3, r2, r3
 20331 09ca 013B     		sub	r3, r3, #1
 20332 09cc 1878     		ldrb	r0, [r3]
 20333 09ce FFF7FEFF 		bl	__aeabi_ui2f
 20334              	.LVL1644:
 20335 09d2 071C     		add	r7, r0, #0
 698:screens.c     **** 				(float)PF_GW302_BaleDensity[PF_MIN], (float)PF_GW302_BaleDensity[PF_MAX],
 20336              		.loc 1 698 0
 20337 09d4 614D     		ldr	r5, .L1305+108
 697:screens.c     **** 		display_number( (float)Bar[pFac.pf.GW302_BaleDensity[pFac.pf.GW302_BaleProfile] - 1], 
 20338              		.loc 1 697 0
 20339 09d6 6878     		ldrb	r0, [r5, #1]
 20340 09d8 FFF7FEFF 		bl	__aeabi_ui2f
 20341              	.LVL1645:
 20342 09dc 061C     		add	r6, r0, #0
 20343 09de A878     		ldrb	r0, [r5, #2]
 20344 09e0 FFF7FEFF 		bl	__aeabi_ui2f
 20345              	.LVL1646:
 20346 09e4 021C     		add	r2, r0, #0
 20347 09e6 0023     		mov	r3, #0
 20348 09e8 0093     		str	r3, [sp]
 20349 09ea 9821     		mov	r1, #152
 20350 09ec 0191     		str	r1, [sp, #4]
 20351 09ee 5D21     		mov	r1, #93
 20352 09f0 0291     		str	r1, [sp, #8]
 20353 09f2 1221     		mov	r1, #18
 20354 09f4 0391     		str	r1, [sp, #12]
 20355 09f6 1021     		mov	r1, #16
 20356 09f8 0491     		str	r1, [sp, #16]
 20357 09fa 4D49     		ldr	r1, .L1305+64
 20358 09fc 0591     		str	r1, [sp, #20]
 20359 09fe 0693     		str	r3, [sp, #24]
 20360 0a00 0793     		str	r3, [sp, #28]
 20361 0a02 381C     		add	r0, r7, #0
 20362 0a04 311C     		add	r1, r6, #0
 20363 0a06 FE23     		mov	r3, #254
 20364 0a08 9B05     		lsl	r3, r3, #22
 20365 0a0a FFF7FEFF 		bl	display_number
 20366              	.LVL1647:
 20367              	.L1144:
 706:screens.c     **** 	draw_box( adm, 1, 107, 158, 126, CLEAR ); // clear from second to fourth tab
 20368              		.loc 1 706 0
 20369 0a0e 7E23     		mov	r3, #126
 20370 0a10 0093     		str	r3, [sp]
 20371 0a12 4023     		mov	r3, #64
 20372 0a14 0193     		str	r3, [sp, #4]
 20373 0a16 4E48     		ldr	r0, .L1305+96
 20374 0a18 0121     		mov	r1, #1
 20375 0a1a 6B22     		mov	r2, #107
 20376 0a1c 9E23     		mov	r3, #158
 20377 0a1e FFF7FEFF 		bl	draw_box
 20378              	.LVL1648:
 708:screens.c     **** 	if( !SecondScreen )  // First Screen
 20379              		.loc 1 708 0
 20380 0a22 414B     		ldr	r3, .L1305+56
 20381 0a24 1B78     		ldrb	r3, [r3]
 20382 0a26 002B     		cmp	r3, #0
 20383 0a28 00D0     		beq	.LCB19632
 20384 0a2a B5E0     		b	.L1145	@long jump
 20385              	.LCB19632:
 711:screens.c     **** 		write_bitmap( adm, (AutoMan? TABAUTOMAN:TABMAN),   0, 107, OR );
 20386              		.loc 1 711 0
 20387 0a2c 4C4B     		ldr	r3, .L1305+112
 20388 0a2e 1B78     		ldrb	r3, [r3]
 20389 0a30 002B     		cmp	r3, #0
 20390 0a32 01D0     		beq	.L1255
 20391 0a34 4B49     		ldr	r1, .L1305+116
 20392 0a36 00E0     		b	.L1146
 20393              	.L1255:
 20394 0a38 4B49     		ldr	r1, .L1305+120
 20395              	.L1146:
 711:screens.c     **** 		write_bitmap( adm, (AutoMan? TABAUTOMAN:TABMAN),   0, 107, OR );
 20396              		.loc 1 711 0 is_stmt 0 discriminator 3
 20397 0a3a 0223     		mov	r3, #2
 20398 0a3c 0093     		str	r3, [sp]
 20399 0a3e 4448     		ldr	r0, .L1305+96
 20400 0a40 0022     		mov	r2, #0
 20401 0a42 6B23     		mov	r3, #107
 20402 0a44 FFF7FEFF 		bl	write_bitmap
 20403              	.LVL1649:
 714:screens.c     **** 		if( !MWarn && (pRun.pr.LubeCounter <= 0) ) // Lube Count Alarm present (when no other warnings ar
 20404              		.loc 1 714 0 is_stmt 1 discriminator 3
 20405 0a48 484B     		ldr	r3, .L1305+124
 20406 0a4a 1B78     		ldrb	r3, [r3]
 20407 0a4c 002B     		cmp	r3, #0
 20408 0a4e 0DD1     		bne	.L1147
 714:screens.c     **** 		if( !MWarn && (pRun.pr.LubeCounter <= 0) ) // Lube Count Alarm present (when no other warnings ar
 20409              		.loc 1 714 0 is_stmt 0 discriminator 1
 20410 0a50 474B     		ldr	r3, .L1305+128
 20411 0a52 0621     		mov	r1, #6
 20412 0a54 5B5E     		ldrsh	r3, [r3, r1]
 20413 0a56 002B     		cmp	r3, #0
 20414 0a58 08DC     		bgt	.L1147
 716:screens.c     **** 			write_bitmap( adm, TABRESET_LUBECOUNT,  31, 107, OR );
 20415              		.loc 1 716 0 is_stmt 1
 20416 0a5a 0223     		mov	r3, #2
 20417 0a5c 0093     		str	r3, [sp]
 20418 0a5e 3C48     		ldr	r0, .L1305+96
 20419 0a60 4449     		ldr	r1, .L1305+132
 20420 0a62 1F22     		mov	r2, #31
 20421 0a64 6B23     		mov	r3, #107
 20422 0a66 FFF7FEFF 		bl	write_bitmap
 20423              	.LVL1650:
 20424 0a6a 07E0     		b	.L1148
 20425              	.L1147:
 720:screens.c     **** 			write_bitmap( adm, TABNET,    31, 107, OR );
 20426              		.loc 1 720 0
 20427 0a6c 0223     		mov	r3, #2
 20428 0a6e 0093     		str	r3, [sp]
 20429 0a70 3748     		ldr	r0, .L1305+96
 20430 0a72 4149     		ldr	r1, .L1305+136
 20431 0a74 1F22     		mov	r2, #31
 20432 0a76 6B23     		mov	r3, #107
 20433 0a78 FFF7FEFF 		bl	write_bitmap
 20434              	.LVL1651:
 20435              	.L1148:
 724:screens.c     **** 		write_bitmap( adm, TABNAV01,      62, 102, OR );
 20436              		.loc 1 724 0
 20437 0a7c 0223     		mov	r3, #2
 20438 0a7e 0093     		str	r3, [sp]
 20439 0a80 3348     		ldr	r0, .L1305+96
 20440 0a82 3E49     		ldr	r1, .L1305+140
 20441 0a84 3E22     		mov	r2, #62
 20442 0a86 6623     		mov	r3, #102
 20443 0a88 FFF7FEFF 		bl	write_bitmap
 20444              	.LVL1652:
 727:screens.c     **** 		if( pFac.pf.GW302_ChoppingKnivesFitted == CKF_ENABLED ) // 'Chopping Knives Fitted' set to enable
 20445              		.loc 1 727 0
 20446 0a8c 8C23     		mov	r3, #140
 20447 0a8e 5B00     		lsl	r3, r3, #1
 20448 0a90 1F4A     		ldr	r2, .L1305+32
 20449 0a92 D35C     		ldrb	r3, [r2, r3]
 20450 0a94 012B     		cmp	r3, #1
 20451 0a96 0ED1     		bne	.L1149
 729:screens.c     **** 			write_bitmap( adm, ResetLube? TABTICK:TABKNFDIV, 99, 107, OR );
 20452              		.loc 1 729 0
 20453 0a98 394B     		ldr	r3, .L1305+144
 20454 0a9a 1B78     		ldrb	r3, [r3]
 20455 0a9c 002B     		cmp	r3, #0
 20456 0a9e 01D0     		beq	.L1256
 20457 0aa0 3849     		ldr	r1, .L1305+148
 20458 0aa2 00E0     		b	.L1150
 20459              	.L1256:
 20460 0aa4 3849     		ldr	r1, .L1305+152
 20461              	.L1150:
 729:screens.c     **** 			write_bitmap( adm, ResetLube? TABTICK:TABKNFDIV, 99, 107, OR );
 20462              		.loc 1 729 0 is_stmt 0 discriminator 3
 20463 0aa6 0223     		mov	r3, #2
 20464 0aa8 0093     		str	r3, [sp]
 20465 0aaa 2948     		ldr	r0, .L1305+96
 20466 0aac 6322     		mov	r2, #99
 20467 0aae 6B23     		mov	r3, #107
 20468 0ab0 FFF7FEFF 		bl	write_bitmap
 20469              	.LVL1653:
 20470 0ab4 0DE0     		b	.L1151
 20471              	.L1149:
 733:screens.c     **** 			write_bitmap( adm, ResetLube? TABTICK:TAB,       99, 107, OR );			
 20472              		.loc 1 733 0 is_stmt 1
 20473 0ab6 324B     		ldr	r3, .L1305+144
 20474 0ab8 1B78     		ldrb	r3, [r3]
 20475 0aba 002B     		cmp	r3, #0
 20476 0abc 01D0     		beq	.L1257
 20477 0abe 3149     		ldr	r1, .L1305+148
 20478 0ac0 00E0     		b	.L1152
 20479              	.L1257:
 20480 0ac2 3249     		ldr	r1, .L1305+156
 20481              	.L1152:
 733:screens.c     **** 			write_bitmap( adm, ResetLube? TABTICK:TAB,       99, 107, OR );			
 20482              		.loc 1 733 0 is_stmt 0 discriminator 3
 20483 0ac4 0223     		mov	r3, #2
 20484 0ac6 0093     		str	r3, [sp]
 20485 0ac8 2148     		ldr	r0, .L1305+96
 20486 0aca 6322     		mov	r2, #99
 20487 0acc 6B23     		mov	r3, #107
 20488 0ace FFF7FEFF 		bl	write_bitmap
 20489              	.LVL1654:
 20490              	.L1151:
 737:screens.c     **** 		write_bitmap( adm, ResetLube? TABCROSS:TABDIVERT,   130, 107, OR );	    	 
 20491              		.loc 1 737 0 is_stmt 1
 20492 0ad2 2B4B     		ldr	r3, .L1305+144
 20493 0ad4 1B78     		ldrb	r3, [r3]
 20494 0ad6 002B     		cmp	r3, #0
 20495 0ad8 01D0     		beq	.L1258
 20496 0ada 2D49     		ldr	r1, .L1305+160
 20497 0adc 00E0     		b	.L1153
 20498              	.L1258:
 20499 0ade 2D49     		ldr	r1, .L1305+164
 20500              	.L1153:
 737:screens.c     **** 		write_bitmap( adm, ResetLube? TABCROSS:TABDIVERT,   130, 107, OR );	    	 
 20501              		.loc 1 737 0 is_stmt 0 discriminator 3
 20502 0ae0 0223     		mov	r3, #2
 20503 0ae2 0093     		str	r3, [sp]
 20504 0ae4 1A48     		ldr	r0, .L1305+96
 20505 0ae6 8222     		mov	r2, #130
 20506 0ae8 6B23     		mov	r3, #107
 20507 0aea FFF7FEFF 		bl	write_bitmap
 20508              	.LVL1655:
 20509 0aee 78E0     		b	.L1154
 20510              	.L1306:
 20511              		.align	3
 20512              	.L1305:
 20513 0af0 9A999999 		.word	-1717986918
 20514 0af4 99F95840 		.word	1079572889
 20515 0af8 2B12AF22 		.word	581898795
 20516 0afc F12AA23F 		.word	1067592433
 20517 0b00 00000000 		.word	0
 20518 0b04 0000F03F 		.word	1072693248
 20519 0b08 00000000 		.word	0
 20520 0b0c 00004940 		.word	1078525952
 20521 0b10 00000000 		.word	pFac
 20522 0b14 00000000 		.word	Store
 20523 0b18 70040000 		.word	.LC791
 20524 0b1c 00000000 		.word	.LANCHOR21
 20525 0b20 74040000 		.word	.LC794
 20526 0b24 78040000 		.word	.LC796
 20527 0b28 00000000 		.word	SecondScreen
 20528 0b2c 00000000 		.word	PF_GW302_BaleDiameter
 20529 0b30 00000000 		.word	RDSfnt1
 20530 0b34 00000000 		.word	looptime
 20531 0b38 0080FDFF 		.word	-163840
 20532 0b3c 00000000 		.word	.LANCHOR25
 20533 0b40 CDCCC742 		.word	1120390349
 20534 0b44 00000000 		.word	KnifePresVolts
 20535 0b48 00000000 		.word	.LANCHOR26
 20536 0b4c B8030000 		.word	.LC465
 20537 0b50 00000000 		.word	adm
 20538 0b54 00000000 		.word	BAR_UNIT
 20539 0b58 00000000 		.word	Bar
 20540 0b5c 00000000 		.word	PF_GW302_BaleDensity
 20541 0b60 00000000 		.word	AutoMan
 20542 0b64 00000000 		.word	TABAUTOMAN
 20543 0b68 00000000 		.word	TABMAN
 20544 0b6c 00000000 		.word	MWarn
 20545 0b70 00000000 		.word	pRun
 20546 0b74 00000000 		.word	TABRESET_LUBECOUNT
 20547 0b78 00000000 		.word	TABNET
 20548 0b7c 00000000 		.word	TABNAV01
 20549 0b80 00000000 		.word	.LANCHOR17
 20550 0b84 00000000 		.word	TABTICK
 20551 0b88 00000000 		.word	TABKNFDIV
 20552 0b8c 00000000 		.word	TAB
 20553 0b90 00000000 		.word	TABCROSS
 20554 0b94 00000000 		.word	TABDIVERT
 20555              	.L1145:
 741:screens.c     **** 		write_bitmap( adm, TAB_DENSITY_RELEASE,  0, 107, OR ); // DENSITY RELEASE 
 20556              		.loc 1 741 0 is_stmt 1
 20557 0b98 C94D     		ldr	r5, .L1307
 20558 0b9a 0226     		mov	r6, #2
 20559 0b9c 0096     		str	r6, [sp]
 20560 0b9e 281C     		mov	r0, r5
 20561 0ba0 C849     		ldr	r1, .L1307+4
 20562 0ba2 0022     		mov	r2, #0
 20563 0ba4 6B23     		mov	r3, #107
 20564 0ba6 FFF7FEFF 		bl	write_bitmap
 20565              	.LVL1656:
 742:screens.c     **** 		write_bitmap( adm, TAB_NET_CUT,  		31, 107, OR ); // NET CUT
 20566              		.loc 1 742 0
 20567 0baa 0096     		str	r6, [sp]
 20568 0bac 281C     		mov	r0, r5
 20569 0bae C649     		ldr	r1, .L1307+8
 20570 0bb0 1F22     		mov	r2, #31
 20571 0bb2 6B23     		mov	r3, #107
 20572 0bb4 FFF7FEFF 		bl	write_bitmap
 20573              	.LVL1657:
 743:screens.c     **** 		write_bitmap( adm, TABNAV_MENU_DL,      62, 102, OR ); // NAVIGATION: Down Left & showing menu ic
 20574              		.loc 1 743 0
 20575 0bb8 0096     		str	r6, [sp]
 20576 0bba 281C     		mov	r0, r5
 20577 0bbc C349     		ldr	r1, .L1307+12
 20578 0bbe 3E22     		mov	r2, #62
 20579 0bc0 6623     		mov	r3, #102
 20580 0bc2 FFF7FEFF 		bl	write_bitmap
 20581              	.LVL1658:
 744:screens.c     **** 		write_bitmap( adm, TABRESET, 			99, 107, OR ); // RESET	      
 20582              		.loc 1 744 0
 20583 0bc6 0096     		str	r6, [sp]
 20584 0bc8 281C     		mov	r0, r5
 20585 0bca C149     		ldr	r1, .L1307+16
 20586 0bcc 6322     		mov	r2, #99
 20587 0bce 6B23     		mov	r3, #107
 20588 0bd0 FFF7FEFF 		bl	write_bitmap
 20589              	.LVL1659:
 745:screens.c     **** 		write_bitmap( adm, TABCYCLE_ATOJ, 	   130, 107, OR ); // A -> J
 20590              		.loc 1 745 0
 20591 0bd4 0096     		str	r6, [sp]
 20592 0bd6 281C     		mov	r0, r5
 20593 0bd8 BE49     		ldr	r1, .L1307+20
 20594 0bda 8222     		mov	r2, #130
 20595 0bdc 6B23     		mov	r3, #107
 20596 0bde FFF7FEFF 		bl	write_bitmap
 20597              	.LVL1660:
 20598              	.L1154:
 753:screens.c     **** 	draw_box( adm, 8, 86, 8+28, 86+6, CLEAR );
 20599              		.loc 1 753 0
 20600 0be2 5C23     		mov	r3, #92
 20601 0be4 0093     		str	r3, [sp]
 20602 0be6 4023     		mov	r3, #64
 20603 0be8 0193     		str	r3, [sp, #4]
 20604 0bea B548     		ldr	r0, .L1307
 20605 0bec 0821     		mov	r1, #8
 20606 0bee 5622     		mov	r2, #86
 20607 0bf0 2423     		mov	r3, #36
 20608 0bf2 FFF7FEFF 		bl	draw_box
 20609              	.LVL1661:
 755:screens.c     **** 	if( AutoMan )
 20610              		.loc 1 755 0
 20611 0bf6 B84B     		ldr	r3, .L1307+24
 20612 0bf8 1B78     		ldrb	r3, [r3]
 20613 0bfa 002B     		cmp	r3, #0
 20614 0bfc 18D0     		beq	.L1155
 757:screens.c     **** 		CropFeedSel++;
 20615              		.loc 1 757 0
 20616 0bfe B74B     		ldr	r3, .L1307+28
 20617 0c00 1B78     		ldrb	r3, [r3]
 20618 0c02 0133     		add	r3, r3, #1
 20619 0c04 1B06     		lsl	r3, r3, #24
 20620 0c06 1B0E     		lsr	r3, r3, #24
 758:screens.c     **** 		if( CropFeedSel > 11 )
 20621              		.loc 1 758 0
 20622 0c08 0B2B     		cmp	r3, #11
 20623 0c0a 02D8     		bhi	.L1156
 757:screens.c     **** 		CropFeedSel++;
 20624              		.loc 1 757 0
 20625 0c0c B34A     		ldr	r2, .L1307+28
 20626 0c0e 1370     		strb	r3, [r2]
 20627 0c10 02E0     		b	.L1157
 20628              	.L1156:
 760:screens.c     **** 			CropFeedSel = 0;
 20629              		.loc 1 760 0
 20630 0c12 0022     		mov	r2, #0
 20631 0c14 B14B     		ldr	r3, .L1307+28
 20632 0c16 1A70     		strb	r2, [r3]
 20633              	.L1157:
 764:screens.c     **** 		write_bitmap( adm, CROPFEED[CropFeedSel], 8, 86, OR );
 20634              		.loc 1 764 0
 20635 0c18 B04B     		ldr	r3, .L1307+28
 20636 0c1a 1A78     		ldrb	r2, [r3]
 20637 0c1c 9200     		lsl	r2, r2, #2
 20638 0c1e B04B     		ldr	r3, .L1307+32
 20639 0c20 D158     		ldr	r1, [r2, r3]
 20640 0c22 0223     		mov	r3, #2
 20641 0c24 0093     		str	r3, [sp]
 20642 0c26 A648     		ldr	r0, .L1307
 20643 0c28 0822     		mov	r2, #8
 20644 0c2a 5623     		mov	r3, #86
 20645 0c2c FFF7FEFF 		bl	write_bitmap
 20646              	.LVL1662:
 20647              	.L1155:
 771:screens.c     **** 	if( pRun.pr.LubeCounter > 0 ) // Lube Count Alarm NOT present
 20648              		.loc 1 771 0
 20649 0c30 AC4B     		ldr	r3, .L1307+36
 20650 0c32 0622     		mov	r2, #6
 20651 0c34 9B5E     		ldrsh	r3, [r3, r2]
 20652 0c36 002B     		cmp	r3, #0
 20653 0c38 34DD     		ble	.L1158
 773:screens.c     **** 		if( !(looptime % 5) )
 20654              		.loc 1 773 0
 20655 0c3a AB4B     		ldr	r3, .L1307+40
 20656 0c3c 1878     		ldrb	r0, [r3]
 20657 0c3e 0521     		mov	r1, #5
 20658 0c40 FFF7FEFF 		bl	__aeabi_uidivmod
 20659              	.LVL1663:
 20660 0c44 0906     		lsl	r1, r1, #24
 20661 0c46 09D1     		bne	.L1159
 775:screens.c     **** 			TempIntTNM = (unsigned int)(pFac.pf.GW302_TotalNetMetres + NetMetresAppliedForCount);
 20662              		.loc 1 775 0
 20663 0c48 A84B     		ldr	r3, .L1307+44
 20664 0c4a 186F     		ldr	r0, [r3, #112]
 20665 0c4c A84B     		ldr	r3, .L1307+48
 20666 0c4e 1968     		ldr	r1, [r3]
 20667 0c50 FFF7FEFF 		bl	__aeabi_fadd
 20668              	.LVL1664:
 20669 0c54 FFF7FEFF 		bl	__aeabi_f2uiz
 20670              	.LVL1665:
 20671 0c58 A64B     		ldr	r3, .L1307+52
 20672 0c5a 1860     		str	r0, [r3]
 20673              	.L1159:
 779:screens.c     **** 		draw_box( adm, 3, 24, 35, 34, CLEAR ); // Clearing
 20674              		.loc 1 779 0
 20675 0c5c 2223     		mov	r3, #34
 20676 0c5e 0093     		str	r3, [sp]
 20677 0c60 4023     		mov	r3, #64
 20678 0c62 0193     		str	r3, [sp, #4]
 20679 0c64 9648     		ldr	r0, .L1307
 20680 0c66 0321     		mov	r1, #3
 20681 0c68 1822     		mov	r2, #24
 20682 0c6a 2323     		mov	r3, #35
 20683 0c6c FFF7FEFF 		bl	draw_box
 20684              	.LVL1666:
 782:screens.c     **** 		sprintf( tstring, "%4u", TempIntTNM ); // Default=0m; Increment=1m; Range=0-9999m
 20685              		.loc 1 782 0
 20686 0c70 A04B     		ldr	r3, .L1307+52
 20687 0c72 1A68     		ldr	r2, [r3]
 20688 0c74 0CA8     		add	r0, sp, #48
 20689 0c76 A049     		ldr	r1, .L1307+56
 20690 0c78 FFF7FEFF 		bl	sprintf
 20691              	.LVL1667:
 783:screens.c     **** 		display_f1_text( tstring, TSMAX, 3, 24+2, FIXED );
 20692              		.loc 1 783 0
 20693 0c7c 0025     		mov	r5, #0
 20694 0c7e 0095     		str	r5, [sp]
 20695 0c80 0CA8     		add	r0, sp, #48
 20696 0c82 1A21     		mov	r1, #26
 20697 0c84 0322     		mov	r2, #3
 20698 0c86 1A23     		mov	r3, #26
 20699 0c88 FFF7FEFF 		bl	display_f1_text
 20700              	.LVL1668:
 784:screens.c     **** 		display_f1_text( "m", TSMAX, 3+(6*4)+2, 24+2, FIXED );
 20701              		.loc 1 784 0
 20702 0c8c 0095     		str	r5, [sp]
 20703 0c8e 9B48     		ldr	r0, .L1307+60
 20704 0c90 1A21     		mov	r1, #26
 20705 0c92 1D22     		mov	r2, #29
 20706 0c94 1A23     		mov	r3, #26
 20707 0c96 FFF7FEFF 		bl	display_f1_text
 20708              	.LVL1669:
 791:screens.c     **** 	if( pRun.pr.LubeCounter <= 0 ) // Lube Count Alarm present (irrespective of when no other warnings
 20709              		.loc 1 791 0
 20710 0c9a 924B     		ldr	r3, .L1307+36
 20711 0c9c 0621     		mov	r1, #6
 20712 0c9e 5B5E     		ldrsh	r3, [r3, r1]
 20713 0ca0 002B     		cmp	r3, #0
 20714 0ca2 12DC     		bgt	.L1160
 20715              	.L1158:
 793:screens.c     **** 		draw_box( adm, 3, 13, 35, 34, CLEAR ); // Clearing area (covering bale density pressure & total n
 20716              		.loc 1 793 0
 20717 0ca4 864D     		ldr	r5, .L1307
 20718 0ca6 2223     		mov	r3, #34
 20719 0ca8 0093     		str	r3, [sp]
 20720 0caa 4023     		mov	r3, #64
 20721 0cac 0193     		str	r3, [sp, #4]
 20722 0cae 281C     		mov	r0, r5
 20723 0cb0 0321     		mov	r1, #3
 20724 0cb2 0D22     		mov	r2, #13
 20725 0cb4 2323     		mov	r3, #35
 20726 0cb6 FFF7FEFF 		bl	draw_box
 20727              	.LVL1670:
 795:screens.c     **** 		write_bitmap( adm, OILCAN, 2+2, 11+2, OR );
 20728              		.loc 1 795 0
 20729 0cba 0223     		mov	r3, #2
 20730 0cbc 0093     		str	r3, [sp]
 20731 0cbe 281C     		mov	r0, r5
 20732 0cc0 8F49     		ldr	r1, .L1307+64
 20733 0cc2 0422     		mov	r2, #4
 20734 0cc4 0D23     		mov	r3, #13
 20735 0cc6 FFF7FEFF 		bl	write_bitmap
 20736              	.LVL1671:
 20737              	.L1160:
 805:screens.c     **** 	if( NetPulseCount > NetPulseCountPrev )
 20738              		.loc 1 805 0
 20739 0cca 8E4B     		ldr	r3, .L1307+68
 20740 0ccc 1B68     		ldr	r3, [r3]
 20741              	.LVL1672:
 20742 0cce 8E4A     		ldr	r2, .L1307+72
 20743 0cd0 1268     		ldr	r2, [r2]
 20744 0cd2 9342     		cmp	r3, r2
 20745 0cd4 02D9     		bls	.L1161
 20746              	.LVL1673:
 807:screens.c     **** 		NewNetPulses = NetPulseCount - NetPulseCountPrev;
 20747              		.loc 1 807 0
 20748 0cd6 9A1A     		sub	r2, r3, r2
 20749 0cd8 8C49     		ldr	r1, .L1307+76
 20750 0cda 0A60     		str	r2, [r1]
 20751              	.L1161:
 809:screens.c     **** 	NetPulseCountPrev = NetPulseCount; // Previous pulse count saved
 20752              		.loc 1 809 0
 20753 0cdc 8A4A     		ldr	r2, .L1307+72
 20754 0cde 1360     		str	r3, [r2]
 811:screens.c     **** 	if( NetPulseCount && NewNetPulses ) // Pulses have been and are still being received on IP4
 20755              		.loc 1 811 0
 20756 0ce0 002B     		cmp	r3, #0
 20757 0ce2 2BD0     		beq	.L1162
 811:screens.c     **** 	if( NetPulseCount && NewNetPulses ) // Pulses have been and are still being received on IP4
 20758              		.loc 1 811 0 is_stmt 0 discriminator 1
 20759 0ce4 894B     		ldr	r3, .L1307+76
 20760              	.LVL1674:
 20761 0ce6 1B68     		ldr	r3, [r3]
 20762 0ce8 002B     		cmp	r3, #0
 20763 0cea 27D0     		beq	.L1162
 814:screens.c     **** 		NewNetPulses--;
 20764              		.loc 1 814 0 is_stmt 1
 20765 0cec 013B     		sub	r3, r3, #1
 20766 0cee 874A     		ldr	r2, .L1307+76
 20767 0cf0 1360     		str	r3, [r2]
 817:screens.c     **** 		roll++;
 20768              		.loc 1 817 0
 20769 0cf2 874B     		ldr	r3, .L1307+80
 20770 0cf4 1B78     		ldrb	r3, [r3]
 20771 0cf6 0133     		add	r3, r3, #1
 20772 0cf8 1B06     		lsl	r3, r3, #24
 20773 0cfa 1B0E     		lsr	r3, r3, #24
 818:screens.c     **** 		if( roll > 7 )
 20774              		.loc 1 818 0
 20775 0cfc 072B     		cmp	r3, #7
 20776 0cfe 02D8     		bhi	.L1163
 817:screens.c     **** 		roll++;
 20777              		.loc 1 817 0
 20778 0d00 834A     		ldr	r2, .L1307+80
 20779 0d02 1370     		strb	r3, [r2]
 20780 0d04 02E0     		b	.L1164
 20781              	.L1163:
 820:screens.c     **** 			roll = 0;
 20782              		.loc 1 820 0
 20783 0d06 0022     		mov	r2, #0
 20784 0d08 814B     		ldr	r3, .L1307+80
 20785 0d0a 1A70     		strb	r2, [r3]
 20786              	.L1164:
 822:screens.c     **** 		draw_box( adm, 1, 35+2-2, 6+28, 59+2, CLEAR );  // Clearing area on left & right & bottom 
 20787              		.loc 1 822 0
 20788 0d0c 6C4D     		ldr	r5, .L1307
 20789 0d0e 3D23     		mov	r3, #61
 20790 0d10 0093     		str	r3, [sp]
 20791 0d12 4023     		mov	r3, #64
 20792 0d14 0193     		str	r3, [sp, #4]
 20793 0d16 281C     		mov	r0, r5
 20794 0d18 0121     		mov	r1, #1
 20795 0d1a 2322     		mov	r2, #35
 20796 0d1c 2223     		mov	r3, #34
 20797 0d1e FFF7FEFF 		bl	draw_box
 20798              	.LVL1675:
 823:screens.c     **** 		write_bitmap( adm, ROLLER[roll], 14, 35+2, OR );
 20799              		.loc 1 823 0
 20800 0d22 7B4B     		ldr	r3, .L1307+80
 20801 0d24 1A78     		ldrb	r2, [r3]
 20802 0d26 9200     		lsl	r2, r2, #2
 20803 0d28 7A4B     		ldr	r3, .L1307+84
 20804 0d2a D158     		ldr	r1, [r2, r3]
 20805 0d2c 0223     		mov	r3, #2
 20806 0d2e 0093     		str	r3, [sp]
 20807 0d30 281C     		mov	r0, r5
 20808 0d32 0E22     		mov	r2, #14
 20809 0d34 2523     		mov	r3, #37
 20810 0d36 FFF7FEFF 		bl	write_bitmap
 20811              	.LVL1676:
 20812 0d3a 16E0     		b	.L1165
 20813              	.LVL1677:
 20814              	.L1162:
 828:screens.c     **** 		draw_box( adm, 1, 35+2-2, 6+28, 59+2, CLEAR );  // Clearing area on left & right & bottom 
 20815              		.loc 1 828 0
 20816 0d3c 604D     		ldr	r5, .L1307
 20817 0d3e 3D23     		mov	r3, #61
 20818              	.LVL1678:
 20819 0d40 0093     		str	r3, [sp]
 20820 0d42 4023     		mov	r3, #64
 20821 0d44 0193     		str	r3, [sp, #4]
 20822 0d46 281C     		mov	r0, r5
 20823 0d48 0121     		mov	r1, #1
 20824 0d4a 2322     		mov	r2, #35
 20825 0d4c 2223     		mov	r3, #34
 20826 0d4e FFF7FEFF 		bl	draw_box
 20827              	.LVL1679:
 829:screens.c     **** 		write_bitmap( adm, ROLLER[roll], 14, 35+2, OR );
 20828              		.loc 1 829 0
 20829 0d52 6F4B     		ldr	r3, .L1307+80
 20830 0d54 1A78     		ldrb	r2, [r3]
 20831 0d56 9200     		lsl	r2, r2, #2
 20832 0d58 6E4B     		ldr	r3, .L1307+84
 20833 0d5a D158     		ldr	r1, [r2, r3]
 20834 0d5c 0223     		mov	r3, #2
 20835 0d5e 0093     		str	r3, [sp]
 20836 0d60 281C     		mov	r0, r5
 20837 0d62 0E22     		mov	r2, #14
 20838 0d64 2523     		mov	r3, #37
 20839 0d66 FFF7FEFF 		bl	write_bitmap
 20840              	.LVL1680:
 20841              	.L1165:
 847:screens.c     **** 	if( changed )
 20842              		.loc 1 847 0
 20843 0d6a 002C     		cmp	r4, #0
 20844 0d6c 09D0     		beq	.L1166
 849:screens.c     **** 		draw_box( adm, 14+6, 40+10, 14+6+123-1, 40+10+32-1, CLEAR );
 20845              		.loc 1 849 0
 20846 0d6e 5123     		mov	r3, #81
 20847 0d70 0093     		str	r3, [sp]
 20848 0d72 4023     		mov	r3, #64
 20849 0d74 0193     		str	r3, [sp, #4]
 20850 0d76 5248     		ldr	r0, .L1307
 20851 0d78 1421     		mov	r1, #20
 20852 0d7a 3222     		mov	r2, #50
 20853 0d7c 8E23     		mov	r3, #142
 20854 0d7e FFF7FEFF 		bl	draw_box
 20855              	.LVL1681:
 20856              	.L1166:
 853:screens.c     **** 	draw_box( adm, 35, 26, 120, 92, CLEAR );
 20857              		.loc 1 853 0
 20858 0d82 4F4C     		ldr	r4, .L1307
 20859              	.LVL1682:
 20860 0d84 5C23     		mov	r3, #92
 20861 0d86 0093     		str	r3, [sp]
 20862 0d88 4025     		mov	r5, #64
 20863 0d8a 0195     		str	r5, [sp, #4]
 20864 0d8c 201C     		mov	r0, r4
 20865 0d8e 2321     		mov	r1, #35
 20866 0d90 1A22     		mov	r2, #26
 20867 0d92 7823     		mov	r3, #120
 20868 0d94 FFF7FEFF 		bl	draw_box
 20869              	.LVL1683:
 860:screens.c     **** 	draw_box( adm, 1, 60, 6+29-1, 60+16-1+2, CLEAR ); // Clear area underneath Baler Hitch (including 
 20870              		.loc 1 860 0
 20871 0d98 4D23     		mov	r3, #77
 20872 0d9a 0093     		str	r3, [sp]
 20873 0d9c 0195     		str	r5, [sp, #4]
 20874 0d9e 201C     		mov	r0, r4
 20875 0da0 0121     		mov	r1, #1
 20876 0da2 3C22     		mov	r2, #60
 20877 0da4 2223     		mov	r3, #34
 20878 0da6 FFF7FEFF 		bl	draw_box
 20879              	.LVL1684:
 861:screens.c     **** 	write_bitmap( adm, BalerHitch, 6, 60, OR );
 20880              		.loc 1 861 0
 20881 0daa 0226     		mov	r6, #2
 20882 0dac 0096     		str	r6, [sp]
 20883 0dae 201C     		mov	r0, r4
 20884 0db0 5949     		ldr	r1, .L1307+88
 20885 0db2 0622     		mov	r2, #6
 20886 0db4 3C23     		mov	r3, #60
 20887 0db6 FFF7FEFF 		bl	write_bitmap
 20888              	.LVL1685:
 862:screens.c     **** 	write_bitmap( adm, BalerCenter,  35, 26, OR );
 20889              		.loc 1 862 0
 20890 0dba 0096     		str	r6, [sp]
 20891 0dbc 201C     		mov	r0, r4
 20892 0dbe 5749     		ldr	r1, .L1307+92
 20893 0dc0 2322     		mov	r2, #35
 20894 0dc2 1A23     		mov	r3, #26
 20895 0dc4 FFF7FEFF 		bl	write_bitmap
 20896              	.LVL1686:
 870:screens.c     **** 	draw_box( adm, 80, 20, 120, 97, CLEAR );
 20897              		.loc 1 870 0
 20898 0dc8 6123     		mov	r3, #97
 20899 0dca 0093     		str	r3, [sp]
 20900 0dcc 0195     		str	r5, [sp, #4]
 20901 0dce 201C     		mov	r0, r4
 20902 0dd0 5021     		mov	r1, #80
 20903 0dd2 1422     		mov	r2, #20
 20904 0dd4 7823     		mov	r3, #120
 20905 0dd6 FFF7FEFF 		bl	draw_box
 20906              	.LVL1687:
 873:screens.c     **** 	if( AutoMan ) // AUTO mode
 20907              		.loc 1 873 0
 20908 0dda 3F4B     		ldr	r3, .L1307+24
 20909 0ddc 1B78     		ldrb	r3, [r3]
 20910 0dde 002B     		cmp	r3, #0
 20911 0de0 30D0     		beq	.L1167
 875:screens.c     **** 		if( CHAMBER_OPEN )
 20912              		.loc 1 875 0
 20913 0de2 4F4B     		ldr	r3, .L1307+96
 20914 0de4 DB6B     		ldr	r3, [r3, #60]
 20915 0de6 5A02     		lsl	r2, r3, #9
 20916 0de8 23D4     		bmi	.L1168
 878:screens.c     **** 			write_bitmap( adm, Balerdooropen_withoutkicker, 80, 20, OR );
 20917              		.loc 1 878 0
 20918 0dea 0223     		mov	r3, #2
 20919 0dec 0093     		str	r3, [sp]
 20920 0dee 3448     		ldr	r0, .L1307
 20921 0df0 4C49     		ldr	r1, .L1307+100
 20922 0df2 5022     		mov	r2, #80
 20923 0df4 1423     		mov	r3, #20
 20924 0df6 FFF7FEFF 		bl	write_bitmap
 20925              	.LVL1688:
 880:screens.c     **** 			if( Stage == STAGE_UNLOADING )
 20926              		.loc 1 880 0
 20927 0dfa 4B4B     		ldr	r3, .L1307+104
 20928 0dfc 1B78     		ldrb	r3, [r3]
 20929 0dfe 0B2B     		cmp	r3, #11
 20930 0e00 50D1     		bne	.L1169
 882:screens.c     **** 				if( BaleKickerStatus != (BKS_BALE_KICKER_DOWN | BKS_BALE_KICKER_UP) ) // Bale Kicker has not ye
 20931              		.loc 1 882 0
 20932 0e02 4A4B     		ldr	r3, .L1307+108
 20933 0e04 1B78     		ldrb	r3, [r3]
 20934 0e06 032B     		cmp	r3, #3
 20935 0e08 4CD0     		beq	.L1169
 885:screens.c     **** 					draw_box( adm, 58, 33, 98, 74, CLEAR );
 20936              		.loc 1 885 0
 20937 0e0a 2D4C     		ldr	r4, .L1307
 20938 0e0c 4A23     		mov	r3, #74
 20939 0e0e 0093     		str	r3, [sp]
 20940 0e10 4023     		mov	r3, #64
 20941 0e12 0193     		str	r3, [sp, #4]
 20942 0e14 201C     		mov	r0, r4
 20943 0e16 3A21     		mov	r1, #58
 20944 0e18 2122     		mov	r2, #33
 20945 0e1a 6223     		mov	r3, #98
 20946 0e1c FFF7FEFF 		bl	draw_box
 20947              	.LVL1689:
 886:screens.c     **** 					write_bitmap( adm, Bale, 58, 33, OR );
 20948              		.loc 1 886 0
 20949 0e20 0223     		mov	r3, #2
 20950 0e22 0093     		str	r3, [sp]
 20951 0e24 201C     		mov	r0, r4
 20952 0e26 4249     		ldr	r1, .L1307+112
 20953 0e28 3A22     		mov	r2, #58
 20954 0e2a 2123     		mov	r3, #33
 20955 0e2c FFF7FEFF 		bl	write_bitmap
 20956              	.LVL1690:
 20957 0e30 38E0     		b	.L1169
 20958              	.L1168:
 893:screens.c     **** 			write_bitmap( adm, Balerdoorclosed_withoutkicker, 80, 26, OR );
 20959              		.loc 1 893 0
 20960 0e32 0223     		mov	r3, #2
 20961 0e34 0093     		str	r3, [sp]
 20962 0e36 2248     		ldr	r0, .L1307
 20963 0e38 3E49     		ldr	r1, .L1307+116
 20964 0e3a 5022     		mov	r2, #80
 20965 0e3c 1A23     		mov	r3, #26
 20966 0e3e FFF7FEFF 		bl	write_bitmap
 20967              	.LVL1691:
 20968 0e42 2FE0     		b	.L1169
 20969              	.L1167:
 898:screens.c     **** 		if( CHAMBER_OPEN )
 20970              		.loc 1 898 0
 20971 0e44 364B     		ldr	r3, .L1307+96
 20972 0e46 DB6B     		ldr	r3, [r3, #60]
 20973 0e48 5902     		lsl	r1, r3, #9
 20974 0e4a 23D4     		bmi	.L1170
 901:screens.c     **** 			write_bitmap( adm, Balerdooropen_withoutkicker, 80, 20, OR );
 20975              		.loc 1 901 0
 20976 0e4c 0223     		mov	r3, #2
 20977 0e4e 0093     		str	r3, [sp]
 20978 0e50 1B48     		ldr	r0, .L1307
 20979 0e52 3449     		ldr	r1, .L1307+100
 20980 0e54 5022     		mov	r2, #80
 20981 0e56 1423     		mov	r3, #20
 20982 0e58 FFF7FEFF 		bl	write_bitmap
 20983              	.LVL1692:
 904:screens.c     **** 			if( ChamberOpenDelayTime && (stagecomp == (NETFEEDON | NETCUTON)) ) // while chamber open delay 
 20984              		.loc 1 904 0
 20985 0e5c 364B     		ldr	r3, .L1307+120
 20986 0e5e 1B78     		ldrb	r3, [r3]
 20987 0e60 002B     		cmp	r3, #0
 20988 0e62 1FD0     		beq	.L1169
 904:screens.c     **** 			if( ChamberOpenDelayTime && (stagecomp == (NETFEEDON | NETCUTON)) ) // while chamber open delay 
 20989              		.loc 1 904 0 is_stmt 0 discriminator 1
 20990 0e64 354B     		ldr	r3, .L1307+124
 20991 0e66 1B78     		ldrb	r3, [r3]
 20992 0e68 032B     		cmp	r3, #3
 20993 0e6a 1BD1     		bne	.L1169
 906:screens.c     **** 				draw_box( adm, 58, 33, 98, 74, CLEAR );
 20994              		.loc 1 906 0 is_stmt 1
 20995 0e6c 144C     		ldr	r4, .L1307
 20996 0e6e 4A23     		mov	r3, #74
 20997 0e70 0093     		str	r3, [sp]
 20998 0e72 4023     		mov	r3, #64
 20999 0e74 0193     		str	r3, [sp, #4]
 21000 0e76 201C     		mov	r0, r4
 21001 0e78 3A21     		mov	r1, #58
 21002 0e7a 2122     		mov	r2, #33
 21003 0e7c 6223     		mov	r3, #98
 21004 0e7e FFF7FEFF 		bl	draw_box
 21005              	.LVL1693:
 907:screens.c     **** 				write_bitmap( adm, Bale, 58, 33, OR );			
 21006              		.loc 1 907 0
 21007 0e82 0223     		mov	r3, #2
 21008 0e84 0093     		str	r3, [sp]
 21009 0e86 201C     		mov	r0, r4
 21010 0e88 2949     		ldr	r1, .L1307+112
 21011 0e8a 3A22     		mov	r2, #58
 21012 0e8c 2123     		mov	r3, #33
 21013 0e8e FFF7FEFF 		bl	write_bitmap
 21014              	.LVL1694:
 21015 0e92 07E0     		b	.L1169
 21016              	.L1170:
 913:screens.c     **** 			write_bitmap( adm, Balerdoorclosed_withoutkicker, 80, 26, OR );
 21017              		.loc 1 913 0
 21018 0e94 0223     		mov	r3, #2
 21019 0e96 0093     		str	r3, [sp]
 21020 0e98 0948     		ldr	r0, .L1307
 21021 0e9a 2649     		ldr	r1, .L1307+116
 21022 0e9c 5022     		mov	r2, #80
 21023 0e9e 1A23     		mov	r3, #26
 21024 0ea0 FFF7FEFF 		bl	write_bitmap
 21025              	.LVL1695:
 21026              	.L1169:
 925:screens.c     **** 	if( BALE_KICKER_UP ) // Bale Kicker Sensor closed
 21027              		.loc 1 925 0
 21028 0ea4 1E4B     		ldr	r3, .L1307+96
 21029 0ea6 DB6B     		ldr	r3, [r3, #60]
 21030 0ea8 5A01     		lsl	r2, r3, #5
 21031 0eaa 4BD5     		bpl	.L1171
 927:screens.c     **** 		write_bitmap( adm, KICKER_UP, 98, 77, OR );
 21032              		.loc 1 927 0
 21033 0eac 0223     		mov	r3, #2
 21034 0eae 0093     		str	r3, [sp]
 21035 0eb0 0348     		ldr	r0, .L1307
 21036 0eb2 2349     		ldr	r1, .L1307+128
 21037 0eb4 6222     		mov	r2, #98
 21038 0eb6 4D23     		mov	r3, #77
 21039 0eb8 FFF7FEFF 		bl	write_bitmap
 21040              	.LVL1696:
 21041 0ebc 4AE0     		b	.L1172
 21042              	.L1308:
 21043 0ebe C046     		.align	2
 21044              	.L1307:
 21045 0ec0 00000000 		.word	adm
 21046 0ec4 00000000 		.word	TAB_DENSITY_RELEASE
 21047 0ec8 00000000 		.word	TAB_NET_CUT
 21048 0ecc 00000000 		.word	TABNAV_MENU_DL
 21049 0ed0 00000000 		.word	TABRESET
 21050 0ed4 00000000 		.word	TABCYCLE_ATOJ
 21051 0ed8 00000000 		.word	AutoMan
 21052 0edc 00000000 		.word	.LANCHOR27
 21053 0ee0 00000000 		.word	CROPFEED
 21054 0ee4 00000000 		.word	pRun
 21055 0ee8 00000000 		.word	looptime
 21056 0eec 00000000 		.word	pFac
 21057 0ef0 00000000 		.word	NetMetresAppliedForCount
 21058 0ef4 00000000 		.word	.LANCHOR28
 21059 0ef8 7C040000 		.word	.LC815
 21060 0efc 80040000 		.word	.LC817
 21061 0f00 00000000 		.word	OILCAN
 21062 0f04 00000000 		.word	NetPulseCount
 21063 0f08 00000000 		.word	NetPulseCountPrev
 21064 0f0c 00000000 		.word	NewNetPulses
 21065 0f10 00000000 		.word	.LANCHOR29
 21066 0f14 00000000 		.word	ROLLER
 21067 0f18 00000000 		.word	BalerHitch
 21068 0f1c 00000000 		.word	BalerCenter
 21069 0f20 00F6FFFF 		.word	-2560
 21070 0f24 00000000 		.word	Balerdooropen_withoutkicker
 21071 0f28 00000000 		.word	Stage
 21072 0f2c 00000000 		.word	BaleKickerStatus
 21073 0f30 00000000 		.word	Bale
 21074 0f34 00000000 		.word	Balerdoorclosed_withoutkicker
 21075 0f38 00000000 		.word	ChamberOpenDelayTime
 21076 0f3c 00000000 		.word	stagecomp
 21077 0f40 00000000 		.word	KICKER_UP
 21078              	.L1171:
 931:screens.c     **** 		write_bitmap( adm, KICKER_DOWN, 98, 77, OR );    	
 21079              		.loc 1 931 0
 21080 0f44 0223     		mov	r3, #2
 21081 0f46 0093     		str	r3, [sp]
 21082 0f48 DB48     		ldr	r0, .L1309+8
 21083 0f4a DC49     		ldr	r1, .L1309+12
 21084 0f4c 6222     		mov	r2, #98
 21085 0f4e 4D23     		mov	r3, #77
 21086 0f50 FFF7FEFF 		bl	write_bitmap
 21087              	.LVL1697:
 21088              	.L1172:
 938:screens.c     **** 	if( CHOPPING_KNIVES_ON ) // IP2 open: 11 Knife Sensor (AKA Chopping Knives position / Knives Posit
 21089              		.loc 1 938 0
 21090 0f54 DA4B     		ldr	r3, .L1309+16
 21091 0f56 DB6B     		ldr	r3, [r3, #60]
 21092 0f58 D902     		lsl	r1, r3, #11
 21093 0f5a 07D5     		bpl	.L1173
 939:screens.c     **** 		write_bitmap( adm, KNIFE, 55, 81, OR );
 21094              		.loc 1 939 0
 21095 0f5c 0223     		mov	r3, #2
 21096 0f5e 0093     		str	r3, [sp]
 21097 0f60 D548     		ldr	r0, .L1309+8
 21098 0f62 D849     		ldr	r1, .L1309+20
 21099 0f64 3722     		mov	r2, #55
 21100 0f66 5123     		mov	r3, #81
 21101 0f68 FFF7FEFF 		bl	write_bitmap
 21102              	.LVL1698:
 21103              	.L1173:
 945:screens.c     **** 	if( pFac.pf.GW302_BaleShapeIndicator != BSI_OFF ) // Bale Shape Indicator to be displayed -- with/
 21104              		.loc 1 945 0
 21105 0f6c 6923     		mov	r3, #105
 21106 0f6e D64A     		ldr	r2, .L1309+24
 21107 0f70 D35C     		ldrb	r3, [r2, r3]
 21108 0f72 002B     		cmp	r3, #0
 21109 0f74 00D1     		bne	.LCB20332
 21110 0f76 CAE3     		b	.L1174	@long jump
 21111              	.LCB20332:
 947:screens.c     **** 		if( CHAMBER_CLOSED && (stagecomp == SC_CLEAR) )
 21112              		.loc 1 947 0
 21113 0f78 D14B     		ldr	r3, .L1309+16
 21114 0f7a DB6B     		ldr	r3, [r3, #60]
 21115 0f7c 5A02     		lsl	r2, r3, #9
 21116 0f7e 00D4     		bmi	.LCB20338
 21117 0f80 CDE1     		b	.L1175	@long jump
 21118              	.LCB20338:
 947:screens.c     **** 		if( CHAMBER_CLOSED && (stagecomp == SC_CLEAR) )
 21119              		.loc 1 947 0 is_stmt 0 discriminator 1
 21120 0f82 D24B     		ldr	r3, .L1309+28
 21121 0f84 1B78     		ldrb	r3, [r3]
 21122 0f86 002B     		cmp	r3, #0
 21123 0f88 00D0     		beq	.LCB20342
 21124 0f8a C8E1     		b	.L1175	@long jump
 21125              	.LCB20342:
 950:screens.c     **** 			draw_box( adm, 38, 13, (38+67+6), (13+11), CLEAR );
 21126              		.loc 1 950 0 is_stmt 1
 21127 0f8c 1823     		mov	r3, #24
 21128 0f8e 0093     		str	r3, [sp]
 21129 0f90 4023     		mov	r3, #64
 21130 0f92 0193     		str	r3, [sp, #4]
 21131 0f94 C848     		ldr	r0, .L1309+8
 21132 0f96 2621     		mov	r1, #38
 21133 0f98 0D22     		mov	r2, #13
 21134 0f9a 6F23     		mov	r3, #111
 21135 0f9c FFF7FEFF 		bl	draw_box
 21136              	.LVL1699:
 953:screens.c     **** 			ArrowStepVoltage = (pFac.pf.GW302_FillPotRange - pFac.pf.GW302_FillPotIgnore)/3.0;
 21137              		.loc 1 953 0
 21138 0fa0 C94C     		ldr	r4, .L1309+24
 21139 0fa2 9823     		mov	r3, #152
 21140 0fa4 E358     		ldr	r3, [r4, r3]
 21141 0fa6 9946     		mov	r9, r3
 21142 0fa8 9423     		mov	r3, #148
 21143 0faa E058     		ldr	r0, [r4, r3]
 21144 0fac 4946     		mov	r1, r9
 21145 0fae FFF7FEFF 		bl	__aeabi_fsub
 21146              	.LVL1700:
 21147 0fb2 C749     		ldr	r1, .L1309+32
 21148 0fb4 FFF7FEFF 		bl	__aeabi_fdiv
 21149              	.LVL1701:
 21150 0fb8 8046     		mov	r8, r0
 21151              	.LVL1702:
 954:screens.c     **** 			ArrowsCleared = 0;
 21152              		.loc 1 954 0
 21153 0fba 0022     		mov	r2, #0
 21154 0fbc C54B     		ldr	r3, .L1309+36
 21155 0fbe 1A70     		strb	r2, [r3]
 955:screens.c     **** 			if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - pFac.pf.GW302_FillPotIgnore) )
 21156              		.loc 1 955 0
 21157 0fc0 E46E     		ldr	r4, [r4, #108]
 21158 0fc2 A346     		mov	fp, r4
 21159 0fc4 C44B     		ldr	r3, .L1309+40
 21160 0fc6 1B68     		ldr	r3, [r3]
 21161 0fc8 9A46     		mov	sl, r3
 21162 0fca 201C     		add	r0, r4, #0
 21163              	.LVL1703:
 21164 0fcc 4946     		mov	r1, r9
 21165 0fce FFF7FEFF 		bl	__aeabi_fsub
 21166              	.LVL1704:
 21167 0fd2 5146     		mov	r1, sl
 21168 0fd4 FFF7FEFF 		bl	__aeabi_fcmpgt
 21169              	.LVL1705:
 21170 0fd8 0028     		cmp	r0, #0
 21171 0fda 00D1     		bne	.LCB20384
 21172 0fdc AEE0     		b	.L1176	@long jump
 21173              	.LCB20384:
 957:screens.c     **** 				if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+(3.0*
 21174              		.loc 1 957 0
 21175 0fde 5046     		mov	r0, sl
 21176 0fe0 FFF7FEFF 		bl	__aeabi_f2d
 21177              	.LVL1706:
 21178 0fe4 061C     		mov	r6, r0
 21179 0fe6 0F1C     		mov	r7, r1
 21180 0fe8 201C     		add	r0, r4, #0
 21181 0fea FFF7FEFF 		bl	__aeabi_f2d
 21182              	.LVL1707:
 21183 0fee 0890     		str	r0, [sp, #32]
 21184 0ff0 0991     		str	r1, [sp, #36]
 21185 0ff2 4846     		mov	r0, r9
 21186 0ff4 FFF7FEFF 		bl	__aeabi_f2d
 21187              	.LVL1708:
 21188 0ff8 0A90     		str	r0, [sp, #40]
 21189 0ffa 0B91     		str	r1, [sp, #44]
 21190 0ffc 4046     		mov	r0, r8
 21191 0ffe FFF7FEFF 		bl	__aeabi_f2d
 21192              	.LVL1709:
 21193 1002 041C     		mov	r4, r0
 21194 1004 0D1C     		mov	r5, r1
 21195 1006 AB4B     		ldr	r3, .L1309+4
 21196 1008 A94A     		ldr	r2, .L1309
 21197 100a FFF7FEFF 		bl	__aeabi_dmul
 21198              	.LVL1710:
 21199 100e 021C     		mov	r2, r0
 21200 1010 0B1C     		mov	r3, r1
 21201 1012 0A98     		ldr	r0, [sp, #40]
 21202 1014 0B99     		ldr	r1, [sp, #44]
 21203 1016 FFF7FEFF 		bl	__aeabi_dadd
 21204              	.LVL1711:
 21205 101a 021C     		mov	r2, r0
 21206 101c 0B1C     		mov	r3, r1
 21207 101e 0898     		ldr	r0, [sp, #32]
 21208 1020 0999     		ldr	r1, [sp, #36]
 21209 1022 FFF7FEFF 		bl	__aeabi_dsub
 21210              	.LVL1712:
 21211 1026 021C     		mov	r2, r0
 21212 1028 0B1C     		mov	r3, r1
 21213 102a 301C     		mov	r0, r6
 21214 102c 391C     		mov	r1, r7
 21215 102e FFF7FEFF 		bl	__aeabi_dcmplt
 21216              	.LVL1713:
 21217 1032 0028     		cmp	r0, #0
 21218 1034 16D0     		beq	.L1286
 959:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21219              		.loc 1 959 0
 21220 1036 9D23     		mov	r3, #157
 21221 1038 A34A     		ldr	r2, .L1309+24
 21222 103a D35C     		ldrb	r3, [r2, r3]
 21223 103c 012B     		cmp	r3, #1
 21224 103e 08D1     		bne	.L1180
 961:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_RIGHT, 38+6, 13, OR );
 21225              		.loc 1 961 0
 21226 1040 0223     		mov	r3, #2
 21227 1042 0093     		str	r3, [sp]
 21228 1044 9C48     		ldr	r0, .L1309+8
 21229 1046 A549     		ldr	r1, .L1309+44
 21230 1048 2C22     		mov	r2, #44
 21231 104a 0D23     		mov	r3, #13
 21232 104c FFF7FEFF 		bl	write_bitmap
 21233              	.LVL1714:
 21234 1050 74E0     		b	.L1176
 21235              	.L1180:
 965:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_LEFT, 38, 13, OR );
 21236              		.loc 1 965 0
 21237 1052 0223     		mov	r3, #2
 21238 1054 0093     		str	r3, [sp]
 21239 1056 9848     		ldr	r0, .L1309+8
 21240 1058 A149     		ldr	r1, .L1309+48
 21241 105a 2622     		mov	r2, #38
 21242 105c 0D23     		mov	r3, #13
 21243 105e FFF7FEFF 		bl	write_bitmap
 21244              	.LVL1715:
 21245 1062 6BE0     		b	.L1176
 21246              	.L1286:
 968:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
 21247              		.loc 1 968 0
 21248 1064 201C     		mov	r0, r4
 21249 1066 291C     		mov	r1, r5
 21250 1068 221C     		mov	r2, r4
 21251 106a 2B1C     		mov	r3, r5
 21252 106c FFF7FEFF 		bl	__aeabi_dadd
 21253              	.LVL1716:
 21254 1070 021C     		mov	r2, r0
 21255 1072 0B1C     		mov	r3, r1
 21256 1074 0A98     		ldr	r0, [sp, #40]
 21257 1076 0B99     		ldr	r1, [sp, #44]
 21258 1078 FFF7FEFF 		bl	__aeabi_dadd
 21259              	.LVL1717:
 21260 107c 021C     		mov	r2, r0
 21261 107e 0B1C     		mov	r3, r1
 21262 1080 0898     		ldr	r0, [sp, #32]
 21263 1082 0999     		ldr	r1, [sp, #36]
 21264 1084 FFF7FEFF 		bl	__aeabi_dsub
 21265              	.LVL1718:
 21266 1088 021C     		mov	r2, r0
 21267 108a 0B1C     		mov	r3, r1
 21268 108c 301C     		mov	r0, r6
 21269 108e 391C     		mov	r1, r7
 21270 1090 FFF7FEFF 		bl	__aeabi_dcmplt
 21271              	.LVL1719:
 21272 1094 0028     		cmp	r0, #0
 21273 1096 16D0     		beq	.L1287
 970:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21274              		.loc 1 970 0
 21275 1098 9D23     		mov	r3, #157
 21276 109a 8B4A     		ldr	r2, .L1309+24
 21277 109c D35C     		ldrb	r3, [r2, r3]
 21278 109e 012B     		cmp	r3, #1
 21279 10a0 08D1     		bne	.L1183
 972:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_RIGHT, 38+6, 13, OR );
 21280              		.loc 1 972 0
 21281 10a2 0223     		mov	r3, #2
 21282 10a4 0093     		str	r3, [sp]
 21283 10a6 8448     		ldr	r0, .L1309+8
 21284 10a8 8E49     		ldr	r1, .L1309+52
 21285 10aa 2C22     		mov	r2, #44
 21286 10ac 0D23     		mov	r3, #13
 21287 10ae FFF7FEFF 		bl	write_bitmap
 21288              	.LVL1720:
 21289 10b2 43E0     		b	.L1176
 21290              	.L1183:
 976:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_LEFT, 38, 13, OR );
 21291              		.loc 1 976 0
 21292 10b4 0223     		mov	r3, #2
 21293 10b6 0093     		str	r3, [sp]
 21294 10b8 7F48     		ldr	r0, .L1309+8
 21295 10ba 8B49     		ldr	r1, .L1309+56
 21296 10bc 2622     		mov	r2, #38
 21297 10be 0D23     		mov	r3, #13
 21298 10c0 FFF7FEFF 		bl	write_bitmap
 21299              	.LVL1721:
 21300 10c4 3AE0     		b	.L1176
 21301              	.L1287:
 979:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
 21302              		.loc 1 979 0
 21303 10c6 4846     		mov	r0, r9
 21304 10c8 4146     		mov	r1, r8
 21305 10ca FFF7FEFF 		bl	__aeabi_fadd
 21306              	.LVL1722:
 21307 10ce 011C     		add	r1, r0, #0
 21308 10d0 5846     		mov	r0, fp
 21309 10d2 FFF7FEFF 		bl	__aeabi_fsub
 21310              	.LVL1723:
 21311 10d6 011C     		add	r1, r0, #0
 21312 10d8 5046     		mov	r0, sl
 21313 10da FFF7FEFF 		bl	__aeabi_fcmplt
 21314              	.LVL1724:
 21315 10de 0028     		cmp	r0, #0
 21316 10e0 16D0     		beq	.L1288
 981:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21317              		.loc 1 981 0
 21318 10e2 9D23     		mov	r3, #157
 21319 10e4 784A     		ldr	r2, .L1309+24
 21320 10e6 D35C     		ldrb	r3, [r2, r3]
 21321 10e8 012B     		cmp	r3, #1
 21322 10ea 08D1     		bne	.L1186
 983:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_RIGHT, 38+6, 13, OR );
 21323              		.loc 1 983 0
 21324 10ec 0223     		mov	r3, #2
 21325 10ee 0093     		str	r3, [sp]
 21326 10f0 7148     		ldr	r0, .L1309+8
 21327 10f2 7E49     		ldr	r1, .L1309+60
 21328 10f4 2C22     		mov	r2, #44
 21329 10f6 0D23     		mov	r3, #13
 21330 10f8 FFF7FEFF 		bl	write_bitmap
 21331              	.LVL1725:
 21332 10fc 1EE0     		b	.L1176
 21333              	.L1186:
 987:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_LEFT, 38, 13, OR );
 21334              		.loc 1 987 0
 21335 10fe 0223     		mov	r3, #2
 21336 1100 0093     		str	r3, [sp]
 21337 1102 6D48     		ldr	r0, .L1309+8
 21338 1104 7A49     		ldr	r1, .L1309+64
 21339 1106 2622     		mov	r2, #38
 21340 1108 0D23     		mov	r3, #13
 21341 110a FFF7FEFF 		bl	write_bitmap
 21342              	.LVL1726:
 21343 110e 15E0     		b	.L1176
 21344              	.L1288:
 992:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21345              		.loc 1 992 0
 21346 1110 9D23     		mov	r3, #157
 21347 1112 6D4A     		ldr	r2, .L1309+24
 21348 1114 D35C     		ldrb	r3, [r2, r3]
 21349 1116 012B     		cmp	r3, #1
 21350 1118 08D1     		bne	.L1187
 994:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_RIGHT, 38+6, 13, OR );
 21351              		.loc 1 994 0
 21352 111a 0223     		mov	r3, #2
 21353 111c 0093     		str	r3, [sp]
 21354 111e 6648     		ldr	r0, .L1309+8
 21355 1120 7449     		ldr	r1, .L1309+68
 21356 1122 2C22     		mov	r2, #44
 21357 1124 0D23     		mov	r3, #13
 21358 1126 FFF7FEFF 		bl	write_bitmap
 21359              	.LVL1727:
 21360 112a 07E0     		b	.L1176
 21361              	.L1187:
 998:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_LEFT, 38, 13, OR );
 21362              		.loc 1 998 0
 21363 112c 0223     		mov	r3, #2
 21364 112e 0093     		str	r3, [sp]
 21365 1130 6148     		ldr	r0, .L1309+8
 21366 1132 7149     		ldr	r1, .L1309+72
 21367 1134 2622     		mov	r2, #38
 21368 1136 0D23     		mov	r3, #13
 21369 1138 FFF7FEFF 		bl	write_bitmap
 21370              	.LVL1728:
 21371              	.L1176:
1002:screens.c     **** 			if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + pFac.pf.GW302_FillPotIgnore) )
 21372              		.loc 1 1002 0
 21373 113c 624B     		ldr	r3, .L1309+24
 21374 113e D96E     		ldr	r1, [r3, #108]
 21375 1140 8A46     		mov	sl, r1
 21376 1142 9822     		mov	r2, #152
 21377 1144 9A58     		ldr	r2, [r3, r2]
 21378 1146 9346     		mov	fp, r2
 21379 1148 634B     		ldr	r3, .L1309+40
 21380 114a 1B68     		ldr	r3, [r3]
 21381 114c 9946     		mov	r9, r3
 21382 114e 081C     		add	r0, r1, #0
 21383 1150 111C     		add	r1, r2, #0
 21384 1152 FFF7FEFF 		bl	__aeabi_fadd
 21385              	.LVL1729:
 21386 1156 4946     		mov	r1, r9
 21387 1158 FFF7FEFF 		bl	__aeabi_fcmplt
 21388              	.LVL1730:
 21389 115c 0028     		cmp	r0, #0
 21390 115e 00D1     		bne	.LCB20594
 21391 1160 D4E0     		b	.L1188	@long jump
 21392              	.LCB20594:
1004:screens.c     **** 				if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+(3.0*
 21393              		.loc 1 1004 0
 21394 1162 4846     		mov	r0, r9
 21395 1164 FFF7FEFF 		bl	__aeabi_f2d
 21396              	.LVL1731:
 21397 1168 061C     		mov	r6, r0
 21398 116a 0F1C     		mov	r7, r1
 21399 116c 5046     		mov	r0, sl
 21400 116e FFF7FEFF 		bl	__aeabi_f2d
 21401              	.LVL1732:
 21402 1172 0890     		str	r0, [sp, #32]
 21403 1174 0991     		str	r1, [sp, #36]
 21404 1176 5846     		mov	r0, fp
 21405 1178 FFF7FEFF 		bl	__aeabi_f2d
 21406              	.LVL1733:
 21407 117c 0A90     		str	r0, [sp, #40]
 21408 117e 0B91     		str	r1, [sp, #44]
 21409 1180 4046     		mov	r0, r8
 21410 1182 FFF7FEFF 		bl	__aeabi_f2d
 21411              	.LVL1734:
 21412 1186 041C     		mov	r4, r0
 21413 1188 0D1C     		mov	r5, r1
 21414 118a 4A4B     		ldr	r3, .L1309+4
 21415 118c 484A     		ldr	r2, .L1309
 21416 118e FFF7FEFF 		bl	__aeabi_dmul
 21417              	.LVL1735:
 21418 1192 021C     		mov	r2, r0
 21419 1194 0B1C     		mov	r3, r1
 21420 1196 0A98     		ldr	r0, [sp, #40]
 21421 1198 0B99     		ldr	r1, [sp, #44]
 21422 119a FFF7FEFF 		bl	__aeabi_dadd
 21423              	.LVL1736:
 21424 119e 021C     		mov	r2, r0
 21425 11a0 0B1C     		mov	r3, r1
 21426 11a2 0898     		ldr	r0, [sp, #32]
 21427 11a4 0999     		ldr	r1, [sp, #36]
 21428 11a6 FFF7FEFF 		bl	__aeabi_dadd
 21429              	.LVL1737:
 21430 11aa 021C     		mov	r2, r0
 21431 11ac 0B1C     		mov	r3, r1
 21432 11ae 301C     		mov	r0, r6
 21433 11b0 391C     		mov	r1, r7
 21434 11b2 FFF7FEFF 		bl	__aeabi_dcmpgt
 21435              	.LVL1738:
 21436 11b6 0028     		cmp	r0, #0
 21437 11b8 16D0     		beq	.L1289
1006:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21438              		.loc 1 1006 0
 21439 11ba 9D23     		mov	r3, #157
 21440 11bc 424A     		ldr	r2, .L1309+24
 21441 11be D35C     		ldrb	r3, [r2, r3]
 21442 11c0 012B     		cmp	r3, #1
 21443 11c2 08D1     		bne	.L1192
1008:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_LEFT, 38, 13, OR );
 21444              		.loc 1 1008 0
 21445 11c4 0223     		mov	r3, #2
 21446 11c6 0093     		str	r3, [sp]
 21447 11c8 3B48     		ldr	r0, .L1309+8
 21448 11ca 4549     		ldr	r1, .L1309+48
 21449 11cc 2622     		mov	r2, #38
 21450 11ce 0D23     		mov	r3, #13
 21451 11d0 FFF7FEFF 		bl	write_bitmap
 21452              	.LVL1739:
 21453 11d4 9AE0     		b	.L1188
 21454              	.L1192:
1012:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X4_RIGHT, 38+6, 13, OR );
 21455              		.loc 1 1012 0
 21456 11d6 0223     		mov	r3, #2
 21457 11d8 0093     		str	r3, [sp]
 21458 11da 3748     		ldr	r0, .L1309+8
 21459 11dc 3F49     		ldr	r1, .L1309+44
 21460 11de 2C22     		mov	r2, #44
 21461 11e0 0D23     		mov	r3, #13
 21462 11e2 FFF7FEFF 		bl	write_bitmap
 21463              	.LVL1740:
 21464 11e6 91E0     		b	.L1188
 21465              	.L1289:
1015:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
 21466              		.loc 1 1015 0
 21467 11e8 201C     		mov	r0, r4
 21468 11ea 291C     		mov	r1, r5
 21469 11ec 221C     		mov	r2, r4
 21470 11ee 2B1C     		mov	r3, r5
 21471 11f0 FFF7FEFF 		bl	__aeabi_dadd
 21472              	.LVL1741:
 21473 11f4 021C     		mov	r2, r0
 21474 11f6 0B1C     		mov	r3, r1
 21475 11f8 0A98     		ldr	r0, [sp, #40]
 21476 11fa 0B99     		ldr	r1, [sp, #44]
 21477 11fc FFF7FEFF 		bl	__aeabi_dadd
 21478              	.LVL1742:
 21479 1200 021C     		mov	r2, r0
 21480 1202 0B1C     		mov	r3, r1
 21481 1204 0898     		ldr	r0, [sp, #32]
 21482 1206 0999     		ldr	r1, [sp, #36]
 21483 1208 FFF7FEFF 		bl	__aeabi_dadd
 21484              	.LVL1743:
 21485 120c 021C     		mov	r2, r0
 21486 120e 0B1C     		mov	r3, r1
 21487 1210 301C     		mov	r0, r6
 21488 1212 391C     		mov	r1, r7
 21489 1214 FFF7FEFF 		bl	__aeabi_dcmpgt
 21490              	.LVL1744:
 21491 1218 0028     		cmp	r0, #0
 21492 121a 16D0     		beq	.L1290
1017:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21493              		.loc 1 1017 0
 21494 121c 9D23     		mov	r3, #157
 21495 121e 2A4A     		ldr	r2, .L1309+24
 21496 1220 D35C     		ldrb	r3, [r2, r3]
 21497 1222 012B     		cmp	r3, #1
 21498 1224 08D1     		bne	.L1195
1019:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_LEFT, 38, 13, OR );
 21499              		.loc 1 1019 0
 21500 1226 0223     		mov	r3, #2
 21501 1228 0093     		str	r3, [sp]
 21502 122a 2348     		ldr	r0, .L1309+8
 21503 122c 2E49     		ldr	r1, .L1309+56
 21504 122e 2622     		mov	r2, #38
 21505 1230 0D23     		mov	r3, #13
 21506 1232 FFF7FEFF 		bl	write_bitmap
 21507              	.LVL1745:
 21508 1236 69E0     		b	.L1188
 21509              	.L1195:
1023:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X3_RIGHT, 38+6, 13, OR );
 21510              		.loc 1 1023 0
 21511 1238 0223     		mov	r3, #2
 21512 123a 0093     		str	r3, [sp]
 21513 123c 1E48     		ldr	r0, .L1309+8
 21514 123e 2949     		ldr	r1, .L1309+52
 21515 1240 2C22     		mov	r2, #44
 21516 1242 0D23     		mov	r3, #13
 21517 1244 FFF7FEFF 		bl	write_bitmap
 21518              	.LVL1746:
 21519 1248 60E0     		b	.L1188
 21520              	.L1290:
1026:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
 21521              		.loc 1 1026 0
 21522 124a 4046     		mov	r0, r8
 21523 124c 5946     		mov	r1, fp
 21524 124e FFF7FEFF 		bl	__aeabi_fadd
 21525              	.LVL1747:
 21526 1252 011C     		add	r1, r0, #0
 21527 1254 5046     		mov	r0, sl
 21528 1256 FFF7FEFF 		bl	__aeabi_fadd
 21529              	.LVL1748:
 21530 125a 011C     		add	r1, r0, #0
 21531 125c 4846     		mov	r0, r9
 21532 125e FFF7FEFF 		bl	__aeabi_fcmpgt
 21533              	.LVL1749:
 21534 1262 0028     		cmp	r0, #0
 21535 1264 16D0     		beq	.L1291
1028:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21536              		.loc 1 1028 0
 21537 1266 9D23     		mov	r3, #157
 21538 1268 174A     		ldr	r2, .L1309+24
 21539 126a D35C     		ldrb	r3, [r2, r3]
 21540 126c 012B     		cmp	r3, #1
 21541 126e 08D1     		bne	.L1198
1030:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_LEFT, 38, 13, OR );
 21542              		.loc 1 1030 0
 21543 1270 0223     		mov	r3, #2
 21544 1272 0093     		str	r3, [sp]
 21545 1274 1048     		ldr	r0, .L1309+8
 21546 1276 1E49     		ldr	r1, .L1309+64
 21547 1278 2622     		mov	r2, #38
 21548 127a 0D23     		mov	r3, #13
 21549 127c FFF7FEFF 		bl	write_bitmap
 21550              	.LVL1750:
 21551 1280 44E0     		b	.L1188
 21552              	.L1198:
1034:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X2_RIGHT, 38+6, 13, OR );
 21553              		.loc 1 1034 0
 21554 1282 0223     		mov	r3, #2
 21555 1284 0093     		str	r3, [sp]
 21556 1286 0C48     		ldr	r0, .L1309+8
 21557 1288 1849     		ldr	r1, .L1309+60
 21558 128a 2C22     		mov	r2, #44
 21559 128c 0D23     		mov	r3, #13
 21560 128e FFF7FEFF 		bl	write_bitmap
 21561              	.LVL1751:
 21562 1292 3BE0     		b	.L1188
 21563              	.L1291:
1039:screens.c     **** 					if( pFac.pf.GW302_BaleIndicator == BI_FILL)
 21564              		.loc 1 1039 0
 21565 1294 9D23     		mov	r3, #157
 21566 1296 0C4A     		ldr	r2, .L1309+24
 21567 1298 D35C     		ldrb	r3, [r2, r3]
 21568 129a 012B     		cmp	r3, #1
 21569 129c 2ED1     		bne	.L1199
1041:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_LEFT, 38, 13, OR );
 21570              		.loc 1 1041 0
 21571 129e 0223     		mov	r3, #2
 21572 12a0 0093     		str	r3, [sp]
 21573 12a2 0548     		ldr	r0, .L1309+8
 21574 12a4 1449     		ldr	r1, .L1309+72
 21575 12a6 2622     		mov	r2, #38
 21576 12a8 0D23     		mov	r3, #13
 21577 12aa FFF7FEFF 		bl	write_bitmap
 21578              	.LVL1752:
 21579 12ae 2DE0     		b	.L1188
 21580              	.L1310:
 21581              		.align	3
 21582              	.L1309:
 21583 12b0 00000000 		.word	0
 21584 12b4 00000840 		.word	1074266112
 21585 12b8 00000000 		.word	adm
 21586 12bc 00000000 		.word	KICKER_DOWN
 21587 12c0 00F6FFFF 		.word	-2560
 21588 12c4 00000000 		.word	KNIFE
 21589 12c8 00000000 		.word	pFac
 21590 12cc 00000000 		.word	stagecomp
 21591 12d0 00004040 		.word	1077936128
 21592 12d4 00000000 		.word	.LANCHOR30
 21593 12d8 00000000 		.word	BaleShapeVolts
 21594 12dc 00000000 		.word	DRIVING_ARROWS_X4_RIGHT
 21595 12e0 00000000 		.word	DRIVING_ARROWS_X4_LEFT
 21596 12e4 00000000 		.word	DRIVING_ARROWS_X3_RIGHT
 21597 12e8 00000000 		.word	DRIVING_ARROWS_X3_LEFT
 21598 12ec 00000000 		.word	DRIVING_ARROWS_X2_RIGHT
 21599 12f0 00000000 		.word	DRIVING_ARROWS_X2_LEFT
 21600 12f4 00000000 		.word	DRIVING_ARROWS_X1_RIGHT
 21601 12f8 00000000 		.word	DRIVING_ARROWS_X1_LEFT
 21602              	.L1199:
1045:screens.c     **** 						write_bitmap( adm, DRIVING_ARROWS_X1_RIGHT, 38+6, 13, OR );
 21603              		.loc 1 1045 0
 21604 12fc 0223     		mov	r3, #2
 21605 12fe 0093     		str	r3, [sp]
 21606 1300 DD48     		ldr	r0, .L1311+8
 21607 1302 DE49     		ldr	r1, .L1311+12
 21608 1304 2C22     		mov	r2, #44
 21609 1306 0D23     		mov	r3, #13
 21610 1308 FFF7FEFF 		bl	write_bitmap
 21611              	.LVL1753:
 21612              	.L1188:
1052:screens.c     **** 				write_bitmap( adm, DRIVING_ARROWS_NONE, 38+3, 13, OR ); // drawing just the middle dot
 21613              		.loc 1 1052 0
 21614 130c 0223     		mov	r3, #2
 21615 130e 0093     		str	r3, [sp]
 21616 1310 D948     		ldr	r0, .L1311+8
 21617 1312 DB49     		ldr	r1, .L1311+16
 21618 1314 2922     		mov	r2, #41
 21619 1316 0D23     		mov	r3, #13
 21620 1318 FFF7FEFF 		bl	write_bitmap
 21621              	.LVL1754:
 21622 131c 10E0     		b	.L1200
 21623              	.LVL1755:
 21624              	.L1175:
1057:screens.c     **** 			if( !ArrowsCleared )
 21625              		.loc 1 1057 0
 21626 131e D94B     		ldr	r3, .L1311+20
 21627 1320 1B78     		ldrb	r3, [r3]
 21628 1322 002B     		cmp	r3, #0
 21629 1324 0CD1     		bne	.L1200
1060:screens.c     **** 				ArrowsCleared = 1;
 21630              		.loc 1 1060 0
 21631 1326 0122     		mov	r2, #1
 21632 1328 D64B     		ldr	r3, .L1311+20
 21633 132a 1A70     		strb	r2, [r3]
1061:screens.c     **** 				draw_box( adm, 38, 13, (38+67+6), (13+11), CLEAR );
 21634              		.loc 1 1061 0
 21635 132c 1823     		mov	r3, #24
 21636 132e 0093     		str	r3, [sp]
 21637 1330 4023     		mov	r3, #64
 21638 1332 0193     		str	r3, [sp, #4]
 21639 1334 D048     		ldr	r0, .L1311+8
 21640 1336 2621     		mov	r1, #38
 21641 1338 0D22     		mov	r2, #13
 21642 133a 6F23     		mov	r3, #111
 21643 133c FFF7FEFF 		bl	draw_box
 21644              	.LVL1756:
 21645              	.L1200:
1070:screens.c     **** 	if( pFac.pf.GW302_BaleShapeIndicator == BSI_BEEP ) // Bale Shape Indicator to be displayed with be
 21646              		.loc 1 1070 0
 21647 1340 6923     		mov	r3, #105
 21648 1342 D14A     		ldr	r2, .L1311+24
 21649 1344 D35C     		ldrb	r3, [r2, r3]
 21650 1346 022B     		cmp	r3, #2
 21651 1348 00D0     		beq	.LCB20847
 21652 134a E0E1     		b	.L1174	@long jump
 21653              	.LCB20847:
1072:screens.c     **** 		if( CHAMBER_CLOSED && (stagecomp == SC_CLEAR) && !DrivingArrowBeepsDisabled )
 21654              		.loc 1 1072 0
 21655 134c CF4B     		ldr	r3, .L1311+28
 21656 134e DB6B     		ldr	r3, [r3, #60]
 21657 1350 5A02     		lsl	r2, r3, #9
 21658 1352 00D4     		bmi	.LCB20853
 21659 1354 D2E1     		b	.L1201	@long jump
 21660              	.LCB20853:
1072:screens.c     **** 		if( CHAMBER_CLOSED && (stagecomp == SC_CLEAR) && !DrivingArrowBeepsDisabled )
 21661              		.loc 1 1072 0 is_stmt 0 discriminator 1
 21662 1356 CE4B     		ldr	r3, .L1311+32
 21663 1358 1B78     		ldrb	r3, [r3]
 21664 135a 002B     		cmp	r3, #0
 21665 135c 00D0     		beq	.LCB20857
 21666 135e CDE1     		b	.L1201	@long jump
 21667              	.LCB20857:
 21668 1360 CC4B     		ldr	r3, .L1311+36
 21669 1362 1B78     		ldrb	r3, [r3]
 21670 1364 002B     		cmp	r3, #0
 21671 1366 00D0     		beq	.LCB20861
 21672 1368 C8E1     		b	.L1201	@long jump
 21673              	.LCB20861:
1074:screens.c     **** 			if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - pFac.pf.GW302_FillPotIgnore) )
 21674              		.loc 1 1074 0 is_stmt 1
 21675 136a C74B     		ldr	r3, .L1311+24
 21676 136c D96E     		ldr	r1, [r3, #108]
 21677 136e 8A46     		mov	sl, r1
 21678 1370 9822     		mov	r2, #152
 21679 1372 9A58     		ldr	r2, [r3, r2]
 21680 1374 9346     		mov	fp, r2
 21681 1376 C84B     		ldr	r3, .L1311+40
 21682 1378 1B68     		ldr	r3, [r3]
 21683 137a 9946     		mov	r9, r3
 21684 137c 081C     		add	r0, r1, #0
 21685 137e 111C     		add	r1, r2, #0
 21686 1380 FFF7FEFF 		bl	__aeabi_fsub
 21687              	.LVL1757:
 21688 1384 4946     		mov	r1, r9
 21689 1386 FFF7FEFF 		bl	__aeabi_fcmpgt
 21690              	.LVL1758:
 21691 138a 0028     		cmp	r0, #0
 21692 138c 00D1     		bne	.LCB20879
 21693 138e BDE0     		b	.L1292	@long jump
 21694              	.LCB20879:
1076:screens.c     **** 				if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+(3.0*
 21695              		.loc 1 1076 0
 21696 1390 4846     		mov	r0, r9
 21697 1392 FFF7FEFF 		bl	__aeabi_f2d
 21698              	.LVL1759:
 21699 1396 061C     		mov	r6, r0
 21700 1398 0F1C     		mov	r7, r1
 21701 139a 5046     		mov	r0, sl
 21702 139c FFF7FEFF 		bl	__aeabi_f2d
 21703              	.LVL1760:
 21704 13a0 0890     		str	r0, [sp, #32]
 21705 13a2 0991     		str	r1, [sp, #36]
 21706 13a4 5846     		mov	r0, fp
 21707 13a6 FFF7FEFF 		bl	__aeabi_f2d
 21708              	.LVL1761:
 21709 13aa 0A90     		str	r0, [sp, #40]
 21710 13ac 0B91     		str	r1, [sp, #44]
 21711 13ae 4046     		mov	r0, r8
 21712 13b0 FFF7FEFF 		bl	__aeabi_f2d
 21713              	.LVL1762:
 21714 13b4 041C     		mov	r4, r0
 21715 13b6 0D1C     		mov	r5, r1
 21716 13b8 AE4B     		ldr	r3, .L1311+4
 21717 13ba AD4A     		ldr	r2, .L1311
 21718 13bc FFF7FEFF 		bl	__aeabi_dmul
 21719              	.LVL1763:
 21720 13c0 021C     		mov	r2, r0
 21721 13c2 0B1C     		mov	r3, r1
 21722 13c4 0A98     		ldr	r0, [sp, #40]
 21723 13c6 0B99     		ldr	r1, [sp, #44]
 21724 13c8 FFF7FEFF 		bl	__aeabi_dadd
 21725              	.LVL1764:
 21726 13cc 021C     		mov	r2, r0
 21727 13ce 0B1C     		mov	r3, r1
 21728 13d0 0898     		ldr	r0, [sp, #32]
 21729 13d2 0999     		ldr	r1, [sp, #36]
 21730 13d4 FFF7FEFF 		bl	__aeabi_dsub
 21731              	.LVL1765:
 21732 13d8 021C     		mov	r2, r0
 21733 13da 0B1C     		mov	r3, r1
 21734 13dc 301C     		mov	r0, r6
 21735 13de 391C     		mov	r1, r7
 21736 13e0 FFF7FEFF 		bl	__aeabi_dcmplt
 21737              	.LVL1766:
 21738 13e4 0028     		cmp	r0, #0
 21739 13e6 1AD0     		beq	.L1293
1079:screens.c     **** 					if( DrivingArrowsX4BeepDelay )
 21740              		.loc 1 1079 0
 21741 13e8 AC4B     		ldr	r3, .L1311+44
 21742 13ea 1B78     		ldrb	r3, [r3]
 21743 13ec 002B     		cmp	r3, #0
 21744 13ee 03D0     		beq	.L1206
1081:screens.c     **** 						DrivingArrowsX4BeepDelay--;
 21745              		.loc 1 1081 0
 21746 13f0 013B     		sub	r3, r3, #1
 21747 13f2 AA4A     		ldr	r2, .L1311+44
 21748 13f4 1370     		strb	r3, [r2]
 21749 13f6 08E0     		b	.L1207
 21750              	.L1206:
1085:screens.c     **** 						buzz_count = 4;
 21751              		.loc 1 1085 0
 21752 13f8 0422     		mov	r2, #4
 21753 13fa A94B     		ldr	r3, .L1311+48
 21754 13fc 1A70     		strb	r2, [r3]
1086:screens.c     **** 						buzz_length = DRIVING_ARROWS_X4_BEEP; // Beep length (for each of 4 beeps)
 21755              		.loc 1 1086 0
 21756 13fe 3222     		mov	r2, #50
 21757 1400 A84B     		ldr	r3, .L1311+52
 21758 1402 1A60     		str	r2, [r3]
1087:screens.c     **** 						DrivingArrowsX4BeepDelay = DRIVING_ARROWS_X4_BEEP_DELAY; // Delay (before first beep of 4 sta
 21759              		.loc 1 1087 0
 21760 1404 0F22     		mov	r2, #15
 21761 1406 A54B     		ldr	r3, .L1311+44
 21762 1408 1A70     		strb	r2, [r3]
 21763              	.L1207:
1090:screens.c     **** 					DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // To delay hearing 3 beeps if drivin
 21764              		.loc 1 1090 0
 21765 140a 1422     		mov	r2, #20
 21766 140c A64B     		ldr	r3, .L1311+56
 21767 140e 1A70     		strb	r2, [r3]
1091:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
 21768              		.loc 1 1091 0
 21769 1410 1922     		mov	r2, #25
 21770 1412 A64B     		ldr	r3, .L1311+60
 21771 1414 1A70     		strb	r2, [r3]
1092:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
 21772              		.loc 1 1092 0
 21773 1416 1E22     		mov	r2, #30
 21774 1418 A54B     		ldr	r3, .L1311+64
 21775 141a 1A70     		strb	r2, [r3]
 21776 141c 77E1     		b	.L1174
 21777              	.L1293:
1094:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
 21778              		.loc 1 1094 0
 21779 141e 201C     		mov	r0, r4
 21780 1420 291C     		mov	r1, r5
 21781 1422 221C     		mov	r2, r4
 21782 1424 2B1C     		mov	r3, r5
 21783 1426 FFF7FEFF 		bl	__aeabi_dadd
 21784              	.LVL1767:
 21785 142a 021C     		mov	r2, r0
 21786 142c 0B1C     		mov	r3, r1
 21787 142e 0A98     		ldr	r0, [sp, #40]
 21788 1430 0B99     		ldr	r1, [sp, #44]
 21789 1432 FFF7FEFF 		bl	__aeabi_dadd
 21790              	.LVL1768:
 21791 1436 021C     		mov	r2, r0
 21792 1438 0B1C     		mov	r3, r1
 21793 143a 0898     		ldr	r0, [sp, #32]
 21794 143c 0999     		ldr	r1, [sp, #36]
 21795 143e FFF7FEFF 		bl	__aeabi_dsub
 21796              	.LVL1769:
 21797 1442 021C     		mov	r2, r0
 21798 1444 0B1C     		mov	r3, r1
 21799 1446 301C     		mov	r0, r6
 21800 1448 391C     		mov	r1, r7
 21801 144a FFF7FEFF 		bl	__aeabi_dcmplt
 21802              	.LVL1770:
 21803 144e 0028     		cmp	r0, #0
 21804 1450 1AD0     		beq	.L1294
1097:screens.c     **** 					if( DrivingArrowsX3BeepDelay )
 21805              		.loc 1 1097 0
 21806 1452 954B     		ldr	r3, .L1311+56
 21807 1454 1B78     		ldrb	r3, [r3]
 21808 1456 002B     		cmp	r3, #0
 21809 1458 03D0     		beq	.L1210
1099:screens.c     **** 						DrivingArrowsX3BeepDelay--;
 21810              		.loc 1 1099 0
 21811 145a 013B     		sub	r3, r3, #1
 21812 145c 924A     		ldr	r2, .L1311+56
 21813 145e 1370     		strb	r3, [r2]
 21814 1460 08E0     		b	.L1211
 21815              	.L1210:
1103:screens.c     **** 						buzz_count = 3;
 21816              		.loc 1 1103 0
 21817 1462 0322     		mov	r2, #3
 21818 1464 8E4B     		ldr	r3, .L1311+48
 21819 1466 1A70     		strb	r2, [r3]
1104:screens.c     **** 						buzz_length = DRIVING_ARROWS_X3_BEEP; // Beep length (for each of 3 beeps)
 21820              		.loc 1 1104 0
 21821 1468 6422     		mov	r2, #100
 21822 146a 8E4B     		ldr	r3, .L1311+52
 21823 146c 1A60     		str	r2, [r3]
1105:screens.c     **** 						DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // Delay (before first beep of 3 sta
 21824              		.loc 1 1105 0
 21825 146e 1422     		mov	r2, #20
 21826 1470 8D4B     		ldr	r3, .L1311+56
 21827 1472 1A70     		strb	r2, [r3]
 21828              	.L1211:
1108:screens.c     **** 					DrivingArrowsX4BeepDelay = 0;  // To hear 4 beeps immediately if driving gets worst
 21829              		.loc 1 1108 0
 21830 1474 0022     		mov	r2, #0
 21831 1476 894B     		ldr	r3, .L1311+44
 21832 1478 1A70     		strb	r2, [r3]
1109:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
 21833              		.loc 1 1109 0
 21834 147a 1922     		mov	r2, #25
 21835 147c 8B4B     		ldr	r3, .L1311+60
 21836 147e 1A70     		strb	r2, [r3]
1110:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
 21837              		.loc 1 1110 0
 21838 1480 1E22     		mov	r2, #30
 21839 1482 8B4B     		ldr	r3, .L1311+64
 21840 1484 1A70     		strb	r2, [r3]
 21841 1486 42E1     		b	.L1174
 21842              	.L1294:
1112:screens.c     **** 				else if( BaleShapeVolts < (pFac.pf.GW302_BaleShapeIndicatorZero - (pFac.pf.GW302_FillPotIgnore+
 21843              		.loc 1 1112 0
 21844 1488 4046     		mov	r0, r8
 21845 148a 5946     		mov	r1, fp
 21846 148c FFF7FEFF 		bl	__aeabi_fadd
 21847              	.LVL1771:
 21848 1490 011C     		add	r1, r0, #0
 21849 1492 5046     		mov	r0, sl
 21850 1494 FFF7FEFF 		bl	__aeabi_fsub
 21851              	.LVL1772:
 21852 1498 011C     		add	r1, r0, #0
 21853 149a 4846     		mov	r0, r9
 21854 149c FFF7FEFF 		bl	__aeabi_fcmplt
 21855              	.LVL1773:
 21856 14a0 0028     		cmp	r0, #0
 21857 14a2 19D0     		beq	.L1295
1115:screens.c     **** 					if( DrivingArrowsX2BeepDelay )
 21858              		.loc 1 1115 0
 21859 14a4 814B     		ldr	r3, .L1311+60
 21860 14a6 1B78     		ldrb	r3, [r3]
 21861 14a8 002B     		cmp	r3, #0
 21862 14aa 03D0     		beq	.L1214
1117:screens.c     **** 						DrivingArrowsX2BeepDelay--;
 21863              		.loc 1 1117 0
 21864 14ac 013B     		sub	r3, r3, #1
 21865 14ae 7F4A     		ldr	r2, .L1311+60
 21866 14b0 1370     		strb	r3, [r2]
 21867 14b2 08E0     		b	.L1215
 21868              	.L1214:
1121:screens.c     **** 						buzz_count = 2;
 21869              		.loc 1 1121 0
 21870 14b4 0222     		mov	r2, #2
 21871 14b6 7A4B     		ldr	r3, .L1311+48
 21872 14b8 1A70     		strb	r2, [r3]
1122:screens.c     **** 						buzz_length = DRIVING_ARROWS_X2_BEEP; // Beep length (for each of 2 beeps)
 21873              		.loc 1 1122 0
 21874 14ba C822     		mov	r2, #200
 21875 14bc 794B     		ldr	r3, .L1311+52
 21876 14be 1A60     		str	r2, [r3]
1123:screens.c     **** 						DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // Delay (before first beep of 2 sta
 21877              		.loc 1 1123 0
 21878 14c0 1922     		mov	r2, #25
 21879 14c2 7A4B     		ldr	r3, .L1311+60
 21880 14c4 1A70     		strb	r2, [r3]
 21881              	.L1215:
1126:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
 21882              		.loc 1 1126 0
 21883 14c6 0023     		mov	r3, #0
 21884 14c8 744A     		ldr	r2, .L1311+44
 21885 14ca 1370     		strb	r3, [r2]
1127:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
 21886              		.loc 1 1127 0
 21887 14cc 764A     		ldr	r2, .L1311+56
 21888 14ce 1370     		strb	r3, [r2]
1128:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
 21889              		.loc 1 1128 0
 21890 14d0 1E22     		mov	r2, #30
 21891 14d2 774B     		ldr	r3, .L1311+64
 21892 14d4 1A70     		strb	r2, [r3]
 21893 14d6 1AE1     		b	.L1174
 21894              	.L1295:
1133:screens.c     **** 					if( DrivingArrowsX1BeepDelay )
 21895              		.loc 1 1133 0
 21896 14d8 754B     		ldr	r3, .L1311+64
 21897 14da 1B78     		ldrb	r3, [r3]
 21898 14dc 002B     		cmp	r3, #0
 21899 14de 03D0     		beq	.L1216
1135:screens.c     **** 						DrivingArrowsX1BeepDelay--;
 21900              		.loc 1 1135 0
 21901 14e0 013B     		sub	r3, r3, #1
 21902 14e2 734A     		ldr	r2, .L1311+64
 21903 14e4 1370     		strb	r3, [r2]
 21904 14e6 09E0     		b	.L1217
 21905              	.L1216:
1139:screens.c     **** 						buzz_count = 1;
 21906              		.loc 1 1139 0
 21907 14e8 0122     		mov	r2, #1
 21908 14ea 6D4B     		ldr	r3, .L1311+48
 21909 14ec 1A70     		strb	r2, [r3]
1140:screens.c     **** 						buzz_length = DRIVING_ARROWS_X1_BEEP; // Beep length
 21910              		.loc 1 1140 0
 21911 14ee C822     		mov	r2, #200
 21912 14f0 5200     		lsl	r2, r2, #1
 21913 14f2 6C4B     		ldr	r3, .L1311+52
 21914 14f4 1A60     		str	r2, [r3]
1141:screens.c     **** 						DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // Delay (before beep starts)
 21915              		.loc 1 1141 0
 21916 14f6 1E22     		mov	r2, #30
 21917 14f8 6D4B     		ldr	r3, .L1311+64
 21918 14fa 1A70     		strb	r2, [r3]
 21919              	.L1217:
1144:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
 21920              		.loc 1 1144 0
 21921 14fc 0023     		mov	r3, #0
 21922 14fe 674A     		ldr	r2, .L1311+44
 21923 1500 1370     		strb	r3, [r2]
1145:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
 21924              		.loc 1 1145 0
 21925 1502 694A     		ldr	r2, .L1311+56
 21926 1504 1370     		strb	r3, [r2]
1146:screens.c     **** 					DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately if driving gets worst
 21927              		.loc 1 1146 0
 21928 1506 694A     		ldr	r2, .L1311+60
 21929 1508 1370     		strb	r3, [r2]
 21930 150a 00E1     		b	.L1174
 21931              	.L1292:
1149:screens.c     **** 			else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + pFac.pf.GW302_FillPotIgnore) )
 21932              		.loc 1 1149 0
 21933 150c 5046     		mov	r0, sl
 21934 150e 5946     		mov	r1, fp
 21935 1510 FFF7FEFF 		bl	__aeabi_fadd
 21936              	.LVL1774:
 21937 1514 011C     		add	r1, r0, #0
 21938 1516 4846     		mov	r0, r9
 21939 1518 FFF7FEFF 		bl	__aeabi_fcmpgt
 21940              	.LVL1775:
 21941 151c 0028     		cmp	r0, #0
 21942 151e 00D1     		bne	.LCB21105
 21943 1520 E2E0     		b	.L1296	@long jump
 21944              	.LCB21105:
1151:screens.c     **** 				if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+(3.0*
 21945              		.loc 1 1151 0
 21946 1522 4846     		mov	r0, r9
 21947 1524 FFF7FEFF 		bl	__aeabi_f2d
 21948              	.LVL1776:
 21949 1528 061C     		mov	r6, r0
 21950 152a 0F1C     		mov	r7, r1
 21951 152c 5046     		mov	r0, sl
 21952 152e FFF7FEFF 		bl	__aeabi_f2d
 21953              	.LVL1777:
 21954 1532 0890     		str	r0, [sp, #32]
 21955 1534 0991     		str	r1, [sp, #36]
 21956 1536 5846     		mov	r0, fp
 21957 1538 FFF7FEFF 		bl	__aeabi_f2d
 21958              	.LVL1778:
 21959 153c 0A90     		str	r0, [sp, #40]
 21960 153e 0B91     		str	r1, [sp, #44]
 21961 1540 4046     		mov	r0, r8
 21962 1542 FFF7FEFF 		bl	__aeabi_f2d
 21963              	.LVL1779:
 21964 1546 041C     		mov	r4, r0
 21965 1548 0D1C     		mov	r5, r1
 21966 154a 4A4B     		ldr	r3, .L1311+4
 21967 154c 484A     		ldr	r2, .L1311
 21968 154e FFF7FEFF 		bl	__aeabi_dmul
 21969              	.LVL1780:
 21970 1552 021C     		mov	r2, r0
 21971 1554 0B1C     		mov	r3, r1
 21972 1556 0A98     		ldr	r0, [sp, #40]
 21973 1558 0B99     		ldr	r1, [sp, #44]
 21974 155a FFF7FEFF 		bl	__aeabi_dadd
 21975              	.LVL1781:
 21976 155e 021C     		mov	r2, r0
 21977 1560 0B1C     		mov	r3, r1
 21978 1562 0898     		ldr	r0, [sp, #32]
 21979 1564 0999     		ldr	r1, [sp, #36]
 21980 1566 FFF7FEFF 		bl	__aeabi_dadd
 21981              	.LVL1782:
 21982 156a 021C     		mov	r2, r0
 21983 156c 0B1C     		mov	r3, r1
 21984 156e 301C     		mov	r0, r6
 21985 1570 391C     		mov	r1, r7
 21986 1572 FFF7FEFF 		bl	__aeabi_dcmpgt
 21987              	.LVL1783:
 21988 1576 0028     		cmp	r0, #0
 21989 1578 1AD0     		beq	.L1297
1154:screens.c     **** 					if( DrivingArrowsX4BeepDelay )
 21990              		.loc 1 1154 0
 21991 157a 484B     		ldr	r3, .L1311+44
 21992 157c 1B78     		ldrb	r3, [r3]
 21993 157e 002B     		cmp	r3, #0
 21994 1580 03D0     		beq	.L1222
1156:screens.c     **** 						DrivingArrowsX4BeepDelay--;
 21995              		.loc 1 1156 0
 21996 1582 013B     		sub	r3, r3, #1
 21997 1584 454A     		ldr	r2, .L1311+44
 21998 1586 1370     		strb	r3, [r2]
 21999 1588 08E0     		b	.L1223
 22000              	.L1222:
1160:screens.c     **** 						buzz_count = 4;
 22001              		.loc 1 1160 0
 22002 158a 0422     		mov	r2, #4
 22003 158c 444B     		ldr	r3, .L1311+48
 22004 158e 1A70     		strb	r2, [r3]
1161:screens.c     **** 						buzz_length = DRIVING_ARROWS_X4_BEEP; // Beep length (for each of 4 beeps)
 22005              		.loc 1 1161 0
 22006 1590 3222     		mov	r2, #50
 22007 1592 444B     		ldr	r3, .L1311+52
 22008 1594 1A60     		str	r2, [r3]
1162:screens.c     **** 						DrivingArrowsX4BeepDelay = DRIVING_ARROWS_X4_BEEP_DELAY; // Delay (before first beep of 4 sta
 22009              		.loc 1 1162 0
 22010 1596 0F22     		mov	r2, #15
 22011 1598 404B     		ldr	r3, .L1311+44
 22012 159a 1A70     		strb	r2, [r3]
 22013              	.L1223:
1165:screens.c     **** 					DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // To delay hearing 3 beeps if drivin
 22014              		.loc 1 1165 0
 22015 159c 1422     		mov	r2, #20
 22016 159e 424B     		ldr	r3, .L1311+56
 22017 15a0 1A70     		strb	r2, [r3]
1166:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
 22018              		.loc 1 1166 0
 22019 15a2 1922     		mov	r2, #25
 22020 15a4 414B     		ldr	r3, .L1311+60
 22021 15a6 1A70     		strb	r2, [r3]
1167:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
 22022              		.loc 1 1167 0
 22023 15a8 1E22     		mov	r2, #30
 22024 15aa 414B     		ldr	r3, .L1311+64
 22025 15ac 1A70     		strb	r2, [r3]
 22026 15ae AEE0     		b	.L1174
 22027              	.L1297:
1169:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
 22028              		.loc 1 1169 0
 22029 15b0 201C     		mov	r0, r4
 22030 15b2 291C     		mov	r1, r5
 22031 15b4 221C     		mov	r2, r4
 22032 15b6 2B1C     		mov	r3, r5
 22033 15b8 FFF7FEFF 		bl	__aeabi_dadd
 22034              	.LVL1784:
 22035 15bc 021C     		mov	r2, r0
 22036 15be 0B1C     		mov	r3, r1
 22037 15c0 0A98     		ldr	r0, [sp, #40]
 22038 15c2 0B99     		ldr	r1, [sp, #44]
 22039 15c4 FFF7FEFF 		bl	__aeabi_dadd
 22040              	.LVL1785:
 22041 15c8 021C     		mov	r2, r0
 22042 15ca 0B1C     		mov	r3, r1
 22043 15cc 0898     		ldr	r0, [sp, #32]
 22044 15ce 0999     		ldr	r1, [sp, #36]
 22045 15d0 FFF7FEFF 		bl	__aeabi_dadd
 22046              	.LVL1786:
 22047 15d4 021C     		mov	r2, r0
 22048 15d6 0B1C     		mov	r3, r1
 22049 15d8 301C     		mov	r0, r6
 22050 15da 391C     		mov	r1, r7
 22051 15dc FFF7FEFF 		bl	__aeabi_dcmpgt
 22052              	.LVL1787:
 22053 15e0 0028     		cmp	r0, #0
 22054 15e2 1AD0     		beq	.L1298
1172:screens.c     **** 					if( DrivingArrowsX3BeepDelay )
 22055              		.loc 1 1172 0
 22056 15e4 304B     		ldr	r3, .L1311+56
 22057 15e6 1B78     		ldrb	r3, [r3]
 22058 15e8 002B     		cmp	r3, #0
 22059 15ea 03D0     		beq	.L1226
1174:screens.c     **** 						DrivingArrowsX3BeepDelay--;
 22060              		.loc 1 1174 0
 22061 15ec 013B     		sub	r3, r3, #1
 22062 15ee 2E4A     		ldr	r2, .L1311+56
 22063 15f0 1370     		strb	r3, [r2]
 22064 15f2 08E0     		b	.L1227
 22065              	.L1226:
1178:screens.c     **** 						buzz_count = 3;
 22066              		.loc 1 1178 0
 22067 15f4 0322     		mov	r2, #3
 22068 15f6 2A4B     		ldr	r3, .L1311+48
 22069 15f8 1A70     		strb	r2, [r3]
1179:screens.c     **** 						buzz_length = DRIVING_ARROWS_X3_BEEP; // Beep length (for each of 3 beeps)
 22070              		.loc 1 1179 0
 22071 15fa 6422     		mov	r2, #100
 22072 15fc 294B     		ldr	r3, .L1311+52
 22073 15fe 1A60     		str	r2, [r3]
1180:screens.c     **** 						DrivingArrowsX3BeepDelay = DRIVING_ARROWS_X3_BEEP_DELAY; // Delay (before first beep of 3 sta
 22074              		.loc 1 1180 0
 22075 1600 1422     		mov	r2, #20
 22076 1602 294B     		ldr	r3, .L1311+56
 22077 1604 1A70     		strb	r2, [r3]
 22078              	.L1227:
1183:screens.c     **** 					DrivingArrowsX4BeepDelay = 0;  // To hear 4 beeps immediately if driving gets worst
 22079              		.loc 1 1183 0
 22080 1606 0022     		mov	r2, #0
 22081 1608 244B     		ldr	r3, .L1311+44
 22082 160a 1A70     		strb	r2, [r3]
1184:screens.c     **** 					DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // To delay hearing 2 beeps if drivin
 22083              		.loc 1 1184 0
 22084 160c 1922     		mov	r2, #25
 22085 160e 274B     		ldr	r3, .L1311+60
 22086 1610 1A70     		strb	r2, [r3]
1185:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
 22087              		.loc 1 1185 0
 22088 1612 1E22     		mov	r2, #30
 22089 1614 264B     		ldr	r3, .L1311+64
 22090 1616 1A70     		strb	r2, [r3]
 22091 1618 79E0     		b	.L1174
 22092              	.L1298:
1187:screens.c     **** 				else if( BaleShapeVolts > (pFac.pf.GW302_BaleShapeIndicatorZero + (pFac.pf.GW302_FillPotIgnore+
 22093              		.loc 1 1187 0
 22094 161a 4046     		mov	r0, r8
 22095 161c 5946     		mov	r1, fp
 22096 161e FFF7FEFF 		bl	__aeabi_fadd
 22097              	.LVL1788:
 22098 1622 011C     		add	r1, r0, #0
 22099 1624 5046     		mov	r0, sl
 22100 1626 FFF7FEFF 		bl	__aeabi_fadd
 22101              	.LVL1789:
 22102 162a 011C     		add	r1, r0, #0
 22103 162c 4846     		mov	r0, r9
 22104 162e FFF7FEFF 		bl	__aeabi_fcmpgt
 22105              	.LVL1790:
 22106 1632 0028     		cmp	r0, #0
 22107 1634 3ED0     		beq	.L1299
1190:screens.c     **** 					if( DrivingArrowsX2BeepDelay )
 22108              		.loc 1 1190 0
 22109 1636 1D4B     		ldr	r3, .L1311+60
 22110 1638 1B78     		ldrb	r3, [r3]
 22111 163a 002B     		cmp	r3, #0
 22112 163c 03D0     		beq	.L1230
1192:screens.c     **** 						DrivingArrowsX2BeepDelay--;
 22113              		.loc 1 1192 0
 22114 163e 013B     		sub	r3, r3, #1
 22115 1640 1A4A     		ldr	r2, .L1311+60
 22116 1642 1370     		strb	r3, [r2]
 22117 1644 08E0     		b	.L1231
 22118              	.L1230:
1196:screens.c     **** 						buzz_count = 2;
 22119              		.loc 1 1196 0
 22120 1646 0222     		mov	r2, #2
 22121 1648 154B     		ldr	r3, .L1311+48
 22122 164a 1A70     		strb	r2, [r3]
1197:screens.c     **** 						buzz_length = DRIVING_ARROWS_X2_BEEP; // Beep length (for each of 2 beeps)
 22123              		.loc 1 1197 0
 22124 164c C822     		mov	r2, #200
 22125 164e 154B     		ldr	r3, .L1311+52
 22126 1650 1A60     		str	r2, [r3]
1198:screens.c     **** 						DrivingArrowsX2BeepDelay = DRIVING_ARROWS_X2_BEEP_DELAY; // Delay (before first beep of 2 sta
 22127              		.loc 1 1198 0
 22128 1652 1922     		mov	r2, #25
 22129 1654 154B     		ldr	r3, .L1311+60
 22130 1656 1A70     		strb	r2, [r3]
 22131              	.L1231:
1201:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
 22132              		.loc 1 1201 0
 22133 1658 0023     		mov	r3, #0
 22134 165a 104A     		ldr	r2, .L1311+44
 22135 165c 1370     		strb	r3, [r2]
1202:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
 22136              		.loc 1 1202 0
 22137 165e 124A     		ldr	r2, .L1311+56
 22138 1660 1370     		strb	r3, [r2]
1203:screens.c     **** 					DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // To delay hearing 1 beep if driving
 22139              		.loc 1 1203 0
 22140 1662 1E22     		mov	r2, #30
 22141 1664 124B     		ldr	r3, .L1311+64
 22142 1666 1A70     		strb	r2, [r3]
 22143 1668 51E0     		b	.L1174
 22144              	.L1312:
 22145 166a C046C046 		.align	3
 22145      C046
 22146              	.L1311:
 22147 1670 00000000 		.word	0
 22148 1674 00000840 		.word	1074266112
 22149 1678 00000000 		.word	adm
 22150 167c 00000000 		.word	DRIVING_ARROWS_X1_RIGHT
 22151 1680 00000000 		.word	DRIVING_ARROWS_NONE
 22152 1684 00000000 		.word	.LANCHOR30
 22153 1688 00000000 		.word	pFac
 22154 168c 00F6FFFF 		.word	-2560
 22155 1690 00000000 		.word	stagecomp
 22156 1694 00000000 		.word	DrivingArrowBeepsDisabled
 22157 1698 00000000 		.word	BaleShapeVolts
 22158 169c 00000000 		.word	.LANCHOR31
 22159 16a0 00000000 		.word	buzz_count
 22160 16a4 00000000 		.word	buzz_length
 22161 16a8 00000000 		.word	.LANCHOR32
 22162 16ac 00000000 		.word	.LANCHOR33
 22163 16b0 00000000 		.word	.LANCHOR34
 22164              	.L1299:
1208:screens.c     **** 					if( DrivingArrowsX1BeepDelay )
 22165              		.loc 1 1208 0
 22166 16b4 CE4B     		ldr	r3, .L1313+16
 22167 16b6 1B78     		ldrb	r3, [r3]
 22168 16b8 002B     		cmp	r3, #0
 22169 16ba 03D0     		beq	.L1232
1210:screens.c     **** 						DrivingArrowsX1BeepDelay--;
 22170              		.loc 1 1210 0
 22171 16bc 013B     		sub	r3, r3, #1
 22172 16be CC4A     		ldr	r2, .L1313+16
 22173 16c0 1370     		strb	r3, [r2]
 22174 16c2 09E0     		b	.L1233
 22175              	.L1232:
1214:screens.c     **** 						buzz_count = 1;
 22176              		.loc 1 1214 0
 22177 16c4 0122     		mov	r2, #1
 22178 16c6 CB4B     		ldr	r3, .L1313+20
 22179 16c8 1A70     		strb	r2, [r3]
1215:screens.c     **** 						buzz_length = DRIVING_ARROWS_X1_BEEP; // Beep length
 22180              		.loc 1 1215 0
 22181 16ca C822     		mov	r2, #200
 22182 16cc 5200     		lsl	r2, r2, #1
 22183 16ce CA4B     		ldr	r3, .L1313+24
 22184 16d0 1A60     		str	r2, [r3]
1216:screens.c     **** 						DrivingArrowsX1BeepDelay = DRIVING_ARROWS_X1_BEEP_DELAY; // Delay (before beep starts)
 22185              		.loc 1 1216 0
 22186 16d2 1E22     		mov	r2, #30
 22187 16d4 C64B     		ldr	r3, .L1313+16
 22188 16d6 1A70     		strb	r2, [r3]
 22189              	.L1233:
1219:screens.c     **** 					DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
 22190              		.loc 1 1219 0
 22191 16d8 0023     		mov	r3, #0
 22192 16da C84A     		ldr	r2, .L1313+28
 22193 16dc 1370     		strb	r3, [r2]
1220:screens.c     **** 					DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
 22194              		.loc 1 1220 0
 22195 16de C84A     		ldr	r2, .L1313+32
 22196 16e0 1370     		strb	r3, [r2]
1221:screens.c     **** 					DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately if driving gets worst
 22197              		.loc 1 1221 0
 22198 16e2 C84A     		ldr	r2, .L1313+36
 22199 16e4 1370     		strb	r3, [r2]
 22200 16e6 12E0     		b	.L1174
 22201              	.L1296:
1227:screens.c     **** 				DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately if driving gets worst
 22202              		.loc 1 1227 0
 22203 16e8 0023     		mov	r3, #0
 22204 16ea C44A     		ldr	r2, .L1313+28
 22205 16ec 1370     		strb	r3, [r2]
1228:screens.c     **** 				DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately if driving gets worst
 22206              		.loc 1 1228 0
 22207 16ee C44A     		ldr	r2, .L1313+32
 22208 16f0 1370     		strb	r3, [r2]
1229:screens.c     **** 				DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately if driving gets worst
 22209              		.loc 1 1229 0
 22210 16f2 C44A     		ldr	r2, .L1313+36
 22211 16f4 1370     		strb	r3, [r2]
1230:screens.c     **** 				DrivingArrowsX1BeepDelay = 0; // To hear 1 beep immediately if driving gets worst
 22212              		.loc 1 1230 0
 22213 16f6 BE4A     		ldr	r2, .L1313+16
 22214 16f8 1370     		strb	r3, [r2]
 22215 16fa 08E0     		b	.L1174
 22216              	.L1201:
1236:screens.c     **** 			DrivingArrowsX4BeepDelay = 0; // To hear 4 beeps immediately (when driving indication starts & i
 22217              		.loc 1 1236 0
 22218 16fc 0023     		mov	r3, #0
 22219 16fe BF4A     		ldr	r2, .L1313+28
 22220 1700 1370     		strb	r3, [r2]
1237:screens.c     **** 			DrivingArrowsX3BeepDelay = 0; // To hear 3 beeps immediately (when driving indication starts & i
 22221              		.loc 1 1237 0
 22222 1702 BF4A     		ldr	r2, .L1313+32
 22223 1704 1370     		strb	r3, [r2]
1238:screens.c     **** 			DrivingArrowsX2BeepDelay = 0; // To hear 2 beeps immediately (when driving indication starts & i
 22224              		.loc 1 1238 0
 22225 1706 BF4A     		ldr	r2, .L1313+36
 22226 1708 1370     		strb	r3, [r2]
1239:screens.c     **** 			DrivingArrowsX1BeepDelay = 0; // To hear 1 beep immediately  (when driving indication starts & i
 22227              		.loc 1 1239 0
 22228 170a B94A     		ldr	r2, .L1313+16
 22229 170c 1370     		strb	r3, [r2]
 22230              	.LVL1791:
 22231              	.L1174:
1247:screens.c     **** 	draw_box( adm, 68, 1, (68+13-1), (1+17-1), CLEAR ); // Clearing
 22232              		.loc 1 1247 0
 22233 170e 1123     		mov	r3, #17
 22234 1710 0093     		str	r3, [sp]
 22235 1712 4023     		mov	r3, #64
 22236 1714 0193     		str	r3, [sp, #4]
 22237 1716 BC48     		ldr	r0, .L1313+40
 22238 1718 4421     		mov	r1, #68
 22239 171a 0122     		mov	r2, #1
 22240 171c 5023     		mov	r3, #80
 22241 171e FFF7FEFF 		bl	draw_box
 22242              	.LVL1792:
1249:screens.c     **** 	if( !(MWarn & MW_DENSITYPRESS) ) // Bale Profile letter (A - E) not displayed if Density Pressure 
 22243              		.loc 1 1249 0
 22244 1722 BA4B     		ldr	r3, .L1313+44
 22245 1724 1B78     		ldrb	r3, [r3]
 22246 1726 DA07     		lsl	r2, r3, #31
 22247 1728 37D4     		bmi	.L1234
1251:screens.c     **** 		switch( pFac.pf.GW302_BaleProfile )
 22248              		.loc 1 1251 0
 22249 172a 3A23     		mov	r3, #58
 22250 172c B84A     		ldr	r2, .L1313+48
 22251 172e D35C     		ldrb	r3, [r2, r3]
 22252 1730 012B     		cmp	r3, #1
 22253 1732 0FD0     		beq	.L1237
 22254 1734 002B     		cmp	r3, #0
 22255 1736 04D0     		beq	.L1236
 22256 1738 022B     		cmp	r3, #2
 22257 173a 14D0     		beq	.L1238
 22258 173c 032B     		cmp	r3, #3
 22259 173e 24D1     		bne	.L1300
 22260 1740 1AE0     		b	.L1239
 22261              	.L1236:
1254:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_A, 68, 1, OR );
 22262              		.loc 1 1254 0
 22263 1742 0223     		mov	r3, #2
 22264 1744 0093     		str	r3, [sp]
 22265 1746 B048     		ldr	r0, .L1313+40
 22266 1748 B249     		ldr	r1, .L1313+52
 22267 174a 4422     		mov	r2, #68
 22268 174c 0123     		mov	r3, #1
 22269 174e FFF7FEFF 		bl	write_bitmap
 22270              	.LVL1793:
1255:screens.c     **** 			break;
 22271              		.loc 1 1255 0
 22272 1752 22E0     		b	.L1234
 22273              	.L1237:
1257:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_B, 68, 1, OR );
 22274              		.loc 1 1257 0
 22275 1754 0223     		mov	r3, #2
 22276 1756 0093     		str	r3, [sp]
 22277 1758 AB48     		ldr	r0, .L1313+40
 22278 175a AF49     		ldr	r1, .L1313+56
 22279 175c 4422     		mov	r2, #68
 22280 175e 0123     		mov	r3, #1
 22281 1760 FFF7FEFF 		bl	write_bitmap
 22282              	.LVL1794:
1258:screens.c     **** 			break;
 22283              		.loc 1 1258 0
 22284 1764 19E0     		b	.L1234
 22285              	.L1238:
1260:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_C, 68, 1, OR );
 22286              		.loc 1 1260 0
 22287 1766 0223     		mov	r3, #2
 22288 1768 0093     		str	r3, [sp]
 22289 176a A748     		ldr	r0, .L1313+40
 22290 176c AB49     		ldr	r1, .L1313+60
 22291 176e 4422     		mov	r2, #68
 22292 1770 0123     		mov	r3, #1
 22293 1772 FFF7FEFF 		bl	write_bitmap
 22294              	.LVL1795:
1261:screens.c     **** 			break;
 22295              		.loc 1 1261 0
 22296 1776 10E0     		b	.L1234
 22297              	.L1239:
1263:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_D, 68, 1, OR );
 22298              		.loc 1 1263 0
 22299 1778 0223     		mov	r3, #2
 22300 177a 0093     		str	r3, [sp]
 22301 177c A248     		ldr	r0, .L1313+40
 22302 177e A849     		ldr	r1, .L1313+64
 22303 1780 4422     		mov	r2, #68
 22304 1782 0123     		mov	r3, #1
 22305 1784 FFF7FEFF 		bl	write_bitmap
 22306              	.LVL1796:
1264:screens.c     **** 			break;
 22307              		.loc 1 1264 0
 22308 1788 07E0     		b	.L1234
 22309              	.L1300:
1266:screens.c     **** 			write_bitmap( adm, ICON_BALE_PROFILE_E, 68, 1, OR );
 22310              		.loc 1 1266 0
 22311 178a 0223     		mov	r3, #2
 22312 178c 0093     		str	r3, [sp]
 22313 178e 9E48     		ldr	r0, .L1313+40
 22314 1790 A449     		ldr	r1, .L1313+68
 22315 1792 4422     		mov	r2, #68
 22316 1794 0123     		mov	r3, #1
 22317 1796 FFF7FEFF 		bl	write_bitmap
 22318              	.LVL1797:
 22319              	.L1234:
1276:screens.c     **** 	draw_box( adm, 112, 18, 128, 106, CLEAR );
 22320              		.loc 1 1276 0
 22321 179a 9B4C     		ldr	r4, .L1313+40
 22322 179c 6A23     		mov	r3, #106
 22323 179e 0093     		str	r3, [sp]
 22324 17a0 4023     		mov	r3, #64
 22325 17a2 0193     		str	r3, [sp, #4]
 22326 17a4 201C     		mov	r0, r4
 22327 17a6 7021     		mov	r1, #112
 22328 17a8 1222     		mov	r2, #18
 22329 17aa 8023     		mov	r3, #128
 22330 17ac FFF7FEFF 		bl	draw_box
 22331              	.LVL1798:
1279:screens.c     **** 	write_bitmap( adm, DIASCALE, (114+3), (18+2), OR );
 22332              		.loc 1 1279 0
 22333 17b0 0223     		mov	r3, #2
 22334 17b2 0093     		str	r3, [sp]
 22335 17b4 201C     		mov	r0, r4
 22336 17b6 9C49     		ldr	r1, .L1313+72
 22337 17b8 7522     		mov	r2, #117
 22338 17ba 1423     		mov	r3, #20
 22339 17bc FFF7FEFF 		bl	write_bitmap
 22340              	.LVL1799:
1282:screens.c     **** 	if( DiaMinExtDisplayPercent > 0.0 )
 22341              		.loc 1 1282 0
 22342 17c0 9A4B     		ldr	r3, .L1313+76
 22343 17c2 1C68     		ldr	r4, [r3]
 22344 17c4 201C     		add	r0, r4, #0
 22345 17c6 0021     		mov	r1, #0
 22346 17c8 FFF7FEFF 		bl	__aeabi_fcmpgt
 22347              	.LVL1800:
 22348 17cc 0028     		cmp	r0, #0
 22349 17ce 18D0     		beq	.L1240
1284:screens.c     **** 		TempY = 100 - (unsigned char)( (DiaMinExtDisplayPercent + 0.5) * 0.8 ); // Percentage rounded up 
 22350              		.loc 1 1284 0
 22351 17d0 201C     		add	r0, r4, #0
 22352 17d2 FFF7FEFF 		bl	__aeabi_f2d
 22353              	.LVL1801:
 22354 17d6 834B     		ldr	r3, .L1313+4
 22355 17d8 814A     		ldr	r2, .L1313
 22356 17da FFF7FEFF 		bl	__aeabi_dadd
 22357              	.LVL1802:
 22358 17de 824A     		ldr	r2, .L1313+8
 22359 17e0 824B     		ldr	r3, .L1313+12
 22360 17e2 FFF7FEFF 		bl	__aeabi_dmul
 22361              	.LVL1803:
 22362 17e6 FFF7FEFF 		bl	__aeabi_d2uiz
 22363              	.LVL1804:
 22364 17ea 6422     		mov	r2, #100
 22365 17ec 121A     		sub	r2, r2, r0
 22366 17ee 1206     		lsl	r2, r2, #24
 22367 17f0 120E     		lsr	r2, r2, #24
 22368              	.LVL1805:
1285:screens.c     **** 		draw_line( adm, 118, TempY, 122, TempY, OR );
 22369              		.loc 1 1285 0
 22370 17f2 0092     		str	r2, [sp]
 22371 17f4 0223     		mov	r3, #2
 22372 17f6 0193     		str	r3, [sp, #4]
 22373 17f8 8348     		ldr	r0, .L1313+40
 22374 17fa 7621     		mov	r1, #118
 22375 17fc 7A23     		mov	r3, #122
 22376 17fe FFF7FEFF 		bl	draw_line
 22377              	.LVL1806:
 22378              	.L1240:
1289:screens.c     **** 	if( DiaTargetExtDisplayPercent > 0.0 )
 22379              		.loc 1 1289 0
 22380 1802 8B4B     		ldr	r3, .L1313+80
 22381 1804 1C68     		ldr	r4, [r3]
 22382 1806 201C     		add	r0, r4, #0
 22383 1808 0021     		mov	r1, #0
 22384 180a FFF7FEFF 		bl	__aeabi_fcmpgt
 22385              	.LVL1807:
 22386 180e 0028     		cmp	r0, #0
 22387 1810 17D0     		beq	.L1242
 22388              	.LVL1808:
1291:screens.c     **** 		TempY = (unsigned char)( (DiaTargetExtDisplayPercent + 0.5) * 0.8 ); // Percentage rounded up to 
 22389              		.loc 1 1291 0
 22390 1812 201C     		add	r0, r4, #0
 22391 1814 FFF7FEFF 		bl	__aeabi_f2d
 22392              	.LVL1809:
 22393 1818 724B     		ldr	r3, .L1313+4
 22394 181a 714A     		ldr	r2, .L1313
 22395 181c FFF7FEFF 		bl	__aeabi_dadd
 22396              	.LVL1810:
 22397 1820 714A     		ldr	r2, .L1313+8
 22398 1822 724B     		ldr	r3, .L1313+12
 22399 1824 FFF7FEFF 		bl	__aeabi_dmul
 22400              	.LVL1811:
 22401 1828 FFF7FEFF 		bl	__aeabi_d2uiz
 22402              	.LVL1812:
1292:screens.c     **** 		write_bitmap( adm, DIAMIND, 114, (100-2) - TempY, OR );
 22403              		.loc 1 1292 0
 22404 182c 6223     		mov	r3, #98
 22405 182e 1B1A     		sub	r3, r3, r0
 22406 1830 1B06     		lsl	r3, r3, #24
 22407 1832 1B0E     		lsr	r3, r3, #24
 22408 1834 0222     		mov	r2, #2
 22409 1836 0092     		str	r2, [sp]
 22410 1838 7348     		ldr	r0, .L1313+40
 22411 183a 7E49     		ldr	r1, .L1313+84
 22412 183c 7222     		mov	r2, #114
 22413 183e FFF7FEFF 		bl	write_bitmap
 22414              	.LVL1813:
 22415              	.L1242:
1296:screens.c     **** 	if( BaleDiaExtDisplayPercent > 0.0 )
 22416              		.loc 1 1296 0
 22417 1842 7D4B     		ldr	r3, .L1313+88
 22418 1844 1C68     		ldr	r4, [r3]
 22419 1846 201C     		add	r0, r4, #0
 22420 1848 0021     		mov	r1, #0
 22421 184a FFF7FEFF 		bl	__aeabi_fcmpgt
 22422              	.LVL1814:
 22423 184e 0028     		cmp	r0, #0
 22424 1850 19D0     		beq	.L1244
 22425              	.LVL1815:
1298:screens.c     **** 		TempY = 100 - (unsigned char)( (BaleDiaExtDisplayPercent + 0.5) * 0.8 ); // Percentage rounded up
 22426              		.loc 1 1298 0
 22427 1852 201C     		add	r0, r4, #0
 22428 1854 FFF7FEFF 		bl	__aeabi_f2d
 22429              	.LVL1816:
 22430 1858 624B     		ldr	r3, .L1313+4
 22431 185a 614A     		ldr	r2, .L1313
 22432 185c FFF7FEFF 		bl	__aeabi_dadd
 22433              	.LVL1817:
 22434 1860 614A     		ldr	r2, .L1313+8
 22435 1862 624B     		ldr	r3, .L1313+12
 22436 1864 FFF7FEFF 		bl	__aeabi_dmul
 22437              	.LVL1818:
 22438 1868 FFF7FEFF 		bl	__aeabi_d2uiz
 22439              	.LVL1819:
 22440 186c 6422     		mov	r2, #100
 22441 186e 121A     		sub	r2, r2, r0
1299:screens.c     **** 		draw_box( adm, 118, TempY, 122, 100, FULL );
 22442              		.loc 1 1299 0
 22443 1870 1206     		lsl	r2, r2, #24
 22444 1872 120E     		lsr	r2, r2, #24
 22445 1874 6423     		mov	r3, #100
 22446 1876 0093     		str	r3, [sp]
 22447 1878 2023     		mov	r3, #32
 22448 187a 0193     		str	r3, [sp, #4]
 22449 187c 6248     		ldr	r0, .L1313+40
 22450 187e 7621     		mov	r1, #118
 22451 1880 7A23     		mov	r3, #122
 22452 1882 FFF7FEFF 		bl	draw_box
 22453              	.LVL1820:
 22454              	.L1244:
1314:screens.c     **** 	if( MWarn )
 22455              		.loc 1 1314 0
 22456 1886 614B     		ldr	r3, .L1313+44
 22457 1888 1B78     		ldrb	r3, [r3]
 22458 188a 002B     		cmp	r3, #0
 22459 188c 00D1     		bne	.LCB21595
 22460 188e F3E0     		b	.L1246	@long jump
 22461              	.LCB21595:
1316:screens.c     **** 		draw_box( adm, 35, 40, 118, 87, CLEAR );
 22462              		.loc 1 1316 0
 22463 1890 5723     		mov	r3, #87
 22464 1892 0093     		str	r3, [sp]
 22465 1894 4023     		mov	r3, #64
 22466 1896 0193     		str	r3, [sp, #4]
 22467 1898 5B48     		ldr	r0, .L1313+40
 22468 189a 2321     		mov	r1, #35
 22469 189c 2822     		mov	r2, #40
 22470 189e 7623     		mov	r3, #118
 22471 18a0 FFF7FEFF 		bl	draw_box
 22472              	.LVL1821:
1318:screens.c     **** 		if( MWarn & MW_DENSITYPRESS ) // Highest prioity
 22473              		.loc 1 1318 0
 22474 18a4 594B     		ldr	r3, .L1313+44
 22475 18a6 1B78     		ldrb	r3, [r3]
 22476 18a8 D907     		lsl	r1, r3, #31
 22477 18aa 5AD5     		bpl	.L1247
1323:screens.c     **** 			draw_box( adm, 38, 13, (38+67+6), (13+11), CLEAR ); // Clearing driving arrows
 22478              		.loc 1 1323 0
 22479 18ac 564C     		ldr	r4, .L1313+40
 22480 18ae 1823     		mov	r3, #24
 22481 18b0 0093     		str	r3, [sp]
 22482 18b2 4025     		mov	r5, #64
 22483 18b4 0195     		str	r5, [sp, #4]
 22484 18b6 201C     		mov	r0, r4
 22485 18b8 2621     		mov	r1, #38
 22486 18ba 0D22     		mov	r2, #13
 22487 18bc 6F23     		mov	r3, #111
 22488 18be FFF7FEFF 		bl	draw_box
 22489              	.LVL1822:
1324:screens.c     **** 			draw_box( adm, 112, 2, (129+(28-1)), 106, CLEAR );  // Clearing diameter scale and indicator & i
 22490              		.loc 1 1324 0
 22491 18c2 6A23     		mov	r3, #106
 22492 18c4 0093     		str	r3, [sp]
 22493 18c6 0195     		str	r5, [sp, #4]
 22494 18c8 201C     		mov	r0, r4
 22495 18ca 7021     		mov	r1, #112
 22496 18cc 0222     		mov	r2, #2
 22497 18ce 9C23     		mov	r3, #156
 22498 18d0 FFF7FEFF 		bl	draw_box
 22499              	.LVL1823:
1325:screens.c     **** 			draw_box( adm, 1, 10, (129+28), 97, CLEAR );        // Clearing machine picture area -- includin
 22500              		.loc 1 1325 0
 22501 18d4 6123     		mov	r3, #97
 22502 18d6 0093     		str	r3, [sp]
 22503 18d8 0195     		str	r5, [sp, #4]
 22504 18da 201C     		mov	r0, r4
 22505 18dc 0121     		mov	r1, #1
 22506 18de 0A22     		mov	r2, #10
 22507 18e0 9D23     		mov	r3, #157
 22508 18e2 FFF7FEFF 		bl	draw_box
 22509              	.LVL1824:
1328:screens.c     **** 			sprintf( tstring, "%3u", TempIntDPV );
 22510              		.loc 1 1328 0
 22511 18e6 554B     		ldr	r3, .L1313+92
 22512 18e8 1A68     		ldr	r2, [r3]
 22513 18ea 0CA8     		add	r0, sp, #48
 22514 18ec 5449     		ldr	r1, .L1313+96
 22515 18ee FFF7FEFF 		bl	sprintf
 22516              	.LVL1825:
1329:screens.c     **** 			display_f1_text( tstring, TSMAX, 3, 9+6, FIXED );
 22517              		.loc 1 1329 0
 22518 18f2 0023     		mov	r3, #0
 22519 18f4 0093     		str	r3, [sp]
 22520 18f6 0CA8     		add	r0, sp, #48
 22521 18f8 1A21     		mov	r1, #26
 22522 18fa 0322     		mov	r2, #3
 22523 18fc 0F23     		mov	r3, #15
 22524 18fe FFF7FEFF 		bl	display_f1_text
 22525              	.LVL1826:
1330:screens.c     **** 			write_bitmap( adm, BAR_UNIT,  3+(6*3)+2, 9+6, OR );
 22526              		.loc 1 1330 0
 22527 1902 0225     		mov	r5, #2
 22528 1904 0095     		str	r5, [sp]
 22529 1906 201C     		mov	r0, r4
 22530 1908 4E49     		ldr	r1, .L1313+100
 22531 190a 1722     		mov	r2, #23
 22532 190c 0F23     		mov	r3, #15
 22533 190e FFF7FEFF 		bl	write_bitmap
 22534              	.LVL1827:
1332:screens.c     **** 			write_bitmap( adm, WARNING_DENSITY_PRESSURE_SCREEN_IMAGE, 2+6, 30, OR );
 22535              		.loc 1 1332 0
 22536 1912 0095     		str	r5, [sp]
 22537 1914 201C     		mov	r0, r4
 22538 1916 4C49     		ldr	r1, .L1313+104
 22539 1918 0822     		mov	r2, #8
 22540 191a 1E23     		mov	r3, #30
 22541 191c FFF7FEFF 		bl	write_bitmap
 22542              	.LVL1828:
1333:screens.c     **** 			if( !half_second ) // Flashing warning symbol every second
 22543              		.loc 1 1333 0
 22544 1920 4A4B     		ldr	r3, .L1313+108
 22545 1922 1B78     		ldrb	r3, [r3]
 22546 1924 002B     		cmp	r3, #0
 22547 1926 00D0     		beq	.LCB21676
 22548 1928 A6E0     		b	.L1246	@long jump
 22549              	.LCB21676:
1335:screens.c     **** 				draw_box( adm, 1,   50, (129+28), 97, CLEAR );  // Flashing bottom warning symbol off
 22550              		.loc 1 1335 0
 22551 192a 374C     		ldr	r4, .L1313+40
 22552 192c 6126     		mov	r6, #97
 22553 192e 0096     		str	r6, [sp]
 22554 1930 4025     		mov	r5, #64
 22555 1932 0195     		str	r5, [sp, #4]
 22556 1934 201C     		mov	r0, r4
 22557 1936 0121     		mov	r1, #1
 22558 1938 3222     		mov	r2, #50
 22559 193a 9D23     		mov	r3, #157
 22560 193c FFF7FEFF 		bl	draw_box
 22561              	.LVL1829:
1336:screens.c     **** 				draw_box( adm, 1,   30,       40, 97, CLEAR );  // Flashing left warning symbol off
 22562              		.loc 1 1336 0
 22563 1940 0096     		str	r6, [sp]
 22564 1942 0195     		str	r5, [sp, #4]
 22565 1944 201C     		mov	r0, r4
 22566 1946 0121     		mov	r1, #1
 22567 1948 1E22     		mov	r2, #30
 22568 194a 2823     		mov	r3, #40
 22569 194c FFF7FEFF 		bl	draw_box
 22570              	.LVL1830:
1337:screens.c     **** 				draw_box( adm, 120, 30, (129+28), 97, CLEAR );  // Flashing right warning symbol off
 22571              		.loc 1 1337 0
 22572 1950 0096     		str	r6, [sp]
 22573 1952 0195     		str	r5, [sp, #4]
 22574 1954 201C     		mov	r0, r4
 22575 1956 7821     		mov	r1, #120
 22576 1958 1E22     		mov	r2, #30
 22577 195a 9D23     		mov	r3, #157
 22578 195c FFF7FEFF 		bl	draw_box
 22579              	.LVL1831:
 22580 1960 8AE0     		b	.L1246
 22581              	.L1247:
1340:screens.c     **** 		else if( MWarn & MW_CHECKNET )
 22582              		.loc 1 1340 0
 22583 1962 9A07     		lsl	r2, r3, #30
 22584 1964 08D5     		bpl	.L1248
1343:screens.c     **** 			write_bitmap( adm, WARNING_CHECKNET, 35, 40, OR );
 22585              		.loc 1 1343 0
 22586 1966 0223     		mov	r3, #2
 22587 1968 0093     		str	r3, [sp]
 22588 196a 2748     		ldr	r0, .L1313+40
 22589 196c 3849     		ldr	r1, .L1313+112
 22590 196e 2322     		mov	r2, #35
 22591 1970 2823     		mov	r3, #40
 22592 1972 FFF7FEFF 		bl	write_bitmap
 22593              	.LVL1832:
 22594 1976 7FE0     		b	.L1246
 22595              	.L1248:
1345:screens.c     **** 		else if( MWarn & MW_DROPFLOOR )
 22596              		.loc 1 1345 0
 22597 1978 5907     		lsl	r1, r3, #29
 22598 197a 08D5     		bpl	.L1249
1348:screens.c     **** 			write_bitmap( adm, WARNING_DROPFLOOR, 35, 40, OR );
 22599              		.loc 1 1348 0
 22600 197c 0223     		mov	r3, #2
 22601 197e 0093     		str	r3, [sp]
 22602 1980 2148     		ldr	r0, .L1313+40
 22603 1982 3449     		ldr	r1, .L1313+116
 22604 1984 2322     		mov	r2, #35
 22605 1986 2823     		mov	r3, #40
 22606 1988 FFF7FEFF 		bl	write_bitmap
 22607              	.LVL1833:
 22608 198c 74E0     		b	.L1246
 22609              	.L1249:
1350:screens.c     **** 		else if( MWarn & MW_KNIFEPRES )
 22610              		.loc 1 1350 0
 22611 198e 1A07     		lsl	r2, r3, #28
 22612 1990 08D5     		bpl	.L1250
1353:screens.c     **** 			write_bitmap( adm, WARNING_KNIFEPRES, 35, 40, OR );
 22613              		.loc 1 1353 0
 22614 1992 0223     		mov	r3, #2
 22615 1994 0093     		str	r3, [sp]
 22616 1996 1C48     		ldr	r0, .L1313+40
 22617 1998 2F49     		ldr	r1, .L1313+120
 22618 199a 2322     		mov	r2, #35
 22619 199c 2823     		mov	r3, #40
 22620 199e FFF7FEFF 		bl	write_bitmap
 22621              	.LVL1834:
 22622 19a2 69E0     		b	.L1246
 22623              	.L1250:
1355:screens.c     **** 		else if( MWarn & MW_CHOPKNIVPOS1 )
 22624              		.loc 1 1355 0
 22625 19a4 D906     		lsl	r1, r3, #27
 22626 19a6 5DD5     		bpl	.L1251
1358:screens.c     **** 			write_bitmap( adm, WARNING_CHOP_KNIV_POS, 35, 40, OR );
 22627              		.loc 1 1358 0
 22628 19a8 174C     		ldr	r4, .L1313+40
 22629 19aa 0225     		mov	r5, #2
 22630 19ac 0095     		str	r5, [sp]
 22631 19ae 201C     		mov	r0, r4
 22632 19b0 2A49     		ldr	r1, .L1313+124
 22633 19b2 2322     		mov	r2, #35
 22634 19b4 2823     		mov	r3, #40
 22635 19b6 FFF7FEFF 		bl	write_bitmap
 22636              	.LVL1835:
1359:screens.c     **** 			draw_box( adm, 31, 107, 61, 126, CLEAR );
 22637              		.loc 1 1359 0
 22638 19ba 7E23     		mov	r3, #126
 22639 19bc 0093     		str	r3, [sp]
 22640 19be 4023     		mov	r3, #64
 22641 19c0 0193     		str	r3, [sp, #4]
 22642 19c2 201C     		mov	r0, r4
 22643 19c4 1F21     		mov	r1, #31
 22644 19c6 6B22     		mov	r2, #107
 22645 19c8 3D23     		mov	r3, #61
 22646 19ca FFF7FEFF 		bl	draw_box
 22647              	.LVL1836:
1360:screens.c     **** 			write_bitmap( adm, TABESC, 31, 107, OR );
 22648              		.loc 1 1360 0
 22649 19ce 0095     		str	r5, [sp]
 22650 19d0 201C     		mov	r0, r4
 22651 19d2 2349     		ldr	r1, .L1313+128
 22652 19d4 1F22     		mov	r2, #31
 22653 19d6 6B23     		mov	r3, #107
 22654 19d8 FFF7FEFF 		bl	write_bitmap
 22655              	.LVL1837:
 22656 19dc 4CE0     		b	.L1246
 22657              	.L1314:
 22658 19de C046     		.align	3
 22659              	.L1313:
 22660 19e0 00000000 		.word	0
 22661 19e4 0000E03F 		.word	1071644672
 22662 19e8 9A999999 		.word	-1717986918
 22663 19ec 9999E93F 		.word	1072273817
 22664 19f0 00000000 		.word	.LANCHOR34
 22665 19f4 00000000 		.word	buzz_count
 22666 19f8 00000000 		.word	buzz_length
 22667 19fc 00000000 		.word	.LANCHOR31
 22668 1a00 00000000 		.word	.LANCHOR32
 22669 1a04 00000000 		.word	.LANCHOR33
 22670 1a08 00000000 		.word	adm
 22671 1a0c 00000000 		.word	MWarn
 22672 1a10 00000000 		.word	pFac
 22673 1a14 00000000 		.word	ICON_BALE_PROFILE_A
 22674 1a18 00000000 		.word	ICON_BALE_PROFILE_B
 22675 1a1c 00000000 		.word	ICON_BALE_PROFILE_C
 22676 1a20 00000000 		.word	ICON_BALE_PROFILE_D
 22677 1a24 00000000 		.word	ICON_BALE_PROFILE_E
 22678 1a28 00000000 		.word	DIASCALE
 22679 1a2c 00000000 		.word	DiaMinExtDisplayPercent
 22680 1a30 00000000 		.word	DiaTargetExtDisplayPercent
 22681 1a34 00000000 		.word	DIAMIND
 22682 1a38 00000000 		.word	BaleDiaExtDisplayPercent
 22683 1a3c 00000000 		.word	.LANCHOR24
 22684 1a40 B8030000 		.word	.LC465
 22685 1a44 00000000 		.word	BAR_UNIT
 22686 1a48 00000000 		.word	WARNING_DENSITY_PRESSURE_SCREEN_IMAGE
 22687 1a4c 00000000 		.word	half_second
 22688 1a50 00000000 		.word	WARNING_CHECKNET
 22689 1a54 00000000 		.word	WARNING_DROPFLOOR
 22690 1a58 00000000 		.word	WARNING_KNIFEPRES
 22691 1a5c 00000000 		.word	WARNING_CHOP_KNIV_POS
 22692 1a60 00000000 		.word	TABESC
 22693              	.L1251:
1362:screens.c     **** 		else if( MWarn & MW_LOWBAT ) // Lowest priority
 22694              		.loc 1 1362 0
 22695 1a64 9A06     		lsl	r2, r3, #26
 22696 1a66 07D5     		bpl	.L1246
1365:screens.c     **** 			write_bitmap( adm, WARNING_LOWBATT, 35, 40, OR );
 22697              		.loc 1 1365 0
 22698 1a68 0223     		mov	r3, #2
 22699 1a6a 0093     		str	r3, [sp]
 22700 1a6c 1A48     		ldr	r0, .L1315
 22701 1a6e 1B49     		ldr	r1, .L1315+4
 22702 1a70 2322     		mov	r2, #35
 22703 1a72 2823     		mov	r3, #40
 22704 1a74 FFF7FEFF 		bl	write_bitmap
 22705              	.LVL1838:
 22706              	.L1246:
1374:screens.c     **** 	if( ResetLube )
 22707              		.loc 1 1374 0
 22708 1a78 194B     		ldr	r3, .L1315+8
 22709 1a7a 1B78     		ldrb	r3, [r3]
 22710 1a7c 002B     		cmp	r3, #0
 22711 1a7e 21D0     		beq	.L1074
1376:screens.c     **** 		draw_box( adm, 14+6, 40+10, 14+6+123-1, 40+10+32-1, CLEAR );
 22712              		.loc 1 1376 0
 22713 1a80 154C     		ldr	r4, .L1315
 22714 1a82 5123     		mov	r3, #81
 22715 1a84 0093     		str	r3, [sp]
 22716 1a86 4023     		mov	r3, #64
 22717 1a88 0193     		str	r3, [sp, #4]
 22718 1a8a 201C     		mov	r0, r4
 22719 1a8c 1421     		mov	r1, #20
 22720 1a8e 3222     		mov	r2, #50
 22721 1a90 8E23     		mov	r3, #142
 22722 1a92 FFF7FEFF 		bl	draw_box
 22723              	.LVL1839:
1379:screens.c     **** 		write_bitmap( adm, LUBE_COUNT_RESET_PROMPT, 14+6, 40+10, OR );
 22724              		.loc 1 1379 0
 22725 1a96 0223     		mov	r3, #2
 22726 1a98 0093     		str	r3, [sp]
 22727 1a9a 201C     		mov	r0, r4
 22728 1a9c 1149     		ldr	r1, .L1315+12
 22729 1a9e 1422     		mov	r2, #20
 22730 1aa0 3223     		mov	r3, #50
 22731 1aa2 FFF7FEFF 		bl	write_bitmap
 22732              	.LVL1840:
1382:screens.c     **** 		sprintf( tstring, "%3u", pFac.pf.GW302_LubeAlarm );
 22733              		.loc 1 1382 0
 22734 1aa6 7E23     		mov	r3, #126
 22735 1aa8 0F4A     		ldr	r2, .L1315+16
 22736 1aaa D25A     		ldrh	r2, [r2, r3]
 22737 1aac 0CA8     		add	r0, sp, #48
 22738 1aae 0F49     		ldr	r1, .L1315+20
 22739 1ab0 FFF7FEFF 		bl	sprintf
 22740              	.LVL1841:
1383:screens.c     **** 		display_f1_text( tstring, TSMAX, 14+6+17+62-2, 40+10+5+7, FIXED );
 22741              		.loc 1 1383 0
 22742 1ab4 0023     		mov	r3, #0
 22743 1ab6 0093     		str	r3, [sp]
 22744 1ab8 0CA8     		add	r0, sp, #48
 22745 1aba 1A21     		mov	r1, #26
 22746 1abc 6122     		mov	r2, #97
 22747 1abe 3E23     		mov	r3, #62
 22748 1ac0 FFF7FEFF 		bl	display_f1_text
 22749              	.LVL1842:
 22750              	.L1074:
1387:screens.c     **** }
 22751              		.loc 1 1387 0
 22752 1ac4 15B0     		add	sp, sp, #84
 22753              		@ sp needed for prologue
 22754 1ac6 3CBC     		pop	{r2, r3, r4, r5}
 22755 1ac8 9046     		mov	r8, r2
 22756 1aca 9946     		mov	r9, r3
 22757 1acc A246     		mov	sl, r4
 22758 1ace AB46     		mov	fp, r5
 22759 1ad0 F0BC     		pop	{r4, r5, r6, r7}
 22760 1ad2 01BC     		pop	{r0}
 22761 1ad4 0047     		bx	r0
 22762              	.L1316:
 22763 1ad6 C046     		.align	2
 22764              	.L1315:
 22765 1ad8 00000000 		.word	adm
 22766 1adc 00000000 		.word	WARNING_LOWBATT
 22767 1ae0 00000000 		.word	.LANCHOR17
 22768 1ae4 00000000 		.word	LUBE_COUNT_RESET_PROMPT
 22769 1ae8 00000000 		.word	pFac
 22770 1aec B8030000 		.word	.LC465
 22771              		.cfi_endproc
 22772              	.LFE377:
 22774              		.section	.text.screen00,"ax",%progbits
 22775              		.align	2
 22776              		.global	screen00
 22777              		.code	16
 22778              		.thumb_func
 22780              	screen00:
 22781              	.LFB376:
  29:screens.c     **** {
 22782              		.loc 1 29 0
 22783              		.cfi_startproc
 22784              	.LVL1843:
 22785 0000 70B5     		push	{r4, r5, r6, lr}
 22786              	.LCFI60:
 22787              		.cfi_def_cfa_offset 16
 22788              		.cfi_offset 4, -16
 22789              		.cfi_offset 5, -12
 22790              		.cfi_offset 6, -8
 22791              		.cfi_offset 14, -4
 22792 0002 86B0     		sub	sp, sp, #24
 22793              	.LCFI61:
 22794              		.cfi_def_cfa_offset 40
  32:screens.c     **** 	if( !startup )
 22795              		.loc 1 32 0
 22796 0004 1E4B     		ldr	r3, .L1320
 22797 0006 1B78     		ldrb	r3, [r3]
 22798 0008 002B     		cmp	r3, #0
 22799 000a 28D1     		bne	.L1318
  34:screens.c     **** 		startup = 1;
 22800              		.loc 1 34 0
 22801 000c 0124     		mov	r4, #1
 22802 000e 1C4B     		ldr	r3, .L1320
 22803 0010 1C70     		strb	r4, [r3]
  36:screens.c     **** 		draw_frame( adm );
 22804              		.loc 1 36 0
 22805 0012 1C4E     		ldr	r6, .L1320+4
 22806 0014 301C     		mov	r0, r6
 22807              	.LVL1844:
 22808 0016 FFF7FEFF 		bl	draw_frame
 22809              	.LVL1845:
  38:screens.c     **** 		write_bitmap( adm, McHale_V6,  33, 22, OR );
 22810              		.loc 1 38 0
 22811 001a 0225     		mov	r5, #2
 22812 001c 0095     		str	r5, [sp]
 22813 001e 301C     		mov	r0, r6
 22814 0020 1949     		ldr	r1, .L1320+8
 22815 0022 2122     		mov	r2, #33
 22816 0024 1623     		mov	r3, #22
 22817 0026 FFF7FEFF 		bl	write_bitmap
 22818              	.LVL1846:
  40:screens.c     **** 		sprintf( tstring, ptText[78], SOFTWARE, ISSUE, REVISION ); // 'GW%03u-%03urev%02u'
 22819              		.loc 1 40 0
 22820 002a 184B     		ldr	r3, .L1320+12
 22821 002c 1A68     		ldr	r2, [r3]
 22822 002e 9C23     		mov	r3, #156
 22823 0030 5B00     		lsl	r3, r3, #1
 22824 0032 D158     		ldr	r1, [r2, r3]
 22825 0034 1723     		mov	r3, #23
 22826 0036 0093     		str	r3, [sp]
 22827 0038 02A8     		add	r0, sp, #8
 22828 003a 9722     		mov	r2, #151
 22829 003c 5200     		lsl	r2, r2, #1
 22830 003e 0123     		mov	r3, #1
 22831 0040 FFF7FEFF 		bl	sprintf
 22832              	.LVL1847:
  41:screens.c     **** 		display_f1_text( tstring, TSMAX, 80, 96, FIXED | CENTER );
 22833              		.loc 1 41 0
 22834 0044 0095     		str	r5, [sp]
 22835 0046 02A8     		add	r0, sp, #8
 22836 0048 1A21     		mov	r1, #26
 22837 004a 5022     		mov	r2, #80
 22838 004c 6023     		mov	r3, #96
 22839 004e FFF7FEFF 		bl	display_f1_text
 22840              	.LVL1848:
  43:screens.c     **** 		leaf = 1;
 22841              		.loc 1 43 0
 22842 0052 0F4B     		ldr	r3, .L1320+16
 22843 0054 1C70     		strb	r4, [r3]
  44:screens.c     **** 		deftime = 49;
 22844              		.loc 1 44 0
 22845 0056 3122     		mov	r2, #49
 22846 0058 0E4B     		ldr	r3, .L1320+20
 22847 005a 1A70     		strb	r2, [r3]
 22848              	.LVL1849:
 22849 005c 0BE0     		b	.L1317
 22850              	.LVL1850:
 22851              	.L1318:
  48:screens.c     **** 	if( lkey & (SW_NEW | SW_REP) )
 22852              		.loc 1 48 0
 22853 005e 830F     		lsr	r3, r0, #30
 22854 0060 09D0     		beq	.L1317
 22855              	.LVL1851:
  51:screens.c     **** 		if( lkey & SW_MASK ) // any key
 22856              		.loc 1 51 0
 22857 0062 FF23     		mov	r3, #255
 22858 0064 9B00     		lsl	r3, r3, #2
 22859 0066 1842     		tst	r0, r3
 22860 0068 05D0     		beq	.L1317
  53:screens.c     **** 			deftime = 0;
 22861              		.loc 1 53 0
 22862 006a 0022     		mov	r2, #0
 22863 006c 094B     		ldr	r3, .L1320+20
 22864 006e 1A70     		strb	r2, [r3]
  54:screens.c     **** 			window = mainscreen;
 22865              		.loc 1 54 0
 22866 0070 094A     		ldr	r2, .L1320+24
 22867 0072 0A4B     		ldr	r3, .L1320+28
 22868 0074 1A60     		str	r2, [r3]
 22869              	.LVL1852:
 22870              	.L1317:
  58:screens.c     **** }
 22871              		.loc 1 58 0
 22872 0076 06B0     		add	sp, sp, #24
 22873              		@ sp needed for prologue
 22874 0078 70BC     		pop	{r4, r5, r6}
 22875 007a 01BC     		pop	{r0}
 22876 007c 0047     		bx	r0
 22877              	.L1321:
 22878 007e C046     		.align	2
 22879              	.L1320:
 22880 0080 00000000 		.word	startup
 22881 0084 00000000 		.word	adm
 22882 0088 00000000 		.word	McHale_V6
 22883 008c 00000000 		.word	ptText
 22884 0090 00000000 		.word	leaf
 22885 0094 00000000 		.word	deftime
 22886 0098 00000000 		.word	mainscreen
 22887 009c 00000000 		.word	window
 22888              		.cfi_endproc
 22889              	.LFE376:
 22891              		.section	.text.screen141,"ax",%progbits
 22892              		.align	2
 22893              		.global	screen141
 22894              		.code	16
 22895              		.thumb_func
 22897              	screen141:
 22898              	.LFB390:
4828:screens.c     **** {
 22899              		.loc 1 4828 0
 22900              		.cfi_startproc
 22901              	.LVL1853:
 22902 0000 70B5     		push	{r4, r5, r6, lr}
 22903              	.LCFI62:
 22904              		.cfi_def_cfa_offset 16
 22905              		.cfi_offset 4, -16
 22906              		.cfi_offset 5, -12
 22907              		.cfi_offset 6, -8
 22908              		.cfi_offset 14, -4
 22909 0002 82B0     		sub	sp, sp, #8
 22910              	.LCFI63:
 22911              		.cfi_def_cfa_offset 24
 22912 0004 051C     		mov	r5, r0
4834:screens.c     **** 	if( !startup )
 22913              		.loc 1 4834 0
 22914 0006 C24B     		ldr	r3, .L1355
 22915 0008 1B78     		ldrb	r3, [r3]
 22916 000a 002B     		cmp	r3, #0
 22917 000c 41D1     		bne	.L1323
4836:screens.c     **** 		startup = 1;
 22918              		.loc 1 4836 0
 22919 000e 0122     		mov	r2, #1
 22920 0010 BF4B     		ldr	r3, .L1355
 22921 0012 1A70     		strb	r2, [r3]
4838:screens.c     **** 		draw_frame( adm );
 22922              		.loc 1 4838 0
 22923 0014 BF48     		ldr	r0, .L1355+4
 22924              	.LVL1854:
 22925 0016 FFF7FEFF 		bl	draw_frame
 22926              	.LVL1855:
4840:screens.c     **** 		display_f1_text( ptText[23], TSMAX, 80, 7, FIXED | CENTER | UNDERLINED ); // "Technician Menu"
 22927              		.loc 1 4840 0
 22928 001a BF4B     		ldr	r3, .L1355+8
 22929 001c 1B68     		ldr	r3, [r3]
 22930 001e D86D     		ldr	r0, [r3, #92]
 22931 0020 0A23     		mov	r3, #10
 22932 0022 0093     		str	r3, [sp]
 22933 0024 1A21     		mov	r1, #26
 22934 0026 5022     		mov	r2, #80
 22935 0028 0723     		mov	r3, #7
 22936 002a FFF7FEFF 		bl	display_f1_text
 22937              	.LVL1856:
4843:screens.c     **** 		display_f1_text( "  Baler Full",     TSMAX, 24, 21, FIXED );
 22938              		.loc 1 4843 0
 22939 002e 0024     		mov	r4, #0
 22940 0030 0094     		str	r4, [sp]
 22941 0032 BA48     		ldr	r0, .L1355+12
 22942 0034 1A21     		mov	r1, #26
 22943 0036 1822     		mov	r2, #24
 22944 0038 1523     		mov	r3, #21
 22945 003a FFF7FEFF 		bl	display_f1_text
 22946              	.LVL1857:
4844:screens.c     **** 		display_f1_text( "  Netting Setup",  TSMAX, 24, 31, FIXED );
 22947              		.loc 1 4844 0
 22948 003e 0094     		str	r4, [sp]
 22949 0040 B748     		ldr	r0, .L1355+16
 22950 0042 1A21     		mov	r1, #26
 22951 0044 1822     		mov	r2, #24
 22952 0046 1F23     		mov	r3, #31
 22953 0048 FFF7FEFF 		bl	display_f1_text
 22954              	.LVL1858:
4845:screens.c     **** 		display_f1_text( "  Diameter Setup", TSMAX, 24, 41, FIXED );
 22955              		.loc 1 4845 0
 22956 004c 0094     		str	r4, [sp]
 22957 004e B548     		ldr	r0, .L1355+20
 22958 0050 1A21     		mov	r1, #26
 22959 0052 1822     		mov	r2, #24
 22960 0054 2923     		mov	r3, #41
 22961 0056 FFF7FEFF 		bl	display_f1_text
 22962              	.LVL1859:
4846:screens.c     **** 		display_f1_text( "  Density Setup",  TSMAX, 24, 51, FIXED );
 22963              		.loc 1 4846 0
 22964 005a 0094     		str	r4, [sp]
 22965 005c B248     		ldr	r0, .L1355+24
 22966 005e 1A21     		mov	r1, #26
 22967 0060 1822     		mov	r2, #24
 22968 0062 3323     		mov	r3, #51
 22969 0064 FFF7FEFF 		bl	display_f1_text
 22970              	.LVL1860:
4847:screens.c     **** 		display_f1_text( "  Knives Setup",   TSMAX, 24, 61, FIXED );
 22971              		.loc 1 4847 0
 22972 0068 0094     		str	r4, [sp]
 22973 006a B048     		ldr	r0, .L1355+28
 22974 006c 1A21     		mov	r1, #26
 22975 006e 1822     		mov	r2, #24
 22976 0070 3D23     		mov	r3, #61
 22977 0072 FFF7FEFF 		bl	display_f1_text
 22978              	.LVL1861:
4848:screens.c     **** 		display_f1_text( "  Reset Defaults", TSMAX, 24, 71, FIXED );
 22979              		.loc 1 4848 0
 22980 0076 0094     		str	r4, [sp]
 22981 0078 AD48     		ldr	r0, .L1355+32
 22982 007a 1A21     		mov	r1, #26
 22983 007c 1822     		mov	r2, #24
 22984 007e 4723     		mov	r3, #71
 22985 0080 FFF7FEFF 		bl	display_f1_text
 22986              	.LVL1862:
4849:screens.c     **** 		display_f1_text( " ",                TSMAX, 24, 81, FIXED );
 22987              		.loc 1 4849 0
 22988 0084 0094     		str	r4, [sp]
 22989 0086 AB48     		ldr	r0, .L1355+36
 22990 0088 1A21     		mov	r1, #26
 22991 008a 1822     		mov	r2, #24
 22992 008c 5123     		mov	r3, #81
 22993 008e FFF7FEFF 		bl	display_f1_text
 22994              	.LVL1863:
 22995              	.L1323:
4855:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 22996              		.loc 1 4855 0
 22997 0092 0020     		mov	r0, #0
 22998 0094 FFF7FEFF 		bl	ClockDisplay
 22999              	.LVL1864:
4858:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 23000              		.loc 1 4858 0
 23001 0098 A74B     		ldr	r3, .L1355+40
 23002 009a 1B78     		ldrb	r3, [r3]
 23003 009c 002B     		cmp	r3, #0
 23004 009e 7BD1     		bne	.L1324
4858:screens.c     **** 	if( !editing && (lkey & (SW_NEW | SW_REP)) )
 23005              		.loc 1 4858 0 is_stmt 0 discriminator 1
 23006 00a0 AB0F     		lsr	r3, r5, #30
 23007 00a2 65D0     		beq	.L1325
4860:screens.c     **** 		lkey &= ~(SW_NEW | SW_REP ); // mask off status bits
 23008              		.loc 1 4860 0 is_stmt 1
 23009 00a4 AD00     		lsl	r5, r5, #2
 23010              	.LVL1865:
 23011 00a6 AD08     		lsr	r5, r5, #2
 23012              	.LVL1866:
4862:screens.c     **** 		if( (lkey == SW_OL) || (lkey == SW_IL) )
 23013              		.loc 1 4862 0
 23014 00a8 042D     		cmp	r5, #4
 23015 00aa 75D0     		beq	.L1324
 23016 00ac A34A     		ldr	r2, .L1355+44
 23017 00ae AB18     		add	r3, r5, r2
 23018 00b0 002B     		cmp	r3, #0
 23019 00b2 71D0     		beq	.L1324
4866:screens.c     **** 		else if( lkey == SW_CU )
 23020              		.loc 1 4866 0
 23021 00b4 202D     		cmp	r5, #32
 23022 00b6 0FD1     		bne	.L1326
4868:screens.c     **** 			if( selection ) // not first option selected
 23023              		.loc 1 4868 0
 23024 00b8 A14B     		ldr	r3, .L1355+48
 23025 00ba 1B78     		ldrb	r3, [r3]
 23026 00bc 002B     		cmp	r3, #0
 23027 00be 78D0     		beq	.L1346
4870:screens.c     **** 				selection--;
 23028              		.loc 1 4870 0
 23029 00c0 013B     		sub	r3, r3, #1
 23030 00c2 1B06     		lsl	r3, r3, #24
 23031 00c4 1B0E     		lsr	r3, r3, #24
 23032              	.LVL1867:
4871:screens.c     **** 				if( selection == 6 ) // skip
 23033              		.loc 1 4871 0
 23034 00c6 062B     		cmp	r3, #6
 23035 00c8 02D0     		beq	.L1328
 23036              	.LVL1868:
4870:screens.c     **** 				selection--;
 23037              		.loc 1 4870 0
 23038 00ca 9D4A     		ldr	r2, .L1355+48
 23039 00cc 1370     		strb	r3, [r2]
 23040 00ce 63E0     		b	.L1324
 23041              	.L1328:
4872:screens.c     **** 					selection = 5;
 23042              		.loc 1 4872 0
 23043 00d0 0522     		mov	r2, #5
 23044 00d2 9B4B     		ldr	r3, .L1355+48
 23045              	.LVL1869:
 23046 00d4 1A70     		strb	r2, [r3]
 23047 00d6 6CE0     		b	.L1346
 23048              	.L1326:
4876:screens.c     **** 		else if( lkey == SW_CD )
 23049              		.loc 1 4876 0
 23050 00d8 402D     		cmp	r5, #64
 23051 00da 13D1     		bne	.L1329
4878:screens.c     **** 			if( selection < 5 ) // not last [visible] option selected
 23052              		.loc 1 4878 0
 23053 00dc 984B     		ldr	r3, .L1355+48
 23054 00de 1B78     		ldrb	r3, [r3]
 23055 00e0 042B     		cmp	r3, #4
 23056 00e2 03D8     		bhi	.L1330
4880:screens.c     **** 				selection++;
 23057              		.loc 1 4880 0
 23058 00e4 0133     		add	r3, r3, #1
 23059 00e6 964A     		ldr	r2, .L1355+48
 23060 00e8 1370     		strb	r3, [r2]
 23061 00ea 55E0     		b	.L1324
 23062              	.L1330:
4882:screens.c     **** 			else if( swtim > 30 )
 23063              		.loc 1 4882 0
 23064 00ec 954B     		ldr	r3, .L1355+52
 23065 00ee 1B78     		ldrb	r3, [r3]
 23066 00f0 1E2B     		cmp	r3, #30
 23067 00f2 03D9     		bls	.L1331
4884:screens.c     **** 				selection = 7; // Goto hidden menu -- selection 6 skipped
 23068              		.loc 1 4884 0
 23069 00f4 0722     		mov	r2, #7
 23070 00f6 924B     		ldr	r3, .L1355+48
 23071 00f8 1A70     		strb	r2, [r3]
 23072 00fa 51E0     		b	.L1332
 23073              	.L1331:
4888:screens.c     **** 				swtim++;
 23074              		.loc 1 4888 0
 23075 00fc 0133     		add	r3, r3, #1
 23076 00fe 914A     		ldr	r2, .L1355+52
 23077 0100 1370     		strb	r3, [r2]
 23078 0102 49E0     		b	.L1324
 23079              	.L1329:
4892:screens.c     **** 		else if( (lkey == SW_OR) || (lkey == SW_CL) )
 23080              		.loc 1 4892 0
 23081 0104 102D     		cmp	r5, #16
 23082 0106 03D0     		beq	.L1353
 23083 0108 6B1E     		sub	r3, r5, #1
 23084 010a FF3B     		sub	r3, r3, #255
 23085 010c 002B     		cmp	r3, #0
 23086 010e 03D1     		bne	.L1333
 23087              	.L1353:
4894:screens.c     **** 			escape = 1;
 23088              		.loc 1 4894 0
 23089 0110 0122     		mov	r2, #1
 23090 0112 8D4B     		ldr	r3, .L1355+56
 23091 0114 1A70     		strb	r2, [r3]
 23092 0116 3FE0     		b	.L1324
 23093              	.L1333:
4896:screens.c     **** 		else if( (lkey == SW_IR) || (lkey == SW_CR) )
 23094              		.loc 1 4896 0
 23095 0118 802D     		cmp	r5, #128
 23096 011a 01D0     		beq	.L1354
 23097 011c 082D     		cmp	r5, #8
 23098 011e 23D1     		bne	.L1335
 23099              	.L1354:
4898:screens.c     **** 			switch( selection )
 23100              		.loc 1 4898 0
 23101 0120 874B     		ldr	r3, .L1355+48
 23102 0122 1A78     		ldrb	r2, [r3]
 23103 0124 072A     		cmp	r2, #7
 23104 0126 37D8     		bhi	.L1324
 23105 0128 9300     		lsl	r3, r2, #2
 23106 012a 884A     		ldr	r2, .L1355+60
 23107 012c D358     		ldr	r3, [r2, r3]
 23108 012e 9F46     		mov	pc, r3
 23109              		.section	.rodata.screen141,"a",%progbits
 23110              		.align	2
 23111              	.L1344:
 23112 0000 30010000 		.word	.L1337
 23113 0004 38010000 		.word	.L1338
 23114 0008 40010000 		.word	.L1339
 23115 000c 48010000 		.word	.L1340
 23116 0010 50010000 		.word	.L1341
 23117 0014 58010000 		.word	.L1342
 23118 0018 98010000 		.word	.L1324
 23119 001c 60010000 		.word	.L1343
 23120              		.section	.text.screen141
 23121              	.L1337:
4901:screens.c     **** 				window = screen142; // Technician Menu - Baler Full
 23122              		.loc 1 4901 0
 23123 0130 874A     		ldr	r2, .L1355+64
 23124 0132 884B     		ldr	r3, .L1355+68
 23125 0134 1A60     		str	r2, [r3]
4902:screens.c     **** 				break;
 23126              		.loc 1 4902 0
 23127 0136 2FE0     		b	.L1324
 23128              	.L1338:
4905:screens.c     **** 				window = screen143; // Technician Menu - Netting Setup
 23129              		.loc 1 4905 0
 23130 0138 874A     		ldr	r2, .L1355+72
 23131 013a 864B     		ldr	r3, .L1355+68
 23132 013c 1A60     		str	r2, [r3]
4906:screens.c     **** 				break;
 23133              		.loc 1 4906 0
 23134 013e 2BE0     		b	.L1324
 23135              	.L1339:
4909:screens.c     **** 				window = screen144; // Technician Menu - Diameter Setup
 23136              		.loc 1 4909 0
 23137 0140 864A     		ldr	r2, .L1355+76
 23138 0142 844B     		ldr	r3, .L1355+68
 23139 0144 1A60     		str	r2, [r3]
4910:screens.c     **** 				break;
 23140              		.loc 1 4910 0
 23141 0146 27E0     		b	.L1324
 23142              	.L1340:
4913:screens.c     **** 				window = screen145; // Technician Menu - Density Setup
 23143              		.loc 1 4913 0
 23144 0148 854A     		ldr	r2, .L1355+80
 23145 014a 824B     		ldr	r3, .L1355+68
 23146 014c 1A60     		str	r2, [r3]
4914:screens.c     **** 				break;
 23147              		.loc 1 4914 0
 23148 014e 23E0     		b	.L1324
 23149              	.L1341:
4917:screens.c     **** 				window = screen146; // Technician Menu - Knives Setup
 23150              		.loc 1 4917 0
 23151 0150 844A     		ldr	r2, .L1355+84
 23152 0152 804B     		ldr	r3, .L1355+68
 23153 0154 1A60     		str	r2, [r3]
4918:screens.c     **** 				break;
 23154              		.loc 1 4918 0
 23155 0156 1FE0     		b	.L1324
 23156              	.L1342:
4921:screens.c     **** 				window = screen147; // Technician Menu - Reset Defaults
 23157              		.loc 1 4921 0
 23158 0158 834A     		ldr	r2, .L1355+88
 23159 015a 7E4B     		ldr	r3, .L1355+68
 23160 015c 1A60     		str	r2, [r3]
4922:screens.c     **** 				break;
 23161              		.loc 1 4922 0
 23162 015e 1BE0     		b	.L1324
 23163              	.L1343:
4929:screens.c     **** 				window = screen148; // Technician Menu - Formation 2
 23164              		.loc 1 4929 0
 23165 0160 824A     		ldr	r2, .L1355+92
 23166 0162 7C4B     		ldr	r3, .L1355+68
 23167 0164 1A60     		str	r2, [r3]
4930:screens.c     **** 				break;
 23168              		.loc 1 4930 0
 23169 0166 17E0     		b	.L1324
 23170              	.L1335:
4935:screens.c     **** 			swtim = 0;
 23171              		.loc 1 4935 0
 23172 0168 0022     		mov	r2, #0
 23173 016a 764B     		ldr	r3, .L1355+52
 23174 016c 1A70     		strb	r2, [r3]
 23175 016e 13E0     		b	.L1324
 23176              	.L1325:
4941:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 23177              		.loc 1 4941 0
 23178 0170 7F4B     		ldr	r3, .L1355+96
 23179 0172 1B78     		ldrb	r3, [r3]
 23180 0174 002B     		cmp	r3, #0
 23181 0176 03D1     		bne	.L1345
4941:screens.c     **** 		if( SavecalDelayOnMainDisplay || SavecalDelayWithinMenus )
 23182              		.loc 1 4941 0 is_stmt 0 discriminator 1
 23183 0178 7E4B     		ldr	r3, .L1355+100
 23184 017a 1B78     		ldrb	r3, [r3]
 23185 017c 002B     		cmp	r3, #0
 23186 017e 0BD0     		beq	.L1324
 23187              	.L1345:
4943:screens.c     **** 			if( swrel > 3 ) // > 3 x 100 ms
 23188              		.loc 1 4943 0 is_stmt 1
 23189 0180 7D4B     		ldr	r3, .L1355+104
 23190 0182 1B78     		ldrb	r3, [r3]
 23191 0184 032B     		cmp	r3, #3
 23192 0186 07D9     		bls	.L1324
4945:screens.c     **** 				SavecalDelayOnMainDisplay = 0;
 23193              		.loc 1 4945 0
 23194 0188 0023     		mov	r3, #0
 23195 018a 794A     		ldr	r2, .L1355+96
 23196 018c 1370     		strb	r3, [r2]
4946:screens.c     **** 				SavecalDelayWithinMenus = 0;
 23197              		.loc 1 4946 0
 23198 018e 794A     		ldr	r2, .L1355+100
 23199 0190 1370     		strb	r3, [r2]
4947:screens.c     **** 				savecal = 1;
 23200              		.loc 1 4947 0
 23201 0192 0122     		mov	r2, #1
 23202 0194 794B     		ldr	r3, .L1355+108
 23203 0196 1A70     		strb	r2, [r3]
 23204              	.LVL1870:
 23205              	.L1324:
4955:screens.c     **** 		if( selection == 7 )
 23206              		.loc 1 4955 0
 23207 0198 694B     		ldr	r3, .L1355+48
 23208              	.LVL1871:
 23209 019a 1B78     		ldrb	r3, [r3]
 23210 019c 072B     		cmp	r3, #7
 23211 019e 08D1     		bne	.L1346
 23212              	.L1332:
4957:screens.c     **** 			display_f1_text( "  Formation 2", TSMAX, 24, 91, FIXED );
 23213              		.loc 1 4957 0
 23214 01a0 0023     		mov	r3, #0
 23215 01a2 0093     		str	r3, [sp]
 23216 01a4 7648     		ldr	r0, .L1355+112
 23217 01a6 1A21     		mov	r1, #26
 23218 01a8 1822     		mov	r2, #24
 23219 01aa 5B23     		mov	r3, #91
 23220 01ac FFF7FEFF 		bl	display_f1_text
 23221              	.LVL1872:
 23222 01b0 09E0     		b	.L1347
 23223              	.L1346:
4961:screens.c     **** 			draw_box( adm, 24, 90, 24+(13*6), 90+8, CLEAR ); 
 23224              		.loc 1 4961 0
 23225 01b2 6223     		mov	r3, #98
 23226 01b4 0093     		str	r3, [sp]
 23227 01b6 4023     		mov	r3, #64
 23228 01b8 0193     		str	r3, [sp, #4]
 23229 01ba 5648     		ldr	r0, .L1355+4
 23230 01bc 1821     		mov	r1, #24
 23231 01be 5A22     		mov	r2, #90
 23232 01c0 6623     		mov	r3, #102
 23233 01c2 FFF7FEFF 		bl	draw_box
 23234              	.LVL1873:
 23235              	.L1347:
4969:screens.c     **** 		draw_box( adm, 1, 102, 158, 126, CLEAR ); // Clear area underneath tabs
 23236              		.loc 1 4969 0
 23237 01c6 7E23     		mov	r3, #126
 23238 01c8 0093     		str	r3, [sp]
 23239 01ca 4023     		mov	r3, #64
 23240 01cc 0193     		str	r3, [sp, #4]
 23241 01ce 5148     		ldr	r0, .L1355+4
 23242 01d0 0121     		mov	r1, #1
 23243 01d2 6622     		mov	r2, #102
 23244 01d4 9E23     		mov	r3, #158
 23245 01d6 FFF7FEFF 		bl	draw_box
 23246              	.LVL1874:
4970:screens.c     **** 		switch( selection ) // Drawn according to position of selection pointer
 23247              		.loc 1 4970 0
 23248 01da 594B     		ldr	r3, .L1355+48
 23249 01dc 1A78     		ldrb	r2, [r3]
 23250 01de 072A     		cmp	r2, #7
 23251 01e0 77D8     		bhi	.L1348
 23252 01e2 9300     		lsl	r3, r2, #2
 23253 01e4 674A     		ldr	r2, .L1355+116
 23254 01e6 D358     		ldr	r3, [r2, r3]
 23255 01e8 9F46     		mov	pc, r3
 23256              		.section	.rodata.screen141
 23257              		.align	2
 23258              	.L1352:
 23259 0020 EA010000 		.word	.L1349
 23260 0024 38020000 		.word	.L1350
 23261 0028 38020000 		.word	.L1350
 23262 002c 38020000 		.word	.L1350
 23263 0030 38020000 		.word	.L1350
 23264 0034 86020000 		.word	.L1351
 23265 0038 86020000 		.word	.L1351
 23266 003c 86020000 		.word	.L1351
 23267              		.section	.text.screen141
 23268              	.L1349:
4974:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
 23269              		.loc 1 4974 0
 23270 01ea 4A4C     		ldr	r4, .L1355+4
 23271 01ec 664E     		ldr	r6, .L1355+120
 23272 01ee 0225     		mov	r5, #2
 23273              	.LVL1875:
 23274 01f0 0095     		str	r5, [sp]
 23275 01f2 201C     		mov	r0, r4
 23276 01f4 311C     		mov	r1, r6
 23277 01f6 0022     		mov	r2, #0
 23278 01f8 6B23     		mov	r3, #107
 23279 01fa FFF7FEFF 		bl	write_bitmap
 23280              	.LVL1876:
4975:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
 23281              		.loc 1 4975 0
 23282 01fe 0095     		str	r5, [sp]
 23283 0200 201C     		mov	r0, r4
 23284 0202 311C     		mov	r1, r6
 23285 0204 1F22     		mov	r2, #31
 23286 0206 6B23     		mov	r3, #107
 23287 0208 FFF7FEFF 		bl	write_bitmap
 23288              	.LVL1877:
4976:screens.c     **** 			write_bitmap( adm, TABNAV_DLR,  62, 102, OR ); // NAVIGATION: Down Left Right
 23289              		.loc 1 4976 0
 23290 020c 0095     		str	r5, [sp]
 23291 020e 201C     		mov	r0, r4
 23292 0210 5E49     		ldr	r1, .L1355+124
 23293 0212 3E22     		mov	r2, #62
 23294 0214 6623     		mov	r3, #102
 23295 0216 FFF7FEFF 		bl	write_bitmap
 23296              	.LVL1878:
4977:screens.c     **** 			write_bitmap( adm, TABENT,      99, 107, OR ); // ENT
 23297              		.loc 1 4977 0
 23298 021a 0095     		str	r5, [sp]
 23299 021c 201C     		mov	r0, r4
 23300 021e 5C49     		ldr	r1, .L1355+128
 23301 0220 6322     		mov	r2, #99
 23302 0222 6B23     		mov	r3, #107
 23303 0224 FFF7FEFF 		bl	write_bitmap
 23304              	.LVL1879:
4978:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
 23305              		.loc 1 4978 0
 23306 0228 0095     		str	r5, [sp]
 23307 022a 201C     		mov	r0, r4
 23308 022c 5949     		ldr	r1, .L1355+132
 23309 022e 8222     		mov	r2, #130
 23310 0230 6B23     		mov	r3, #107
 23311 0232 FFF7FEFF 		bl	write_bitmap
 23312              	.LVL1880:
4979:screens.c     **** 			break;
 23313              		.loc 1 4979 0
 23314 0236 4CE0     		b	.L1348
 23315              	.LVL1881:
 23316              	.L1350:
4985:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
 23317              		.loc 1 4985 0
 23318 0238 364C     		ldr	r4, .L1355+4
 23319 023a 534E     		ldr	r6, .L1355+120
 23320 023c 0225     		mov	r5, #2
 23321              	.LVL1882:
 23322 023e 0095     		str	r5, [sp]
 23323 0240 201C     		mov	r0, r4
 23324 0242 311C     		mov	r1, r6
 23325 0244 0022     		mov	r2, #0
 23326 0246 6B23     		mov	r3, #107
 23327 0248 FFF7FEFF 		bl	write_bitmap
 23328              	.LVL1883:
4986:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
 23329              		.loc 1 4986 0
 23330 024c 0095     		str	r5, [sp]
 23331 024e 201C     		mov	r0, r4
 23332 0250 311C     		mov	r1, r6
 23333 0252 1F22     		mov	r2, #31
 23334 0254 6B23     		mov	r3, #107
 23335 0256 FFF7FEFF 		bl	write_bitmap
 23336              	.LVL1884:
4987:screens.c     **** 			write_bitmap( adm, TABNAV_UDLR, 62, 102, OR ); // NAVIGATION: Up Down Left Right
 23337              		.loc 1 4987 0
 23338 025a 0095     		str	r5, [sp]
 23339 025c 201C     		mov	r0, r4
 23340 025e 4E49     		ldr	r1, .L1355+136
 23341 0260 3E22     		mov	r2, #62
 23342 0262 6623     		mov	r3, #102
 23343 0264 FFF7FEFF 		bl	write_bitmap
 23344              	.LVL1885:
4988:screens.c     **** 			write_bitmap( adm, TABENT,      99, 107, OR ); // ENT
 23345              		.loc 1 4988 0
 23346 0268 0095     		str	r5, [sp]
 23347 026a 201C     		mov	r0, r4
 23348 026c 4849     		ldr	r1, .L1355+128
 23349 026e 6322     		mov	r2, #99
 23350 0270 6B23     		mov	r3, #107
 23351 0272 FFF7FEFF 		bl	write_bitmap
 23352              	.LVL1886:
4989:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
 23353              		.loc 1 4989 0
 23354 0276 0095     		str	r5, [sp]
 23355 0278 201C     		mov	r0, r4
 23356 027a 4649     		ldr	r1, .L1355+132
 23357 027c 8222     		mov	r2, #130
 23358 027e 6B23     		mov	r3, #107
 23359 0280 FFF7FEFF 		bl	write_bitmap
 23360              	.LVL1887:
4990:screens.c     **** 			break;
 23361              		.loc 1 4990 0
 23362 0284 25E0     		b	.L1348
 23363              	.LVL1888:
 23364              	.L1351:
4995:screens.c     **** 			write_bitmap( adm, TAB,          0, 107, OR );
 23365              		.loc 1 4995 0
 23366 0286 234C     		ldr	r4, .L1355+4
 23367 0288 3F4E     		ldr	r6, .L1355+120
 23368 028a 0225     		mov	r5, #2
 23369              	.LVL1889:
 23370 028c 0095     		str	r5, [sp]
 23371 028e 201C     		mov	r0, r4
 23372 0290 311C     		mov	r1, r6
 23373 0292 0022     		mov	r2, #0
 23374 0294 6B23     		mov	r3, #107
 23375 0296 FFF7FEFF 		bl	write_bitmap
 23376              	.LVL1890:
4996:screens.c     **** 			write_bitmap( adm, TAB,         31, 107, OR );
 23377              		.loc 1 4996 0
 23378 029a 0095     		str	r5, [sp]
 23379 029c 201C     		mov	r0, r4
 23380 029e 311C     		mov	r1, r6
 23381 02a0 1F22     		mov	r2, #31
 23382 02a2 6B23     		mov	r3, #107
 23383 02a4 FFF7FEFF 		bl	write_bitmap
 23384              	.LVL1891:
4997:screens.c     **** 			write_bitmap( adm, TABNAV_ULR,  62, 102, OR ); // NAVIGATION: Up Left Right
 23385              		.loc 1 4997 0
 23386 02a8 0095     		str	r5, [sp]
 23387 02aa 201C     		mov	r0, r4
 23388 02ac 3B49     		ldr	r1, .L1355+140
 23389 02ae 3E22     		mov	r2, #62
 23390 02b0 6623     		mov	r3, #102
 23391 02b2 FFF7FEFF 		bl	write_bitmap
 23392              	.LVL1892:
4998:screens.c     **** 			write_bitmap( adm, TABENT,      99, 107, OR ); // ENT
 23393              		.loc 1 4998 0
 23394 02b6 0095     		str	r5, [sp]
 23395 02b8 201C     		mov	r0, r4
 23396 02ba 3549     		ldr	r1, .L1355+128
 23397 02bc 6322     		mov	r2, #99
 23398 02be 6B23     		mov	r3, #107
 23399 02c0 FFF7FEFF 		bl	write_bitmap
 23400              	.LVL1893:
4999:screens.c     **** 			write_bitmap( adm, TABESC,     130, 107, OR ); // ESC
 23401              		.loc 1 4999 0
 23402 02c4 0095     		str	r5, [sp]
 23403 02c6 201C     		mov	r0, r4
 23404 02c8 3249     		ldr	r1, .L1355+132
 23405 02ca 8222     		mov	r2, #130
 23406 02cc 6B23     		mov	r3, #107
 23407 02ce FFF7FEFF 		bl	write_bitmap
 23408              	.LVL1894:
 23409              	.L1348:
5004:screens.c     **** 		draw_box( adm, 16, 21 , 20, 100, CLEAR );
 23410              		.loc 1 5004 0
 23411 02d2 104C     		ldr	r4, .L1355+4
 23412 02d4 6423     		mov	r3, #100
 23413 02d6 0093     		str	r3, [sp]
 23414 02d8 4023     		mov	r3, #64
 23415 02da 0193     		str	r3, [sp, #4]
 23416 02dc 201C     		mov	r0, r4
 23417 02de 1021     		mov	r1, #16
 23418 02e0 1522     		mov	r2, #21
 23419 02e2 1423     		mov	r3, #20
 23420 02e4 FFF7FEFF 		bl	draw_box
 23421              	.LVL1895:
5005:screens.c     **** 		write_bitmap( adm, F1_POINT, 16, 21+(10*selection), OR );
 23422              		.loc 1 5005 0
 23423 02e8 154B     		ldr	r3, .L1355+48
 23424 02ea 1B78     		ldrb	r3, [r3]
 23425 02ec 9A00     		lsl	r2, r3, #2
 23426 02ee D318     		add	r3, r2, r3
 23427 02f0 5B06     		lsl	r3, r3, #25
 23428 02f2 A822     		mov	r2, #168
 23429 02f4 5205     		lsl	r2, r2, #21
 23430 02f6 9B18     		add	r3, r3, r2
 23431 02f8 1B0E     		lsr	r3, r3, #24
 23432 02fa 0222     		mov	r2, #2
 23433 02fc 0092     		str	r2, [sp]
 23434 02fe 201C     		mov	r0, r4
 23435 0300 2749     		ldr	r1, .L1355+144
 23436 0302 1022     		mov	r2, #16
 23437 0304 FFF7FEFF 		bl	write_bitmap
 23438              	.LVL1896:
5010:screens.c     **** }
 23439              		.loc 1 5010 0
 23440 0308 02B0     		add	sp, sp, #8
 23441              		@ sp needed for prologue
 23442 030a 70BC     		pop	{r4, r5, r6}
 23443 030c 01BC     		pop	{r0}
 23444 030e 0047     		bx	r0
 23445              	.L1356:
 23446              		.align	2
 23447              	.L1355:
 23448 0310 00000000 		.word	startup
 23449 0314 00000000 		.word	adm
 23450 0318 00000000 		.word	ptText
 23451 031c 84040000 		.word	.LC880
 23452 0320 94040000 		.word	.LC882
 23453 0324 A4040000 		.word	.LC884
 23454 0328 B8040000 		.word	.LC886
 23455 032c C8040000 		.word	.LC888
 23456 0330 D8040000 		.word	.LC890
 23457 0334 74040000 		.word	.LC794
 23458 0338 00000000 		.word	editing
 23459 033c 00FEFFFF 		.word	-512
 23460 0340 00000000 		.word	selection
 23461 0344 00000000 		.word	.LANCHOR35
 23462 0348 00000000 		.word	escape
 23463 034c 00000000 		.word	.L1344
 23464 0350 00000000 		.word	screen142
 23465 0354 00000000 		.word	window
 23466 0358 00000000 		.word	screen143
 23467 035c 00000000 		.word	screen144
 23468 0360 00000000 		.word	screen145
 23469 0364 00000000 		.word	screen146
 23470 0368 00000000 		.word	screen147
 23471 036c 00000000 		.word	screen148
 23472 0370 00000000 		.word	SavecalDelayOnMainDisplay
 23473 0374 00000000 		.word	SavecalDelayWithinMenus
 23474 0378 00000000 		.word	swrel
 23475 037c 00000000 		.word	savecal
 23476 0380 EC040000 		.word	.LC910
 23477 0384 20000000 		.word	.L1352
 23478 0388 00000000 		.word	TAB
 23479 038c 00000000 		.word	TABNAV_DLR
 23480 0390 00000000 		.word	TABENT
 23481 0394 00000000 		.word	TABESC
 23482 0398 00000000 		.word	TABNAV_UDLR
 23483 039c 00000000 		.word	TABNAV_ULR
 23484 03a0 00000000 		.word	F1_POINT
 23485              		.cfi_endproc
 23486              	.LFE390:
 23488              		.section	.text.screen99,"ax",%progbits
 23489              		.align	2
 23490              		.global	screen99
 23491              		.code	16
 23492              		.thumb_func
 23494              	screen99:
 23495              	.LFB401:
7593:screens.c     **** // -----------------------------------------------------------
7594:screens.c     **** 
7595:screens.c     **** 
7596:screens.c     **** // -----------------------------------------------------------
7597:screens.c     **** // Function Name       : screen99
7598:screens.c     **** // Description         : Power Down
7599:screens.c     **** // -----------------------------------------------------------
7600:screens.c     **** void screen99( unsigned int lkey )
7601:screens.c     **** {
 23496              		.loc 1 7601 0
 23497              		.cfi_startproc
 23498              	.LVL1897:
 23499 0000 70B5     		push	{r4, r5, r6, lr}
 23500              	.LCFI64:
 23501              		.cfi_def_cfa_offset 16
 23502              		.cfi_offset 4, -16
 23503              		.cfi_offset 5, -12
 23504              		.cfi_offset 6, -8
 23505              		.cfi_offset 14, -4
 23506 0002 82B0     		sub	sp, sp, #8
 23507              	.LCFI65:
 23508              		.cfi_def_cfa_offset 24
7602:screens.c     **** 	static unsigned char old_offtime;
7603:screens.c     **** 
7604:screens.c     **** 	if( !startup )
 23509              		.loc 1 7604 0
 23510 0004 524B     		ldr	r3, .L1364
 23511 0006 1B78     		ldrb	r3, [r3]
 23512 0008 002B     		cmp	r3, #0
 23513 000a 44D1     		bne	.L1358
7605:screens.c     **** 	{
7606:screens.c     **** 		startup = 1;
 23514              		.loc 1 7606 0
 23515 000c 0122     		mov	r2, #1
 23516 000e 504B     		ldr	r3, .L1364
 23517 0010 1A70     		strb	r2, [r3]
7607:screens.c     **** 
7608:screens.c     **** 		draw_frame( adm );
 23518              		.loc 1 7608 0
 23519 0012 504C     		ldr	r4, .L1364+4
 23520 0014 201C     		mov	r0, r4
 23521              	.LVL1898:
 23522 0016 FFF7FEFF 		bl	draw_frame
 23523              	.LVL1899:
7609:screens.c     **** 
7610:screens.c     **** 		/*display_f1_text( "Graphic Wizard", TSMAX, 80, 4, FIXED | UNDERLINED | CENTER );*/
7611:screens.c     **** 
7612:screens.c     **** 		write_bitmap( adm, TAB,   0, 107, OR );
 23524              		.loc 1 7612 0
 23525 001a 4F4E     		ldr	r6, .L1364+8
 23526 001c 0225     		mov	r5, #2
 23527 001e 0095     		str	r5, [sp]
 23528 0020 201C     		mov	r0, r4
 23529 0022 311C     		mov	r1, r6
 23530 0024 0022     		mov	r2, #0
 23531 0026 6B23     		mov	r3, #107
 23532 0028 FFF7FEFF 		bl	write_bitmap
 23533              	.LVL1900:
7613:screens.c     **** 		write_bitmap( adm, POWER,10, 111, OR );
 23534              		.loc 1 7613 0
 23535 002c 0095     		str	r5, [sp]
 23536 002e 201C     		mov	r0, r4
 23537 0030 4A49     		ldr	r1, .L1364+12
 23538 0032 0A22     		mov	r2, #10
 23539 0034 6F23     		mov	r3, #111
 23540 0036 FFF7FEFF 		bl	write_bitmap
 23541              	.LVL1901:
7614:screens.c     **** 		write_bitmap( adm, TAB,  31, 107, OR );
 23542              		.loc 1 7614 0
 23543 003a 0095     		str	r5, [sp]
 23544 003c 201C     		mov	r0, r4
 23545 003e 311C     		mov	r1, r6
 23546 0040 1F22     		mov	r2, #31
 23547 0042 6B23     		mov	r3, #107
 23548 0044 FFF7FEFF 		bl	write_bitmap
 23549              	.LVL1902:
7615:screens.c     **** 		write_bitmap( adm, TABNAV00, 62, 102, OR );
 23550              		.loc 1 7615 0
 23551 0048 0095     		str	r5, [sp]
 23552 004a 201C     		mov	r0, r4
 23553 004c 4449     		ldr	r1, .L1364+16
 23554 004e 3E22     		mov	r2, #62
 23555 0050 6623     		mov	r3, #102
 23556 0052 FFF7FEFF 		bl	write_bitmap
 23557              	.LVL1903:
7616:screens.c     **** 		write_bitmap( adm, TAB,  99, 107, OR );
 23558              		.loc 1 7616 0
 23559 0056 0095     		str	r5, [sp]
 23560 0058 201C     		mov	r0, r4
 23561 005a 311C     		mov	r1, r6
 23562 005c 6322     		mov	r2, #99
 23563 005e 6B23     		mov	r3, #107
 23564 0060 FFF7FEFF 		bl	write_bitmap
 23565              	.LVL1904:
7617:screens.c     **** 		write_bitmap( adm, TAB, 130, 107, OR );
 23566              		.loc 1 7617 0
 23567 0064 0095     		str	r5, [sp]
 23568 0066 201C     		mov	r0, r4
 23569 0068 311C     		mov	r1, r6
 23570 006a 8222     		mov	r2, #130
 23571 006c 6B23     		mov	r3, #107
 23572 006e FFF7FEFF 		bl	write_bitmap
 23573              	.LVL1905:
7618:screens.c     **** 
7619:screens.c     **** 		//write_bitmap( adm, BAR, 31, 45, OR );
7620:screens.c     **** 
7621:screens.c     **** 		display_f1_text( "I", TSMAX, 22, 47, FIXED );
 23574              		.loc 1 7621 0
 23575 0072 0024     		mov	r4, #0
 23576 0074 0094     		str	r4, [sp]
 23577 0076 3B48     		ldr	r0, .L1364+20
 23578 0078 1A21     		mov	r1, #26
 23579 007a 1622     		mov	r2, #22
 23580 007c 2F23     		mov	r3, #47
 23581 007e FFF7FEFF 		bl	display_f1_text
 23582              	.LVL1906:
7622:screens.c     **** 		display_f1_text( "0", TSMAX, 135, 47, FIXED );
 23583              		.loc 1 7622 0
 23584 0082 0094     		str	r4, [sp]
 23585 0084 3848     		ldr	r0, .L1364+24
 23586 0086 1A21     		mov	r1, #26
 23587 0088 8722     		mov	r2, #135
 23588 008a 2F23     		mov	r3, #47
 23589 008c FFF7FEFF 		bl	display_f1_text
 23590              	.LVL1907:
7623:screens.c     **** 		//display_f1_text( "to", TSMAX, 80, 55, FIXED | CENTER );
7624:screens.c     **** 		//display_f1_text( "Power Down", TSMAX, 80, 70, FIXED | CENTER );
7625:screens.c     **** 		offtime = 0;
 23591              		.loc 1 7625 0
 23592 0090 364B     		ldr	r3, .L1364+28
 23593 0092 1C70     		strb	r4, [r3]
 23594 0094 2CE0     		b	.L1359
 23595              	.LVL1908:
 23596              	.L1358:
7626:screens.c     **** 	}
7627:screens.c     **** 	else if( lkey & SW_OL )
 23597              		.loc 1 7627 0
 23598 0096 8305     		lsl	r3, r0, #22
 23599 0098 1CD5     		bpl	.L1360
7628:screens.c     **** 	{
7629:screens.c     **** 		if( lkey & SW_NEW )
 23600              		.loc 1 7629 0
 23601 009a 0028     		cmp	r0, #0
 23602 009c 0ADA     		bge	.L1361
7630:screens.c     **** 		{
7631:screens.c     **** 			// set a common window to both modes
7632:screens.c     **** 			//pRun.pr.windowSet = screen04;
7633:screens.c     **** 
7634:screens.c     **** 			// toggle demo mode
7635:screens.c     **** 			//pFac.pf.DemoType ^= DT_DEMOTYPE;
7636:screens.c     **** 
7637:screens.c     **** #ifndef WINDOWS
7638:screens.c     **** 			// write factors to SPI1 Flash @ 0x000000
7639:screens.c     **** 			SPI1FlashWrite( SFC_PW, pFac_BASEADDRESS, &(pFac.ch[0]), sizeof(pFac.pf) );
 23603              		.loc 1 7639 0
 23604 009e 0A20     		mov	r0, #10
 23605              	.LVL1909:
 23606 00a0 0021     		mov	r1, #0
 23607 00a2 334A     		ldr	r2, .L1364+32
 23608 00a4 9023     		mov	r3, #144
 23609 00a6 5B00     		lsl	r3, r3, #1
 23610 00a8 FFF7FEFF 		bl	SPI1FlashWrite
 23611              	.LVL1910:
7640:screens.c     **** #endif
7641:screens.c     **** 			offtime = 0;
 23612              		.loc 1 7641 0
 23613 00ac 0022     		mov	r2, #0
 23614 00ae 2F4B     		ldr	r3, .L1364+28
 23615 00b0 1A70     		strb	r2, [r3]
 23616 00b2 1DE0     		b	.L1359
 23617              	.LVL1911:
 23618              	.L1361:
7642:screens.c     **** 		}
7643:screens.c     **** 		else if( offtime > 18 )
 23619              		.loc 1 7643 0
 23620 00b4 2D4B     		ldr	r3, .L1364+28
 23621 00b6 1B78     		ldrb	r3, [r3]
 23622 00b8 122B     		cmp	r3, #18
 23623 00ba 19D9     		bls	.L1359
7644:screens.c     **** 		{
7645:screens.c     **** 			// Resume Power task - save factors and turn off
7646:screens.c     **** 			PowerSwitchedOff = 1;
 23624              		.loc 1 7646 0
 23625 00bc 0122     		mov	r2, #1
 23626 00be 2D4B     		ldr	r3, .L1364+36
 23627 00c0 1A70     		strb	r2, [r3]
7647:screens.c     **** #ifndef WINDOWS
7648:screens.c     **** 			vTaskResume( POWERtaskhandle );
 23628              		.loc 1 7648 0
 23629 00c2 2D4B     		ldr	r3, .L1364+40
 23630 00c4 1868     		ldr	r0, [r3]
 23631              	.LVL1912:
 23632 00c6 FFF7FEFF 		bl	vTaskResume
 23633              	.LVL1913:
7649:screens.c     **** 
7650:screens.c     **** 			// wait for 2 seconds
7651:screens.c     **** 			vTaskDelay( 2000 / portTICK_RATE_MS );
 23634              		.loc 1 7651 0
 23635 00ca FA20     		mov	r0, #250
 23636 00cc C000     		lsl	r0, r0, #3
 23637 00ce FFF7FEFF 		bl	vTaskDelay
 23638              	.LVL1914:
 23639 00d2 0DE0     		b	.L1359
 23640              	.LVL1915:
 23641              	.L1360:
7652:screens.c     **** #endif
7653:screens.c     **** 		}
7654:screens.c     **** 	}
7655:screens.c     **** 	else if( lkey & SW_IL )
 23642              		.loc 1 7655 0
 23643 00d4 4307     		lsl	r3, r0, #29
 23644 00d6 0BD5     		bpl	.L1359
7656:screens.c     **** 	{
7657:screens.c     **** 		if( lkey & SW_NEW )
 23645              		.loc 1 7657 0
 23646 00d8 0028     		cmp	r0, #0
 23647 00da 06DA     		bge	.L1362
7658:screens.c     **** 		{
7659:screens.c     **** 			// toggle demo mode
7660:screens.c     **** 			// pFac.pf.DemoType ^= DT_DEMOMENU;
7661:screens.c     **** 
7662:screens.c     **** #ifndef WINDOWS
7663:screens.c     **** 			// write factors to SPI1 Flash @ 0x000000
7664:screens.c     **** 			SPI1FlashWrite( SFC_PW, pFac_BASEADDRESS, &(pFac.ch[0]), sizeof(pFac.pf) );
 23648              		.loc 1 7664 0
 23649 00dc 0A20     		mov	r0, #10
 23650              	.LVL1916:
 23651 00de 0021     		mov	r1, #0
 23652 00e0 234A     		ldr	r2, .L1364+32
 23653 00e2 9023     		mov	r3, #144
 23654 00e4 5B00     		lsl	r3, r3, #1
 23655 00e6 FFF7FEFF 		bl	SPI1FlashWrite
 23656              	.LVL1917:
 23657              	.L1362:
7665:screens.c     **** #endif
7666:screens.c     **** 		}
7667:screens.c     **** 		offtime = 0;
 23658              		.loc 1 7667 0
 23659 00ea 0022     		mov	r2, #0
 23660 00ec 1F4B     		ldr	r3, .L1364+28
 23661 00ee 1A70     		strb	r2, [r3]
 23662              	.L1359:
7668:screens.c     **** 	}
7669:screens.c     **** 	else // restore window if key released
7670:screens.c     **** 	{
7671:screens.c     **** 		// check for valid default window and set default if none
7672:screens.c     **** 		//checkwindowSet();
7673:screens.c     **** 		// window = pRun.pr.windowSet;
7674:screens.c     **** 
7675:screens.c     **** 		// while(1); // gives watchdog reset
7676:screens.c     **** 
7677:screens.c     **** 		// window = (void(*)())0xffffffff; // gives undefine instruction abort
7678:screens.c     **** 
7679:screens.c     **** 		// *((AT91_REG *)0x1FF80278) = 0xa5; // gives data abort
7680:screens.c     **** 	}
7681:screens.c     **** 
7682:screens.c     **** #ifdef SHOW_TIME
7683:screens.c     **** 	ClockDisplay( CL0CK_ICON_OFF ); // Time in format hh:mm
 23663              		.loc 1 7683 0
 23664 00f0 0020     		mov	r0, #0
 23665 00f2 FFF7FEFF 		bl	ClockDisplay
 23666              	.LVL1918:
7684:screens.c     **** #endif	
7685:screens.c     **** 
7686:screens.c     **** 	if( offtime != old_offtime )
 23667              		.loc 1 7686 0
 23668 00f6 1D4B     		ldr	r3, .L1364+28
 23669 00f8 1A78     		ldrb	r2, [r3]
 23670 00fa 204B     		ldr	r3, .L1364+44
 23671 00fc 1B78     		ldrb	r3, [r3]
 23672 00fe 9A42     		cmp	r2, r3
 23673 0100 22D0     		beq	.L1357
7687:screens.c     **** 	{
7688:screens.c     **** 		draw_box( adm, 31, 45, 131, 55, CLEAR );
 23674              		.loc 1 7688 0
 23675 0102 144C     		ldr	r4, .L1364+4
 23676 0104 3723     		mov	r3, #55
 23677 0106 0093     		str	r3, [sp]
 23678 0108 4023     		mov	r3, #64
 23679 010a 0193     		str	r3, [sp, #4]
 23680 010c 201C     		mov	r0, r4
 23681 010e 1F21     		mov	r1, #31
 23682 0110 2D22     		mov	r2, #45
 23683 0112 8323     		mov	r3, #131
 23684 0114 FFF7FEFF 		bl	draw_box
 23685              	.LVL1919:
7689:screens.c     **** 		write_bitmap( adm, BAR, 31, 45, OR );
 23686              		.loc 1 7689 0
 23687 0118 0226     		mov	r6, #2
 23688 011a 0096     		str	r6, [sp]
 23689 011c 201C     		mov	r0, r4
 23690 011e 1849     		ldr	r1, .L1364+48
 23691 0120 1F22     		mov	r2, #31
 23692 0122 2D23     		mov	r3, #45
 23693 0124 FFF7FEFF 		bl	write_bitmap
 23694              	.LVL1920:
7690:screens.c     **** 		write_bitmap( adm, BRICK1, 32+(offtime*3), 46, OR );
 23695              		.loc 1 7690 0
 23696 0128 104D     		ldr	r5, .L1364+28
 23697 012a 2B78     		ldrb	r3, [r5]
 23698 012c 5A00     		lsl	r2, r3, #1
 23699 012e D218     		add	r2, r2, r3
 23700 0130 2032     		add	r2, r2, #32
 23701 0132 1206     		lsl	r2, r2, #24
 23702 0134 120E     		lsr	r2, r2, #24
 23703 0136 0096     		str	r6, [sp]
 23704 0138 201C     		mov	r0, r4
 23705 013a 1249     		ldr	r1, .L1364+52
 23706 013c 2E23     		mov	r3, #46
 23707 013e FFF7FEFF 		bl	write_bitmap
 23708              	.LVL1921:
7691:screens.c     **** 		old_offtime = offtime;
 23709              		.loc 1 7691 0
 23710 0142 2A78     		ldrb	r2, [r5]
 23711 0144 0D4B     		ldr	r3, .L1364+44
 23712 0146 1A70     		strb	r2, [r3]
 23713              	.L1357:
7692:screens.c     **** 	}
7693:screens.c     **** 	//display_f1_text( (pFac.pf.DemoType & DT_DEMOTYPE) ? "IND" : "AGR", TSMAX,  0+5, 107+7, FIXED );
7694:screens.c     **** 
7695:screens.c     **** 	//display_f1_text( (pFac.pf.DemoType & DT_DEMOMENU) ? "C&C" : "ALL", TSMAX, 31+5, 107+7, FIXED );
7696:screens.c     **** 
7697:screens.c     **** }
 23714              		.loc 1 7697 0
 23715 0148 02B0     		add	sp, sp, #8
 23716              		@ sp needed for prologue
 23717 014a 70BC     		pop	{r4, r5, r6}
 23718 014c 01BC     		pop	{r0}
 23719 014e 0047     		bx	r0
 23720              	.L1365:
 23721              		.align	2
 23722              	.L1364:
 23723 0150 00000000 		.word	startup
 23724 0154 00000000 		.word	adm
 23725 0158 00000000 		.word	TAB
 23726 015c 00000000 		.word	POWER
 23727 0160 00000000 		.word	TABNAV00
 23728 0164 FC040000 		.word	.LC925
 23729 0168 BC020000 		.word	.LC324
 23730 016c 00000000 		.word	offtime
 23731 0170 00000000 		.word	pFac
 23732 0174 00000000 		.word	PowerSwitchedOff
 23733 0178 00000000 		.word	POWERtaskhandle
 23734 017c 00000000 		.word	.LANCHOR36
 23735 0180 00000000 		.word	BAR
 23736 0184 00000000 		.word	BRICK1
 23737              		.cfi_endproc
 23738              	.LFE401:
 23740              		.comm	SelectedBaleStore,1,1
 23741              		.comm	Screen100Page,1,1
 23742              		.comm	keytime,1,1
 23743              		.comm	SecondScreen,1,1
 23744              		.comm	KnifePresWasHigh,1,1
 23745              		.comm	OKWarnBox,1,1
 23746              		.comm	MWarn,1,1
 23747              		.comm	nextoutput,1,1
 23748              		.comm	lastoutput,1,1
 23749              		.comm	reverttime,1,1
 23750              		.comm	POWERtaskhandle,4,4
 23751              		.comm	TWItaskhandle,4,4
 23752              		.comm	SetTime,4,4
 23753              		.section	.bss.NetOnKeyPressed.9330,"aw",%nobits
 23754              		.set	.LANCHOR19,. + 0
 23757              	NetOnKeyPressed.9330:
 23758 0000 00       		.space	1
 23759              		.section	.bss.t_year.9674,"aw",%nobits
 23760              		.align	1
 23761              		.set	.LANCHOR16,. + 0
 23764              	t_year.9674:
 23765 0000 0000     		.space	2
 23766              		.section	.bss.t_month.9680,"aw",%nobits
 23767              		.set	.LANCHOR15,. + 0
 23770              	t_month.9680:
 23771 0000 00       		.space	1
 23772              		.section	.bss.old_offtime.10017,"aw",%nobits
 23773              		.set	.LANCHOR36,. + 0
 23776              	old_offtime.10017:
 23777 0000 00       		.space	1
 23778              		.section	.bss.page.9493,"aw",%nobits
 23779              		.set	.LANCHOR8,. + 0
 23782              	page.9493:
 23783 0000 00       		.space	1
 23784              		.section	.bss.ArrowsCleared.9324,"aw",%nobits
 23785              		.set	.LANCHOR30,. + 0
 23788              	ArrowsCleared.9324:
 23789 0000 00       		.space	1
 23790              		.section	.bss.TempIntKPV.9331,"aw",%nobits
 23791              		.align	2
 23792              		.set	.LANCHOR26,. + 0
 23795              	TempIntKPV.9331:
 23796 0000 00000000 		.space	4
 23797              		.section	.bss.dig.9744,"aw",%nobits
 23798              		.align	2
 23799              		.set	.LANCHOR7,. + 0
 23802              	dig.9744:
 23803 0000 00000000 		.space	5
 23803      00
 23804 0005 000000   		.section	.bss.TempFloatSV.9334,"aw",%nobits
 23805              		.align	2
 23806              		.set	.LANCHOR25,. + 0
 23809              	TempFloatSV.9334:
 23810 0000 00000000 		.space	4
 23811              		.section	.bss.page.9910,"aw",%nobits
 23812              		.set	.LANCHOR2,. + 0
 23815              	page.9910:
 23816 0000 00       		.space	1
 23817              		.section	.bss.FloorKeyPressed.9327,"aw",%nobits
 23818              		.set	.LANCHOR18,. + 0
 23821              	FloorKeyPressed.9327:
 23822 0000 00       		.space	1
 23823              		.section	.bss.CropFeedSel.9323,"aw",%nobits
 23824              		.set	.LANCHOR27,. + 0
 23827              	CropFeedSel.9323:
 23828 0000 00       		.space	1
 23829              		.section	.bss.swtim.9763,"aw",%nobits
 23830              		.set	.LANCHOR35,. + 0
 23833              	swtim.9763:
 23834 0000 00       		.space	1
 23835              		.section	.bss.t_hrs.9677,"aw",%nobits
 23836              		.set	.LANCHOR12,. + 0
 23839              	t_hrs.9677:
 23840 0000 00       		.space	1
 23841              		.section	.bss.DrivingArrowsX3BeepDelay.9337,"aw",%nobits
 23842              		.set	.LANCHOR32,. + 0
 23845              	DrivingArrowsX3BeepDelay.9337:
 23846 0000 00       		.space	1
 23847              		.section	.bss.BaleTotalFlashedOff.9339,"aw",%nobits
 23848              		.set	.LANCHOR21,. + 0
 23851              	BaleTotalFlashedOff.9339:
 23852 0000 00       		.space	1
 23853              		.section	.bss.ResetLube.9325,"aw",%nobits
 23854              		.set	.LANCHOR17,. + 0
 23857              	ResetLube.9325:
 23858 0000 00       		.space	1
 23859              		.section	.bss.FloorKeyPressedAndOutputTurnedOn.9329,"aw",%nobits
 23860              		.set	.LANCHOR23,. + 0
 23863              	FloorKeyPressedAndOutputTurnedOn.9329:
 23864 0000 00       		.space	1
 23865              		.section	.bss.KnivKeyPressed.9326,"aw",%nobits
 23866              		.set	.LANCHOR20,. + 0
 23869              	KnivKeyPressed.9326:
 23870 0000 00       		.space	1
 23871              		.section	.bss.TryingToSetBaleDiaBelowCore.9410,"aw",%nobits
 23872              		.set	.LANCHOR9,. + 0
 23875              	TryingToSetBaleDiaBelowCore.9410:
 23876 0000 00       		.space	1
 23877              		.section	.rodata.str1.4,"aMS",%progbits,1
 23878              		.align	2
 23879              	.LC64:
 23880 0000 5600     		.ascii	"V\000"
 23881 0002 0000     		.space	2
 23882              	.LC82:
 23883 0004 31202020 		.ascii	"1      2      3\000"
 23883      20202032 
 23883      20202020 
 23883      20203300 
 23884              	.LC84:
 23885 0014 34202020 		.ascii	"4      5      6\000"
 23885      20202035 
 23885      20202020 
 23885      20203600 
 23886              	.LC86:
 23887 0024 37202020 		.ascii	"7      8       \000"
 23887      20202038 
 23887      20202020 
 23887      20202000 
 23888              	.LC92:
 23889 0034 466F726D 		.ascii	"Formation 2\000"
 23889      6174696F 
 23889      6E203200 
 23890              	.LC107:
 23891 0040 466F726D 		.ascii	"Formation Density\000"
 23891      6174696F 
 23891      6E204465 
 23891      6E736974 
 23891      7900
 23892 0052 0000     		.space	2
 23893              	.LC109:
 23894 0054 466F726D 		.ascii	"Formation Dia.\000"
 23894      6174696F 
 23894      6E204469 
 23894      612E00
 23895 0063 00       		.space	1
 23896              	.LC111:
 23897 0064 2500     		.ascii	"%\000"
 23898 0066 0000     		.space	2
 23899              	.LC113:
 23900 0068 466F726D 		.ascii	"Formation2 Density\000"
 23900      6174696F 
 23900      6E322044 
 23900      656E7369 
 23900      747900
 23901 007b 00       		.space	1
 23902              	.LC115:
 23903 007c 466F726D 		.ascii	"Formation2 Dia.\000"
 23903      6174696F 
 23903      6E322044 
 23903      69612E00 
 23904              	.LC128:
 23905 008c 4B6E6976 		.ascii	"Knives Setup\000"
 23905      65732053 
 23905      65747570 
 23905      00
 23906 0099 000000   		.space	3
 23907              	.LC142:
 23908 009c 4B6E6966 		.ascii	"Knife Pressure\000"
 23908      65205072 
 23908      65737375 
 23908      726500
 23909 00ab 00       		.space	1
 23910              	.LC145:
 23911 00ac 4B6E6966 		.ascii	"Knife Pres. Warn\000"
 23911      65205072 
 23911      65732E20 
 23911      5761726E 
 23911      00
 23912 00bd 000000   		.space	3
 23913              	.LC147:
 23914 00c0 44697665 		.ascii	"Diverter Delay\000"
 23914      72746572 
 23914      2044656C 
 23914      617900
 23915 00cf 00       		.space	1
 23916              	.LC149:
 23917 00d0 7300     		.ascii	"s\000"
 23918 00d2 0000     		.space	2
 23919              	.LC160:
 23920 00d4 3100     		.ascii	"1\000"
 23921 00d6 0000     		.space	2
 23922              	.LC162:
 23923 00d8 3200     		.ascii	"2\000"
 23924 00da 0000     		.space	2
 23925              	.LC166:
 23926 00dc 44656E73 		.ascii	"Density Setup\000"
 23926      69747920 
 23926      53657475 
 23926      7000
 23927 00ea 0000     		.space	2
 23928              	.LC190:
 23929 00ec 2F3200   		.ascii	"/2\000"
 23930 00ef 00       		.space	1
 23931              	.LC192:
 23932 00f0 44656E73 		.ascii	"Density 1\000"
 23932      69747920 
 23932      3100
 23933 00fa 0000     		.space	2
 23934              	.LC195:
 23935 00fc 44656E73 		.ascii	"Density 2\000"
 23935      69747920 
 23935      3200
 23936 0106 0000     		.space	2
 23937              	.LC197:
 23938 0108 44656E73 		.ascii	"Density 3\000"
 23938      69747920 
 23938      3300
 23939 0112 0000     		.space	2
 23940              	.LC199:
 23941 0114 44656E73 		.ascii	"Density 4\000"
 23941      69747920 
 23941      3400
 23942 011e 0000     		.space	2
 23943              	.LC201:
 23944 0120 44656E73 		.ascii	"Density 5\000"
 23944      69747920 
 23944      3500
 23945 012a 0000     		.space	2
 23946              	.LC203:
 23947 012c 44656E73 		.ascii	"Density 6\000"
 23947      69747920 
 23947      3600
 23948 0136 0000     		.space	2
 23949              	.LC205:
 23950 0138 44656E73 		.ascii	"Density 7\000"
 23950      69747920 
 23950      3700
 23951 0142 0000     		.space	2
 23952              	.LC207:
 23953 0144 44656E73 		.ascii	"Density 8\000"
 23953      69747920 
 23953      3800
 23954 014e 0000     		.space	2
 23955              	.LC209:
 23956 0150 44656E73 		.ascii	"Density 9\000"
 23956      69747920 
 23956      3900
 23957 015a 0000     		.space	2
 23958              	.LC211:
 23959 015c 44656E73 		.ascii	"Density 10\000"
 23959      69747920 
 23959      313000
 23960 0167 00       		.space	1
 23961              	.LC224:
 23962 0168 4469616D 		.ascii	"Diameter Setup\000"
 23962      65746572 
 23962      20536574 
 23962      757000
 23963 0177 00       		.space	1
 23964              	.LC244:
 23965 0178 4469616D 		.ascii	"Diameter Min\000"
 23965      65746572 
 23965      204D696E 
 23965      00
 23966 0185 000000   		.space	3
 23967              	.LC247:
 23968 0188 4469616D 		.ascii	"Diameter Max\000"
 23968      65746572 
 23968      204D6178 
 23968      00
 23969 0195 000000   		.space	3
 23970              	.LC249:
 23971 0198 4469612E 		.ascii	"Dia. Correction\000"
 23971      20436F72 
 23971      72656374 
 23971      696F6E00 
 23972              	.LC252:
 23973 01a8 42616C65 		.ascii	"BaleDia  AnIP1 SF\000"
 23973      44696120 
 23973      20416E49 
 23973      50312053 
 23973      4600
 23974 01ba 0000     		.space	2
 23975              	.LC254:
 23976 01bc 44656E73 		.ascii	"DensPres AnIP2 SF\000"
 23976      50726573 
 23976      20416E49 
 23976      50322053 
 23976      4600
 23977 01ce 0000     		.space	2
 23978              	.LC256:
 23979 01d0 42616C65 		.ascii	"BaleShapeAnIP3 SF\000"
 23979      53686170 
 23979      65416E49 
 23979      50332053 
 23979      4600
 23980 01e2 0000     		.space	2
 23981              	.LC258:
 23982 01e4 4B6E6966 		.ascii	"KnifePresAnIP4 SF\000"
 23982      65507265 
 23982      73416E49 
 23982      50342053 
 23982      4600
 23983 01f6 0000     		.space	2
 23984              	.LC260:
 23985 01f8 2831253D 		.ascii	"(1%=MaxSmoothingFactor)\000"
 23985      4D617853 
 23985      6D6F6F74 
 23985      68696E67 
 23985      46616374 
 23986              	.LC276:
 23987 0210 4E657474 		.ascii	"Netting Setup\000"
 23987      696E6720 
 23987      53657475 
 23987      7000
 23988 021e 0000     		.space	2
 23989              	.LC300:
 23990 0220 4E657420 		.ascii	"Net On\000"
 23990      4F6E00
 23991 0227 00       		.space	1
 23992              	.LC303:
 23993 0228 4E657420 		.ascii	"Net Cut Pulse\000"
 23993      43757420 
 23993      50756C73 
 23993      6500
 23994 0236 0000     		.space	2
 23995              	.LC305:
 23996 0238 4E657420 		.ascii	"Net Cut Time\000"
 23996      43757420 
 23996      54696D65 
 23996      00
 23997 0245 000000   		.space	3
 23998              	.LC307:
 23999 0248 4D696E44 		.ascii	"MinDia puls/lay\000"
 23999      69612070 
 23999      756C732F 
 23999      6C617900 
 24000              	.LC309:
 24001 0258 4D617844 		.ascii	"MaxDia puls/lay\000"
 24001      69612070 
 24001      756C732F 
 24001      6C617900 
 24002              	.LC311:
 24003 0268 4E657420 		.ascii	"Net Factor\000"
 24003      46616374 
 24003      6F7200
 24004 0273 00       		.space	1
 24005              	.LC313:
 24006 0274 4E6F204E 		.ascii	"No Net Pulse\000"
 24006      65742050 
 24006      756C7365 
 24006      00
 24007 0281 000000   		.space	3
 24008              	.LC315:
 24009 0284 50726520 		.ascii	"Pre Net Pulse\000"
 24009      4E657420 
 24009      50756C73 
 24009      6500
 24010 0292 0000     		.space	2
 24011              	.LC317:
 24012 0294 4E657420 		.ascii	"Net System\000"
 24012      53797374 
 24012      656D00
 24013 029f 00       		.space	1
 24014              	.LC319:
 24015 02a0 4265616B 		.ascii	"Beak Engage\000"
 24015      20456E67 
 24015      61676500 
 24016              	.LC321:
 24017 02ac 5477696E 		.ascii	"Twine Option\000"
 24017      65204F70 
 24017      74696F6E 
 24017      00
 24018 02b9 000000   		.space	3
 24019              	.LC324:
 24020 02bc 3000     		.ascii	"0\000"
 24021 02be 0000     		.space	2
 24022              	.LC326:
 24023 02c0 4265616B 		.ascii	"Beak  \000"
 24023      202000
 24024 02c7 00       		.space	1
 24025              	.LC328:
 24026 02c8 526F6C6C 		.ascii	"Roller\000"
 24026      657200
 24027 02cf 00       		.space	1
 24028              	.LC330:
 24029 02d0 4F464600 		.ascii	"OFF\000"
 24030              	.LC332:
 24031 02d4 4F4E00   		.ascii	"ON\000"
 24032 02d7 00       		.space	1
 24033              	.LC346:
 24034 02d8 42616C65 		.ascii	"Baler Full\000"
 24034      72204675 
 24034      6C6C00
 24035 02e3 00       		.space	1
 24036              	.LC373:
 24037 02e4 4C756265 		.ascii	"Lube Alarm\000"
 24037      20416C61 
 24037      726D00
 24038 02ef 00       		.space	1
 24039              	.LC375:
 24040 02f0 50726573 		.ascii	"Pres. Deadband\000"
 24040      2E204465 
 24040      61646261 
 24040      6E6400
 24041 02ff 00       		.space	1
 24042              	.LC378:
 24043 0300 4E657420 		.ascii	"Net Speed\000"
 24043      53706565 
 24043      6400
 24044 030a 0000     		.space	2
 24045              	.LC380:
 24046 030c 487A00   		.ascii	"Hz\000"
 24047 030f 00       		.space	1
 24048              	.LC382:
 24049 0310 50726573 		.ascii	"Pres. Sw. Delay\000"
 24049      2E205377 
 24049      2E204465 
 24049      6C617900 
 24050              	.LC385:
 24051 0320 446F6F72 		.ascii	"Door Closed\000"
 24051      20436C6F 
 24051      73656400 
 24052              	.LC387:
 24053 032c 42616C65 		.ascii	"Bale Size Factor\000"
 24053      2053697A 
 24053      65204661 
 24053      63746F72 
 24053      00
 24054 033d 000000   		.space	3
 24055              	.LC389:
 24056 0340 28202020 		.ascii	"(     V )\000"
 24056      20205620 
 24056      2900
 24057 034a 0000     		.space	2
 24058              	.LC391:
 24059 034c 46696C6C 		.ascii	"Fill Pot Range\000"
 24059      20506F74 
 24059      2052616E 
 24059      676500
 24060 035b 00       		.space	1
 24061              	.LC393:
 24062 035c 46696C6C 		.ascii	"Fill Pot Ignore\000"
 24062      20506F74 
 24062      2049676E 
 24062      6F726500 
 24063              	.LC395:
 24064 036c 456E6761 		.ascii	"Engage Diameter\000"
 24064      67652044 
 24064      69616D65 
 24064      74657200 
 24065              	.LC398:
 24066 037c 42616C65 		.ascii	"Bale Indicator\000"
 24066      20496E64 
 24066      69636174 
 24066      6F7200
 24067 038b 00       		.space	1
 24068              	.LC400:
 24069 038c 526F6C6C 		.ascii	"Roller Delay\000"
 24069      65722044 
 24069      656C6179 
 24069      00
 24070 0399 000000   		.space	3
 24071              	.LC404:
 24072 039c 53746565 		.ascii	"Steer\000"
 24072      7200
 24073 03a2 0000     		.space	2
 24074              	.LC406:
 24075 03a4 2046696C 		.ascii	" Fill\000"
 24075      6C00
 24076 03aa 0000     		.space	2
 24077              	.LC440:
 24078 03ac 252E3266 		.ascii	"%.2fV\000"
 24078      5600
 24079 03b2 0000     		.space	2
 24080              	.LC451:
 24081 03b4 256300   		.ascii	"%c\000"
 24082 03b7 00       		.space	1
 24083              	.LC465:
 24084 03b8 25337500 		.ascii	"%3u\000"
 24085              	.LC483:
 24086 03bc 25366C75 		.ascii	"%6lu\000"
 24086      00
 24087 03c1 000000   		.space	3
 24088              	.LC493:
 24089 03c4 20202025 		.ascii	"   %3u\000"
 24089      337500
 24090 03cb 00       		.space	1
 24091              	.LC497:
 24092 03cc 20202020 		.ascii	"      \000"
 24092      202000
 24093 03d3 00       		.space	1
 24094              	.LC537:
 24095 03d4 46616374 		.ascii	"Factors Reset\000"
 24095      6F727320 
 24095      52657365 
 24095      7400
 24096 03e2 0000     		.space	2
 24097              	.LC539:
 24098 03e4 746F2044 		.ascii	"to Defaults\000"
 24098      65666175 
 24098      6C747300 
 24099              	.LC544:
 24100 03f0 454E5445 		.ascii	"ENTER PIN CODE\000"
 24100      52205049 
 24100      4E20434F 
 24100      444500
 24101 03ff 00       		.space	1
 24102              	.LC607:
 24103 0400 20202000 		.ascii	"   \000"
 24104              	.LC609:
 24105 0404 20202020 		.ascii	"     \000"
 24105      2000
 24106 040a 0000     		.space	2
 24107              	.LC650:
 24108 040c 25322E31 		.ascii	"%2.1f\000"
 24108      6600
 24109 0412 0000     		.space	2
 24110              	.LC686:
 24111 0414 25303275 		.ascii	"%02u:%02u\000"
 24111      3A253032 
 24111      7500
 24112 041e 0000     		.space	2
 24113              	.LC688:
 24114 0420 25303275 		.ascii	"%02u/%02u/%04u\000"
 24114      2F253032 
 24114      752F2530 
 24114      347500
 24115 042f 00       		.space	1
 24116              	.LC692:
 24117 0430 20203A25 		.ascii	"  :%02u\000"
 24117      30327500 
 24118              	.LC694:
 24119 0438 25303275 		.ascii	"%02u:  \000"
 24119      3A202000 
 24120              	.LC696:
 24121 0440 20202F25 		.ascii	"  /%02u/%04u\000"
 24121      3032752F 
 24121      25303475 
 24121      00
 24122 044d 000000   		.space	3
 24123              	.LC698:
 24124 0450 25303275 		.ascii	"%02u/  /%04u\000"
 24124      2F20202F 
 24124      25303475 
 24124      00
 24125 045d 000000   		.space	3
 24126              	.LC700:
 24127 0460 25303275 		.ascii	"%02u/%02u/    \000"
 24127      2F253032 
 24127      752F2020 
 24127      202000
 24128 046f 00       		.space	1
 24129              	.LC791:
 24130 0470 25316300 		.ascii	"%1c\000"
 24131              	.LC794:
 24132 0474 2000     		.ascii	" \000"
 24133 0476 0000     		.space	2
 24134              	.LC796:
 24135 0478 256C7500 		.ascii	"%lu\000"
 24136              	.LC815:
 24137 047c 25347500 		.ascii	"%4u\000"
 24138              	.LC817:
 24139 0480 6D00     		.ascii	"m\000"
 24140 0482 0000     		.space	2
 24141              	.LC880:
 24142 0484 20204261 		.ascii	"  Baler Full\000"
 24142      6C657220 
 24142      46756C6C 
 24142      00
 24143 0491 000000   		.space	3
 24144              	.LC882:
 24145 0494 20204E65 		.ascii	"  Netting Setup\000"
 24145      7474696E 
 24145      67205365 
 24145      74757000 
 24146              	.LC884:
 24147 04a4 20204469 		.ascii	"  Diameter Setup\000"
 24147      616D6574 
 24147      65722053 
 24147      65747570 
 24147      00
 24148 04b5 000000   		.space	3
 24149              	.LC886:
 24150 04b8 20204465 		.ascii	"  Density Setup\000"
 24150      6E736974 
 24150      79205365 
 24150      74757000 
 24151              	.LC888:
 24152 04c8 20204B6E 		.ascii	"  Knives Setup\000"
 24152      69766573 
 24152      20536574 
 24152      757000
 24153 04d7 00       		.space	1
 24154              	.LC890:
 24155 04d8 20205265 		.ascii	"  Reset Defaults\000"
 24155      73657420 
 24155      44656661 
 24155      756C7473 
 24155      00
 24156 04e9 000000   		.space	3
 24157              	.LC910:
 24158 04ec 2020466F 		.ascii	"  Formation 2\000"
 24158      726D6174 
 24158      696F6E20 
 24158      3200
 24159 04fa 0000     		.space	2
 24160              	.LC925:
 24161 04fc 4900     		.ascii	"I\000"
 24162 04fe 0000     		.section	.bss.KnivKeyPressedAndOutputTurnedOn.9328,"aw",%nobits
 24163              		.set	.LANCHOR22,. + 0
 24166              	KnivKeyPressedAndOutputTurnedOn.9328:
 24167 0000 00       		.space	1
 24168              		.section	.bss.DrivingArrowsX2BeepDelay.9336,"aw",%nobits
 24169              		.set	.LANCHOR33,. + 0
 24172              	DrivingArrowsX2BeepDelay.9336:
 24173 0000 00       		.space	1
 24174              		.section	.bss.DrivingArrowsX4BeepDelay.9338,"aw",%nobits
 24175              		.set	.LANCHOR31,. + 0
 24178              	DrivingArrowsX4BeepDelay.9338:
 24179 0000 00       		.space	1
 24180              		.section	.bss.TempIntDPV.9333,"aw",%nobits
 24181              		.align	2
 24182              		.set	.LANCHOR24,. + 0
 24185              	TempIntDPV.9333:
 24186 0000 00000000 		.space	4
 24187              		.section	.bss.TempIntTNM.9332,"aw",%nobits
 24188              		.align	2
 24189              		.set	.LANCHOR28,. + 0
 24192              	TempIntTNM.9332:
 24193 0000 00000000 		.space	4
 24194              		.section	.bss.swtim.10004,"aw",%nobits
 24195              		.set	.LANCHOR1,. + 0
 24198              	swtim.10004:
 24199 0000 00       		.space	1
 24200              		.section	.bss.swtim.9602,"aw",%nobits
 24201              		.set	.LANCHOR0,. + 0
 24204              	swtim.9602:
 24205 0000 00       		.space	1
 24206              		.section	.bss.t_day.9679,"aw",%nobits
 24207              		.set	.LANCHOR13,. + 0
 24210              	t_day.9679:
 24211 0000 00       		.space	1
 24212              		.section	.bss.ResetFactors.9968,"aw",%nobits
 24213              		.set	.LANCHOR6,. + 0
 24216              	ResetFactors.9968:
 24217 0000 00       		.space	1
 24218              		.section	.bss.c.9998,"aw",%nobits
 24219              		.set	.LANCHOR5,. + 0
 24222              	c.9998:
 24223 0000 00       		.space	1
 24224              		.section	.bss.page.9788,"aw",%nobits
 24225              		.set	.LANCHOR4,. + 0
 24228              	page.9788:
 24229 0000 00       		.space	1
 24230              		.section	.bss.page.9834,"aw",%nobits
 24231              		.set	.LANCHOR3,. + 0
 24234              	page.9834:
 24235 0000 00       		.space	1
 24236              		.section	.bss.t_date.9678,"aw",%nobits
 24237              		.set	.LANCHOR14,. + 0
 24240              	t_date.9678:
 24241 0000 00       		.space	1
 24242              		.section	.bss.DrivingArrowsX1BeepDelay.9335,"aw",%nobits
 24243              		.set	.LANCHOR34,. + 0
 24246              	DrivingArrowsX1BeepDelay.9335:
 24247 0000 00       		.space	1
 24248              		.section	.bss.t_min.9676,"aw",%nobits
 24249              		.set	.LANCHOR11,. + 0
 24252              	t_min.9676:
 24253 0000 00       		.space	1
 24254              		.section	.bss.t_sec.9675,"aw",%nobits
 24255              		.set	.LANCHOR10,. + 0
 24258              	t_sec.9675:
 24259 0000 00       		.space	1
 24260              		.section	.bss.roll.9322,"aw",%nobits
 24261              		.set	.LANCHOR29,. + 0
 24264              	roll.9322:
 24265 0000 00       		.space	1
 24266              		.text
 24267              	.Letext0:
 24268              		.file 2 "./include/AT91SAM7A3.h"
 24269              		.file 3 "./portmacro.h"
 24270              		.file 4 "./include/task.h"
 24271              		.file 5 "./include/queue.h"
 24272              		.file 6 "./include/semphr.h"
 24273              		.file 7 "Board.h"
 24274              		.file 8 "bm_f1all.h"
 24275              		.file 9 "c:/gnuarm-471_eabi/lib/gcc/../../arm-none-eabi/sys-include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 screens.c
  C:\Temp\ccI9pq8Z.s:18     .text.screen125:00000000 $t
  C:\Temp\ccI9pq8Z.s:23     .text.screen125:00000000 screen125
  C:\Temp\ccI9pq8Z.s:165    .text.screen125:000000bc $d
  C:\Temp\ccI9pq8Z.s:182    .text.screen113:00000000 $t
  C:\Temp\ccI9pq8Z.s:187    .text.screen113:00000000 screen113
  C:\Temp\ccI9pq8Z.s:602    .text.screen113:00000254 $d
  C:\Temp\ccI9pq8Z.s:18026  .text.screen131:00000000 screen131
  C:\Temp\ccI9pq8Z.s:16825  .text.screen132:00000000 screen132
  C:\Temp\ccI9pq8Z.s:13238  .text.screen140:00000000 screen140
  C:\Temp\ccI9pq8Z.s:12609  .text.screen150:00000000 screen150
  C:\Temp\ccI9pq8Z.s:629    .text.screen100:00000000 $t
  C:\Temp\ccI9pq8Z.s:634    .text.screen100:00000000 screen100
  C:\Temp\ccI9pq8Z.s:1158   .text.screen100:000002e8 $d
  C:\Temp\ccI9pq8Z.s:15312  .text.screen110:00000000 screen110
  C:\Temp\ccI9pq8Z.s:13628  .text.screen111:00000000 screen111
  C:\Temp\ccI9pq8Z.s:11542  .text.screen112:00000000 screen112
  C:\Temp\ccI9pq8Z.s:1191   .text.screen151:00000000 $t
  C:\Temp\ccI9pq8Z.s:1196   .text.screen151:00000000 screen151
  C:\Temp\ccI9pq8Z.s:1371   .rodata.screen151:00000000 $d
  C:\Temp\ccI9pq8Z.s:1804   .text.screen151:00000350 $d
  C:\Temp\ccI9pq8Z.s:10674  .text.screen152:00000000 screen152
                            *COM*:00000001 lastoutput
                            *COM*:00000001 nextoutput
  C:\Temp\ccI9pq8Z.s:1839   .text.screen151:000003d0 $t
  C:\Temp\ccI9pq8Z.s:1971   .text.screen151:00000474 $d
  C:\Temp\ccI9pq8Z.s:1981   .text.screen148:00000000 $t
  C:\Temp\ccI9pq8Z.s:1986   .text.screen148:00000000 screen148
  C:\Temp\ccI9pq8Z.s:2359   .text.screen148:00000204 $d
  C:\Temp\ccI9pq8Z.s:2375   .text.screen148:00000238 $t
  C:\Temp\ccI9pq8Z.s:2826   .text.screen148:0000054c $d
  C:\Temp\ccI9pq8Z.s:2859   .text.screen146:00000000 $t
  C:\Temp\ccI9pq8Z.s:2864   .text.screen146:00000000 screen146
  C:\Temp\ccI9pq8Z.s:3415   .text.screen146:0000033c $d
  C:\Temp\ccI9pq8Z.s:3443   .text.screen146:000003a4 $t
  C:\Temp\ccI9pq8Z.s:3573   .text.screen146:00000484 $d
  C:\Temp\ccI9pq8Z.s:3586   .text.screen145:00000000 $t
  C:\Temp\ccI9pq8Z.s:3591   .text.screen145:00000000 screen145
  C:\Temp\ccI9pq8Z.s:3696   .rodata.screen145:00000000 $d
  C:\Temp\ccI9pq8Z.s:4227   .text.screen145:00000368 $d
  C:\Temp\ccI9pq8Z.s:4251   .text.screen145:000003bc $t
  C:\Temp\ccI9pq8Z.s:4760   .text.screen145:00000700 $d
  C:\Temp\ccI9pq8Z.s:4794   .text.screen145:00000780 $t
  C:\Temp\ccI9pq8Z.s:5303   .text.screen145:00000ae0 $d
  C:\Temp\ccI9pq8Z.s:5322   .text.screen145:00000b28 $t
  C:\Temp\ccI9pq8Z.s:5385   .text.screen145:00000b90 $d
  C:\Temp\ccI9pq8Z.s:5394   .text.screen144:00000000 $t
  C:\Temp\ccI9pq8Z.s:5399   .text.screen144:00000000 screen144
  C:\Temp\ccI9pq8Z.s:5492   .rodata.screen144:00000000 $d
  C:\Temp\ccI9pq8Z.s:5872   .text.screen144:00000270 $d
  C:\Temp\ccI9pq8Z.s:5893   .text.screen144:000002b8 $t
  C:\Temp\ccI9pq8Z.s:6458   .text.screen144:00000690 $d
  C:\Temp\ccI9pq8Z.s:6492   .text.screen144:00000710 $t
  C:\Temp\ccI9pq8Z.s:6712   .text.screen144:00000888 $d
  C:\Temp\ccI9pq8Z.s:6725   .text.screen143:00000000 $t
  C:\Temp\ccI9pq8Z.s:6730   .text.screen143:00000000 screen143
  C:\Temp\ccI9pq8Z.s:6837   .rodata.screen143:00000000 $d
  C:\Temp\ccI9pq8Z.s:7362   .text.screen143:0000035c $d
  C:\Temp\ccI9pq8Z.s:7384   .text.screen143:000003ac $t
  C:\Temp\ccI9pq8Z.s:7714   .text.screen143:00000590 $d
  C:\Temp\ccI9pq8Z.s:7739   .text.screen143:000005ec $t
  C:\Temp\ccI9pq8Z.s:8253   .text.screen143:00000974 $d
  C:\Temp\ccI9pq8Z.s:8285   .text.screen143:000009ec $t
  C:\Temp\ccI9pq8Z.s:8526   .text.screen143:00000b80 $d
  C:\Temp\ccI9pq8Z.s:8542   .text.screen142:00000000 $t
  C:\Temp\ccI9pq8Z.s:8547   .text.screen142:00000000 screen142
  C:\Temp\ccI9pq8Z.s:8652   .rodata.screen142:00000000 $d
  C:\Temp\ccI9pq8Z.s:9207   .text.screen142:00000370 $d
  C:\Temp\ccI9pq8Z.s:9232   .text.screen142:000003cc $t
  C:\Temp\ccI9pq8Z.s:9794   .text.screen142:0000076c $d
  C:\Temp\ccI9pq8Z.s:9835   .text.screen142:00000808 $t
  C:\Temp\ccI9pq8Z.s:10387  .text.screen142:00000bb0 $d
  C:\Temp\ccI9pq8Z.s:10408  .text.screen142:00000c00 $t
  C:\Temp\ccI9pq8Z.s:10471  .text.screen142:00000c68 $d
  C:\Temp\ccI9pq8Z.s:10480  .text.screen124:00000000 $t
  C:\Temp\ccI9pq8Z.s:10485  .text.screen124:00000000 screen124
  C:\Temp\ccI9pq8Z.s:10650  .text.screen124:000000ec $d
  C:\Temp\ccI9pq8Z.s:10669  .text.screen152:00000000 $t
  C:\Temp\ccI9pq8Z.s:11159  .text.screen152:00000310 $d
  C:\Temp\ccI9pq8Z.s:11187  .text.screen121:00000000 $t
  C:\Temp\ccI9pq8Z.s:11192  .text.screen121:00000000 screen121
  C:\Temp\ccI9pq8Z.s:11346  .text.screen121:000000d8 $d
                            *COM*:00000001 SelectedBaleStore
  C:\Temp\ccI9pq8Z.s:11363  .text.screen120:00000000 $t
  C:\Temp\ccI9pq8Z.s:11368  .text.screen120:00000000 screen120
  C:\Temp\ccI9pq8Z.s:11519  .text.screen120:000000d0 $d
  C:\Temp\ccI9pq8Z.s:11537  .text.screen112:00000000 $t
  C:\Temp\ccI9pq8Z.s:12087  .text.screen112:000002ec $d
  C:\Temp\ccI9pq8Z.s:12108  .text.screen112:00000334 $t
  C:\Temp\ccI9pq8Z.s:12389  .rodata.screen112:00000000 $d
  C:\Temp\ccI9pq8Z.s:12584  .text.screen112:0000060c $d
  C:\Temp\ccI9pq8Z.s:12604  .text.screen150:00000000 $t
  C:\Temp\ccI9pq8Z.s:12954  .text.screen150:00000200 $d
  C:\Temp\ccI9pq8Z.s:12976  .text.screen147:00000000 $t
  C:\Temp\ccI9pq8Z.s:12981  .text.screen147:00000000 screen147
  C:\Temp\ccI9pq8Z.s:13214  .text.screen147:00000154 $d
  C:\Temp\ccI9pq8Z.s:13233  .text.screen140:00000000 $t
  C:\Temp\ccI9pq8Z.s:13601  .text.screen140:00000208 $d
  C:\Temp\ccI9pq8Z.s:13623  .text.screen111:00000000 $t
  C:\Temp\ccI9pq8Z.s:14206  .text.screen111:00000334 $d
  C:\Temp\ccI9pq8Z.s:14226  .text.screen111:0000037c $t
  C:\Temp\ccI9pq8Z.s:14763  .text.screen111:000006e0 $d
  C:\Temp\ccI9pq8Z.s:14788  .text.screen111:0000073c $t
  C:\Temp\ccI9pq8Z.s:15277  .text.screen111:00000a60 $d
  C:\Temp\ccI9pq8Z.s:15307  .text.screen110:00000000 $t
  C:\Temp\ccI9pq8Z.s:15462  .rodata.screen110:00000000 $d
  C:\Temp\ccI9pq8Z.s:15955  .text.screen110:0000035c $d
  C:\Temp\ccI9pq8Z.s:15981  .text.screen110:000003bc $t
  C:\Temp\ccI9pq8Z.s:16593  .text.screen110:00000748 $d
  C:\Temp\ccI9pq8Z.s:16623  .text.screen110:000007b8 $t
  C:\Temp\ccI9pq8Z.s:16807  .text.screen110:000008e4 $d
  C:\Temp\ccI9pq8Z.s:16820  .text.screen132:00000000 $t
  C:\Temp\ccI9pq8Z.s:17014  .rodata.screen132:00000000 $d
  C:\Temp\ccI9pq8Z.s:17401  .text.screen132:000002ec $d
  C:\Temp\ccI9pq8Z.s:17428  .text.screen132:0000034c $t
  C:\Temp\ccI9pq8Z.s:17986  .text.screen132:00000674 $d
                            *COM*:00000004 SetTime
                            *COM*:00000004 TWItaskhandle
  C:\Temp\ccI9pq8Z.s:18021  .text.screen131:00000000 $t
  C:\Temp\ccI9pq8Z.s:18589  .text.screen131:00000340 $d
  C:\Temp\ccI9pq8Z.s:18607  .text.screen131:00000380 $t
  C:\Temp\ccI9pq8Z.s:18787  .text.screen131:000004b0 $d
  C:\Temp\ccI9pq8Z.s:18801  .text.mainscreen:00000000 $t
  C:\Temp\ccI9pq8Z.s:18806  .text.mainscreen:00000000 mainscreen
  C:\Temp\ccI9pq8Z.s:19205  .rodata.mainscreen:00000000 $d
  C:\Temp\ccI9pq8Z.s:19406  .text.mainscreen:00000320 $d
                            *COM*:00000001 SecondScreen
                            *COM*:00000001 Screen100Page
                            *COM*:00000001 MWarn
  C:\Temp\ccI9pq8Z.s:19444  .text.mainscreen:000003ac $t
  C:\Temp\ccI9pq8Z.s:19966  .text.mainscreen:000006e8 $d
                            *COM*:00000001 KnifePresWasHigh
                            *COM*:00000001 keytime
  C:\Temp\ccI9pq8Z.s:20012  .text.mainscreen:00000798 $t
  C:\Temp\ccI9pq8Z.s:20513  .text.mainscreen:00000af0 $d
  C:\Temp\ccI9pq8Z.s:20557  .text.mainscreen:00000b98 $t
  C:\Temp\ccI9pq8Z.s:21045  .text.mainscreen:00000ec0 $d
  C:\Temp\ccI9pq8Z.s:21080  .text.mainscreen:00000f44 $t
  C:\Temp\ccI9pq8Z.s:21583  .text.mainscreen:000012b0 $d
  C:\Temp\ccI9pq8Z.s:21604  .text.mainscreen:000012fc $t
  C:\Temp\ccI9pq8Z.s:22147  .text.mainscreen:00001670 $d
  C:\Temp\ccI9pq8Z.s:22166  .text.mainscreen:000016b4 $t
  C:\Temp\ccI9pq8Z.s:22660  .text.mainscreen:000019e0 $d
  C:\Temp\ccI9pq8Z.s:22695  .text.mainscreen:00001a64 $t
  C:\Temp\ccI9pq8Z.s:22765  .text.mainscreen:00001ad8 $d
  C:\Temp\ccI9pq8Z.s:22775  .text.screen00:00000000 $t
  C:\Temp\ccI9pq8Z.s:22780  .text.screen00:00000000 screen00
  C:\Temp\ccI9pq8Z.s:22880  .text.screen00:00000080 $d
  C:\Temp\ccI9pq8Z.s:22892  .text.screen141:00000000 $t
  C:\Temp\ccI9pq8Z.s:22897  .text.screen141:00000000 screen141
  C:\Temp\ccI9pq8Z.s:23110  .rodata.screen141:00000000 $d
  C:\Temp\ccI9pq8Z.s:23448  .text.screen141:00000310 $d
  C:\Temp\ccI9pq8Z.s:23489  .text.screen99:00000000 $t
  C:\Temp\ccI9pq8Z.s:23494  .text.screen99:00000000 screen99
  C:\Temp\ccI9pq8Z.s:23723  .text.screen99:00000150 $d
                            *COM*:00000004 POWERtaskhandle
                            *COM*:00000001 OKWarnBox
                            *COM*:00000001 reverttime
  C:\Temp\ccI9pq8Z.s:23757  .bss.NetOnKeyPressed.9330:00000000 NetOnKeyPressed.9330
  C:\Temp\ccI9pq8Z.s:23758  .bss.NetOnKeyPressed.9330:00000000 $d
  C:\Temp\ccI9pq8Z.s:23760  .bss.t_year.9674:00000000 $d
  C:\Temp\ccI9pq8Z.s:23764  .bss.t_year.9674:00000000 t_year.9674
  C:\Temp\ccI9pq8Z.s:23770  .bss.t_month.9680:00000000 t_month.9680
  C:\Temp\ccI9pq8Z.s:23771  .bss.t_month.9680:00000000 $d
  C:\Temp\ccI9pq8Z.s:23776  .bss.old_offtime.10017:00000000 old_offtime.10017
  C:\Temp\ccI9pq8Z.s:23777  .bss.old_offtime.10017:00000000 $d
  C:\Temp\ccI9pq8Z.s:23782  .bss.page.9493:00000000 page.9493
  C:\Temp\ccI9pq8Z.s:23783  .bss.page.9493:00000000 $d
  C:\Temp\ccI9pq8Z.s:23788  .bss.ArrowsCleared.9324:00000000 ArrowsCleared.9324
  C:\Temp\ccI9pq8Z.s:23789  .bss.ArrowsCleared.9324:00000000 $d
  C:\Temp\ccI9pq8Z.s:23791  .bss.TempIntKPV.9331:00000000 $d
  C:\Temp\ccI9pq8Z.s:23795  .bss.TempIntKPV.9331:00000000 TempIntKPV.9331
  C:\Temp\ccI9pq8Z.s:23798  .bss.dig.9744:00000000 $d
  C:\Temp\ccI9pq8Z.s:23802  .bss.dig.9744:00000000 dig.9744
  C:\Temp\ccI9pq8Z.s:23805  .bss.TempFloatSV.9334:00000000 $d
  C:\Temp\ccI9pq8Z.s:23809  .bss.TempFloatSV.9334:00000000 TempFloatSV.9334
  C:\Temp\ccI9pq8Z.s:23815  .bss.page.9910:00000000 page.9910
  C:\Temp\ccI9pq8Z.s:23816  .bss.page.9910:00000000 $d
  C:\Temp\ccI9pq8Z.s:23821  .bss.FloorKeyPressed.9327:00000000 FloorKeyPressed.9327
  C:\Temp\ccI9pq8Z.s:23822  .bss.FloorKeyPressed.9327:00000000 $d
  C:\Temp\ccI9pq8Z.s:23827  .bss.CropFeedSel.9323:00000000 CropFeedSel.9323
  C:\Temp\ccI9pq8Z.s:23828  .bss.CropFeedSel.9323:00000000 $d
  C:\Temp\ccI9pq8Z.s:23833  .bss.swtim.9763:00000000 swtim.9763
  C:\Temp\ccI9pq8Z.s:23834  .bss.swtim.9763:00000000 $d
  C:\Temp\ccI9pq8Z.s:23839  .bss.t_hrs.9677:00000000 t_hrs.9677
  C:\Temp\ccI9pq8Z.s:23840  .bss.t_hrs.9677:00000000 $d
  C:\Temp\ccI9pq8Z.s:23845  .bss.DrivingArrowsX3BeepDelay.9337:00000000 DrivingArrowsX3BeepDelay.9337
  C:\Temp\ccI9pq8Z.s:23846  .bss.DrivingArrowsX3BeepDelay.9337:00000000 $d
  C:\Temp\ccI9pq8Z.s:23851  .bss.BaleTotalFlashedOff.9339:00000000 BaleTotalFlashedOff.9339
  C:\Temp\ccI9pq8Z.s:23852  .bss.BaleTotalFlashedOff.9339:00000000 $d
  C:\Temp\ccI9pq8Z.s:23857  .bss.ResetLube.9325:00000000 ResetLube.9325
  C:\Temp\ccI9pq8Z.s:23858  .bss.ResetLube.9325:00000000 $d
  C:\Temp\ccI9pq8Z.s:23863  .bss.FloorKeyPressedAndOutputTurnedOn.9329:00000000 FloorKeyPressedAndOutputTurnedOn.9329
  C:\Temp\ccI9pq8Z.s:23864  .bss.FloorKeyPressedAndOutputTurnedOn.9329:00000000 $d
  C:\Temp\ccI9pq8Z.s:23869  .bss.KnivKeyPressed.9326:00000000 KnivKeyPressed.9326
  C:\Temp\ccI9pq8Z.s:23870  .bss.KnivKeyPressed.9326:00000000 $d
  C:\Temp\ccI9pq8Z.s:23875  .bss.TryingToSetBaleDiaBelowCore.9410:00000000 TryingToSetBaleDiaBelowCore.9410
  C:\Temp\ccI9pq8Z.s:23876  .bss.TryingToSetBaleDiaBelowCore.9410:00000000 $d
  C:\Temp\ccI9pq8Z.s:23878  .rodata.str1.4:00000000 $d
  C:\Temp\ccI9pq8Z.s:24166  .bss.KnivKeyPressedAndOutputTurnedOn.9328:00000000 KnivKeyPressedAndOutputTurnedOn.9328
  C:\Temp\ccI9pq8Z.s:24167  .bss.KnivKeyPressedAndOutputTurnedOn.9328:00000000 $d
  C:\Temp\ccI9pq8Z.s:24172  .bss.DrivingArrowsX2BeepDelay.9336:00000000 DrivingArrowsX2BeepDelay.9336
  C:\Temp\ccI9pq8Z.s:24173  .bss.DrivingArrowsX2BeepDelay.9336:00000000 $d
  C:\Temp\ccI9pq8Z.s:24178  .bss.DrivingArrowsX4BeepDelay.9338:00000000 DrivingArrowsX4BeepDelay.9338
  C:\Temp\ccI9pq8Z.s:24179  .bss.DrivingArrowsX4BeepDelay.9338:00000000 $d
  C:\Temp\ccI9pq8Z.s:24181  .bss.TempIntDPV.9333:00000000 $d
  C:\Temp\ccI9pq8Z.s:24185  .bss.TempIntDPV.9333:00000000 TempIntDPV.9333
  C:\Temp\ccI9pq8Z.s:24188  .bss.TempIntTNM.9332:00000000 $d
  C:\Temp\ccI9pq8Z.s:24192  .bss.TempIntTNM.9332:00000000 TempIntTNM.9332
  C:\Temp\ccI9pq8Z.s:24198  .bss.swtim.10004:00000000 swtim.10004
  C:\Temp\ccI9pq8Z.s:24199  .bss.swtim.10004:00000000 $d
  C:\Temp\ccI9pq8Z.s:24204  .bss.swtim.9602:00000000 swtim.9602
  C:\Temp\ccI9pq8Z.s:24205  .bss.swtim.9602:00000000 $d
  C:\Temp\ccI9pq8Z.s:24210  .bss.t_day.9679:00000000 t_day.9679
  C:\Temp\ccI9pq8Z.s:24211  .bss.t_day.9679:00000000 $d
  C:\Temp\ccI9pq8Z.s:24216  .bss.ResetFactors.9968:00000000 ResetFactors.9968
  C:\Temp\ccI9pq8Z.s:24217  .bss.ResetFactors.9968:00000000 $d
  C:\Temp\ccI9pq8Z.s:24222  .bss.c.9998:00000000 c.9998
  C:\Temp\ccI9pq8Z.s:24223  .bss.c.9998:00000000 $d
  C:\Temp\ccI9pq8Z.s:24228  .bss.page.9788:00000000 page.9788
  C:\Temp\ccI9pq8Z.s:24229  .bss.page.9788:00000000 $d
  C:\Temp\ccI9pq8Z.s:24234  .bss.page.9834:00000000 page.9834
  C:\Temp\ccI9pq8Z.s:24235  .bss.page.9834:00000000 $d
  C:\Temp\ccI9pq8Z.s:24240  .bss.t_date.9678:00000000 t_date.9678
  C:\Temp\ccI9pq8Z.s:24241  .bss.t_date.9678:00000000 $d
  C:\Temp\ccI9pq8Z.s:24246  .bss.DrivingArrowsX1BeepDelay.9335:00000000 DrivingArrowsX1BeepDelay.9335
  C:\Temp\ccI9pq8Z.s:24247  .bss.DrivingArrowsX1BeepDelay.9335:00000000 $d
  C:\Temp\ccI9pq8Z.s:24252  .bss.t_min.9676:00000000 t_min.9676
  C:\Temp\ccI9pq8Z.s:24253  .bss.t_min.9676:00000000 $d
  C:\Temp\ccI9pq8Z.s:24258  .bss.t_sec.9675:00000000 t_sec.9675
  C:\Temp\ccI9pq8Z.s:24259  .bss.t_sec.9675:00000000 $d
  C:\Temp\ccI9pq8Z.s:24264  .bss.roll.9322:00000000 roll.9322
  C:\Temp\ccI9pq8Z.s:24265  .bss.roll.9322:00000000 $d
                     .debug_frame:00000010 $d
  C:\Temp\ccI9pq8Z.s:1980   .text.screen151:0000048c $t
                           .group:00000000 wm4.1.e755308d0f97ac5a4d77c88bfa88161b
                           .group:00000000 wm4.Board.h.9.fb7d243db0e7e4c70fc5c5308962051c
                           .group:00000000 wm4.AT91SAM7A3.h.47.d520374ed0d352801eee6a21dd2220a3
                           .group:00000000 wm4.lib_AT91SAM7A3.h.43.b96965aef7b64d3c61b53421dff32f3d
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.projdefs.h.55.cdae9ead80b5a2ac004f41bb277aad45
                           .group:00000000 wm4.FreeRTOSConfig.h.55.21a0bf6949661856eb9bd458ca526d69
                           .group:00000000 wm4.portmacro.h.78.312ea2a2591c2c784e5cb239eea0b39c
                           .group:00000000 wm4.portable.h.311.02653c2286cc0addcb8e7b32211fdde5
                           .group:00000000 wm4.mpu_wrappers.h.55.46a4a008a193040c38098e9a5f07ff9d
                           .group:00000000 wm4.FreeRTOS.h.136.ac0125896626c2d69b79b44ea315652b
                           .group:00000000 wm4.list.h.90.ffdb657f66139f74e2982d5a33457923
                           .group:00000000 wm4.task.h.75.6c9adf28cb16a37dd5593a2f9c33f128
                           .group:00000000 wm4.queue.h.62.c626e69c2c492f5b1e4920732a8be821
                           .group:00000000 wm4.semphr.h.65.030ef7caa4665b46960b9de8a1cccba7
                           .group:00000000 wm4.Board.h.1257.275975018c8e952526c2554b98141b95
                           .group:00000000 wm4.Board.h.1481.126b635f2c4daf829686312d1e66f9ec
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.4c41f90a958351ce40b14103f7ff82ee
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.ctype.h.2.807cf8b53e92f83ce947ab40213cf812
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.cdefs.h.45.6b392759c8a421d1199268021d4987e3
                           .group:00000000 wm4.string.h.118.0034ce03f0efcb6576b1b96865c749d5
                           .group:00000000 wm4.math.h.35.07c7797db9e98c6f49a07908290b45ed

UNDEFINED SYMBOLS
draw_frame
write_bitmap
ClockDisplay
startup
adm
ICON_NET_METRES_RESET
TAB
TABNAV_
TABTICK
TABCROSS
escape
PF_GW302_TotalNetMetres
pFac
NetMetresAppliedForCount
NetMetresPulseCount
SavecalDelayWithinMenus
draw_box
ICON_BRIGHTNESS_AND_CONTRAST_MENU
ICON_TIME_AND_DATE_ADJUST_MENU
ICON_TECHNICIAN_MENU
TABENT
TABESC
selection
window
ICON_BRIGHTNESS_AND_CONTRAST_MENU_SELECTED
ICON_TIME_AND_DATE_ADJUST_MENU_SELECTED
ICON_TECHNICIAN_MENU_SELECTED
ICON_DIAGNOSTICS_SCREENS_SELECTED
TABNAV_D
TABNAV_UD
TABNAV_U
ICON_BALE_SETUP_MENU
ICON_MACHINE_SETUP_MENU
ICON_BALE_COUNT_MENU
ICON_OPERATOR_SETUP_MENU
looptime
ICON_BALE_SETUP_MENU_SELECTED
ICON_MACHINE_SETUP_MENU_SELECTED
ICON_BALE_COUNT_MENU_SELECTED
ICON_OPERATOR_SETUP_MENU_SELECTED
TABNAV_DR
TABNAV_UDLR
TABNAV_UL
__aeabi_ui2f
__aeabi_f2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
display_f1_text
display_number
ptText
BATTSLIM
TABLEFT
TABRIGHT
TABNAV_L
leaf
key
RDSfnt1
op_status
BUTTON03
editing
PF_GW302_FormationDensity
PF_GW302_FormationDiameter
PF_GW302_Formation2Density
PF_GW302_Formation2Diameter
valuechanged
SavecalDelayOnMainDisplay
swrel
savecal
TABMINUS
TABPLUS
TABNAV_DL
TABNAV_UDL
F1_POINT
__aeabi_fsub
__aeabi_fcmplt
__aeabi_fadd
__aeabi_fcmpgt
PF_GW302_KnifePressure
PF_GW302_KnifePresWarn
PF_GW302_DiverterDelay
PF_GW302_Density1
PF_GW302_Density2
PF_GW302_Density3
PF_GW302_Density4
PF_GW302_Density5
PF_GW302_Density6
PF_GW302_Density7
PF_GW302_Density8
PF_GW302_Density9
PF_GW302_Density10
TAB_PAGE
PF_GW302_DiameterMin
PF_GW302_DiameterMax
PF_GW302_DiaCorrection
PF_GW302_BaleDiaSmoothingFactor
PF_GW302_DensityPresSmoothingFactor
PF_GW302_BaleShapeSmoothingFactor
PF_GW302_KnifePresSmoothingFactor
PF_GW302_NetOn
PF_GW302_NetCutPulse
PF_GW302_NetCutTime
PF_GW302_MinDiaPulsPerLay
PF_GW302_MaxDiaPulsPerLay
PF_GW302_NetFactor
PF_GW302_NoNetPulse
PF_GW302_PreNetPulse
PF_GW302_BeakEngage
PF_GW302_LubeAlarm
PF_GW302_PresDeadband
PF_GW302_NetSpeed
PF_GW302_PresSwDelay
PF_GW302_DoorClosed
PF_GW302_BaleSizeFactor
PF_GW302_FillPotRange
PF_GW302_FillPotIgnore
PF_GW302_EngageDiameter
PF_GW302_RollerDelay
DiaMaxVolts
ICON_FILL_POT_ZERO_RESET
BaleShapeVolts
__aeabi_dcmpge
__aeabi_dcmple
sprintf
TABNAV_LR
BaleDiaVolts
ip_status
DensityPresVolts
KnifePresVolts
ICON_BALE_COUNT_RESET
PF_GW302_BaleTotal
ICON_LUBE_COUNT_RESET
pRun
__aeabi_uidiv
__aeabi_uidivmod
ICON_BALE_COUNT
ICON_LUBE_COUNT
ICON_GRAND_TOTAL_BALES
ICON_SELECTION_POINTER
half_second
ICON_CURRENT_SELECTION_INDICATOR
TABRESET
TAB_MAKE_SELECTION_CURRENT
TABNAV_UDR
ResetSequenceFactors
TABKNFON
TABKNFOFF
SetDefaultFactors
SetDefaultTotals
draw_line
PinOption
__aeabi_i2f
__aeabi_f2uiz
PF_GW302_DiameterCorrection
PF_GW302_NetDelay
PF_GW302_PreWarningBeep
PF_GW302_NetTwineOption
ICON_NET_TWINE_WITH_TWINE_HIGHLIGHTED
ICON_NET_TWINE_WITH_NET_HIGHLIGHTED
ICON_DIAMETER_CORRECTION
ICON_NET_DELAY
ICON_NET_METRES
ICON_PRE_WARNING_BEEP
ICON_BALE_INDICATOR
ICON_FILL_POT_ZERO
ICON_SCROLL_BAR_PAGE_1_OF_2
ICON_SCROLL_BAR_PAGE_2_OF_2
ICON_DIAMETER_CORRECTION_SELECTED
ICON_NET_DELAY_SELECTED
ICON_NET_METRES_SELECTED
ICON_PRE_WARNING_BEEP_SELECTED
ICON_BALE_INDICATOR_SELECTED
ICON_FILL_POT_ZERO_SELECTED
ICON_BALE_INDICATOR_OFF
ICON_BALE_INDICATOR_ON
ICON_BALE_INDICATOR_BEEP
PF_GW302_BaleShapeIndicatorZero
ICON_BALE_PROFILE_CORE_DIAMETER_BALE_DIAMETER
ICON_CORE_DENSITY
ICON_BALE_DENSITY
ICON_NET_LAYERS
PF_GW302_BaleProfile
PF_GW302_CoreDiameter
PF_GW302_BaleDiameter
PF_GW302_CoreDensity
PF_GW302_BaleDensity
PF_GW302_NetLayers
ICON_BALE_PROFILE_SELECTED
ICON_CORE_DIAMETER_SELECTED
ICON_BALE_DIAMETER_SELECTED
ICON_CORE_DENSITY_SELECTED
ICON_BALE_DENSITY_SELECTED
ICON_NET_LAYERS_SELECTED
ICON_BALE_PROFILE_A
ICON_BALE_PROFILE_B
ICON_BALE_PROFILE_C
ICON_BALE_PROFILE_D
ICON_BALE_PROFILE_E
Bar
TABNAV_DLR
bcdtob
ICON_CLOCK_AT_TEN_TO_TWO
ClockRam
xQueueGenericReceive
vTaskSuspend
btobcd
vTaskPrioritySet
vTaskResume
UNDERLINE_TWO_DIGIT
UNDERLINE_FOUR_DIGIT
TABNAV_ULR
SetOutputPWM
SendToDisplay
clip_box
CONTRST1
BRIGHTN1
DAYSYM
NIGHTSYM
__aeabi_d2uiz
__aeabi_fcmple
__aeabi_dcmpgt
__aeabi_fdiv
__aeabi_dsub
__aeabi_dcmplt
AllSeqOpOff
ResetLubeCount
windowdepth
KeyOpOff
KeyOpOn
DisableChoppingKnivesWarnings
Kniv1_IPClosed
PF_GW302_BaleStore
AutoMan
ChoppingKnives1WarningOn
BeakEngagePulseCount
stagecomp
Stage
SequenceInProgress
StartAutoNet
ContinueOnKeyRelease
RollEngageTurnedOnInManMode
ChamberOpenDelayTime
buzz_length
MODEAUTO
MODEMAN
BAR_UNIT
SIDEDISPLAY_1
SIDEDISPLAY_2
Store
TABAUTOMAN
TABMAN
TABRESET_LUBECOUNT
TABNET
TABNAV01
TABKNFDIV
TABDIVERT
TAB_DENSITY_RELEASE
TAB_NET_CUT
TABNAV_MENU_DL
TABCYCLE_ATOJ
CROPFEED
OILCAN
NetPulseCount
NetPulseCountPrev
NewNetPulses
ROLLER
BalerHitch
BalerCenter
Balerdooropen_withoutkicker
BaleKickerStatus
Bale
Balerdoorclosed_withoutkicker
KICKER_UP
KICKER_DOWN
KNIFE
DRIVING_ARROWS_X4_RIGHT
DRIVING_ARROWS_X4_LEFT
DRIVING_ARROWS_X3_RIGHT
DRIVING_ARROWS_X3_LEFT
DRIVING_ARROWS_X2_RIGHT
DRIVING_ARROWS_X2_LEFT
DRIVING_ARROWS_X1_RIGHT
DRIVING_ARROWS_X1_LEFT
DRIVING_ARROWS_NONE
DrivingArrowBeepsDisabled
buzz_count
DIASCALE
DiaMinExtDisplayPercent
DiaTargetExtDisplayPercent
DIAMIND
BaleDiaExtDisplayPercent
WARNING_DENSITY_PRESSURE_SCREEN_IMAGE
WARNING_CHECKNET
WARNING_DROPFLOOR
WARNING_KNIFEPRES
WARNING_CHOP_KNIV_POS
WARNING_LOWBATT
LUBE_COUNT_RESET_PROMPT
McHale_V6
deftime
SPI1FlashWrite
vTaskDelay
POWER
TABNAV00
offtime
PowerSwitchedOff
BAR
BRICK1
